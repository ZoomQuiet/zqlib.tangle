<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_stylesheet?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20091008173724.1"><vh>@chapters</vh></v>
<v t="zoomq.20100903210229.3876"><vh>4lifeHacking</vh>
<v t="zoomq.20101026092125.2576" a="E"><vh>TiLogs</vh>
<v t="zoomq.20120410091323.3828"><vh>@nosent zq-tilog-1303.txt</vh></v>
<v t="zoomq.20130321103420.5682"><vh>@nosent zq-tilog-1302.txt</vh></v>
<v t="zoomq.20130219101905.3885"><vh>@nosent zq-tilog-1301.txt</vh></v>
<v t="zoomq.20130104101214.3882"><vh>@nosent zq-tilog-1212.txt</vh></v>
<v t="zoomq.20121206102042.3855"><vh>@nosent zq-tilog-1211.txt</vh></v>
<v t="zoomq.20121101145510.7852"><vh>@nosent zq-tilog-1210.txt</vh></v>
<v t="zoomq.20121019112704.16225"><vh>@nosent zq-tilog-1209.txt</vh></v>
<v t="zoomq.20120901151004.6029"><vh>@nosent zq-tilog-1208.txt</vh></v>
<v t="zoomq.20120727213305.14755"><vh>@nosent zq-tilog-1207.txt</vh></v>
<v t="zoomq.20120705104153.3834"><vh>@nosent zq-tilog-1206.txt</vh></v>
<v t="zoomq.20120603183019.7743"><vh>@nosent zq-tilog-1205.txt</vh></v>
<v t="zoomq.20120423093831.20558"><vh>@nosent zq-tilog-1204.txt</vh></v>
<v t="zoomq.20120305142323.3820"><vh>@nosent zq-tilog-1202.txt</vh></v>
<v t="zoomq.20110504084047.2679"><vh>@nosent zq-tilog-1203.txt</vh></v>
<v t="zoomq.20120203163410.3818"><vh>@nosent zq-tilog-1201.txt</vh></v>
<v t="zoomq.20120305142323.3821"><vh>2011</vh>
<v t="zoomq.20111231140207.5336"><vh>@nosent zq-tilog-1112.txt</vh></v>
<v t="zoomq.20111207090549.3805"><vh>@nosent zq-tilog-1111.txt</vh></v>
<v t="zoomq.20111103090127.3354"><vh>@nosent zq-tilog-1110.txt</vh></v>
<v t="zoomq.20111008085807.2965"><vh>@nosent zq-tilog-1109.txt</vh></v>
<v t="zoomq.20110902084216.4334"><vh>@nosent zq-tilog-1108.txt</vh></v>
<v t="zoomq.20110802085156.2837"><vh>@nosent zq-tilog-1107.txt</vh></v>
<v t="zoomq.20110705091223.2700"><vh>@nosent zq-tilog-1106.txt</vh></v>
<v t="zoomq.20110601083753.2699"><vh>@nosent zq-tilog-1105.txt</vh></v>
<v t="zoomq.20110209102527.2595"><vh>@nosent zq-tilog-1104.txt</vh></v>
<v t="zoomq.20110402090250.2620"><vh>@nosent zq-tilog-1103.txt</vh></v>
<v t="zoomq.20110301085102.3912"><vh>@nosent zq-tilog-1102.txt</vh></v>
<v t="zoomq.20110104095502.2596"><vh>@nosent zq-tilog-1101.txt</vh></v>
</v>
<v t="zoomq.20110809101420.2888"><vh>2010</vh>
<v t="zoomq.20101228111644.2596"><vh>@nosent zq-tilog-1012.txt</vh></v>
<v t="zoomq.20101228111644.2594"><vh>@nosent zq-tilog-1011.txt</vh></v>
<v t="zoomq.20101026092125.2577"><vh>@nosent zq-tilog-1010.txt</vh></v>
</v>
<v t="zoomq.20110809101420.2887"><vh>2009</vh>
<v t="zoomq.20110809101420.2890"><vh>@nosent zq-tilog-0904.txt</vh></v>
<v t="zoomq.20110809101420.2891"><vh>@nosent zq-tilog-0903.txt</vh></v>
<v t="zoomq.20110809101420.2892"><vh>@nosent zq-tilog-0902.txt</vh></v>
<v t="zoomq.20110809101420.2893"><vh>@nosent zq-tilog-0901.txt</vh></v>
</v>
<v t="zoomq.20110809101420.2886"><vh>2008</vh>
<v t="zoomq.20110809101420.2894"><vh>@nosent zq-tilog-0812.txt</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3843"><vh>misc</vh>
<v t="zoomq.20100903210229.3844"><vh>_stuff</vh>
<v t="zoomq.20100903210229.3845"><vh>dict sort</vh></v>
<v t="zoomq.20100903210229.3846"><vh>dislin-0.py</vh>
<v t="zoomq.20100903210229.3847"><vh>dislin-0 declarations</vh></v>
</v>
<v t="zoomq.20100903210229.3878"><vh>@nosent try0.txt</vh>
<v t="zoomq.20100903210229.3879"><vh>&lt;&lt;my sub node&gt;&gt;</vh>
<v t="zoomq.20100903210229.3880"><vh>&lt;&lt;我的&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3851"><vh>@nosent try1.txt</vh>
<v t="zoomq.20100903210229.3879"></v>
</v>
<v t="zoomq.20100903210229.3854"><vh>@nosent plotry.py</vh></v>
<v t="zoomq.20100903210229.3855"><vh>@nosent plotry1.py</vh></v>
<v t="zoomq.20100903210229.3856"><vh>@nosent dictsort.py</vh></v>
<v t="zoomq.20100903210229.3857"><vh>@nosent plotry2.py</vh></v>
</v>
<v t="zoomq.20100903210229.3858"><vh>unitest</vh>
<v t="zoomq.20100903210229.3859"><vh>@nosent test0.py</vh></v>
</v>
<v t="zoomq.20100903210229.3860"><vh>_cron</vh>
<v t="zoomq.20100903210229.3861"><vh>inter.131</vh></v>
<v t="zoomq.20100903210229.3862"><vh>intra.59</vh>
<v t="zoomq.20100903210229.3863"><vh>@nosent doykseoAM.sh</vh></v>
<v t="zoomq.20100903210229.3864"><vh>@nosent doykseoPM.sh</vh></v>
<v t="zoomq.20100903210229.3865"><vh>@nosent mldledSyncAll.sh</vh>
<v t="zoomq.20100903210229.3866"><vh>&lt;&lt; init &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3867"><vh>&lt;&lt; sync p2ped &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3868"><vh>&lt;&lt; sync runlog &gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3869"><vh>intra.61</vh></v>
<v t="zoomq.20100903210229.3870"><vh>intra.101</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3877"><vh>tpl</vh>
<v t="zoomq.20100903210229.3878"></v>
</v>
<v t="zoomq.20100903210229.3881"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20100903210229.3882"><vh>@nosent tilog_chart.py</vh>
<v t="zoomq.20100903210229.3883"><vh>&lt;&lt; tilog_chart declarations &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3884"><vh>tilogchart()</vh></v>
<v t="zoomq.20100903210229.3885"><vh>radar4month</vh>
<v t="zoomq.20100903210229.3886"><vh>formatotmr()</vh></v>
<v t="zoomq.20100903210229.3887"><vh>monthradar()</vh></v>
</v>
<v t="zoomq.20100903210229.3888"><vh>pie4month</vh>
<v t="zoomq.20100903210229.3889"><vh>formatotm()</vh></v>
<v t="zoomq.20100903210229.3890"><vh>monthpie()</vh></v>
</v>
<v t="zoomq.20100903210229.3891"><vh>line4day</vh>
<v t="zoomq.20100903210229.3892"><vh>formatlog()</vh></v>
<v t="zoomq.20100903210229.3893"><vh>dayline()</vh></v>
</v>
<v t="zoomq.20100903210229.3894"><vh>expchart()</vh></v>
<v t="zoomq.20100903210229.3895"><vh>expplot()</vh></v>
</v>
<v t="zoomq.20101030170919.2579"><vh>__chaos</vh>
<v t="zoomq.20101030170919.2580"><vh>coffeghost-q-in-py.py</vh>
<v t="zoomq.20101030170919.2581"><vh>coffeghost-q-in-py declarations</vh></v>
<v t="zoomq.20101030170919.2582"><vh>main</vh></v>
<v t="zoomq.20101030170919.2583"><vh>foo</vh></v>
</v>
<v t="zoomq.20121122115015.6168"><vh>scrap2txt4html.py</vh></v>
<v t="zoomq.20121122115015.6169"><vh>data_uri.py</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3838" a="E"><vh>Livin Hacking</vh>
<v t="zoomq.20111216202429.3806" a="E"><vh>MBP</vh>
<v t="zoomq.20111222084842.3812"><vh>@ubuntu</vh></v>
<v t="zoomq.20130302114851.3888"><vh>TM</vh></v>
<v t="zoomq.20121217095458.5577"><vh>brew</vh>
<v t="zoomq.20121217170241.3865"><vh>FFMpeg 1.0</vh>
<v t="zoomq.20121218093706.3870"><vh>FFMpeg1.0.1</vh></v>
<v t="zoomq.20121217173705.3868"><vh>121217-mpd+ncmpcpp</vh></v>
<v t="zoomq.20121217170241.3864"><vh>121217-cmus</vh></v>
</v>
<v t="zoomq.20121217095458.5578"><vh>121217-doctor</vh></v>
</v>
<v t="zoomq.20130104101214.3880"><vh>mosh</vh></v>
<v t="zoomq.20111230163611.3820"><vh>git</vh></v>
<v t="zoomq.20111227095408.9246"><vh>Leo</vh></v>
<v t="zoomq.20111220092312.3808" a="E"><vh>BXM</vh>
<v t="zoomq.20130326094120.5692"><vh>Reime</vh></v>
<v t="zoomq.20130326094120.5693"><vh>$TMPDIR/rime.squirrel.INFO</vh></v>
</v>
<v t="zoomq.20111220092312.5316"><vh>htop</vh></v>
<v t="zoomq.20111227090820.3814"><vh>haskell</vh></v>
<v t="zoomq.20111227150925.3818"><vh>mocp</vh></v>
</v>
<v t="zoomq.20100903210229.3839"><vh>巨坑::</vh>
<v t="zoomq.20120305142323.3822"><vh>Emacs</vh>
<v t="zoomq.20120305142323.3823"><vh>base usage</vh></v>
</v>
<v t="zoomq.20100908091715.2579"><vh>PythoniCamp</vh>
<v t="zoomq.20110411104732.5352"><vh>zhbit</vh>
<v t="zoomq.20110411194006.3964"><vh>user</vh></v>
</v>
<v t="zoomq.20100927113242.2581"><vh>Hg demo</vh></v>
<v t="zoomq.20101015095808.2582"><vh>Hg 配置</vh>
<v t="zoomq.20101029104710.3831"><vh>hgrc</vh></v>
<v t="zoomq.20101019093735.5077"><vh>diff</vh></v>
<v t="zoomq.20101019093735.5078"><vh>keywords</vh></v>
</v>
</v>
<v t="zoomq.20110523143238.2694"><vh>py.kingsoft.net</vh>
<v t="zoomq.20110815085436.2906" a="E"><vh>FreeBSD</vh>
<v t="zoomq.20110902084216.8585"><vh>ports清理</vh></v>
<v t="zoomq.20110818135824.2913"><vh>nginx</vh></v>
<v t="zoomq.20110817090724.2911"><vh>moinmoin</vh></v>
<v t="zoomq.20110816085806.2907"><vh>boost</vh></v>
<v t="zoomq.20110816085806.11271"><vh>gridFS</vh></v>
</v>
<v t="zoomq.20110523143238.2695"><vh>@trac2</vh>
<v t="zoomq.20110523143238.2696"><vh>110523-升級u+nginx</vh></v>
<v t="zoomq.20110523143238.2697"><vh>发布u+zqrgen</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3840"><vh>zoomquiet.org</vh>
<v t="zoomq.20110902202629.2926"><vh>zoomquiet.no.de</vh>
<v t="zoomq.20110902202629.2928"><vh>git配置</vh>
<v t="zoomq.20110902202629.2927"><vh>git push</vh></v>
</v>
<v t="zoomq.20110902202629.2929"><vh>npm</vh></v>
<v t="zoomq.20110902202629.2930"><vh>mongo</vh></v>
<v t="zoomq.20110902202629.2931"><vh>screen</vh></v>
</v>
<v t="zoomq.20101109214756.6989"><vh>zoomquiet.org发布规划</vh>
<v t="zoomq.20101109214756.6990"><vh>目录</vh></v>
<v t="zoomq.20101109214756.6991"><vh>域名</vh></v>
</v>
<v t="zoomq.20101109214756.6992"><vh>scrapbook</vh></v>
<v t="zoomq.20100925155257.2580"><vh>PyBlosxom</vh></v>
<v t="zoomq.20100903210229.3842"><vh>WeKnow</vh>
<v t="zoomq.20101104113205.5096"><vh>DouPy</vh></v>
<v t="zoomq.20101105113140.2587"><vh>SaaCL</vh></v>
</v>
</v>
<v t="zoomq.20110325220944.2613"><vh>CPyUG社区</vh></v>
<v t="zoomq.20101019093735.5079"><vh>Geek</vh>
<v t="zoomq.20110329090742.2614" a="E"><vh>沈崴-wileishn语录</vh>
<v t="zoomq.20110329090742.2615" a="E"><vh>110329书</vh>
<v t="zoomq.20110329090742.2618"><vh>军规:</vh></v>
<v t="zoomq.20110329090742.2616"><vh>影响力</vh></v>
<v t="zoomq.20110329090742.2617"><vh>大杀器</vh></v>
</v>
</v>
<v t="zoomq.20101103153946.5095"><vh>CLI</vh></v>
</v>
</v>
<v t="zoomq.20121207162246.5571"><vh>3GLand 主机</vh>
<v t="zoomq.20121207162246.5572"><vh>42区配置</vh></v>
</v>
<v t="zoomq.20111104224345.3355"><vh>techparty.org</vh>
<v t="zoomq.20111104224345.3356" a="E"><vh>东京Linode</vh>
<v t="zoomq.20111104224345.3357"><vh>SA@111110 DBA</vh></v>
<v t="zoomq.20111110211135.6344"><vh>SA@111104 init.</vh></v>
<v t="zoomq.20111125085606.5232"><vh>111125</vh></v>
</v>
<v t="zoomq.20111207090549.5311"><vh>1112zh</vh></v>
</v>
<v t="zoomq.20100903210229.3841"><vh>OBP</vh>
<v t="zoomq.20121116154311.3848" a="E"><vh>TAoC</vh>
<v t="zoomq.20130307104209.5651"><vh>发布</vh></v>
</v>
<v t="zoomq.20110218220319.2595"><vh>2Hg</vh></v>
<v t="zoomq.20110914214854.2931"><vh>docs.py</vh></v>
<v t="zoomq.20110218220319.3903"><vh>RWIwPyZh</vh>
<v t="zoomq.20110322090028.3918"><vh>翻译</vh>
<v t="zoomq.20110322090028.9761"><vh>@nosent LINKS.rst</vh></v>
<v t="zoomq.20110518221155.2680"><vh>ch00</vh>
<v t="zoomq.20110518221155.2683"><vh>@nosent preface.rst</vh>
<v t="zoomq.20110518221155.2684"><vh>谁该看这书</vh></v>
<v t="zoomq.20110518221155.2686"><vh>编程</vh></v>
<v t="zoomq.20110518221155.2688"><vh>为嘛Python</vh></v>
<v t="zoomq.20110518221155.2690"><vh>系统</vh></v>
<v t="zoomq.20110518221155.2692"><vh>方法论</vh></v>
<v t="zoomq.20110518221155.2694"><vh>书的组织</vh></v>
<v t="zoomq.20110518221155.2696"><vh>图书规约</vh></v>
<v t="zoomq.20110518221155.2698"><vh>示例使用</vh></v>
<v t="zoomq.20110518221155.2699"><vh>Safari® Books Online</vh></v>
<v t="zoomq.20110518221155.2701"><vh>联系我们</vh></v>
<v t="zoomq.20110518221155.2703"><vh>感谢</vh></v>
</v>
</v>
<v t="zoomq.20110322090028.3919"><vh>ch03</vh>
<v t="zoomq.20110322090028.3920"><vh>@nosent index.rst</vh></v>
<v t="zoomq.20110322090028.3921"><vh>@nosent 0_intro.rst</vh></v>
<v t="zoomq.20110322090028.3922"><vh>@nosent 1_install_py.rst</vh></v>
<v t="zoomq.20110322090028.3923"><vh>@nosent 2_py_programming_language.rst</vh>
<v t="zoomq.20110407085430.2620"><vh>Python的命令行</vh></v>
<v t="zoomq.20110407085430.2621"><vh>命令行</vh></v>
<v t="zoomq.20110407085430.2622"><vh>Python中的对象</vh></v>
<v t="zoomq.20110407085430.2623"><vh>数据类型</vh>
<v t="zoomq.20110419090531.8816"><vh>数字数据对象</vh></v>
<v t="zoomq.20110419090531.8817"><vh>序列对象</vh>
<v t="zoomq.20111111090027.11954"><vh>列表</vh></v>
<v t="zoomq.20111111090027.11955"><vh>字串</vh></v>
<v t="zoomq.20111111090027.11956"><vh>元组</vh></v>
</v>
<v t="zoomq.20110419090531.8818"><vh>字典</vh></v>
</v>
<v t="zoomq.20110407085430.2624"><vh>表达式</vh></v>
<v t="zoomq.20110407085430.2625"><vh>运算符</vh>
<v t="zoomq.20110425090758.3984"><vh>算术运算符</vh></v>
<v t="zoomq.20110428091054.3987"><vh>逻辑运算符</vh></v>
<v t="zoomq.20110428091054.3988"><vh>比较运算</vh></v>
<v t="zoomq.20110428091054.3989"><vh>位运算符</vh></v>
<v t="zoomq.20110428091054.3990"><vh>赋值运算符</vh></v>
<v t="zoomq.20110428091054.3991"><vh>成员操作符</vh></v>
<v t="zoomq.20110428091054.3992"><vh>身份测试</vh></v>
<v t="zoomq.20110428091054.3993"><vh>运算优先级</vh></v>
</v>
<v t="zoomq.20110407085430.2626"><vh>语句</vh>
<v t="zoomq.20110428091054.3994"><vh>缩进</vh></v>
<v t="zoomq.20110428091054.3995"><vh>注释</vh></v>
<v t="zoomq.20110428091054.3996"><vh>关键字</vh></v>
<v t="zoomq.20110428091054.3997"><vh>简单语句</vh></v>
</v>
<v t="zoomq.20110407085430.2627"><vh>复合语句</vh>
<v t="zoomq.20110428091054.4000"><vh>if语句</vh></v>
<v t="zoomq.20110428091054.4001"><vh>while语句</vh></v>
<v t="zoomq.20110428091054.4002"><vh>for 语句</vh></v>
<v t="zoomq.20110428091054.4003"><vh>try语句</vh></v>
</v>
<v t="zoomq.20110428091054.3998"><vh>字串</vh>
<v t="zoomq.20110428091054.4004"><vh>字串引用</vh></v>
<v t="zoomq.20110428091054.4005"><vh>字串方法</vh></v>
<v t="zoomq.20110428091054.4006"><vh>格式化字串</vh></v>
</v>
<v t="zoomq.20110407085430.2628"><vh>程序组织</vh>
<v t="zoomq.20110428091054.4007"><vh>作用域</vh>
<v t="zoomq.20110428091054.4008"><vh>本地作用域</vh></v>
<v t="zoomq.20110428091054.4009"><vh>全局作用域</vh></v>
<v t="zoomq.20110428091054.4010"><vh>内建作用域</vh></v>
</v>
<v t="zoomq.20110428091054.4011"><vh>模块和包</vh></v>
<v t="zoomq.20110428091054.4012"><vh>函式，类和方法</vh></v>
<v t="zoomq.20110428091054.4013"><vh>文档字串</vh></v>
</v>
<v t="zoomq.20110407085430.2629"><vh>模块导入</vh>
<v t="zoomq.20110428091054.4014"><vh>导入方法</vh></v>
<v t="zoomq.20110428091054.4015"><vh>导入处理</vh></v>
<v t="zoomq.20110428091054.4016"><vh>循环导入</vh></v>
</v>
<v t="zoomq.20110407085430.2630"><vh>加载并运行Python 程序</vh></v>
<v t="zoomq.20110407085430.2631"><vh>基础输入输出</vh>
<v t="zoomq.20110428091054.4017"><vh>用户输入</vh></v>
<v t="zoomq.20110428091054.4018"><vh>命令行参数</vh></v>
<v t="zoomq.20110428091054.4019"><vh>文件</vh></v>
<v t="zoomq.20110429085924.2674"><vh>控制台的打印输出</vh></v>
<v t="zoomq.20110429085924.2675"><vh>重定向打印</vh></v>
</v>
<v t="zoomq.20110407085430.2632"><vh>提示和技巧</vh></v>
</v>
<v t="zoomq.20110322090028.3924"><vh>@nosent 3_py_evelopment_tools.rst</vh>
<v t="zoomq.20110429085924.2677"><vh>编辑器</vh></v>
<v t="zoomq.20110429085924.2678"><vh>IDE</vh></v>
<v t="zoomq.20110429085924.2679"><vh>调试</vh></v>
</v>
<v t="zoomq.20110322090028.3925"><vh>@nosent 4_summary.rst</vh></v>
<v t="zoomq.20110322090028.3926"><vh>@nosent 5_suggested_reading.rst</vh></v>
</v>
<v t="zoomq.20110727085946.4249"><vh>ch08</vh>
<v t="zoomq.20110727085946.4250"><vh>@nosent index.rst</vh></v>
<v t="zoomq.20110727085946.4251"><vh>@nosent 0_intro.rst</vh></v>
<v t="zoomq.20110727085946.4252"><vh>@nosent 1_defining_project.rst</vh>
<v t="zoomq.20110727085946.4317"><vh>需求驱动的设计</vh></v>
<v t="zoomq.20110727085946.4319"><vh>从需要开始</vh></v>
<v t="zoomq.20110727085946.4321"><vh>工程目标</vh></v>
</v>
<v t="zoomq.20110727085946.4253" a="E"><vh>@nosent 2_requirements.rst</vh>
<v t="zoomq.20110727085946.4323"><vh>为什么需要需求</vh></v>
<v t="zoomq.20110727085946.4325"><vh>良好(Well-Formed)的需求</vh></v>
<v t="zoomq.20110727085946.4327"><vh>全景 The Big Picture</vh></v>
<v t="zoomq.20110727085946.4329"><vh>需求类型</vh></v>
<v t="zoomq.20110727085946.4331"><vh>用例</vh></v>
<v t="zoomq.20110727085946.4333"><vh>可追溯性</vh></v>
<v t="zoomq.20110727085946.4335"><vh>需求捕获</vh></v>
</v>
<v t="zoomq.20110727085946.4305" a="E"><vh>@nosent 3_designing_software.rst</vh>
<v t="zoomq.20110727085946.4306"><vh>软件设计说明</vh></v>
<v t="zoomq.20110727085946.4337" a="E"><vh>SDD的图景</vh>
<v t="zoomq.20110727085946.4339"><vh>框图</vh></v>
<v t="zoomq.20110727085946.4341"><vh>流程图</vh></v>
<v t="zoomq.20110727085946.4343"><vh>状态图</vh></v>
<v t="zoomq.20110727085946.4345"><vh>消息序列图</vh></v>
</v>
<v t="zoomq.20110727085946.4349"><vh>伪代码</vh></v>
<v t="zoomq.20110727085946.4351"><vh>分而治之</vh></v>
<v t="zoomq.20110727085946.4353" a="E"><vh>处理错误和故障</vh>
<v t="zoomq.20110727085946.4355"><vh>确定潜在的故障</vh></v>
<v t="zoomq.20110727085946.4357"><vh>故障响应</vh></v>
</v>
</v>
<v t="zoomq.20110727085946.4309"><vh>@nosent 4_functional_testing.rst</vh>
<v t="zoomq.20110727085946.4359"><vh>为需求而测</vh></v>
<v t="zoomq.20110727085946.4361"><vh>测试用例</vh></v>
<v t="zoomq.20110727085946.4363"><vh>测试错误处理</vh></v>
<v t="zoomq.20110727085946.4365"><vh>回归测试</vh></v>
<v t="zoomq.20110727085946.4367"><vh>进展追踪</vh></v>
</v>
<v t="zoomq.20110727085946.4312" a="E"><vh>@nosent 5_implementation.rst</vh>
<v t="zoomq.20110727085946.4369"><vh>代码风格</vh>
<v t="zoomq.20110727085946.4378"><vh>为什么编码风格是重要的</vh></v>
<v t="zoomq.20110727085946.4380"><vh>采用现有的编码风格准则</vh></v>
</v>
<v t="zoomq.20110727085946.4371"><vh>组织你的代码</vh></v>
<v t="zoomq.20110727085946.4373"><vh>代码复审</vh></v>
<v t="zoomq.20110727085946.4375"><vh>单元测试</vh>
<v t="zoomq.20110727085946.4388"><vh>定义单元测试</vh></v>
<v t="zoomq.20110727085946.4392"><vh>执行单元测试</vh></v>
<v t="zoomq.20110727085946.4394"><vh>断言与assertEqual() 及其朋友们</vh></v>
<v t="zoomq.20110727085946.4396"><vh>代码覆盖率</vh></v>
</v>
<v t="zoomq.20110727085946.4377"><vh>连接到硬件</vh></v>
<v t="zoomq.20110727085946.4398"><vh>软件文档化</vh></v>
<v t="zoomq.20110727085946.4400"><vh>版本控制</vh></v>
<v t="zoomq.20110727085946.4402"><vh>缺陷跟踪</vh></v>
<v t="zoomq.20110727085946.4408"><vh>用户文档</vh></v>
</v>
<v t="zoomq.20110727085946.4316"><vh>@nosent 6_summary.rst</vh></v>
<v t="zoomq.20110727085946.4310"><vh>@nosent 7_suggested_reading.rst</vh></v>
</v>
</v>
<v t="zoomq.20110224000107.3905"><vh>配置</vh>
<v t="zoomq.20110309092312.11334"><vh>Nginx</vh></v>
</v>
<v t="zoomq.20110221225054.2597"><vh>报名</vh>
<v t="zoomq.20120901151004.6027"><vh>正式成员</vh></v>
<v t="zoomq.20120901151004.6026"><vh>现实身份</vh></v>
</v>
</v>
</v>
<v t="zoomq.20100831135717.3642"><vh>WeKnow</vh>
<v t="zoomq.20100831135717.3643" a="E"><vh>可视化</vh>
<v t="zoomq.20100831135717.4174" a="E"><vh>webSequenceDiagram</vh>
<v t="zoomq.20100831135717.4171" a="O"><vh>@nosent getSequenceDiagram.py</vh>
<v t="zoomq.20100831135717.4172"><vh>declarations</vh></v>
<v t="zoomq.20100831135717.4173"><vh>getSequenceDiagram()</vh></v>
</v>
<v t="zoomq.20100831135717.4195"><vh>demo</vh>
<v t="zoomq.20100831135717.4178" a="O"><vh>@nosent demo0.txt</vh></v>
<v t="zoomq.20100831135717.4184" a="O"><vh>@nosent demo1-activate.txt</vh></v>
<v t="zoomq.20100831135717.4188" a="O"><vh>@nosent demo2-alt.txt</vh></v>
<v t="zoomq.20100831135717.4190" a="O"><vh>@nosent demo3-opt.txt</vh></v>
<v t="zoomq.20100831135717.4192" a="O"><vh>@nosent demo4-note.txt</vh></v>
<v t="zoomq.20100831135717.4194" a="O"><vh>@nosent demo5-participants.txt</vh></v>
<v t="zoomq.20100831135717.4197" a="O"><vh>@nosent demo6-grouping.txt</vh></v>
<v t="zoomq.20100831135717.4199" a="O"><vh>@nosent demo7-lifeline.txt</vh></v>
</v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3896"><vh>KM思绪</vh>
<v t="zoomq.20100903210229.3897" a="O"><vh>@nosent dont-use-wiki.txt</vh>
<v t="zoomq.20110420091053.2640"><vh>陈德志</vh></v>
</v>
</v>
</v>
<v t="zoomq.20120913101417.6044"><vh>LieBao</vh>
<v t="zoomq.20130313104056.3892"><vh>Theme中心</vh></v>
<v t="zoomq.20130301103428.5639"><vh>DRM</vh></v>
<v t="zoomq.20101103153946.3839"><vh>code.ijinshan</vh>
<v t="zoomq.20121219094347.5593" a="E"><vh>gitcafe</vh>
<v t="zoomq.20121222152911.5596"><vh>cnzz</vh></v>
</v>
<v t="zoomq.20121218093706.3871"><vh>1212-Trac</vh>
<v t="zoomq.20121218093706.3872"><vh>user</vh></v>
</v>
<v t="zoomq.20110919090657.2932"><vh>boobooke</vh></v>
<v t="zoomq.20110414091122.2636"><vh>BBS</vh></v>
<v t="zoomq.20101227205438.2592"><vh>ml</vh></v>
<v t="zoomq.20110412144015.3968"><vh>YY</vh>
<v t="zoomq.20110902084216.8586"><vh>vol.23</vh></v>
</v>
</v>
<v t="zoomq.20120913101417.6045"><vh>chrome21Opt.</vh>
<v t="zoomq.20120913101417.6046"><vh>新设置</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3872"><vh>rc.local</vh></v>
<v t="zoomq.20100412163057.2814"><vh>Misc任务</vh>
<v t="zoomq.20100122092723.2783"><vh>GrasPic</vh>
<v t="zoomq.20100827095209.8303"><vh>@nosent manga-zipang12~1.sh</vh></v>
<v t="zoomq.20111226091956.3810"><vh>@nosent manga.py</vh>
<v t="zoomq.20100827095209.8301"><vh>manga declarations</vh></v>
<v t="zoomq.20100827095209.8302"><vh>genUrlist</vh></v>
</v>
<v t="zoomq.20111226091956.3813"><vh>@nosent wgetli.py</vh>
<v t="zoomq.20100827095209.8305"><vh>wgetli declarations</vh></v>
<v t="zoomq.20100827095209.8306"><vh>genUrlist</vh></v>
</v>
</v>
<v t="zoomq.20100827095209.8299"><vh>清除字幕字体聲明</vh>
<v t="zoomq.20100827095209.8310" a="EO"><vh>@nosent clfontd4.py</vh>
<v t="zoomq.20100827095209.8311"><vh>declarations</vh></v>
<v t="zoomq.20100827095209.8312"><vh>cleaner()</vh></v>
</v>
</v>
<v t="zoomq.20100412163057.2815"><vh>病毒样本对比</vh>
<v t="zoomq.20100902112115.7756" a="O"><vh>@nosent virusampls-ratio.py</vh>
<v t="zoomq.20100902112115.7757"><vh>declarations</vh></v>
<v t="zoomq.20100902112115.7758"><vh>processLogKV</vh></v>
<v t="zoomq.20100902112115.7759"><vh>processLogRX</vh></v>
<v t="zoomq.20100902112115.7760"><vh>ratioYQ</vh></v>
<v t="zoomq.20100902112115.7761"><vh>finalExport</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110709131924.2700"><vh>Yuike</vh>
<v t="zoomq.20110714090951.4108"><vh>logging</vh>
<v t="zoomq.20110711214730.4102"><vh>Kanban</vh></v>
<v t="zoomq.20110709131924.2703"><vh>工作设施</vh>
<v t="zoomq.20110711090727.6884"><vh>VPS</vh></v>
<v t="zoomq.20110711090727.6882"><vh>Apple</vh></v>
<v t="zoomq.20110714090951.6916"><vh>Air</vh></v>
<v t="zoomq.20110711090727.6883"><vh>Dell</vh></v>
</v>
<v t="zoomq.20110921083446.4498"><vh>FreeBSD</vh>
<v t="zoomq.20110927084702.2941"><vh>inti.</vh></v>
</v>
</v>
<v t="zoomq.20110713090346.2709"><vh>fadpop</vh>
<v t="zoomq.20110720091129.2763"><vh>@nosent readme.txt</vh>
<v t="zoomq.20110817090724.2910"><vh>迁移</vh></v>
</v>
<v t="zoomq.20110802085156.2841"><vh>@nosent __init__.py</vh></v>
<v t="zoomq.20110927084702.4405"><vh>cron</vh>
<v t="zoomq.20111009085726.4432"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110927084702.4420"><vh>@nosent vancl-csv-walkr.py</vh>
<v t="zoomq.20110927084702.4421"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20110927084702.4422"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110927084702.4428"><vh>loader()</vh></v>
</v>
<v t="zoomq.20111130170058.3742"><vh>@nosent vancl-uri2karait.py</vh>
<v t="zoomq.20111130170058.3743"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20111130170058.3744"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20111130170058.3745"><vh>loadalluri()</vh></v>
</v>
<v t="zoomq.20111009085726.4446"><vh>@nosent vancl-up4info2karait.py</vh>
<v t="zoomq.20111009085726.4447"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20111009085726.4448"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20111009085726.4449"><vh>upgradbyuri()</vh>
<v t="zoomq.20111009085726.4450"><vh>统一处理</vh></v>
</v>
<v t="zoomq.20110809202237.2909" a="E"><vh>_updateitem()</vh>
<v t="zoomq.20110809202237.2910"><vh>&lt;&lt;放空价格&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2911"><vh>&lt;&lt;价格抓取&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2912"><vh>&lt;&lt;bread_nav&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2913"><vh>&lt;&lt;attrs_wash&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2914"><vh>&lt;&lt;attrs_color&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2915"><vh>&lt;&lt;comments_unit&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2916"><vh>&lt;&lt;comments_size&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2917"><vh>&lt;&lt;comments_feel&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2918"><vh>&lt;&lt;comments_taker_comment&gt;&gt;</vh>
<v t="zoomq.20110809202237.2919"><vh>&lt;&lt;comments_taker_comm&gt;&gt;</vh></v>
<v t="zoomq.20110809202237.2920"><vh>&lt;&lt;comments_taker_ask&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20111011203627.4446"><vh>_loadpics()</vh>
<v t="zoomq.20111011203627.4447"><vh>up-img-info</vh></v>
</v>
<v t="zoomq.20111201085740.5306"><vh>__download_img()</vh></v>
<v t="zoomq.20111012085658.5918"><vh>_up_shining()</vh>
<v t="zoomq.20111012085658.5919"><vh>&lt;&lt;晒单更新&gt;&gt;</vh></v>
<v t="zoomq.20111012085658.5920"><vh>&lt;&lt;详细图片&gt;&gt;</vh></v>
</v>
<v t="zoomq.20111010171018.2978"><vh>_anabigpicnames()</vh>
<v t="zoomq.20111010171018.2979"><vh>main</vh></v>
<v t="zoomq.20111010171018.2980"><vh>others</vh></v>
</v>
</v>
<v t="zoomq.20111013085658.11318"><vh>__urlopen_load_img()</vh></v>
<v t="zoomq.20111009085726.4438"><vh>@nosent vancl-uri-flush.py</vh>
<v t="zoomq.20111009085726.4439"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20111009085726.4440"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20111009085726.4441"><vh>loadalluri()</vh></v>
</v>
<v t="zoomq.20111201085740.3772" a="E"><vh>@nosent vancl-up-info.py</vh>
<v t="zoomq.20111201085740.3773"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3774"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3775"><vh>upgradbyuri()</vh>
<v t="zoomq.20111201085740.3776"><vh>统一处理</vh></v>
</v>
<v t="zoomq.20111201085740.3777" a="E"><vh>_up_shining()</vh>
<v t="zoomq.20111201085740.3778"><vh>&lt;&lt;晒单更新&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3779"><vh>&lt;&lt;详细图片&gt;&gt;</vh></v>
</v>
<v t="zoomq.20111201085740.3780"><vh>__urlopen_load_img()</vh></v>
<v t="zoomq.20111201085740.3781"><vh>_loadpics()</vh>
<v t="zoomq.20111201085740.3782"><vh>upall</vh></v>
</v>
<v t="zoomq.20111201085740.3783"><vh>_updateitem()</vh>
<v t="zoomq.20111201085740.3784"><vh>&lt;&lt;放空价格&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3785"><vh>&lt;&lt;价格抓取&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3786"><vh>&lt;&lt;bread_nav&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3787"><vh>&lt;&lt;attrs_wash&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3788"><vh>&lt;&lt;attrs_color&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3789"><vh>&lt;&lt;comments_unit&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3790"><vh>&lt;&lt;comments_size&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3791"><vh>&lt;&lt;comments_feel&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3792"><vh>&lt;&lt;comments_taker_comment&gt;&gt;</vh>
<v t="zoomq.20111201085740.3793"><vh>&lt;&lt;comments_taker_comm&gt;&gt;</vh></v>
<v t="zoomq.20111201085740.3794"><vh>&lt;&lt;comments_taker_ask&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20111201085740.3795"><vh>_anabigpicnames()</vh>
<v t="zoomq.20111201085740.3796"><vh>main</vh></v>
<v t="zoomq.20111201085740.3797"><vh>others</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110718091518.2722" a="E"><vh>parser</vh>
<v t="zoomq.20110720091129.2765"><vh>@nosent readme.txt</vh>
<v t="zoomq.20110805090147.2885"><vh>error</vh></v>
<v t="zoomq.20110928083621.2947"><vh>csv编码</vh></v>
<v t="zoomq.20110810082729.4308"><vh>monnbasa</vh>
<v t="zoomq.20110810082729.4310"><vh>&lt;&lt;doc_item&gt;&gt;</vh></v>
<v t="zoomq.20110810082729.4312"><vh>&lt;&lt;doc_foto&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110810082729.4316"><vh>m18</vh>
<v t="zoomq.20110810082729.4317"><vh>&lt;&lt;doc_item&gt;&gt;</vh></v>
<v t="zoomq.20110810082729.4318"><vh>&lt;&lt;doc_foto&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110804090725.2868" a="EO"><vh>@nosent vanclcsv.py</vh>
<v t="zoomq.20110804090725.2869"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20110804090725.2870"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110804090725.2878"><vh>loadall(cvs)</vh>
<v t="zoomq.20110804090725.2879"><vh>&lt;&lt;整理入collection&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110804090725.2880"><vh>_put_img_gfs(info)</vh>
<v t="zoomq.20110804090725.2881"><vh>&lt;&lt;可能的其它图片格式&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110804090725.2882"><vh>_pick_by_w3m(htm)</vh></v>
<v t="zoomq.20110804090725.2883"><vh>_pick_table_data(txt)</vh></v>
</v>
<v t="zoomq.20110804090725.2871"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110804090725.2872"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20110804090725.2875"><vh>&lt;&lt;doc_item&gt;&gt;</vh></v>
<v t="zoomq.20110804090725.2876"><vh>&lt;&lt;doc_foto&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110801085156.2851"><vh>@nosent vanclinfoflush.py</vh>
<v t="zoomq.20110801085156.2852"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110801085156.2853"><vh>flush_info_one_by_one()</vh></v>
<v t="zoomq.20110809202237.2922"><vh>_isnorm(htm,sid)</vh></v>
<v t="zoomq.20110809202237.2924"><vh>_isfound(chksid)</vh></v>
<v t="zoomq.20110809202237.2909" a="E"></v>
</v>
<v t="zoomq.20110929090256.4431"><vh>@nosent vanclhtmitem.py</vh>
<v t="zoomq.20110929090256.4432"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4433"><vh>graspiteminfo(pathml)</vh></v>
<v t="zoomq.20110929090256.4434"><vh>_isnorm(htm,sid)</vh></v>
<v t="zoomq.20110929090256.4435"><vh>_isfound(chksid)</vh></v>
<v t="zoomq.20110929090256.4436"><vh>_updateitem(htm)</vh>
<v t="zoomq.20110929090256.4437"><vh>&lt;&lt;放空价格&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4438"><vh>&lt;&lt;价格抓取&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4439"><vh>&lt;&lt;bread_nav&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4440"><vh>&lt;&lt;attrs_wash&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4441"><vh>&lt;&lt;attrs_color&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4442"><vh>&lt;&lt;comments_unit&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4443"><vh>&lt;&lt;comments_size&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4444"><vh>&lt;&lt;comments_feel&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4445"><vh>&lt;&lt;comments_taker_comment&gt;&gt;</vh>
<v t="zoomq.20110929090256.4446"><vh>&lt;&lt;comments_taker_comm&gt;&gt;</vh></v>
<v t="zoomq.20110929090256.4447"><vh>&lt;&lt;comments_taker_ask&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110804090725.2889"><vh>@nosent vanclhtmbigpic.py</vh>
<v t="zoomq.20110804090725.2890"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110804090725.2891"><vh>anabigpicnames(pathml)</vh>
<v t="zoomq.20110804090725.2892"><vh>main</vh></v>
<v t="zoomq.20110804090725.2893"><vh>others</vh></v>
</v>
</v>
<v t="zoomq.20110804090725.2901"><vh>@nosent vanclpicloader.py</vh>
<v t="zoomq.20110804090725.2902"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110804090725.2903"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110804090725.2904"><vh>&lt;&lt;configures&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110804090725.2905"><vh>loadpics(pkl,pathpic)</vh>
<v t="zoomq.20110804090725.2906"><vh>upall</vh></v>
</v>
<v t="zoomq.20110804090725.2907"><vh>_put_img_gfs(crtfoto,realpic)</vh></v>
</v>
</v>
<v t="zoomq.20110801085156.2825"><vh>common</vh>
<v t="zoomq.20110801085156.2827"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110727085946.4412"><vh>@nosent fadutil.py</vh>
<v t="zoomq.20110727085946.4413"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110922090434.5850"><vh>CCFG</vh>
<v t="zoomq.20110922090434.5851"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20110804090725.2875"></v>
<v t="zoomq.20110804090725.2876"></v>
</v>
</v>
<v t="zoomq.20110922090434.7415"><vh>__popen</vh></v>
<v t="zoomq.20111201085740.5303"><vh>KillThread:</vh></v>
<v t="zoomq.20111201085740.5304"><vh>Timeout:</vh></v>
<v t="zoomq.20110929090256.4413"><vh>_up4img2gfs()</vh></v>
<v t="zoomq.20110719082515.4240"><vh>run_time(func)</vh></v>
</v>
<v t="zoomq.20110804090725.2910"><vh>@nosent expuri.py</vh>
<v t="zoomq.20110804090725.2911"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110801085156.2831"><vh>@nosent __init__.py</vh></v>
<v t="zoomq.20110804090725.2914"><vh>@nosent mongolisten.py</vh>
<v t="zoomq.20110804090725.2915"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110718091518.2721" a="E"><vh>spider</vh>
<v t="zoomq.20110720091129.2767"><vh>@nosent readme.txt</vh>
<v t="zoomq.20110811160257.2904"><vh>union VACNL</vh></v>
<v t="zoomq.20110811160257.2905"><vh>== JS 解析 ==</vh>
<v t="zoomq.20110830090738.5015" a="E"><vh>BSD 安装</vh>
<v t="zoomq.20110830090738.5017"><vh>xorg-server-1.7.7_2,1</vh></v>
<v t="zoomq.20110830090738.5021"><vh>x11-fonts</vh></v>
<v t="zoomq.20110830090738.5018"><vh>xorg-vfbserver</vh></v>
<v t="zoomq.20110830090738.5019"><vh>Firefox 3.6</vh></v>
<v t="zoomq.20110830090738.5020"><vh>PyPhantomJS</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110819082933.2914"><vh>@nosent graspage.js</vh>
<v t="zoomq.20110902084216.7167"><vh>&lt;&lt;hold tip&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110902084216.7166"><vh>@nosent graspage1.2.js</vh></v>
<v t="zoomq.20110801085156.2824"><vh>vancl</vh>
<v t="zoomq.20110802085156.2839"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110728084936.4223" a="E"><vh>@nosent shineinfo.py</vh>
<v t="zoomq.20110728084936.4224"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110921083446.4495" a="E"><vh>up_shines_info()</vh>
<v t="zoomq.20110922090434.7416"><vh>晒单更新</vh></v>
<v t="zoomq.20110922090434.7417"><vh>详细图片</vh></v>
</v>
<v t="zoomq.20110921083446.4497"><vh>_up4img2gfs()</vh></v>
</v>
<v t="zoomq.20110801085156.2873"><vh>ERROR</vh></v>
<v t="zoomq.20110719082515.2733" a="E"><vh>cvsvancl.py</vh>
<v t="zoomq.20110719082515.4236"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20110721084347.2775"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110719082515.4237"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110719082515.4238"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20110727085946.4409"><vh>LOG</vh></v>
<v t="zoomq.20110720193936.2773"><vh>TPL</vh></v>
<v t="zoomq.20110720193936.2774"><vh>&lt;&lt;doc_item&gt;&gt;</vh></v>
<v t="zoomq.20110720193936.2775"><vh>&lt;&lt;doc_foto&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110720091129.2775"><vh>_popen</vh></v>
<v t="zoomq.20110719082515.4239" a="E"><vh>loadall(cvs)</vh>
<v t="zoomq.20110721084347.2777"><vh>&lt;&lt;整理入collection&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110721084347.2779"><vh>_put_img_gfs(info)</vh>
<v t="zoomq.20110725090916.4180"><vh>&lt;&lt;可能的其它图片格式&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110721084347.2781"><vh>_pick_by_w3m(htm)</vh></v>
<v t="zoomq.20110720193936.2772"><vh>_pick_table_data(txt)</vh></v>
</v>
<v t="zoomq.20110727085946.4416"><vh>loadpics.py</vh>
<v t="zoomq.20110727085946.4417"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110801085156.2866" a="E"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110801085156.2867"><vh>&lt;&lt;configures&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110729105657.4271" a="E"><vh>loadpics(pkl,pathpic)</vh>
<v t="zoomq.20110801085156.2872"><vh>upall</vh></v>
</v>
<v t="zoomq.20110801085156.2858"><vh>_put_img_gfs(crtfoto,realpic)</vh></v>
</v>
<v t="zoomq.20110802085156.2847"><vh>anapichtm.py</vh>
<v t="zoomq.20110802085156.2848"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110802085156.2849" a="E"><vh>anabigpicnames(pathml)</vh>
<v t="zoomq.20110802085156.2850"><vh>main</vh></v>
<v t="zoomq.20110802085156.2851"><vh>others</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110709131924.2702"><vh>wget</vh>
<v t="zoomq.20110804090725.2916"><vh>配合</vh></v>
<v t="zoomq.20110727201525.2842"><vh>整站</vh>
<v t="zoomq.20110711214730.2707"><vh>结果</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110718091518.2723"><vh>queues</vh>
<v t="zoomq.20110720091129.2769"><vh>@nosent readme.txt</vh></v>
</v>
<v t="zoomq.20110718091518.2724"><vh>_stuff</vh>
<v t="zoomq.20110709131924.2701"><vh>MongoDB</vh>
<v t="zoomq.20110718091518.2727"><vh>cvs4vancl</vh>
<v t="zoomq.20110719082515.2728"><vh>w3m</vh></v>
</v>
<v t="zoomq.20110718091518.2726" a="E"><vh>安装</vh>
<v t="zoomq.20110719082515.2729"><vh>gridFS</vh></v>
<v t="zoomq.20110721084347.2776"><vh>404自动处理</vh></v>
</v>
<v t="zoomq.20110714090951.6917"><vh>Mongo工具</vh></v>
</v>
<v t="zoomq.20110720091129.2773"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110729105657.4269"><vh>@nosent imgurlistr.py</vh>
<v t="zoomq.20110729105657.4270"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110726202222.2796"><vh>@nosent mongoltry.py</vh>
<v t="zoomq.20110726202222.2798"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110726202222.2804"><vh>logit()</vh></v>
</v>
<v t="zoomq.20110726202222.2815"><vh>@nosent mongolisten.py</vh>
<v t="zoomq.20110726202222.2816"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110718091518.2725"><vh>test</vh>
<v t="zoomq.20110720091129.2771"><vh>@nosent readme.txt</vh></v>
</v>
<v t="zoomq.20110714001632.2710"><vh>API</vh>
<v t="zoomq.20110720091129.2777"><vh>@nosent readme.txt</vh>
<v t="zoomq.20110817090724.2909"><vh>原型</vh></v>
<v t="zoomq.20110818135824.2912"><vh>sleepy</vh></v>
</v>
<v t="zoomq.20110714090951.5509" a="E"><vh>vancl</vh>
<v t="zoomq.20110714090951.5514"><vh>图片</vh></v>
<v t="zoomq.20110714090951.5511" a="E"><vh>网店专用</vh>
<v t="zoomq.20110714090951.5510"><vh>代客下单</vh></v>
</v>
<v t="zoomq.20110714090951.5512"><vh>网站专用</vh></v>
</v>
<v t="zoomq.20110714090951.5508"><vh>moonbasa</vh>
<v t="zoomq.20110714090951.5513"><vh>图片</vh></v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20091008173724.1">'/home/zoomq/workspace/3hg/zqlib-hg/tangle/hackliving.leo'



Leo Log Window
Leo 4.9.1 devel, build 4897, 2011-12-21 06:58:03 -0500
Python 2.7.1, qt version 4.8.0
darwin
setting leoID from os.getenv('USER'): 'zoomq'
load dir: /opt/bin/leo-editor-snapshot-20111222/leo/core
global config dir: /opt/bin/leo-editor-snapshot-20111222/leo/config
home dir: /Users/zoomq
reading settings in /opt/bin/leo-editor-snapshot-20111222/leo/config/leoSettings.leo
reading settings in /Users/zoomq/.leo/myLeoSettings.leo
reading settings in /Users/zoomq/.leo/workbook.leo
Warning: shortcut conflict for &lt;Alt+W&gt;
           propagate-key-event in   all from myleosettings.leo
                extend-to-word in   all from myleosettings.leo
reading: /Users/zoomq/.leo/workbook.leo
reading: @shadow xinput4bamboo.py
can not open @shadow  /home/zoomq/.zoomq/rc.local/xinput4bamboo.py
exception creating directory: /home/zoomq
Traceback (most recent call last):
  File "/opt/bin/leo-editor-snapshot-20111222/leo/core/leoGlobals.py", line 2189, in makeAllNonExistentDirectories
    os.mkdir(path)
OSError: [Errno 45] Operation not supported: '/home/zoomq'
not written: /home/zoomq/.zoomq/rc.local/.leo_shadow/xxinput4bamboo.py directory not found
not written: /home/zoomq/.zoomq/rc.local/xinput4bamboo.py directory not found</t>
<t tx="zoomq.20100122092723.2783">@path _stuff/manga
#media/manga</t>
<t tx="zoomq.20100412163057.2814">@path ~/</t>
<t tx="zoomq.20100412163057.2815">@path ssp-zoom.quiet/virusampls-ratio
#/home/zoomq/Desktop/KiS/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/vbox2win/0day/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/data/0day-vbox/zoom.quiet/100412-virus-sample-selector
</t>
<t tx="zoomq.20100827095209.8299">@path _stuff/_mov
网络字幕，有的::
    
1
00:00:09,240 --&gt; 00:00:15,940
{\fn微软雅黑\fs12\fscx130\fscy130\3c&amp;HFF8000&amp;}本字幕仅出于业余兴趣而制，如有鄙陋，还望指正。{\r}
{\fn微软雅黑\fs12}{\r}

2
00:00:16,240 --&gt; 00:00:29,940
{\fn微软雅黑\fs15\3c&amp;HFF8000&amp;}感谢 COPSY心理学的支持
{\fntahoma\fs12\3c&amp;H1717FF&amp;}www.COPSY.org{\r}

不认识字体聲明，需要快速清除，
sed/awk 都不能直接识别出 {.+} 这种模式，特别是在 utf-8 环境中处理 gb2312 编码文本...

cat 06-Justice_Michael.Sandel-HARVARD.srt | cut --delimiter="}" -f2 | cut --delimiter="{" -f1 &gt; 06-Justice_Michael.Sandel-HARVARD.srt.srt
</t>
<t tx="zoomq.20100827095209.8301"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "manga.py v0.8-070921"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8302">def genUrlist(urlmark,bookName,bookId,maxPage):
    expF = "manga-%s-%s.txt"%(bookName,bookId)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % (int(bookId),p)
        print urlmark % (int(bookId),p)
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8303">@language shell
#!/bin/sh

wget -nv -t 3 -P 012 -i manga-zipang-012.txt &amp;
wget -nv -t 3 -P 011 -i manga-zipang-011.txt &amp;
wget -nv -t 3 -P 010 -i manga-zipang-010.txt &amp;
wget -nv -t 3 -P 009 -i manga-zipang-009.txt &amp;
wget -nv -t 3 -P 008 -i manga-zipang-008.txt &amp;
wget -nv -t 3 -P 007 -i manga-zipang-007.txt &amp;
wget -nv -t 3 -P 006 -i manga-zipang-006.txt &amp;
wget -nv -t 3 -P 005 -i manga-zipang-005.txt &amp;
wget -nv -t 3 -P 004 -i manga-zipang-004.txt &amp;
wget -nv -t 3 -P 003 -i manga-zipang-003.txt &amp;
wget -nv -t 3 -P 002 -i manga-zipang-002.txt &amp;
wget -nv -t 3 -P 001 -i manga-zipang-001.txt &amp;

</t>
<t tx="zoomq.20100827095209.8305"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "wgetli.py v0.5-080409"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8306">def genUrlist(urlmark,bookName,maxPage):
    expF = "wgetli-%s-%s.txt"%(bookName,maxPage)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % p
        print urlmark % p
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8310">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
"""
Name    : clfontd4.py
Desc    : clean font define words in subtitle files
Author  : Zoom.Quiet
Usage   : 1: make srt file-&gt;utf8; 2: python cleaner.py path/2/***.str 
    we can get cleanning .srt
"""
VERSION = "clfontd4.py v10.8.27"
@others
if __name__ == "__main__":
    sys.exit(cleaner(sys.argv))
</t>
<t tx="zoomq.20100827095209.8311">import os,sys,re

</t>
<t tx="zoomq.20100827095209.8312">def cleaner(arg):
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python cleaner.py path/2/***.str
        """ % VERSION
    else:
        exp = ""
        print arg[1]
        for l in open(arg[1]).readlines():
            #print "&gt;&gt;",l
            if "{" in l:
                exp += "%s\n"%l.split("}")[1].split("{")[0]
                #print exp
            else:
                exp += l
        open("%s"%arg[1],"w").write(exp)


</t>
<t tx="zoomq.20100831135717.3642">收集所有 WeKnow 相关的代码片段
</t>
<t tx="zoomq.20100831135717.3643">收集数据可视化支持工具</t>
<t tx="zoomq.20100831135717.4171">@language python
@tabwidth -4
#!/usr/bin/python 
# -*- coding: utf-8 -*-
'''base http://www.websequencediagrams.com/ gen SequenceDiagram
You can set wsd_style to any of these styles:
    * default
    * earth
    * modern-blue
    * mscgen
    * omegapple
    * qsd
    * rose
    * roundgreen
    * napkin 
'''
VERSION="getSequenceDiagram.py v10.8.31"
@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python getSequenceDiagram.py DiagremStyle DiagramName 定义文件.txt
        """ % VERSION
    else:
        style = sys.argv[1] #"napkin"
        sqdname = sys.argv[2]
        sqdefin = sys.argv[3]
        pngFile = "%s_wsd-%s.png"%(sqdname,style)
        text = open(sqdefin).read()
        getSequenceDiagram( text, pngFile, style ) 

</t>
<t tx="zoomq.20100831135717.4172">#!/usr/bin/python 
# -*- coding: utf-8 -*-
import sys
import urllib
import re

</t>
<t tx="zoomq.20100831135717.4173">def getSequenceDiagram( text, outputFile, style = 'default' ):
    request = {}
    request["message"] = text
    request["style"] = style

    url = urllib.urlencode(request)

    f = urllib.urlopen("http://www.websequencediagrams.com/", url)
    line = f.readline()
    f.close()

    expr = re.compile("(\?img=[a-zA-Z0-9]+)")
    m = expr.search(line)

    if m == None:
        print "Invalid response from server."
        return False

    urllib.urlretrieve("http://www.websequencediagrams.com/" + m.group(0),
            outputFile )
    return True

</t>
<t tx="zoomq.20100831135717.4174">@path webSequenceDiagram/


http://www.websequencediagrams.com/embedding.html</t>
<t tx="zoomq.20100831135717.4178">alice-&gt;bob: 认证 request
bob--&gt;alice: response
</t>
<t tx="zoomq.20100831135717.4184">A-&gt;B: text
activate B
B--&gt;A: json
deactivate B
</t>
<t tx="zoomq.20100831135717.4188">alt text1
    A-&gt;B: text
else text2
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4190">opt text
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4192">note over A,B: 是也乎
note left of A: 可能
note right of A
    多行
    文本
    multiline
    text
end note
</t>
<t tx="zoomq.20100831135717.4194">participant "客户端" as C
participant "服务端" as S
participant "可以很长名\n的后台服务" as L

C-&gt;S: Authentication Request
S-&gt;C: Authentication Response
S--&gt;L: Log transaction

</t>
<t tx="zoomq.20100831135717.4195">@path demo
</t>
<t tx="zoomq.20100831135717.4197">Alice-&gt;Bob: Authentication Request
alt successful case
    Bob-&gt;Alice: Authentication Accepted
else some kind of failure
    Bob-&gt;Alice: Authentication Failure
    opt
        loop 1000 times
            Alice-&gt;Bob: DNS Attack
        end
    end
else Another type of failure
    Bob-&gt;Alice: Please repeat
end

</t>
<t tx="zoomq.20100831135717.4199">User-&gt;A: DoWork
activate A
A-&gt;B: &lt;createRequest&gt;
activate B
B-&gt;C: DoWork
activate C
C--&gt;B: WorkDone
destroy C
B--&gt;A: RequestCreated
deactivate B
A-&gt;User: Done
</t>
<t tx="zoomq.20100902112115.7756">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION="virusampls-ratio v10.4.12"

@others

if __name__ == '__main__':      # this way the module can be
    begin = time.time()
    usage = "usage: %prog [option0] arg0 [arg1]"
    parser = OptionParser(usage,version=VERSION)
    parser.add_option("-r","--ratio",dest="ratio",nargs=2,
                      type="string",metavar="*.dump some-hot-virus-list.txt",
                      help="YiQing comparison,uasge --lrx|lkv processed .dump file "
                        "e.g KV-RESULT.dump some-hot-virus-list.txt")
    parser.add_option("--lrx",dest="lrx",
                      type="string",
                      help="process RX checking log")
    parser.add_option("--lkv",dest="lkv",
                      type="string",
                      help="process KV checking log")
    parser.add_option("-e","--export",dest="export",nargs=2,
                      type="string",metavar="*.txt path/2/export ",
                      help="export total hotest virus list into dir             " 
                        "e.g -e virus-hotest-in-my-pc.tx tmp")
    (options, args) = parser.parse_args()
    if 1 == len(sys.argv):
        parser.print_help()
    if options.ratio :
        print "comparison checked list and YiQing list\n\n"
        ratioYQ(options.ratio)
    else:
        if options.lrx:
            print "\n\nreFormat RX checking list\n\n"
            processLogRX(options.lrx)
        if options.lkv:
            print "\n\nreFormat KV checking list\n\n"
            processLogKV(options.lkv)
        if options.export:
            print "\n\nexport total hotest virus list in to\n\n"
            finalExport(options.export)
    if (options.lrx and options.ratio) or (options.lkv and options.ratio):
        print "\n\nATTENTION!\n\t -r and --lrx|lkx can not usage in same time!\n\n"
        parser.error("incorrect number of arguments! \nATTENTION!\n"
            "\ne.g.\n \tpython %s -lrx something.txt "
            "\nor\n\tpython %s -r sonething.dump top500-from-RX.TXT"%(parser.get_prog_name()
                ,parser.get_prog_name())
                )
        parser.print_help()

</t>
<t tx="zoomq.20100902112115.7757">import os,sys,time,pickle,shutil
from optparse import OptionParser
from operator import itemgetter

</t>
<t tx="zoomq.20100902112115.7758">def processLogKV(fname):
    "简单处理KV查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if " 中发现 " in line:
            tags = line.split()
            print tags[3],tags[1]
            viru = tags[3]
            path = tags[1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))
</t>
<t tx="zoomq.20100902112115.7759">def processLogRX(fname):
    "简单处理RX查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if "手动查杀" in line:
            tags = line.split(";")
            print tags[2][1:-1],tags[6][1:-1]
            viru = tags[2][1:-1]
            path = tags[6][1:-1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))

</t>
<t tx="zoomq.20100902112115.7760">def ratioYQ(args):
    """将查杀日志和厂商疫情进行对比,按照排名积累分数,最终得到综合热度:
        前500排名的话,第一名为500分;
    MiscItems/2008-07-01 - Woodpecker Wiki for CPUG
http://wiki.woodpecker.org.cn/moin/MiscItems/2008-07-01
    Python中最快的字典排序方法 | Windstorm
http://www.kunli.info/2009/05/07/sorting-dictionaries-by-value-in-python/
    """
    dumpf = args[0]
    yqfile = args[1]
    tophotf = "%s-hot4-%s.txt"%(dumpf.split(".")[0],yqfile.split(".")[0])
    ratio = pickle.load(open(dumpf, 'rb'))
    flines = open(yqfile).readlines()
    for i in range(len(flines)):
        hvname = flines[i].upper().replace(".","").replace("/","")
        for v in ratio.keys():
            vname = v.upper().replace(".","").replace("/","")
            if vname in hvname:
                ratio[v][0]+=i
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    try:
        unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    except:
        unitRD = {}
    td = sorted(ratio.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        if 0!=t[1][0]:
            print t
            hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
            if t[0] in unitRD.keys():
                unitRD[t[0]][0] +=t[1][0]
            else:
                unitRD[t[0]] =[t[1][0],t[1][1]]

    open(tophotf,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus base %s...\n\t\t export as:%s"%(VERSION
        ,len(hotvli)
        ,yqfile
        ,tophotf
        )
    pickle.dump(unitRD, open(unitRatioDictFile, 'wb'))
</t>
<t tx="zoomq.20100902112115.7761">def finalExport(args):
    "将最终交叉对比出来的列表输出到指定目录/文件,同时(尝试将隔离区文件也复制到指定目录)"
    expfn = "%s/%s"%(args[1],args[0])
    expdir = args[1]
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    td = sorted(unitRD.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        print t
        hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
        #shutil.copy(t[1][1],expdir)
    open(expfn,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus in my pc \n\t\t export list file::%s"%(VERSION
        ,len(td)
        ,expfn
        )


</t>
<t tx="zoomq.20100903210229.3838">@path workspace/3hg/zqlib-tangle/
@language python
@tabwidth -4

人生hacking...

</t>
<t tx="zoomq.20100903210229.3839">当前工作外长期拖延的意义任务...

</t>
<t tx="zoomq.20100903210229.3840">+-- zoomquiet.org 发布改版:
    +-- SEO:
        +-- sitemapping
    +-- dot mapping:
        +-- jQuery 拒绝IE
        +-- #通用含热区html输出:
            +-- '固化运营脚本的代码结构...:'
                +-- '参数'
                +-- "日志/调试"
            +-- 'Data-URI 集约化所有到一个HTML'
            +-- docTTD
    +-- ScrapBook:
        +-- 索引优化:
            +-- 分层简化
            +-- 嵌入原始URL
            +-- 分年度保存data 
</t>
<t tx="zoomq.20100903210229.3841">+-- OBP:
    +-- Sphnix 自动化编译Hg hooks
        +-- #Sphinx 官网翻译
        +-- Sphinx实用手册
            +-- 'rst2s5 使用'
            http://blog.zoomquiet.org/pyblosxom/utility/py4str/StructuredText/rst2s5-usage-2010-09-18-23-23.html
    +-- Hg 手册/Tip
    +-- 图书:
        +-- #SFSF 校对...
        +-- xkcd.com 漫画翻译...
        +-- 大妈书:
            +-- #牛妞成长史
            +-- 私人编年史:
                +-- #周氏家谱....
                +-- 不可失败的菜谱
        +-- TPiP
            +-- Leo doc
            +-- Code_Like_Pythonic-Idiomatic_Python
            +-- Hidden features of Python
        +-- Py标准文档:
            +-- 库
            +-- 教程
        +-- web2py
        +-- TheArt-of-Community-1ed_jonobacon
        +-- Thinking_in_Erlang.pdf


</t>
<t tx="zoomq.20100903210229.3842">+-- WeKnow:
    +-- ScrapBook 社会化分享
        +-- 云存储中心
        +-- GAE 界面
        +-- 桌面界面
        +-- SNS 机制
    +-- CPyUG 列表综合活跃分析~ codeworm
    +-- 时间帐单自动分析统计:
        +-- #手工记录
        +-- Workrave 
            +-- http://wakoopa.com/ZoomQuiet
        +-- Gmail 时间点对应
</t>
<t tx="zoomq.20100903210229.3843">支持片段代码收集...</t>
<t tx="zoomq.20100903210229.3844">

</t>
<t tx="zoomq.20100903210229.3845">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff

sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20100903210229.3846">@language python
@tabwidth -4
@others
</t>
<t tx="zoomq.20100903210229.3847">#! /usr/bin/env python
import math
import dislin

n = 101
f = 3.1415926 / 180.
x = range (n)
y1 = range (n)
y2 = range (n)
for i in range (0,n):
  x[i] = i * 3.6
  v = i * 3.6 * f
  y1[i] = math.sin (v)
  y2[i] = math.cos (v)

dislin.metafl ('xwin')
dislin.disini ()
dislin.complx ()
dislin.pagera ()

dislin.axspos (450, 1800)
dislin.axslen (2200, 1200)

dislin.name   ('X-axis', 'X')
dislin.name   ('Y-axis', 'Y')

dislin.labdig (-1, 'X')
dislin.ticks  (9, 'X')
dislin.ticks  (10, 'Y')

dislin.titlin ('Demonstration of CURVE', 1)
dislin.titlin ('SIN (X), COS (X)', 3)

ic = dislin.intrgb (0.95, 0.95, 0.95)
dislin.axsbgd (ic)
 
dislin.graf   (0., 360., 0., 90., -1., 1., -1., 0.5)
dislin.setrgb (0.7, 0.7, 0.7)
dislin.grid   (1,1)

dislin.color  ('fore')
dislin.height (50)
dislin.title  ()

dislin.color  ('red')
dislin.curve  (x, y1, n)
dislin.color  ('green')
dislin.curve  (x, y2, n)
dislin.disfin ()

</t>
<t tx="zoomq.20100903210229.3851">def try():
    """
    """
    &lt;&lt;my sub node&gt;&gt;
    pass
    &lt;&lt;my sub node&gt;&gt;

</t>
<t tx="zoomq.20100903210229.3854">#!/usr/bin/env python
import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)

g('unset multiplot')
raw_input('Please press return to continue...\n') 
</t>
<t tx="zoomq.20100903210229.3855">#!/usr/bin/env python

import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g.plot([(0,2),(1,2),(2,2)])
g('set multiplot')
g('set size 0.5,0.5')

</t>
<t tx="zoomq.20100903210229.3856">@path olink_ad_point

from operator import itemgetter

myDict={
    "www":[112,177,888]
    ,"blog":[777,66,12]
    ,"chat":[13,5464,442]
    ,"yue":[5634,1232,177]
    }

print myDict
print "\n\n"

#sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(myDict.items()
    , key=lambda x: x[1][1]
    ,reverse=True):
    print k,v 

print myDict

</t>
<t tx="zoomq.20100903210229.3857">import os,sys
import random, Gnuplot

title = sys.argv[1]
g = Gnuplot.Gnuplot(persist=1)
DEFONT="/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
g('set term png font "%s" ' %DEFONT)
g('set output "gnuplot-%s.png" ' %title)
g('set title "easy-account chart %s" ' %title)

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]

g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)</t>
<t tx="zoomq.20100903210229.3858"></t>
<t tx="zoomq.20100903210229.3859"># -*- coding: utf-8 -*-
from foo import add2

import unittest

class DemoTest(unittest.TestCase):
    def testFoo(self):
        self.assertEqual(1, 0)

    def testAdd(self):
        sefl.assertEqual(2, add2(1, 1))




</t>
<t tx="zoomq.20100903210229.3860">

#collection cron script abt SEO
</t>
<t tx="zoomq.20100903210229.3861">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# auto sync p2p dled out intra. usage wget
2 2 * * * /data0/p2p4mu/chkmldonkey.sh
3 3 * * * /data0/p2p4mu/cleanMLDed.sh

### zoomq::070524 add for auto analyzed YK running log for adPoint monitoring
6 6 * * * /data0/mupopro/logs/yseo6_do_adpanalyzer.sh

### zoomq::070615 add for auto analyzed YK searched key words
7 7 * * * /data1/ykrunning/mupopro/logs/searchKeyAnalyzer/statsSearchKey.sh
</t>
<t tx="zoomq.20100903210229.3862">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
## zoomq::070615 cancel sync log into 59;usage 61 NFS export runlogs analzye
#7 7 * * * /home/zoomq/4p2p/mldledSyncAll.sh
</t>
<t tx="zoomq.20100903210229.3863">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"


cd $runykseo6

echo "$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday"
$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday

echo "$version done statistics 4 yseo0 @ " `$cmdDate +"%Y/%m/%d %H:%M:%S"` 

echo
exit  0


</t>
<t tx="zoomq.20100903210229.3864">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"

echo "$version auto running for YKSEO @ " `$cmdDatedate +"%Y/%m/%d %H:%M:%S"` 

cd $runykseo0

echo "$cmdPython dailySECoveRate.py $defaultFont"
$cmdPython dailySECoveRate.py $defaultFont


echo
exit  0


</t>
<t tx="zoomq.20100903210229.3865">#!/bin/bash

&lt;&lt; init &gt;&gt;

LOGROOT="/var/log/sync"
LOGFILE="/var/log/sync/$today-synced.log"
RESROOT="/data3/p2pmldonkey"

PUTPATH="$RESROOT/done/$today"
PUTYEST="$RESROOT/done/$yesterday"
ULRTOD="http://60.28.2.131:81/done/$today/"
ULRYES="http://60.28.2.131:81/done/$yesterday/"
doWget="$cmdWget -c -nv -N -r -np -nd -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ "

SYNCPAS="/usr/local/etc/sync.key"
dosync="$cmdRsync -vztu --bwlimit=1024 --password-file=$SYNCPAS sdper@60.28.2.131::p2pmldonkey/done/$today"
#echo $dosync

&lt;&lt; sync p2ped &gt;&gt;

RUNLOGROOT="/data3/run_yueku_logs"
RUNLOGanalyzed="$RUNLOGROOT/analyzed"
PATHanalyzed="$RUNLOGanalyzed/runYueKuLogs/analyzed"
&lt;&lt; sync runlog &gt;&gt;

echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


echo
exit  0

</t>
<t tx="zoomq.20100903210229.3866">###!/bin/sh
#===========================================
#====== Change log =========================
# zoomq::070603 add zip running log shell,after download all pre. analyz in TJ131
# zoomq::070517 clean yestday sync.;and dl YueKu runing daily logs all into /data3/run_yueku_logs/
# zoomq::070515 add for sync all YueKu runing log into /data3/run_yueku_logs/
# zoomq::070427 for auto sync MLDonkey downloaded dir and .lsRL
#===========================================
#today="`date +"%y%m%d"`"
version="'mldledSyncAll v0.9.1 070517"

offset="+0"
nowday="`date -d "$offset day" "+%Y%m%d"`"
#nowday="`date +"%d"`"
#offset=0
#((yday=nowday - offset))
today=$nowday
#"`date +"%Y%m"`$yday"
#((yday=nowday - offset -1 ))
offset="-1"
yesterday="`date -d "$offset day" "+%Y%m%d"`"
yesterlog="`date -d "$offset day" "+%y%m%d"`"
#yesterday="`date +"%Y%m"`$yday"
#echo "try $yesterday"

#echocmd=$( which echo)
cmdWget=$( which wget)
cmdRsync=$( which rsync)
#cmdLs=$( which ls)
cmdMkdir=$( which mkdir)
cmdMv=$( which mv)
cmdRm=$( which rm)
</t>
<t tx="zoomq.20100903210229.3867">echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
echo "auto SYNC mldonkey p2p downloaded files..."
echo "chk dir :: $PUTPATH"
if [ -d $PUTPATH ]
then
    cd $PUTPATH
    $cmdLs -la &gt; $LOGFILE
else
    echo "$PUTPATH not exist! creat now.."
    echo "$PUTPATH not exist! creat now.." &gt;&gt; $LOGFILE
	echo "$cmdMkdir -p $PUTPATH" &gt;&gt; $LOGFILE
	$cmdMkdir -p $PUTPATH
    
    cd $PUTPATH
    ls -la  &gt;&gt; $LOGFILE
fi

ls -la
#echo "$dosync/* $PUTPATH/"
#$dosync/* $PUTPATH/
echo "$doWget $ULRTOD $PUTPATH/" &gt;&gt; $LOGFILE
echo "$doWget $ULRTOD ./"
$doWget $ULRTOD ./

echo 
echo "try sync yesterday dled files again..."
echo "try sync yesterday dled files again..." &gt;&gt; $LOGFILE
ls -la
ls -la  &gt;&gt; $LOGFILE

cd $PUTYEST
echo "$doWget $ULRYES $PUTYEST/" &gt;&gt; $LOGFILE
echo "$doWget $ULRYES ./"
#$doWget $ULRYES ./
</t>
<t tx="zoomq.20100903210229.3868">echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` 
echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


cd $RUNLOGROOT
$cmdWget -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/$yesterlog/

echo "###start dl for analyzed .log @ " `date +"%Y/%m/%d %H:%M:%S"` 

cd $RUNLOGanalyzed
$cmdWget -A.log -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/analyzed/

echo "cd $PATHanalyzed"
cd $PATHanalyzed
echo "./zipadplog.sh adPoint$yesterlog.log"
./zipadplog.sh adPoint$yesterlog.log

</t>
<t tx="zoomq.20100903210229.3869">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
#3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
8 8 * * * /home/zoomq/4p2p/syncYKrunlogs.sh

</t>
<t tx="zoomq.20100903210229.3870"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32 2002/11/22 16:13:39 tom Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

HOME=/var/log
#
#minute hour    mday    month   wday    who     command
#
*/5     *       *       *       *       root    /usr/libexec/atrun
#
# Save some entropy so that /dev/random can re-seed on boot.
*/11    *       *       *       *       operator /usr/libexec/save-entropy
#
# Rotate log files every hour, if necessary.
0       *       *       *       *       root    newsyslog
#
# Perform daily/weekly/monthly maintenance.
1       3       *       *       *       root    periodic daily
15      4       *       *       6       root    periodic weekly
30      5       1       *       *       root    periodic monthly
#
# Adjust the time zone if the CMOS clock keeps local time, as opposed to
# UTC time.  See adjkerntz(8) for details.
1,31    0-5     *       *       *       root    adjkerntz -a

MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
# auto do all matter for YKSEO1.0
9 9 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoAM.sh &gt; /var/log/YKSEO/ykseo.log
8 18 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoPM.sh &gt; /var/log/YKSEO/ykseo.log

</t>
<t tx="zoomq.20100903210229.3872">@path ~/.zoomq/rc.local</t>
<t tx="zoomq.20100903210229.3876">@path ~/Works/3hg/bitbucket.org/4ZqHacking/hackminds/4lifeHacking
#~/2matter4peg/tangle/zoom.quiet/4lifeHacking
时间帐单处置辅助

# 120920 ZQ111216MBP in ~ 
$ du -hs *
4.0K	4SAMatters
 48K	Applications
1.4M	CmapToolsLogs
1.8G	Desktop
 15G	Documents
9.3G	Downloads
2.3G	Dropbox
9.5G	Library
 52G	Movies
 27G	Music
 77G	Pictures
  0B	Public
 40G	Records
 11G	Sites
 11G	VirtualBox VMs
4.0K	Volumes
 11G	Works
3.6G	_stuff
 20K	acme-home
455M	mnt
4.0K	opt
4.0K	umbrella0.log
4.0K	usr-local
 12G	zData
4.0K	zoomquiet.leo2hg4zqlib
4.0K	zq.pyblosxom
</t>
<t tx="zoomq.20100903210229.3877">@path tpl</t>
<t tx="zoomq.20100903210229.3878">dsfadsf
dasfa
dsf
&lt;&lt;my sub node&gt;&gt;
adsf
adsf
ds
&lt;&lt;my sub node&gt;&gt;

sdfdsf
</t>
<t tx="zoomq.20100903210229.3879">[i,i+1 for i in range(10)&lt;&lt;我的&gt;&gt;]
</t>
<t tx="zoomq.20100903210229.3880">dgdfg
dsfgdfsg
sdfdfgsg
dfsg
</t>
<t tx="zoomq.20100903210229.3881">## try leo
TILOG={'DEFONT':"/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
    ,'TITLE':"TiLog"
    ,'PATH':{'root':"/home/zoomq/2matter4peg/tangle/zoomquiet/4lifeHacking"
        ,'log':"_log"
        ,'exp':"exp"
        ,'data':"data"
        ,'tpl':"tpl"
        }
    ,'FILTER':{'log':"zq-tilog-*.txt"
        }
    ,'TPL':{'log':"zq-tilog-%s.txt"
        }
    ,'DICT':{'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    ,'tLebel':['tLost','tInput','tOutput','tCommunicate','tMyself','tSleep']
    }
INIDICT={'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}</t>
<t tx="zoomq.20100903210229.3882">&lt;&lt; tilog_chart declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python tilog_chart.py MonthPoint [like 0812]
        """ % VERSION
    else:
        zmonth = sys.argv[1]                 #[-10:-4]    print tonow
        tilogchart(zmonth)

    print "Mnnnn export all that report! \n by %s"%VERSION


</t>
<t tx="zoomq.20100903210229.3883"># -*- coding: utf-8 -*-
import os,sys
#import time,datetime,pickle
#from operator import itemgetter
from fnmatch import *
from cfg import *

#from pychartdir import *
#from ChartDirector import pychartdir as pcd

VERSION = "tilog_chart v0.8-090304@Zoom.Quiet"
#print dir()

''''tilog_chart.py'
    v0.7 090205 init. to simple chart handwrited TiLog
'''



</t>
<t tx="zoomq.20100903210229.3884">def tilogchart(month):
    '''main func
    '''
    #print TILOG['PATH']
    #flog = filter(os.listdir(TILOG['PATH']['data'])
    #    ,TILOG['FILTER']['log'])
    flog = "%s/%s"%(
        TILOG['PATH']['data']
        ,TILOG['TPL']['log']%month
        )
    #dictchart = {'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    for li in open(flog):
        formatlog(li)
        #pass
    dayline(month)
    TILOG['DICT']=INIDICT
    for li in open(flog):
        formatotm(li)
        #pass
    monthpie(month)
    TILOG['DICT']=INIDICT
    '''
    for li in open(flog):
        formatotmr(li)
        pass
    '''
    monthradar(month)
    TILOG['DICT']=INIDICT





</t>
<t tx="zoomq.20100903210229.3885">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3886">def formatotmr(line):
    '''format log data into dict for tot time month in radar
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3887">def monthradar(month):
    '''usage ChartDirector exp chart in radar
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]
    # The data for the chart
    #data = [6,7,3,8,7,9,7,4,10]


    # Create a PolarChart object of size 450 x 350 pixels
    c = pcd.PolarChart(350, 300)
    c.setRoundedFrame()
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    #c.addTitle("角色雷达图谱:", defaultfont, 14, 0xffffff).setBackground(0x008000)
    #c.addTitle2(TopLeft, "&lt;*underline=2*&gt;角色雷达图谱:", defaultfont, 14)

    # Set center of plot area at (225, 185) with radius 150 pixels
    #c.setPlotArea(225, 185, 150)
    c.setPlotArea(180, 160, 100)
    #c.setGridColor(0xc0000000L, 1, 0xc0000000L, 1)

    # Add an area layer to the polar chart
    c.addAreaLayer(data, 0x9999ff)
    c.addLineLayer(data, 0x6666cc).setLineWidth(3)

    c.setPlotAreaBg(0xdddddd, 0xeeeeee)
    c.setGridStyle(0)

    layer0 = c.addLineLayer(data, 0x0000ff, "Close Loop Line")
    #layer0.setAngles(data)

    # Set the line width to 2 pixels
    layer0.setLineWidth(2)

    # Use 11 pixel triangle symbols for the data points
    layer0.setDataSymbol(pcd.CircleShape, 11, 0xffff00)

    #layer0.setDataLabelStyle().setBackground(0x9999ff, pychartdir.Transparent, 1)

    # Enable data label and set its format
    #layer0.setDataLabelFormat("{value}分")


    # Set the labels to the angular axis as spokes
    c.angularAxis().setLabels(labels).setFontStyle(TILOG['DEFONT'])

    # output the chart
    c.makeChart("zq-ti-month-radar-%s.png"%month)
    print "EXPed: zq-ti-month-radar-%s.png"%month

</t>
<t tx="zoomq.20100903210229.3888">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3889">def formatotm(line):
    '''format log data into dict for tot time month
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3890">def monthpie(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]

    # creat chart
    c = pcd.PieChart(440, 200,pcd.metalColor(0xccccff, 0), 0x000000, 1)
    c.setRoundedFrame()
    c.setPieSize(215, 110, 80)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    c.set3D(-1,60)
    c.setData(data, labels)
    c.setExplode(0)
    #c.setStartAngle(135)
    c.setStartAngle(90, 0   )

    c.setLabelLayout(pcd.SideLayout)
    c.setLabelFormat("{label}&lt;*br*&gt;{value}h ({percent}%)")

    t = c.setLabelStyle()
    t.setBackground(pcd.SameAsMainColor, pcd.Transparent, pcd.glassEffect())
    t.setRoundedCorners(5)
    c.setLineColor(pcd.SameAsMainColor, 0x334433)

    # output the chart
    c.makeChart("zq-ti-month-pie-%s.png"%month)
    print "EXPed: zq-ti-month-pie-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3891">#line fot time usaged in day</t>
<t tx="zoomq.20100903210229.3892">def formatlog(line):
    '''format log data into dict
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI'].append(float(dli[1]))
        ddict['tO'].append(float(dli[2]))
        ddict['tC'].append(float(dli[3]))
        ddict['tM'].append(float(dli[4]))
        ddict['tS'].append(float(dli[5]))




</t>
<t tx="zoomq.20100903210229.3893">def dayline(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['DICT']['date']
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']

    c = pcd.XYChart(800, 300, 0xeeeeff, 0x000000, 1)
    c.setRoundedFrame()
    c.setPlotArea(55, 58, 720, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)
    c.addLegend(50, 30, 0, TILOG['DEFONT'], 9).setBackground(pcd.Transparent)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())

    c.yAxis().setTitle("hour")
    c.xAxis().setLabels(labels).setFontAngle(45)

    #c.xAxis().setLabelStep(3)
    c.xAxis().setTitle("date")

    # Add a line layer to the chart
    layer = c.addLineLayer2()

    layer.setLineWidth(2)

    layer.addDataSet(tI, 0xff0000, "tI")
    layer.addDataSet(tO, 0x008800, "tO")
    layer.addDataSet(tC, c.dashLineColor(0x3333ff, pcd.DashLine), "tC")
    layer.addDataSet(tM, 0xff8800, "tM")
    layer.addDataSet(tS, 0x334433, "tS")

    # output the chart
    c.makeChart("zq-ti-line-day-%s.png"%month)
    print "EXPed: zq-ti-line-day-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3894">def expchart(month):
    '''usage ChartDirector exp charts
    '''
    lineday(month)

</t>
<t tx="zoomq.20100903210229.3895">def expplot():
    '''usage Gnuplot exp png chart
    '''
    print TILOG['DICT']['date']
    i = 0
    d=[]
    for j in TILOG['DICT']['tI']:
        d.append([i,j])
        i+=1
    print d
    import Gnuplot
    g = Gnuplot.Gnuplot(persist=1)
    g('set term png font "%s" ' %TILOG['DEFONT'])
    g('set output "gnuplot-%s.png" ' %TILOG['TITLE'])
    g('set title "Zoomq`s chart %s" ' %TILOG['TITLE'])

    g('set xlabel "日期" ')
    g('set ylabel "时耗" ')

    g.plot([[0, 1.0], [1, 2.0], [2, 0.0], [3, 4.5], [4, 2.5], [5, 3.0], [6, 1.0], [7, 0.0], [8, 0.0], [9, 0.0], [10, 2.5], [11, 0.0], [12, 0.0], [13, 2.0], [14, 0.0], [15, 0.0], [16, 1.0], [17, 2.5], [18, 2.5], [19, 1.5]])
    #d = Gnuplot.Data(TILOG['DICT']['date'],TILOG['DICT']['tI'])
    #g.plot(str(d))



</t>
<t tx="zoomq.20100903210229.3896">@path ../zoomquiet-tangle/txt/KMthinking/
#zoomquiet.leo/txt/KMthinking
</t>
<t tx="zoomq.20100903210229.3897">wiki 不是任何人都可以用的！
??

- 任何的理由都是理由:
 - word 经验是即得的不用学习
 - wiki 无法快速使用表格
 - wiki 难以排版不好看

...
以往的努力都使错方向了:

维基的本质是相互服务，文章共用
而所有不习惯维基的人，都不是维基用户
只是文章消费者，本质期望是:
- 有人为他们准备好 清晰/明了/排版漂亮 的索引页面
- 他们随时可以查阅想查阅的!

MLBD !怪不得维基不能用!
没有分享的冲动,没有知识的结构,还想有专人为您服务?!
- 对分享人不公平!
 - 屈从你的格式你的分类?!
- 对其它查阅者也不公平!
 - 屈从你的格式你的分类?!


&gt;
&gt; 哦，那我觉得最核心的问题是：wiki一定要定位明确
是也乎，是也乎，
所以，俺推广维基时，首先都是尝试说明什么是维基，而不是怎么使用...
但是，真的是在 Office 淫威之下的人们，大多数无法想象 Word 不方便之处(也可能是拒绝想象)
但是，维基也的确是可以当成各种平台来用:
- 有公司用维基作工单系统
- 配合插件，可以作个人/团队blog
- 共同写作平台
- FAQ
- ...
维基是真正作到本身简单到极致,使用正式自由到充分的信息管理平台了,
就象 Scrunm 成功实施的团队一样,人最重要!
使用维基成功,必须是:
- 团队有知识积累的冲动
- 所有人有知识分享的冲动
- 所有人有时间记录知识片段
- 所有人愿意配合其它人整理知识体系

&gt; 是作为随手分享的知识经验库还是作为正式的文档资料库，一定要搞清楚
&gt; 如果定位是后者，那要想保证wiki文档的权威性，就不能把其他分享掺合进来，就一定全是正式文档。这里如何组织文档是非常重要的问题。MoinMoin的url太灵活了，这虽然方便，但其实对使用者有了比较高的要求。别说非技术人员，就是技术人员在“我的文档该放在哪儿”这个问题上也是有些纠结的，这一点是推广wiki作为正式文档库的核心障碍，如果就这一点多下些功夫，制定方便的规范和流程并且给出培训，就好了。
&gt; 这时，wiki可以基本取代非流转性的(无需流转到客户手中)word文档，如果需要流转，导出就行了。但电子表格和幻灯是完全没法的。但这两种文档一般也没有相互链接，自由索引／复用，统一搜索等需求。
&gt; 建议电子表格类文档不要往wiki里整合了，如果统一存在svn中，引用时给出url，或者直接上传复件，如果要显示局部数据，给出截图。

</t>
<t tx="zoomq.20100908091715.2579">蟒营:
    +-- 文档:
        +-- #Hg使用:
            +-- code.google 協同
                '+-- 权限'
                '+-- 初始化'
            +-- 本地使用:
                '+-- M$工具'
                '+-- 仓库理解'
                '+-- 提交'
                '+-- 合并'
                #+-- 分支
            +-- 团队協同
                '+-- 局部交换'
        +-- Py 环境
        +-- #工程协同
            +-- 维基贡献?
            +-- 仓库使用流程...
    +-- 环境:
        +-- Trac:Bitten TDD 配置
        +-- Hg Hooks...
            +-- #mail diff into googlegroups
            zoomquiet+pycamp4bb@gmail.com
    +-- 教案:
        +-- Py
        +-- Web
        +-- DB
        +-- ...</t>
<t tx="zoomq.20100925155257.2580">+-- PyBlosxom:
    +-- 部署:
        +-- ~Hg hook
        +-- crontab 备份?
    +-- 评注:
        +-- 外部JS 评注服务
        +-- WeKnow GAE服务
            +-- Cloudant 使用
    +-- 增进:
        +-- '文章页 title 插入'
            ~/zq.pyblosxom/pybshare/jquery-pybactions.js
        +-- ...
    +-- 优化:
        +-- 图片合并css 配合
        +-- JS 合并压缩
        +-- CSS 合并压缩
    +-- #Leo配合:
        +-- 自动事务按钮:
            +-- t2t编译
            +-- 静态化发布

</t>
<t tx="zoomq.20100927113242.2581">


foo-main    :8000 主仓库
    $ hg serve -p 8000 -a 127.0.0.1 -n "HgDemo main REPO."
    hg serve -p 8000 -a 10.20.208.13 -n "HgDemo main REPO."
foo-zq      :9001 用户克隆
    $ hg serve -p 9001 -a 127.0.0.1 -n "HgDemo: ZQ'srv. clone" --style gitweb
foo-bar     :9002
    $ hg serve -p 9002 -a 127.0.0.1 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.34 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.13 -n "HgDemo: BAR'srv. clone" --style coal

foo-loc     本地仓库
bar-loc

[extensions]
hgext.extdiff =

[extdiff]
;tortoisemerge =
beyondcompare3.args=$local $other $base $output /ro /lefttitle=local /centertitle=base /righttitle=other /automerge /reviewconflicts /solo
beyondcompare3.regkey=Software\Scooter Software\Beyond Compare 3
beyondcompare3.regname=ExePath
beyondcompare3.gui=True
beyondcompare3.priority=-2
beyondcompare3.diffargs=/lro /lefttitle='$plabel1' /righttitle='$clabel' /solo /expandall $parent $child

[merge-tools]
tortoisemerge.args=/base:$base /mine:$local /theirs:$other /merged:$output
tortoisemerge.regkey=Software\TortoiseSVN
tortoisemerge.checkchanged=True
tortoisemerge.gui=True
tortoisemerge.priority=-4
tortoisemerge.diffargs=/base:$parent /mine:$child /basename:'$plabel1' /minename:'$clabel'
</t>
<t tx="zoomq.20101015095808.2582">.hgrc 中的常用配置...

</t>
<t tx="zoomq.20101019093735.5077">[extensions]
hgext.extdiff =

[extdiff]
cmd.diffuse = 
;cmd.kdiff3 =

[merge-tools]
;kdiff3.args = $base $local $other -o $output

diffuse.priority=-3
diffuse.args=$local $base $other
diffuse.gui=True
diffuse.diffargs=$parent $child


[extensions]
hgext.extdiff =

[extdiff]
cmd.kdiff3 =

[merge-tools]
kdiff3.args = $base $local $other -o $output
</t>
<t tx="zoomq.20101019093735.5078">[extensions]
hgext.keyword=

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}
</t>
<t tx="zoomq.20101019093735.5079">+-- http://xkcd.com/ 中文翻译
    +-- 下载脚本 '/home/zoomq/media/manga/2graspic/xkcd.com/' 
        grasp-xkcd.sh   ;   filter-xkcd.py
    +-- blogger.com 发布?
</t>
<t tx="zoomq.20101026092125.2576">@path data

时间帐单 收集
date
,tI     输入
,tO     输出
,tC     交流
,tM     杂务
,tF     家庭
,tS     睡眠             

Pt      蕃茄
,Pd     DONE蕃茄钟
,Pl     LOST任务
,Po     OUT蕃茄钟

</t>
<t tx="zoomq.20101026092125.2577">date,tI,tO,tC,tM,tF,tS
101008,1.5,3.0,0.5,5.5,5.5,7.0
101009,0.0,3.0,0.5,5.5,6.5,7.0
101011,3.0,3.0,0.0,5.0,5.0,6.5
101012,0.5,1.5,2.0,6.0,5.0,6.0
101013,1.0,5.0,1.5,5.0,5.0,7.0
101014,6.0,0.0,0.0,6.0,5.0,7.0
101015,0.0,6.0,0.0,6.0,5.0,7.0
101018,0.0,3.25,1.2,8.25,5.0,7.0
101019,0.0,6.0,3.75,3.75,3.25,6.0
101020,1.0,4.0,0.5,9.0,5.0,6.5
101021,0.5,3.0,4.25,7.75,2.0,6.5
101022,0.0,4.25,1.0,6.5,3.75,6.5
101024,1.5,2.75,3.25,4.0,5.0,6.0
101025,0.0,7.5,2.5,6.0,2.0,6.0
101026,2.75,2.3,0.0,6.85,2.0,6.5
101027,0.5,4.0,6.75,4.25,2.0,6.0
101028,0.0,1.0,1.0,4.5,2.0,5.5
101029,0.0,10.5,0.0,5.25,2.0,7.0
101030,1.5,8.5,2.0,1.5,2.0,6.00</t>
<t tx="zoomq.20101029104710.3831">[ui]
username = Zoom.Quiet &lt;zoomquiet+hg@gmail.com&gt;

[extensions]
hgext.keyword=
graphlog =

[defaults] 
glog = --style compact

[alias] 
ll = glog --style compact

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =
**.xml =
**.yaml =
**.html =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}

</t>
<t tx="zoomq.20101030170919.2579">其它各种小作为
</t>
<t tx="zoomq.20101030170919.2580">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i
def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
if __name__=='__main__':
    main()
</t>
<t tx="zoomq.20101030170919.2581"># -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
</t>
<t tx="zoomq.20101030170919.2582">def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i

</t>
<t tx="zoomq.20101030170919.2583">def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
</t>
<t tx="zoomq.20101103153946.3839">卫士开源的定制设想...
+-- #迁移高配主机
+-- 维基增补:
    +-- '列表注册'
    +-- Hg 使用
+-- 代码自动化流程
    +-- 对内部 hadson
    +-- 对pyk的 Bitten ~ #先得恢复 pyk!
+-- py.k 配合宣传


&gt; 网站名称：学盟编程论坛
&gt; 链接网站地址 http://www.stuhack.net
&gt; 站长名字：陈铭
&gt;        邮箱：164201737@qq.com
&gt;        电话：13574056770</t>
<t tx="zoomq.20101103153946.5095">+-- #OhLife CLI
+-- 常好CLI 技巧:
    +-- history
    +-- 文件更动...
+-- Vim
+-- rxvt
    +-- tmux
    +-- Muut+Gmail
</t>
<t tx="zoomq.20101104113205.5096">邮件来自 Google Groups "DouPy"列表!
讨论: DouPy@googlegroups.com | 退订: DouPy+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/DouPy
工程: http://code.google.com/p/unbeans/
维基: http://code.google.com/p/unbeans/wiki/DouPy

+-- doupy ~ 豆瓣综合使用:
    #你的豆瓣 API key:
0cd1817bb03732fc2674847310a598f4
API key 的详细信息   · · · · · · 
* 私钥：d241f9b2e06544fc -请保护好你的私钥
* 应用名称：Zoom.Quiet
* 创建时间: 2010-10-29
* 应用说明:
  个人试用各种豆瓣API, 通过Py 结合 Shell 进行Ubuntu 中的一键式操作, 在寻找到合理的快感后,将另外申请 Key 进行服务化 ;-)
</t>
<t tx="zoomq.20101105113140.2587">#服务即命令行
+-- GooglCL
+-- Cloudant 永久存储 ~ CouchDB
+-- DouPy ~ dubanAPI

</t>
<t tx="zoomq.20101109214756.6989">@language python
@tabwidth -4

整体规划 zoomquiet.org 相关网站发布及小工具任务

最终:
    zoomquiet.org
        http://zoomquiet.org/obp    图书工程发布    
    blog.zoomquiet.org
    jump&gt;&gt;&gt; http://blog.zoomquiet.org/pyblosxom
    
    floss.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqFLOSS/tree/
    skm.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqSKM/tree/

  &lt;head&gt;
  &lt;meta http-equiv="refresh" content="0;URL=gldt1009.svg"&gt;
  &lt;/head&gt;
    </t>
<t tx="zoomq.20101109214756.6990">zeus:~/zoomquiet.org&gt; tree -L 4
.
|-- README.txt
+-- _cfgs
+-- _cron
+-- _docs
+-- _logs
+-- _stuff
+-- blog    ~ PyBlosxom
|   +-- _static     ~ 发布为 /pyblosxom
|   +-- _images     ~ 发布为 /pybimage
|   +-- entries     ~ 发布为 /pybnodes
|   +-- flavours    ~ 发布为 /pybstyle
|   +-- pybshare    ~ 发布为 /pybshare
|   +-- plugins  
|   |-- blog.ini
|   |-- comment
|   |-- config.py
|   |-- index.html
|   |-- not-doc-2006-05-31-12-00.t2t
|   `-- ...
+-- repos
|   `-- zqlib-hg
`-- www
    |-- index.html -&gt; map/index.html
    |-- leo_doc_zh -&gt; obp/leo_doc_zh/doc/html/_build/html
    +-- logs -&gt; ../_logs
    +-- map
    +-- obp
    +-- res
    |   +-- HYRY-scipydoc
    |   +-- d   ~ 文档
    |   +-- f   ~ foto
    |   +-- j   ~ Js
    |   +-- m   ~ 多媒体
    |   |   |-- r   ~ 录音
    |   |   `-- v   ~ 录像
    |   +-- s5 -&gt; ../../repos/zqlib-hg/tangle/zoomquiet.leo/s5/
    |   `+- scrapbook 
    |-- pyblosxom_zh -&gt; obp/pyblosxom_zh/build/html/
    |-- pywdwpy -&gt; obp/PyWDWPy/build/html/
    |-- tpipy_zh -&gt; obp/TPiPy/build/html/
    `-- w2py_manual_zh -&gt; obp/web2py_manual_zh/build/html
</t>
<t tx="zoomq.20101109214756.6991">#Type:	Source:	Destination:	Actions:
# 准备好后,取消!
A Record	www.zoomquiet.org	202.108.44.62	Edit | Delete
A Record	obp.zoomquiet.org	119.88.56.193	Edit | Delete

# 核心域名
A Record	zoomquiet.org	119.88.56.193	Edit | Delete

A Record	blog.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	skm.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	floss.zoomquiet.org	119.88.56.193	Edit | Delete

# 预留,指向 gae
A Record	weknow.zoomquiet.org	202.108.44.62	Edit | Delete

CNAME Record	*.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	googlee445fdb76e058b0a.zoomquiet.org	google.com	Edit | Delete
CNAME Record	mail.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	zqlib.zoomquiet.org	ghs.google.com	Edit | Delete</t>
<t tx="zoomq.20101109214756.6992">对根页面进行精简:
    + 所有目录只显示前子目录和前5页面索引
        + 2级索引同上
        + 3级索引不限制
    + 默认说明页面 readme.html
    + 所有页面,增补原始URL旁注!

3.9G	ZqFLOSS
208M	ZqKss
2.3G	ZqSKM
322M	ZqWks
224M	ZqXes
    </t>
<t tx="zoomq.20101227205438.2592">邮件来自 Google Groups:"ks-deve"金山开源社区技术邮件列表
讨论: ks-deve@googlegroups.com
退订,请邮件至: ks-deve+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com


邮件来自 Google Groups:"ks-user"金山开源社区用户邮件列表
讨论: ks-user@googlegroups.com
退订,请邮件至: ks-user+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-user
技术列表: http://groups.google.com/group/ks-deve
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com

邮件来自 Google Groups:"ks-ann"金山开源社区通告邮件列表
讨论: ks-ann@googlegroups.com
退订,请邮件至: ks-ann+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-ann
技术列表: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
社区官网: http://code.ijinshan.com</t>
<t tx="zoomq.20101228111644.2594">date,tI,tO,tC,tM,tF,tS
101102,1.75,4.25,0.75,6.75,5.0,6.0
101103,0.0,2.0,3.0,5.0,5.0,6.0
101104,0.0,6.35,2.75,4.0,6.5,6.0
101105,2.25,1.0,1.0,6.25,4.75,5.0
101106,0.0,5.5,1.5,4.0,4.0,7.0
101108,0.0,6.5,2.75,3.25,5.0,6.5
101109,0.0,6.5,2.75,2.0,5.0,7.0
101110,2.5,5.0,1.5,4.0,5.0,6.0
101111,0.0,7.75,4.5,3.25,2.0,6.0
101112,0.0,2.5,0.75,4.75,2.0,6.0
101115,0.0,4.5,4.0,5.0,5.0,7.0
101116,0.0,4.5,2.5,3.0,5.0,6.0
101117,0.0,2.5,2.5,7.5,5.5,6.0
101118,0.0,7.5,2.0,2.0,2.5,6.0
101119,1.75,3.5,1.25,5.0,5.0,6.0
101129,0.0,2.25,5.5,7.5,2.0,6.0
101130,0.5,9.0,2.5,5.5,2.0,5.0

</t>
<t tx="zoomq.20101228111644.2596">date,tI,tO,tC,tM,tF,tS
101201,0.0,8.75,4.25,4.0,2.0,5.5
101202,1.0,6.25,1.5,2.0,2.0,4.5
101203,0.0,8.0,1.0,4.5,2.0,7.5
101206,1.0,5.0,5.75,3.75,2.5,7.0
101207,0.0,7.0,2.75,6.0,2.0,5.5
101208,0.0,10.5,2.75,2.5,2.0,7.0
101209,0.0,11.0,2.0,4.0,2.0,5.0
101210,0.0,5.5,2.75,2.5,2.0,5.0
101213,0.0,6.5,0.75,6.25,2.0,7.0
101214,0.0,3.5,2.75,6.25,5.0,7.0
101215,0.0,5.25,2.25,6.5,5.0,7.5
101216,3.5,5.5,0.5,5.5,2.0,6.0
101217,0.0,0.0,2.75,12.5,2.0,6.0
101220,0.0,2.75,4.0,4.0,5.0,7.0
101221,0.0,4.25,1.5,5.75,5.0,6.0
101222,0.0,5.5,1.0,4.5,2.0,7.0
101223,0.5,1.5,1.0,10.5,5.0,5.5,6.5
101227,0.0,1.75,3.25,8.0,5.0,6.0
101228,1.75,2.25,1.75,8.5,5.0,5.5
101229,4.5,4.5,1.75,2.75,4.5,5.5
101230,0.0,2.75,2.75,6.5,5.5,5.0
101231,0.0,2.0,1.5,6.5,7.0,7.5

</t>
<t tx="zoomq.20110104095502.2596">date,tI,tO,tC,tM,tF,tS
110104,0.00,6.50,0.00,5.50,5.00,7.00
110105,1.00,4.50,0.50,5.00,6.00,7.00
110106,2.15,4.75,0.50,6.50,4.50,7.00
110107,0.50,5.75,2.25,6.50,4.00,6.50
110110,1.00,3.00,4.50,1.50,5.00,7.00
110111,1.50,3.50,1.50,7.00,3.00,5.50
110112,2.00,3.00,1.00,6.50,5.00,7.00
110113,6.00,1.75,0.25,6.00,1.50,7.00
110117,0.00,5.25,2.25,5.50,4.00,7.00
110118,0.00,2.50,4.50,5.00,4.00,7.00
110119,1.00.1/50,1.50,5.00,7.00,7.50
110120,3.00,5.00,1.00,3.00,4.00,6.00
110121,2.00,5.25,1.25,3.50,4.00,7.50
110124,1.00,5.50,0.50,5.50,4.00,7.00
110125,0.00,5.50,1.00,6.00,4.50,7.50
110126,1.50,8.75,2.75,2.00,1.00,7.00
110127,2.50,7.50,0.00,3.00,3.50,7.50
110128,0.50,8.00,0.00,3.00,5.50,7.00
110129,2.00,4.50,4.50,3.00,4.00,7.00
</t>
<t tx="zoomq.20110209102527.2595">date,tI,tO,tC,tM,tF,tS
110401,0.00,1.00,3.75,7.75,4.25,6.50
110406,0.00,3.00,3.25,6.50,4.25,7.00
110407,3.25,3.25,2.50,10.0,1.50,7.00
110408,4.00,4.00,0.00,8.00,1.50,5.50
110409,0.00,6.25,0.00,6.75,4.00,7.00
110411,0.00,5.00,6.00,4.50,1.00,7.00
110412,1.00,6.50,1.50,7.00,1.50,6.50
110413,1.25,3.75,0.00,7.50,4.00,7.50
110414,2.75,4.00,2.00,6.75,1.00,7.00
110415,2.75,2.00,0.00,7.50,4.25,7.50
110418,0.00,3.75,2.25,7.75,4.00,7.00
110419,4.75,4.00,1.25,5.75,1.50,7.00
110420,0.00,4.50,2.00,6.25,1.00,7.00
110421,1.50,4.00,2.00,4.00,1.00,6.00
110422,1.00,6.25,0.00,8.75,1.00,7.00
110423,4.00,0.00,1.00,6.00,4.00,7.00
110425,0.00,2.75,2.00,5.25,4.50,6.50
110426,0.00,2.00,0.00,6.25,7.00,7.00
110427,2.00,4.50,0.00,4.50,7.00,7.00
110428,1.50,5.50,4.00,2.50,1.00,7.00
110429,1.50,3.50,0.00,6.50,4.00,7.00



</t>
<t tx="zoomq.20110218220319.2595">Command-line access

If you plan to make changes, use this command to check out the code as yourself using HTTPS:
# Project members authenticate over HTTPS to allow committing changes.
svn checkout https://openbookproject.googlecode.com/svn/trunk/ openbookproject --username Zoom.Quiet

When prompted, enter your generated googlecode.com password.

Use this command to anonymously check out the latest project source code:
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://openbookproject.googlecode.com/svn/trunk/ openbookproject-read-only 
</t>
<t tx="zoomq.20110218220319.3903">急事儿助理:
    黄爱萍 huangaip@phei.com.cn

Table of Contents
Chapter 1 Introduction to Instrumentation
    Data Acquisition
    Control Output
    Applications Overview
    Summary
Chapter 2 Essential Electronics
    Electrical Charge
    Electric Current
    Basic Circuit Theory
    Circuit Schematics
    DC Circuit Characteristics
    AC Circuits
    Interfaces
    Summary
    Suggested Reading
Chapter 3 The Python Programming Language
    Installing Python
    The Python Programming Language
    Python Development Tools
    Summary
    Suggested Reading
Chapter 4 The C Programming Language
    Installing C
    Developing Software in C
    C Development Tools
    Summary
    Suggested Reading
Chapter 5 Python Extensions
    Creating Python Extensions in C
    Python’s C Extension API
    Using the Python C Extension API
    Python’s ctypes Foreign Function Library
    Summary
    Suggested Reading
Chapter 6 Hardware: Tools and Supplies
    The Essentials
    Advanced Tools
    Supplies
    New Versus Used
    Summary
    Suggested Reading
Chapter 7 Physical Interfaces
    Connectors
    Serial Interfaces
    GPIB/IEEE-488
    PC Bus Interface Hardware
    Old Doesn’t Mean Bad
    Summary
    Suggested Reading
Chapter 8 Getting Started
    Defining the Project
    Requirements
    Designing the Software
    Functional Testing
    Implementation
    User Documentation
    Summary
    Suggested Reading
Chapter 9 Control System Concepts
    Basic Control Systems Theory
    Control System Types
    Implementing Control Systems in Python
    Summary
    Suggested Reading
Chapter 10 Building and Using Simulators
    What Is Simulation?
    Using Python to Create a Simulator
    Serial Terminal Emulators
    Displaying Simulation Data
    Creating Your Own Simulators
    Summary
    Suggested Reading
Chapter 11 Instrumentation Data I/O
    Data I/O Interface Software
    Data I/O: Acquiring and Writing Data
    Summary
    Suggested Reading
Chapter 12 Reading and Writing Data Files
    ASCII Data Files
    Binary Data Files
    Summary
    Suggested Reading
Chapter 13 User Interfaces
    Text-Based Interfaces
    Graphical User Interfaces
    Summary
    Suggested Reading
Chapter 14 Real World Examples
    Serial Interfaces
    USB Example: The LabJack U3
    Summary
    Suggested Reading
Appendix Free and Open Source Software Resources
Appendix Instrument Sources
    Manufacturers
    Used Test Equipment Sources
    Manuals
Colophon</t>
<t tx="zoomq.20110221225054.2597">=== 报名: ===
 # 高增琦 &lt;pgf00a@gmail.com&gt; / 13522167037
  * 自用Blog:暂无，校内用的多...
  * 邮寄前联系（租的房子快到期了）
  * 2010年新鲜毕业的研究生，作XML查询引擎，JAVA 工作是数据库开发，C 有一定的C语言基础，有并行程序的经验硬件接触的少（也就是上学时）有一定的英文阅读能力，曾经翻译过英文论文（XML流处理相关）对开源、开发有激情
  * 每天1-2个小时？也许周末能多点儿,要是能在手机上弄，也许更多一些吧
  * 对于未来的版权收益有什么特殊要求? 这个不懂，求指教... 
 
 # Alan Zheng &lt;machinecat1666@gmail.com&gt; / 13764183786
  * *bitbucket ID:* `AlanZheng`
  * http://blog.microsuncn.com
  * 上海市长宁路1018号龙之梦大厦14楼，Siemens工业软件（上海）有限公司
  * 3D图形，Linux(Fedora) C/C++, MIPS embedded system, Python, RHCEr, etc.
  * 周六周日基本都有时间
  * 对于未来的版权收益有什么特殊要求? ：方便介绍一下通常是怎么处理的吗？
 
 # jl y &lt;newpublic01@gmail.com&gt; /  13764860916
  * *bitbucket ID:* `newpublic01`
  * 邮寄地址:  租房, 到时候联系, OK?!
  * 技术积累:  c, python (自我感觉还需要大幅度提高)
  * 2011 是否忙,每周可以挤出多少时间掺合:  忙也得挤时间啊(目前比较空闲)
  * 对于未来的版权收益有什么特殊要求:    我觉得, 既然是 linux 环境下的, 就应该支持一下 GPL, 但不是说主张盗版啥的, 只是说能让更多的人读到就好. 况且, 说句不太中听的话, 要想拿这个收益改变生活水平啥的, 我觉得八成不靠谱, 还不如支持一下开源, 呵呵
 
 # hu peter &lt;hulwyx@gmail.com&gt;/ 13929554974
  * 自用Blog：无
  * 广州市前进路161号
  * 技术积累：？？？？ 本人专业是工程类的，不过对外语比较感兴趣，有兴趣参加。目前就职中交第四航道勘察设计院，08年就被派驻一个援外港口建设项目（安哥拉），外语还行，我想试试看，能否帮上你的忙！
  * 工作比较空闲，时间较多。
  * 对于未来的版权收益有什么特殊要求?           ：没有特殊要求。



 </t>
<t tx="zoomq.20110224000107.3905">*HI*UI**+ '可以链式clone传递'
+ '事务邮件通告:'
    commits-noreply@bitbucket.org&gt;
    发送至	zoomquiet+rwiwpy@gmail.com （是的，这就是您。） 了解详情
+ '自动编译 hook 部署'
    trac2:
        /ata/_cron/
+ https 认证部署!
    /data/py.kingsoft.net/ssl/server.key
    pass phrase for server.key: P@55w02d
    
    Signature ok
subject=/C=CN/ST=GuangDong/L=ZhuHai/O=zoomquiet.org/OU=obp/CN=Zoom.Quiet/emailAddress=zoomquiet+obp@gmail.com
Getting Private key
    #Yahoo! obp.zoomquiet.org -&gt; py.kingsoft.net
    https://py.kingsoft.net:8080/rwiwpyzh
    使用 Nginx 发布
+ 'Issue 评注...'
    H* 点击到:
    https://bitbucket.org/ZoomQuiet/obp.rwiwpyzh/issues/new
    zoomq   1q2w3e4r
    zsprain obp@pyk
    billxu
    atommann
    pgf00a
    grissiom
    xiaoma 
    kermitmei
    sagasw
    AlanZheng
    newpublic01
    hulwyx
</t>
<t tx="zoomq.20110301085102.3912">date,tI,tO,tC,tM,tF,tS
110209,2.00,4.00,1.00,7.00,5.00,6.00
110210,0.00,1.50,1.50,10.5,4.50,5.50
110212,0.00,2.50,1.00,8.00,4.00,7.00
110214,2.50,2.75,1.25,4.00,5.00,7.00
110215,0.00,6.00,0.50,6.50,4.00,7.50
110216,0.00,3.00,1.50,7.00,4.00,7.50
110217,0.00,1.00,2.00,8.50,4.50,7.00
110218,2.00,3.00,0.00,7.00,4.00,7.00
110221,0.00,3.50,3.00,4.50,4.00,7.50
110222,0.50,3.50,1.00,8.00,4.50,8.00
110223,1.00,4.50,1.00,5.00,4.50,7.00
110224,3.00,5.00,0.00,3.50,3.50,7.50
110225,2.00,0.75,7.75,2.00,4.00,6.50
110228,0.00,4.00,0.00,6.00,6.00,6.50
</t>
<t tx="zoomq.20110309092312.11334"> http://nginx.org/download/nginx-0.9.5.tar.gz
http://www.openssl.org/source/openssl-1.0.0d.tar.gz
系统是 OpenSSL 0.9.8k 25 Mar 2009

./configure \
    --prefix=/usr/local/nginx \
    --user=www \
    --group=www \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --pid-path=/usr/local/nginx/run/nginx.pid  \
    --lock-path=/usr/local/nginx/lock/nginx.lock \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --with-openssl=../openssl-1.0.0d \ 
    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 


Configuration summary
  + using system PCRE library
  + using OpenSSL library: ../openssl-1.0.0d
  + md5: using OpenSSL library
  + sha1 library is not used
  + using system zlib library

  nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/run/nginx.pid"
  nginx error log file: "/usr/local/nginx/log/error.log"
  nginx http access log file: "/usr/local/nginx/log/access.log"
  nginx http client request body temporary files: "/usr/local/nginx/tmp/client_body"
  nginx http proxy temporary files: "/usr/local/nginx/tmp/proxy"
  nginx http fastcgi temporary files: "/usr/local/nginx/tmp/fastcgi"
  nginx http uwsgi temporary files: "/usr/local/nginx/tmp/uwsgi_temp"
  nginx http scgi temporary files: "/usr/local/nginx/tmp/scgi_temp"
</t>
<t tx="zoomq.20110322090028.3918">@path ~/Works/OBP/RWIwPy/source/

$ hg log -M --template "{author}\n" | sort | uniq -c | sort -nr 
     52 Grissiom &lt;chaos.proton@gmail.com&gt;
     45 ZoomQuiet &lt;zoomquiet+obp@gmail.com&gt;
     34 kermit.mei@gmail.com
     31 atommann &lt;atommann@gmail.com&gt;
      2 sagasw &lt;sagasw@gmail.com&gt;
      2 Atommann &lt;atommann@gmail.com&gt;
      1 ZoomQuiet &lt;zoomquiet+hg@gmail.com&gt;

</t>
<t tx="zoomq.20110322090028.3919">@path ch03</t>
<t tx="zoomq.20110322090028.3920">@language rest

第3章: Python编程语言
============================================


.. include:: 0_intro.rst


.. toctree::
    :maxdepth: 2

    1_install_py.rst
    2_py_programming_language.rst
    3_py_evelopment_tools.rst
    4_summary.rst
    5_suggested_reading.rst


.. |rwip_0101| image:: ../_static/figs/rwip_0101.pdf.png
   :alt: rwip_0101
   :target: #
</t>
<t tx="zoomq.20110322090028.3921">@language rest
.. include:: ../LINKS.rst

本章节是面向非Py 程序员的,一个精简语言简介...

.. epigraph::

    I just want to go on the record as being completely opposed to computer languages. Let
    them have their own language and soon they’ll be off in the corner plotting with each other!

    我认为就算完全禁止研发计算机语言,他们依然会各自拥有自个儿的开发语言,并立马悄悄的躲回各自角落中自娱自乐去了.

    —Dr. Steven D. Majewski


.. sidebar:: Steven D. Majewski

    早在1992年就为 Python 摇旗呐喊过的牛人:
    `WHY PYTHON? &lt;http://www.python.org/search/hypermail/python-1992/0274.html&gt;`__ 作者,
    `PyObjC 项目 &lt;http://sourceforge.net/projects/pyobjc/&gt;`__ 主持人 




自动化设备一个重要的需求是能够和电脑或是其它控制设备连接运行.
说到这儿,术语"编程"会立即在一些读者头脑中浮现,
实际上作到这一点有很多方法,有些甚至于不涉及编程语言(至少不是传统意义上的).
不过,本书中,我们选择了 Python和少量的C 来创造软件给自动设备用.


本章的目的是给出 Python 的基础介绍.
以便在下一章节,来引入C语言,来为Python 程序使用廠方提供的硬件驱动,或是创造计算密集型的模块.
本章不打算成为Python 的深入教程或是手册;
已经有太多优秀的图书可以承担这一角色了(具体参考本意的推荐阅读部分).
同时可以在 `Python官网`_ 找到从入门教材到高级话题的各种文档!


Python 作为本书的主力开发语言,出于以下原因:

- 足够简单易学
- 没有编译过程,可以直接加载执行(或是直接输入,如果够胆的话)
- 足够强大


同时 Python 也是种多范式语言,支持多种编程模型: 面向过程,面向对象,和函数式编程!
首先我们将进行通常的编程,然后将尝试追加图形界面(GUI)并用C来写擴展;
进一步的,我们将遇到需要抛开通常的程序设计,完全使用我们自行创建的嵌入式对象.


而且,正如我们将见证的, Python 是天生的面向对象的,甚至于变量本质上也是对象;
即使我们没有被迫进行OOP编程,实际上每时每刻我们都在使用对象.
如果还不清楚什么是 "面向对象"的含义,参阅边注所述.



.. topic:: 面向对象的编程

    一般说程序是认为一种命令式编程,
    核心概念是一组顺序排列的指令形成程序(类似食谱).

    - 扩展程序包含在模块中,模块则由一组函式组成.
     - 每个函式执行特定活动(算法),并可以包含其私有数据.
     - 函式可以在其所在的模块中使用 "全局" 数据.
     - 函式可以调用其它函式
     - 函式可以返回数据
    - 模块可以从其它模块引用函式或是数据
     - 这种设计可以令程序用模块的层次结构组织起来 (即,结构化设计)

    标准C程序就是一个通常的面向过程的例子.
    注意,这里我们使用 "函式"作为"功能"的同义词,不过,在其它一些语言中,他们被区别对待了.
    在 Python 和 C 中,就只有函式!

    面向对象的编程,用类(及其数据)来描述对象的特性概念以及可以在其上执行的操作(对象的方法)来
    扩展了同类事务的功能;

    - 一个对象,可以说是一类说明和模板,而这种描述本身是不可执行的.只有基于对象创建的实例才可执行.
     - 可以想象为,一个类就是个饼干压模,而用这压模作出的饼干有的可能含有坚果,有的又有巧克力,但是他们都称作"饼干"
     - 必要的话,我们可以从指定的类创建很多可执行对象,每个对象除了从其父类继承的数据和方法之外,又都有各自特殊的.
     - 对象的数据,一般称为:"属性",而操作数据的类函式称为:"方法".
    - 对象,经常用来声明组件间的 "有一个.." 以及 "是一个.." 的关系:
     - 例如: 一个摇椅 "是一个" 被称作椅子的类的实行; 它 "有一个" 座位,和两个摇杆(属性); 人们可以坐在它上面摇摆 (方法)


</t>
<t tx="zoomq.20110322090028.3922">@language rest
.. include:: ../LINKS.rst

安装Python
===============================================================================

首先需要安装Python.
本书使用 2.6(不是3.x),对于 Windows 环境, ActiveState发行版比较友好

- http://www.activestate.com/activepython/

当然从 python.org 获取的官方版本也很好.
都包含有针对Windows 定制的帮助和手册.
如果运行在 Linux 直接使用软件包管理器安装即可(synaptic, apt-get, rpm, 等等)


如果想从源代码编译安装,参考: http://docs.python.org/using/unix.html#getting-and-installing-the-latest-version-of-python



</t>
<t tx="zoomq.20110322090028.3923">@language rest
.. include:: ../LINKS.rst

Python编程
===============================================================================

现在至少已安装好了 Python,我们可以通过一个快速导览来体验这语言的主要特性.

Python 是种解释型语言.精确的说,是种编译为字节码的解释型语言.
这意味着,Python 在执行脚本前会将脚本编译为一种二进制的可行程序.其实这就是"解释型"的含义.

Python在其虚拟机中将形式文本解释为字节码来运行,
虚拟机内部的指令集是经过优化的,虽然无法和通常的编译成机器码的编译型语言执行效率相比,
但对于大多数应用程序来说,字节码的运行速度很够力了.
尤其是考虑到时下PC上的处理器(CPU或叫中央处理器)都是在1~3G赫兹.
而以前运行 30兆赫兹已经算好的时候,程序本身的执行速度才是大事儿.

不论是否Python 新手,Mark Lutz 写的 `Python口袋手册 &lt;http://oreilly.com/catalog/9780596158095/&gt;`__ 
强烈推荐. 这书提供了一个简洁/组织良好/易读体积小巧的 Python 语言核心功能/模块的速查手册,
可以随身携带,需要时就查.

其它相关好书在推荐阅读部分分享.

@others

</t>
<t tx="zoomq.20110322090028.3924">@language rest
Python开发工具
===============================================================================


成功和之间的差异可能就是一个良好的发展环境!
开发环境至少必须提供方式来支持，创建和编辑标准ASCII文本格式的Python源代码.
其他配套工具，如调试器，自动文档生成和版本控制，都是很好的，不是绝对必要的.
幸运的是，有太多可选择的，优秀的开放源码软件(自由和开放源码软件）或是廉价的很好的商业工具.

本节我们将以自由和开源软件为重点来简要介绍哪些是可用.
真正的问题不是你用的什么工具，毕竟大多数人都(在过度的开发时间里)有自己的喜好和工作习惯.
重要的是在多种选择中，决择简洁够用的工具组合来完成任务.



编辑器和 IDEs
-------------------------------------------------------------------------------

最低限度,需要一个文本编辑器或集成开发环境(IDE)来输入和编辑Python 脚本.
同时还需要编辑C代码来完成扩展(第5章我们将深入如何创建Python扩展)，
因此选择一种语言无关,或是能够识别不同语言并有语法高亮的环境.

编辑器和IDE之间的主要区别在于从工具本身可以完成多少操作.
通常编辑器，只允许你做一件事：编辑.
而一个IDE，可以让你从编辑，到编译，调试，甚至度量和版本控制等各种事务.
IDE的目的是开发人员在整个开发过程中不必离开环境.


有些编辑器，也有从内启动另一个程序的能力,然后捕捉和显示程序的输出，
但是这通常是一个附加的能力，本质上不是编辑工具的一部分，
有些编辑器这种支持能力比别人更好很多(是的说的是谁,大家都知道!)
一个全功能的IDE则是以某种形式集成所有这些功能，
虽然有些IDE也需要来自外部工具的功能和应用.
换句话说，能高度扩展功能的编辑器和IDE有时是很难区分的.

对于Python可能IDE不是必要的(虽然市面上有少数选择),
因为它不是编译语言，大部分使用Python的情况是在命令行或在包含Python应用的图形用户界面.

@others




</t>
<t tx="zoomq.20110322090028.3925">@language rest
小结
===============================================================================

对Python的简要游览就这样结束了.
现你应该对Python看起来是什么样儿的有个一般性的感觉了,
我故意掩盖了语言的许多方面，因为，毕竟这本书不是Python教程.
正如一开始就说过的,有关Python 语言本身有许多优秀的书籍，可以提供丰富的细节，
而且在Python官方网站有关语言的一切,都有权威人士可供答疑.
接下来,随着讨论的继续,我们会遇到Python的其他功能，若有必要,就地研究.



</t>
<t tx="zoomq.20110322090028.3926">@language rest
推荐阅读
===============================================================================

如果你想进入更深的Python编程境界，从以下书籍开始吧:


Python in a Nutshell, 2nd ed. 
    [http://oreilly.com/catalog/9780596100469/] Alex Martelli, O’Reilly Media, 2006.

    辞行常备案头的紧凑参考.精心组织成方便查阅的形式,
    当你工作时,想快速寻找一个可用的思路时,这是个万用工具袋.

Programming Python, 3rd ed. 
    [http://oreilly.com/catalog/9780596009250] Mark Lutz, O’Reilly Media, 2006.

    1600页的巨型手册,全面涵盖Python中从字符串到GUI的一切,
    是Python工作必备图书.


除了已在本章引用过的URL，网络中还有许多在线资源可用于Python :

http://diveintopython3.org
    发布了 Mark Pilgrim 所撰图书: "深入Python" 的完整文本
    还提供了PDF下载.
    书中提供了以练带学的方式,并使用无数的例子来说明关键概念和技巧.

.. note:: (~_~)

    - 也有人指出,这书研究Python 的方式有些太学术化了,根本不实用
    - 译者私人推荐包含在Python 发行版文档中的教程,这是Python 创始人 Guido 唯一发布的正式图书了.


http://effbot.org 
    Fredrik Lundh的博客.在这里，可以找到数百篇有关Python的文章,下载和公开的图书,
    以及各种开发研究和尝试.
    行文有趣并有用,而且都是非常有见地并实用的.

.. seealso:: (^.^)

    - `ElementTree &lt;http://effbot.org/zone/element-index.htm&gt;`_  的作者! Python 世界里最好的 XML 解析模块!

</t>
<t tx="zoomq.20110322090028.9761">.. 图书链接统一定义文件!

.. 外部链接收集~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. _Python: http://python.org
.. _Pythonic: http://wiki.woodpecker.org.cn/moin/PythonIc
.. _Python website: http://www.python.org
.. _Python官网: http://www.python.org
.. _PEP-8:  http://www.python.org/dev/peps/pep-0008/

.. _stdyun.com: http://stdyun.com/vhost
.. _KTRAC: http://py.kingsoft.net/

.. _官方图书许可: http://web2py.com/book/default/section/0/0
.. _Artistic License 2.0: http://www.opensource.org/licenses/artistic-license-2.0.php
.. _reSTsections: http://sphinx.pocoo.org/rest.html#sections

.. 图片链接收集~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




.. 成员相关链接~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. _Zoom.Quiet: http://code.google.com/p/openbookproject/wiki/ZoomQuiet

.. OBP相关链接~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. _OBP工程: http://code.google.com/p/openbookproject
.. _OBP流程: http://code.google.com/p/openbookproject/wiki/FlowSphinx
.. _OBP参与: http://code.google.com/p/openbookproject/wiki/HowtoJoin

.. _翻译团队: http://code.google.com/p/openbookproject/wiki/RwIwPyZh#%E7%BB%84%E7%BB%87
.. _Liz: http://code.google.com/u/shengyan1985/




</t>
<t tx="zoomq.20110325220944.2613">Cpython-cn   群組建立以來
8901	limo...@gmail.com
5767	zoom.qu...@gmail.com
4997	jhuangjiahua@gmail.com
2778	askfor@gmail.com
2260	python.leojay@gmail.com
2056	march.liu@gmail.com
1262	
1183	hanzhupeng@gmail.com
1178	zsp007@gmail.com
1071	yi.codeplayer@gmail.com


CPyUG 列表 717...</t>
<t tx="zoomq.20110329090742.2614">与 沈崴-wileishn 在 2011年03月29日 星期二 09时20分19秒 的会话
...

...
(2011-03-29 09:37:03) 沈崴-wileishn: 
很多不解风情的家伙说不爽 python 的缩进，所以有了杯具的 ruby
(2011-03-29 09:37:22) 沈崴-wileishn: 
一开始 ruby 这个轮子就是为了一个 end 而已，从历史上讲



</t>
<t tx="zoomq.20110329090742.2615">(2011-03-29 09:27:06) 沈崴-wileishn: 
虽然我一直想写一本关于 python 的黑客的书，就是人比较懒，有点事就一直没弄
(2011-03-29 09:32:24) 沈崴-wileishn: 
我们公司是不用这些技巧的，我们的 hack 技术是把最简单的东西用到极致，危害可读性、稳定、安全的东西都是不用的，用最简单的语法写出华丽的程序。
(2011-03-29 09:32:51) Zoomq: 
咔咔咔!那个顶! 就象你提倡的用复制不用类的方式来加速运行

(2011-03-29 09:33:02) 沈崴-wileishn: 
打个比方，我们公司里面有两条“军规”，
1、我们公司员工 code review 的速度很快，基本扫一眼文件就知道有没有 bug 和设计问题
2、更简单，当无法起出一个漂漂的变量名时，已经有设计问题了。
(2011-03-29 09:40:39) 沈崴-wileishn: 
一开始他们问我，怎样才知道什么时候合并两个模块，什么时候拆分一个模块成两个文件？我说，等起不出美观的变量名时，你就知道了。
</t>
<t tx="zoomq.20110329090742.2616">...
(2011-03-29 09:46:32) 沈崴-wileishn: 
以前在网易我经常这么说，比如我常对赖勇浩说，要影响而不是说服别人。
(2011-03-29 09:49:24) 沈崴-wileishn: 
赖勇浩经常让项目组从 c++ 转用 python 的，有时候会有人反弹。我说，其实这时说服是没有用的，有时候对自己也没什么好处，人家凭什么把用了几年的 c++ 换掉来用不熟悉的 python。

这个工作靠平时潜移默化地影响人家，用行动和赖勇浩超凡的个人魅力，就很容易达到，到时候跟不不用说服人家，大家喜洋洋地切换到 python 模式了。哈哈哈。开源也一样。
(2011-03-29 09:50:58) Zoomq: 
"个人魅力" ~ 其实就是自个儿用Py 挣得你用 C++ 搞不到的身家,开跑车,泡美女,状态潇洒，人家当然相信了，就这么简单 ;-)
(2011-03-29 09:52:12) 沈崴-wileishn: 
就是。
...
</t>
<t tx="zoomq.20110329090742.2617">(2011-03-29 09:53:48) 沈崴-wileishn: 
eurasia 目前有 python 和 c 两个版本。python 版每秒处理 1.5w 以上个 http 请求，c 版是 2.5w 个以上，目前都还没有测试出上线，应为测试工具性能达不到暂时。

python 版每秒 1.5w 个请求和 fapws、tornado、gevent 这些不是一个概念。因为 eurasia 每个请求都是长连接，可以在一个请求中处理多个 http 请求，而且每个请求都有细粒度超时控制和入侵检测，所以实际性能要高得多。
(2011-03-29 09:54:57) Zoomq: 
嗯嗯嗯,这个很早就说过,不过,用长连接的情景很少,大家也长年没有用过 S/C 结构来开发广域网应用了,多是不相信,,,咔咔咔
(2011-03-29 09:55:58) 沈崴-wileishn: 
eurasia 现在利用 pypy 技术发展的版本，速度比 纯python 和 c 版本的都要快。我们一般不用在具体项目中，一般项目用 c 版足够了。我只有在咨询服务中，对性能要求非常极端的情况下才会用到最后一个技术栈。
(2011-03-29 09:56:28) Zoomq: 
一直没有确认,你公司的业务,主要还是游戏开发的支持?!
(2011-03-29 09:56:48) 沈崴-wileishn: 
因为浏览器都支持 http 1.1 keep-alive，所以 eurasia 3.1 实际上要快得多。
(2011-03-29 09:57:13) Zoomq: 
不需要特别的客户端JS 支持库的?!
(2011-03-29 09:57:19) 沈崴-wileishn: 
不需要。
(2011-03-29 09:57:30) Zoomq: 
在长连接中进行多次交互?
(2011-03-29 09:57:34) 沈崴-wileishn: 
是的。
(2011-03-29 09:57:40) 沈崴-wileishn: 
一次请求，多个页面。
(2011-03-29 09:57:56) 沈崴-wileishn: 
目前只有 eurasia 3.1 做到的。

(2011-03-29 10:02:11) 沈崴-wileishn: 
再下一代的 eurasia ，因为我们公司已经完全消化了 pypy 的技术，所以已经达到 c 级别的 stackless 协程了。
...
(2011-03-29 10:04:16) 沈崴-wileishn: 
剪掉财务营销之类的，湖州搞核心研发的三个人，加我四个人。杭州分布四到五个人，不过是产品研发。
..
(2011-03-29 10:07:43) 沈崴-wileishn: 
我这里搞核心研发的人，都培训了黑客技术（甚至能做入侵大网站的事情，做到使用各类溢出从传输层入侵，用来改进我们自己产品的安全）、能从 linux kernel 建立整个操作系统，编写图形界面基础、有的能做编译器和数据库。
(2011-03-29 10:08:22) 沈崴-wileishn: 
写个 python web 框架那是第一天就要会搞定的。

(2011-03-29 10:10:53) 沈崴-wileishn: 
应该说，我现在已经不大关心 eurasia 这一级的东西了，我可以抽出来弄更好玩的大杀器了，呵呵
...
(2011-03-29 10:15:30) 沈崴-wileishn: 
我们现在项目里可以用 python 写应用，然后编译成 .so .dll 然后给 c 、php、perl 之类的去用。你知道用了 pypy 的编译期优化技术其实比 c 写的模块跑得还快。
(2011-03-29 10:17:39) 沈崴-wileishn: 
文件系统的话，我们现在的 web 框架，可以把远程的 web 服务器直接映射到本地磁盘，在本地修改远程服务器的程序，然后文件系统通知服务器自动更新已经修改的程序。都不用重启了。
(2011-03-29 10:18:01) 沈崴-wileishn: 
还有加密盘之类的，都要用到这项技术。
...
(2011-03-29 10:19:10) 沈崴-wileishn: 
说到加密，我用 python 实现了一个 rsa 只用了 12 行代码，python 的开发效率真牛叉啊。
(2011-03-29 10:20:24) 沈崴-wileishn: 
我们的数据库引擎技术有这个，我们在数据库引擎层做集群、负载分流、热备，然后可以在引擎上架 mysql、zodb ，就直接支持这些了。不过我们的数据库产品还在研发中。

</t>
<t tx="zoomq.20110329090742.2618">Pythonic 军规:
1、code review 的必须很快,代码排版到能够扫一眼文件就知道有没有 bug 和设计问题
2、当无法起出一个漂亮的变量名时，已经有设计问题了
</t>
<t tx="zoomq.20110402090250.2620">date,tI,tO,tC,tM,tF,tS
110301,0.00,2.50,2.50,4.00,2.50,7.50
110302,3.25,0.75,5.25,7.50,5.75,5.50
110303,0.00,4.50,0.50,5.50,5.00,7.00
110304,3.00,4.50,0.50,4.00,4.50,7.00
110307,0.00,5.00,5.00,2.00,4.00,7.00
110308,0.00,7.50,2.50,3.00,5.00,7.00
110309,0.00,7.00,1.00,6.50,1.00,6.00
110310,0.00,3.00,4.50,4.00,2.50,7.00
110311,1.00,12.5,0.00,3.00,1.50,7.00
110312,1.00,6.50,1.00,5.50,1.50,5.00
110314,0.00,5.75,3.50,2.50,1.75,7.00
110315,5.00,1.50,1.75,7.25,1.00,7.50
110316,3.00,5.00,1.00,5.00,2.00,6.50
110317,0.00,4.50,0.00,7.50,1.50,6.50
110321,1.75,2.25,0.00,10.0,1.00,7.00
110322,0.00,4.75,3.25,5.50,3.00,7.00
110323,0.00,8.50,2.00,2.00,2.00,6.50
110324,2.75,5.25,0.00,6.25,1.50,7.00
110325,0.75,5.00,2.50,6.25,2.00,6.00
110326,2.25,1.00,0.00,7.50,3.75,6.50
110328,2.60,2.75,0.40,6.00,2.00,7.00
110329,4.75,4.50,2.50,3.50,1.00,5.00
110330,0.00,6.75,1.50,4.75,3.50,6.50
110331,0.00,10.0,2.50,3.50,1.00,6.50</t>
<t tx="zoomq.20110407085430.2620">Python的命令行
-------------------------------------------------------------------------------

在所使用的操作系统中,如何开展Python 的交互式运行?
对 Windows 而言,通常是首先开始一个命令提示符窗口
(有时被误称作"DOS窗口",但是人家早已没有真正的"DOS"很久了).
在提示符(可能看起来有点不同,视你所在的默认目录吧)中输入以下命令::

C:\&gt; python


应该立即看到以下的提示
(前提是安装过 ActiveState 的发行版,不过标准的 Pytohn 发行版的提示几乎完全一样)::

    ActivePython 2.6.4.8 (ActiveState Software Inc.) based on
    Python 2.6.4 (r264:75706, Nov 3 2009, 13:23:17) [MSC v.1500 32 bit
    (Intel)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    &gt;&gt;&gt;

这一过程完全类似Linux(或是BSD/Solaris) 系统中打开一个 shell 窗口
(不论是那种shell 环境,csh/ksh/bash 或是其它)
只要安装有 Python, 键入 python 就可以看到交互环境的启动信息.


&gt;&gt;&gt; 是 Python 的命令提示符,表示在等待输入点什么来运行.
在 Wondows机器中 使用 Ctrl-Z 来退出，
在 Linux 系统中使用 Ctrl-D 来退出,键入 "quiet" 不起作用.


Python 命令行是个尝试和体验的好环境.
我们可以通过内建的帮助函式机制来探查所有.仅需要输入 help(),如果没有任何参数，应该类似显示::

    &gt;&gt;&gt; help()

    Welcome to Python 2.6! This is the online help utility.
    If this is your first time using Python, you should definitely check out
    the tutorial on the Internet at http://docs.python.org/tutorial/.
    Enter the name of any module, keyword, or topic to get help on writing

    Python programs and using Python modules. To quit this help utility and
    return to the interpreter, just type "quit".
    To get a list of available modules, keywords, or topics, type "modules",
    "keywords", or "topics". Each module also comes with a one-line summary
    of what it does; to list the modules whose summaries contain a given word
    such as "spam", type "modules spam".

    help&gt;


正如内置帮助显示的, 在官方网站的教程资料是可切实认识和使用Python的开始.
本章由一些不同以往的路径来展示Python.
首先向读者展示数据类型，接着是运算和语句，
我认为面向对象的基础语言性质很重要,因为用 Python 来构建应用,总会遇到相同的情景,能使用内嵌的数据对象很便捷.

多年来，我观察到的材料好象在忽视或淡化Python面向对象的根本性质，
常常是一带而过,比如说:“哦，对了...“或是”也类似这样，但这里不必担心在...“
我们广博為优先理解这点,这种对内部机制的足够理解,有助于快速理解系统如何可以正常工作.
以及为什么又不工作了.
如果你是名Python 新人,那么通读本章,以及在线教程很有用.

</t>
<t tx="zoomq.20110407085430.2621">命令行参数和环境
-------------------------------------------------------------------------------

Python的联机帮助页（手册页）内容非常丰富，但不幸的如果你只有Windows 环境则很难体会到其中的方便.
在Linux 系统中,只需在shell 提示符中键入 ``man python``
（实际上，如果Python安装正确，就应该能在所有 Unix兼容系统中工作）

在 Windows 你可以通过键入命令来获得帮助::

    C:\&gt; python -h
    若要重来输入应该类似:
    用法: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
    选项​​和参数（和相应的环境变量）:
    -B : 输入时不写 .py[co] 文件; 同 PYTHONDONTWRITEBYTECODE=x
    -c cmd : 将字串作为教程处理(关闭参数列表处理)
    -d : 输出处理器调试信息; 同 PYTHONDEBUG=x
    -E : 忽略 PYTHON* 开头的环境变量 (同 PYTHONPATH)
    -h : 打印当前帮助信息并退出 (同 --help)
    -i : 脚本运行后就地进入交互环境，保留现场环境以便调试; 同 PYTHONINSPECT=x
    -m mod : 将一库当成脚本运行(关闭参数列表处理)
    -O : 优化生成的字节码; 同 PYTHONOPTIMIZE=x
    -OO : -O 参数可追加的清除文档字串操作
    -Q 参数 :  选项分离: -Qold (默认), -Qwarn, -Qwarnall, -Qnew
    -s : 不将用户目录追加到 to sys.path; 同 PYTHONNOUSERSITE
    -S : 初始化时不包含 'import site'
    -t : 缩进有误时发送警告 (-tt: 发送错误)
    -u : 不缓冲二进制输出和错误; 同 PYTHONUNBUFFERED=x
        参考 man 页面有关 '-u' 的内部缓冲说明
    -v : 详细 (跟踪导入语句); 同 PYTHONVERBOSE=x
        支持多次叠加以增加细节
    -V : 打印当前Python 版本并退出 (同 --version)
    -W 参数 : 警告控制,参数作为活动 :message:category:module:lineno
    -x : 忽略源码第一行,允许用户从非 Uninx 兼容系统中略过 #!cmd 聲明
    -3 : 提醒有关Python 3.x 的兼容问题, 2to3 转换脚本无法完成的修复,方案可以从:
        file : 文件读入
        -  : 从标准输入读入 (默认值,若从tty 就是交互模式 )
        arg ...: 以系统参数 sys.argv[1:] 传入


    其他环境变量：

    PYTHONSTARTUP : 文件执行交互式启动（无默认值）
    的PYTHONPATH：';'分隔的目录列表前缀的
            默认模块搜索路径。其结果存储在sys.path
    PYTHONHOME：备用&lt;前缀&gt;目录（或&lt;前缀&gt;; &lt;exec_prefix&gt;）。
            默认的模块搜索路径基于 &lt;前缀&gt;\lib
    PYTHONCASEOK：忽略'导入'语句（仅Windows环境视窗）
    PYTHONIOENCODING：编码[：错误]用于标准输入/标准输出/标准错误

你可能没有太多机会需要选择这些开关参数，但偶尔他们派上用场（特别是使用- i，- tt，和- v开关）。
环境变量，特别是PYTHONHOME，是重要的，
应根据初始化的安装设定来明确Python的分布与您的应用配合.


.. topic:: 译注

    在Windows 中,常常必须手工确认 电脑-&gt;属性-&gt;高级-&gt;系统目录 中 path 列表中是否包含本地 Python 的安装路径;否则无法在 cmd 中正常调用得到 Python.




</t>
<t tx="zoomq.20110407085430.2622">Python中的对象
-------------------------------------------------------------------------------

一般来说，在Python中万物皆对象，包括数据的变量。
一个赋值相当于创建一个新的对象，因此本质上是函数的定义。
如果你不熟悉面向对象的概念，不要太担心
（详细参考“面向对象编程概述”一节）。
期望随着我们的叙述，可以不断清晰起来.
现在，我们只是人们可以在Python 中期待表明什么类型的对象可以找到，
我们先展示一下，以便日后使用。

表3.1，“对象类型“列出了Python 中各种常见对象类型.
Type类的可以随时通过内置的 type() 来查询到,如果涉及类型不匹配将有错误抛出.


.. list-table:: 表3.1. 对象类型
   :widths: 10 10 40
   :header-rows: 1

   * - 对象类型
     - 类型的类名
     - 描述
   * - Character
     - chr
     - 单字节字符,在字串中使用
   * - Integer
     - int
     - 32位整数
   * - Float
     - float
     - 双精度(64位)浮点数
   * - Long integer
     - long
     - 任意大的整数
   * - Complex
     - complex
     - 复数
   * - Character string
     - str
     - 有序（数组）字符集
   * - Dictionary
     - dict
     - 键/值对字典
   * - Tuple 
     - tuple
     - 不可变列表
   * - Function
     - function
     - Python函式对象
   * - Object instance
     - instance
     - 类实例对象
   * - Object method
     - instance method
     - 对象方法
   * - Class object
     - instance method
     - 类对象
   * - File
     - file
     - 磁盘文件对象



本书结束前我们也不会涉及以上所有对象:
我们从数字数据开始,逐步运用列表,元组,字典.



</t>
<t tx="zoomq.20110407085430.2623">Python的数据类型
-------------------------------------------------------------------------------

如果你已做过任何类似Pascal或C的语言编程，你可能熟悉变量的概念~本质上是一个二进制值，指向特定的内存位置中保存的信息。
但是，在Python是完全不同的,所以也就变得有趣了。
Python也提供一般的数字数据类型，如整数，浮点数，等等。
它也支持复杂的数学类型，它封装了一个复数的实部和虚部。
关键Python是如何实现变量.


@others








</t>
<t tx="zoomq.20110407085430.2624">表达式
-------------------------------------------------------------------------------

本书中，我们将使用一种数学表达式.
也就是说，表达式是种良构的由变量或逻辑和数学符号组成的不包含等号（赋值）的序列.
而声明（短期内）代表一项任务或是其他一些行动，也可能表达式.


表达式完成各种值运算,如加/减/比较等等. 表达式可以很简单，如::

    a+b

或是包含其它表达式,如::

    ((a + b) * c) ** z


括号是用来标识运算的顺序.在前例中，乘法运算符（*）比加法（+）有较高的优先级，
指数（**）则比乘法有更高的优先级，如果没有括号表达式会是这样理解::

    a + b * c**z

如果我们用括号将隐含的优先级表示出来::

    a + (b * (c**z))


这当然不是表达式的原意.
表达式还可能包含其它算子.
例如，假设有一个函数 epow() 返回 E 的高阶指数或其它表达式的结果.
表达式就可以包含此函数的调用来创建新值::

    n + epow(x - (2 * y))

这相当于在标准数学中写作:    n + e \ :sup:`(x − 2y)`







</t>
<t tx="zoomq.20110407085430.2625">运算符
-------------------------------------------------------------------------------

我们已经看过了Python支持的数据类型以及表达式，
现在，我们来看看可以用运算符来对他们做什么事儿.
Python提供一套算术/逻辑和比较运算符.
也包括位运算/成员测试/身份测试，并提供各种赋值操作符.

@others
</t>
<t tx="zoomq.20110407085430.2626">语句
-------------------------------------------------------------------------------


典型的程序是由语句，注释，和空白（空白行，空格，制表符等）组成.
语句是由关键字和可选的表达式组成一个确切的动作.
一个语句可能是一个简单的任务::

    &gt;&gt;&gt; some_var = 5


或者，也可以是控制语句的集合，比如一个if-else结构::

    &gt;&gt;&gt; if some_var &lt; 10:
    ...     print "Yes"
    ...     print "Indeed"
    ... else:
    ...     print "Sorry"
    ...     print "Nope"
    ...
    Yes
    Indeed


Python也对自个儿不要什么很有有兴趣.
比如,有其他开发语言经验的人可能注意到Python没有“switch“或“case“的语句.
Python中的If-elif-else结构通常是足以满足同类需求.
还有C语言中的数据结构,Python本身的字典和列表类型也足以模拟为一个结构来用,但通常没必要这么来用.
Python也没有“do”，比如说:``do-until``或是``do-while``.
综上,Python 的语句不会按照一个C程序员所期望的那样来工作(而是以更加简洁明了的方式来完成工作).


@others



</t>
<t tx="zoomq.20110407085430.2627">复合语句
-------------------------------------------------------------------------------

复合语句是一组由控制语言关联的语句构成.
我们将探讨 if,while,for 和 try 语句,将忽略 with 语句,并把def 和 class 语句保留到下一章节介绍.


.. list-table:: 表3.14，复合语句
   :widths: 10 40
   :header-rows: 1

   * - 关键字 
     - 描述
   * - if
     - 可选或终结条件测试
   * - while
     - 初始条件为 True 执行循环
   * - for
     - 迭代一个可迭代对象（例如，列表，字符串，或元组）元素
   * - try
     - 对一组语句声明异常处理
   * - with
     - 启用上下文管理
   * - def
     - 声明一个用户定义的函数或方法
   * - class
     - 声明一个用户定义的类


@others





</t>
<t tx="zoomq.20110407085430.2628">程序组织
-------------------------------------------------------------------------------

到目前为止，我们一直在Python的命令提示符里做事.
现在，我们来看如何通过函数，类和方法创建程序模块.


@others

</t>
<t tx="zoomq.20110407085430.2629">模块导入
-------------------------------------------------------------------------------

Python的模块通过导入语句,即可使用其他模块的功能.
当一个模块导入Python会首先检查是否已经导入过,
若有,将会指当前的命名空间中同名对象,
否则,会加载指定的模块，扫描它，并把所有名称添加到当前的命名空间.
请注意，“当前的命名空间” 可能指本地空间中的函数，类或方法，
或者,也可能是全局命名空间中的一个模块.

在Python模块中的语句,函数或方法在没有加载前不会运行.
这意味着模块的导入语句，赋值语句，函式和类定义语句,加载时会执行.
但是函式或是方法内部的语句只有在调用时,才会执行,
当然,函式和类定义语句执行时,相应对象也将创建.

@others

</t>
<t tx="zoomq.20110407085430.2630">moc加载并运行Python 程序
-------------------------------------------------------------------------------

下面的例子是一个完整的Python程序,
其中不包含函数或类定义，也就是通常所说的“脚本”.
它将产生一个包含随机数据的PGM格式的图像文件.
结果看起来像旧式的电视调到一个空频道时满屏“雪花”的样子，
这里的要点是来看一下,真实小Python程序的样子.
任何图像浏览器能够处理PGM文件并加载和显示出图像.
(ImageJ，一个免费的工具，从http://rsbweb.nih.gov/ij/，
活儿相当不错，对于这一点，可参阅，http://netpbm.sourceforge.net
获得更多的有关PGM图像格式的信息）

运行这一程序,不用启动Python 交互环境,
只顾需要在命令行中在脚本文件名前加上 python::

    C:\samples\&gt; python pgmrand.py

在Linux 中类似::

    /home/jmh/samples/% python pgmrand.py

在你的系统中,具体提示可能有所不同,
(除非你也将脚本保存在 "samples" 目录)

若你在使用Linux,可能需要在脚本第一行加入以下声明::

    #! /usr/bin/python

在其它系统,你可能要修订路径以指向Python 真实的安装目录,
比如说: ``/usr/local/bin/python``

这儿是源代码::

    """ Generates an 8 bpp "image" of random pixel values.
    The sequence of operations used to create the PGM output file is as follows:
        1. Create the PGM header, consisting of:
            ID string (P5)
            Image width
            Image height
            Image data size (in bits/pixel)
        2. Generate height x width bytes of random values
        3. Write the header and data to an output file
    """
    import random as rnd # use import alias for convenience
    rnd.seed()
    # seed the random number generator

    # image parameters are hardcoded in this example
    width = 256
    height = 256
    pxsize = 255    # specify an 8 bpp image

    # create the PGM header
    hdrstr = "P5\n%d\n%d\n%d\n" % (width, height, pxsize)
    # create a list of random values from 0 to 255
    pixels = []
    for i in range(0,width):
        for j in range(0,height):
            # generate random values of powers of 2
            pixval = 2**rnd.randint(0,8)
            # some values will be 256, so fix them
            if pixval &gt; pxsize:
                pixval = pxsize
            pixels.append(pixval)

    # convert array to character values
    outpix = "".join(map(chr,pixels))   #(1)
    # append the "image" to the header
    outstr = hdrstr + outpix
    # and write it out to the disk
    FILE = open("pgmtest.pgm","w")
    FILE.write(outstr)
    FILE.close()



(1) 字串的 join() 方法和 map() 函式在此用以创建输出字串并写入图片文件


这是个非常值得回味的程序.
其中唯一"棘手"的部分就是使用 join() 和 map()方法来输出字串.
因为Python 没有天然的 byte类型,只有一个 chr 类型来处理字串.
所以,想要使用byte 数组,就是自制一个字串扫描实现,针对每个字符进行转换,
并串接到一个空字串中("".join(map(chr,pixels)) 语句就是完成这一转换).
注意,所有可以输出的参数是硬编码在脚本中的.
</t>
<t tx="zoomq.20110407085430.2631">基础输入输出
-------------------------------------------------------------------------------

程序必须使用一些手段来输入数据和输出结果以便完成通常的任务.
Python提供了几种方法来实现这两个目标:
使用控制台，命令行和文件对象.
稍后，我们将研究类似串行端口，USB，网络插座，和数据采集等硬件.
但现在让我们来看看开箱状态下的Python可以做什么.


@others



</t>
<t tx="zoomq.20110407085430.2632">提示和技巧
-------------------------------------------------------------------------------


这里有个可能对你有用的意见收集.

模块全局变量
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在模块文件头部先初始化一些全局变量,这通常是一个好主意.
检查一个全局变量是否不存在将导致一个异常，
使用前先确保存在,将避免后续的一些恶化.



潜在缺陷
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

将模块被导入时,其中的内部语句除了 def 语句其它并不被立即执行,
bug 最可能潜伏其中,做到被真正调用,才显化.
这时 try 语句是强大的盟友,但它并不是包治百病.
良好的单元测试才是检测和消除这种缺陷的关键. 


延期导入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


有时候，你可能会遇到代码原作者试图用延期导入的方式解决循环导入问题,
有问题的模块导入被放置在函式或是方法中,而不是在模块文件的顶部.
虽然这在Python语法中是允许的，但被认为是很挫的形式，
遭遇到它的明确表现就是有人坐在键盘前对这种脑残的设计骂个不停.
然而，当处理遗留代码（或只是写得不好的代码）时,很可能无法避免使用这一招.
强烈建议只有当你真正必须用并进行彻底测试后才谨慎使用.


字典作为函数参数
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

虽然Python允许任何数据对象可用作函数或方法的参数，
但除非你有足以令人信服的理由,否则不要使用字典对象来作为参数使用.
如果将字典对象用作参数，就必须详细记述含义,尽力避免结构变动,
即便这样,依然会因为可动态改变结构以及各种字典对象的共享,导致无法理解和噩梦般调试.
它甚至可视为是种无意被理解的混淆形式.
基于同样的理由也不建议把列表作为参数使用.


函式返回值
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

元组是一个方便的形式,可以从函数返回多个值.
例如，可用2元组的形式,一次性返回状态代码和数据值对.
使用时,通过审查状态码确认函数是否成功，如果是 OK,余下就是得到的数据值.


模块作为对象
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在Python 中模块当然也是个对象(记得嘛,在Python 世界一切都是对象),
但是在C或是C++ 倾向将模块视作源代码块,
除了比较整洁的组织一些数据封装之外,并没有其它作用.
下面是 wxPython GUI的一个模块(进一步的事件ID含义将在以后章节讨论)::

    # ResourceIDs.py
    import wx
    # File
    idFileSave          = wx.NewId()
    idFileSaveAs        = wx.NewId()
    idFileNew           = wx.NewId()
    idFileOpen          = wx.NewId()
    idFileOpenGroup     = wx.NewId()
    idFileClose         = wx.NewId()
    idFileCloseAll      = wx.NewId()
    idFilePrint         = wx.NewId()
    idFilePrintPreview  = wx.NewId()
    idFilePrintSetup    = wx.NewId()



wxPython包含有 NewID() 的函数，用以在每次调用时自动分配新的ID号.
当ResourceIDs完成导入时,相关语句和变量就完成对应数据对象的分配.
使用其中输入的一个模块如下(也可使用一个别名)::

    import ResourceIDs as rID
    event_id = rID.idFileSave


这在大项目中很方便，尤其是那些GUI框架需要大量的事件ID时.
从任意其它模块也可以安心导入纯数据模块,不会引发循环导入，
因为其本身并没有导入其他任何模块(也许除了系统级模块).
如果纯数据模块中的属性名称是全程唯一的(每个名称使用一个特殊的前缀),那也可以被安全地用通配符风格进行导入.


使用文档化注释
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

曾几何时，有位物理学教授告诉我：
“如果明天你失忆了,那么文档就是你实验室中一切意义的所在.“
可以肯定这是明智的建议.
但很多人就是不愿意花费必要的时间在代码中进行注释.
这是愚蠢的，因为没有人可以预料什么东西重要,或是半年后什么东西将产生作用
(还有人认为至多两个月一切都将改变)
而且,注释应该包含作者对软件的感觉,以帮助后来者有效理解和修订代码.


代码风格
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

“`PEP-8`_”文档(参阅 http://www.python.org）包含了一些
编码风格的指导方针.
你可以不同意这一切，但你至少应该查阅并熟悉它.
那里包含了太多很好的经验.
任何情况下，你都应该为您的代码保持某种类型的一贯风格，
没有任何理由比维护代码的可读性，会令事情变得容易,
特别是你必须重温旧代码时.

</t>
<t tx="zoomq.20110411104732.5352">
林宗良 &lt;funlamzliang@gmail.com&gt;
发件人当地时间	发送时间 11:04 (GMT+08:00)。发送地当前时间：下午2:34。 ✆
    止本日11时，三个团队上交名单，其余17时前附上。ps：昨晚网络断几次；

蟒营zhbit11.1期作品:

项目名称：我知（Iknow）；
https://bitbucket.org/ZoomQuiet/pycamp.ikonw
http://code.google.com/p/kcpycamp/wiki/PyiKnow
    lvchi xia &lt;xia.callofduty@gmail.com&gt;
    发件人当地时间	发送时间 12:28 (GMT+08:00)。发送地当前时间：下午2:28。 ✆
    #bitbucket账号：xialvchi 
    组长：  夏吕池；xia.callofduty@gmail.com
    组员：1.林宗良：funlamzliang@gmail.com
           2.林良飘：403416987.lin@Gmail.com
           3.胡映：jackie.hu1990@gmail.com
项目名称：365 schoollife helper
https://bitbucket.org/ZoomQuiet/pycamp.365helper
http://code.google.com/p/kcpycamp/wiki/SchoolifeHelper
    组长：高骏腾 gjt314@gmail.com
    #    +bitbucket帐号：spawnner
    组员：1.盛贵镔,邮箱：shengguibin@gmail.com
           2.林妙璇，邮箱：lmiaoxuan@gmail.com
           3.伍明慧，邮箱：taiduwu@gmail.com
    
项目名称：Fly3g(飞行三国游戏)
https://bitbucket.org/ZoomQuiet/pycamp.fly3g
http://code.google.com/p/kcpycamp/wiki/Fly3Guo
    #我们的bitbucket 帐号：acreater
    组长：   于晓渊：acreaterjy@gmail.com
    组员：    1.梁展昭：p86021702@gmail.com
               2.林擎宇：shylqy@gmail.com
               3.王旭晋：biliburu@gmail.com

项目名称：一键更新 
英文名：openew
https://bitbucket.org/ZoomQuiet/pycamp.openew
http://code.google.com/p/kcpycamp/wiki/OpeNew
    组长：卓秋生    邮箱：showmezqs@gmail.com
    组员：杨金峰    邮箱：kid154378643@gmail.com
           陈培勇    邮箱：yonggehao1@gmail.com
           陆子健    邮箱：woshixiaom@gmail.com
    
项目名称：谁动了我电脑    do My PC
https://bitbucket.org/ZoomQuiet/pycamp.domypc
http://code.google.com/p/kcpycamp/wiki/DoMyPc
    组长：  陈锦霖   邮箱 lv101201@gmail.com
    组员：1.李斯特 邮箱listerliszt@gmail.com
           2.林海雄 邮箱hxiong1020@gmail.com
    
项目名称：《File Home》
https://bitbucket.org/ZoomQuiet/pycamp.filehome
http://code.google.com/p/kcpycamp/wiki/FileHome
    组长： 肖力玮:  Xliwei18@gmail.com
        组员1：张文杰：chilhood1@gmail.com
        组员2：廖国彬：binVjun@gmail.com
        组员3：孔健成：jiancheng.key@gmail.com
        组员4：刘康波：wjslkb@gmail.com
            
蟒营zhbit11.1期作品:

    can.go@163.com&gt;
    #日期	2011年4月11日 下午11:05
    项目名称：桌面工具集 Desktop Tools Set；
https://bitbucket.org/ZoomQuiet/pycamp.DesktopToolSet
http://code.google.com/p/kcpycamp/wiki/DesktopToolSet

    #bitbucket 帐号：runtimeexception ljstring
    组长：李秉钧：ljstring@gmail.com；
    组员：许俊彬：pppeerxu@gmail.com；
          吕旭林：lvxulin@gmail.com；
          雷宇：leiyuss209@gmail.com；
          廖斌：guyehanchou@gmail.com；
    
</t>
<t tx="zoomq.20110411194006.3964">xia.callofduty@gmail.com
funlamzliang@gmail.com
403416987.lin@Gmail.com
jackie.hu1990@gmail.com
showmezqs@gmail.com
kid154378643@gmail.com
yonggehao1@gmail.com
woshixiaom@gmail.com
lv101201@gmail.com
listerliszt@gmail.com
hxiong1020@gmail.com
Xliwei18@gmail.com
chilhood1@gmail.com
binVjun@gmail.com
jiancheng.key@gmail.com
wjslkb@gmail.com
gjt314@gmail.com
shengguibin@gmail.com
lmiaoxuan@gmail.com
taiduwu@gmail.com
acreaterjy@gmail.com
p86021702@gmail.com
shylqy@gmail.com
biliburu@gmail.com


</t>
<t tx="zoomq.20110412144015.3968">Hg 教程:
    +-- 克隆
    +-- 检入
    +-- 上推
    +-- 本地協同
    +-- 远程協同
    </t>
<t tx="zoomq.20110414091122.2636">为加强开源卫士BBS 的服务，请各个版主，及时回复消息，说明：
＋ 常用邮件
＋ 手机
Zoom.Quiet

同事版主:
    zhaofang (UID: 309):
        zhaofang1@kingsoft.com

版主们:
    masefee (UID: 34):
        http://blog.csdn.net/masefee
        13438938123 masefee@163.com
        QQ:34610747
        
    lanlamer (UID: 142):
        http://www.xanyong.com/ 湘勇网络医生
        开发者版主：lanlamer 常用邮箱：858804752@qq.com
        手机：13951889256
        
    zapline (UID: 84):
        278998871@qq.com
        15575983223
        http://hi.baidu.com/zapline

    李曜  (UID: 403):
        http://www.yvlu.tk/     雨露实验室
        liyao@yvlu.tk
        
    beston  (UID: 173):
        beston@yeah.net
        13407318696
        
    wjkhui  (UID: 404):
        wjk790127@163.com
    
        

    
</t>
<t tx="zoomq.20110419090531.8816">数字数据对象
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python中,当一个变量被赋值，实际上是创建了一个对象,值分配给这一对象（它成为对象的属性），同时“绑定“了一个名字。
对象通常有一个特殊的构造方法,来处理创建（实例化）一个新的对象在内存中初始化的细节.
对应的，一个对象可能有一个析构方法，当程序运行结束时将对象从从内存中删除。
在Python中，一个对象的清除，通常直接由过程自动调用垃圾收集来完成。

这有个Python 创建数据对象的例子::

    &gt;&gt;&gt; some_var = 5

首先生成int类属性值为5的新实例化对象，然后用some_var绑定为名字（一会儿我们将看名字绑定是如何工作的）.
人们还可以键入以下命令，得到相同的结果::

    &gt;&gt;&gt; some_var = int(5)

本例中，我们通过实例化的（整数）int类对象明确地告诉Python 调用该对象的类型，来处理新对象的构造.
重要的是要注意，这不是在C或C++中的一个“转换“，它是实例化对象，它封装一个int整型值5.

种形式可能看起来有点怪异，一但习惯应用起来相当快.
另外，大多数时间你可以放心地忽略一个事实，即变量实际上都是对象，
只把它们视作你在C或C++中习惯的变量::

    &gt;&gt;&gt; var_one = 5
    &gt;&gt;&gt; var_two = 10
    &gt;&gt;&gt; var_one + var_two
    15


你可以随时查询一个对象的类型::

    &gt;&gt;&gt; type(some_var)
    &lt;type 'int'&gt;


虽然说过 int() 不是 cast,但是可以行使类似的职能,将一个数据对象转换成另外类型的::

    &gt;&gt;&gt; float_var = 5.5
    &gt;&gt;&gt; int_var = int(float_var)
    &gt;&gt;&gt; print int_var
    5


请注意，float_var小数部分作为转换后消失了。
八进制和十六进制整数表示法也支持，同C中的效果::

    八进制整数   使用前导0 如 0157.
    十六进制整数   使用前导0x 如 in 0x3FE.


八进制和十六进制值没有自己的类型类。这是因为当在这两种格式写入值分配给一个Python变量，它会转换为对应的整数相当于::

    &gt;&gt;&gt; foo_hex = 0x2A7
    &gt;&gt;&gt; print foo_hex
    679


等同于::

    &gt;&gt;&gt; foo_hex = int("2A7",16)
    &gt;&gt;&gt; print foo_hex
    679


那么究竟什么是“数据对象”? 在Python中，变量名是由命名空间掌管的,
而命名空间分成几种层次,从函式所在的局部命名空间到Py解释器执行所在的全局命名空间.
当前,我们不用深究,仅使用本地命名空间的概念.

变量名没有任何价值，除了字符串作为其间名称.
他们更像是句柄或标签，我们可以将任何东西绑定到名称上,即对象.

图表3.1中，“数值数据对象”显示了这一过程.
通常对象有内部函式，封装了对数据进行的操作.
Python的数据对象也不例外.
如果我们创建了一个整数对象,就可以使用 help() 来查询Py 可以进行哪些操作::

    &gt;&gt;&gt; int_var = 5
    &gt;&gt;&gt; help(5)


int整型数对象的帮助内容 ::

    class int(object)
    | int(x[, base]) -&gt; integer
    |
    | Convert a string or number to an integer, if possible. A floating point
    | argument will be truncated towards zero (this does not include a string
    | representation of a floating point number!) When converting a string, use
    | the optional base. It is an error to supply a base when converting a
    | non-string. If base is zero, the proper base is guessed based on the
    | string content. If the argument is outside the integer range a
    | long object will be returned instead.
    |
    | Methods defined here:
    |
    | __abs__(...)
    |
    x.__abs__() &lt;==&gt; abs(x)
    |
    | __add__(...)
    |
    x.__add__(y) &lt;==&gt; x+y
    |
    | __and__(...)
    |
    x.__and__(y) &lt;==&gt; x&amp;y
    |
    | __cmp__(...)
    |
    x.__cmp__(y) &lt;==&gt; cmp(x,y)
    |
    | __coerce__(...)
    |
    x.__coerce__(y) &lt;==&gt; coerce(x, y)
    |
    | __div__(...)
    |
    x.__div__(y) &lt;==&gt; x/y
    |
    | __divmod__(...)
    |
    x.__divmod__(y) &lt;==&gt; divmod(x, y)
    |
    | __float__(...)
    |
    x.__float__() &lt;==&gt; float(x)
    |
    | __floordiv__(...)
    |
    x.__floordiv__(y) &lt;==&gt; x//y
    |
    | __format__(...)
    |
    | __getattribute__(...)
    |
    x.__getattribute__('name') &lt;==&gt; x.name
    |
    | __getnewargs__(...)
    |
    -- More --



还有更多的内部方法，如果有兴致的话你可以仔细阅读他们
（只需按 空格键 来读下一屏，或 q 返回到提示符）
但主要的一点是，在Python中，数据对象“知道”如何用内置的特定类方法处理内部数据.
换句话说，Python解释器负责转换处理这样的语句的详细信息::

    5+5


变成等价的中间代码::

    int(5).__add__(int(5))

然后执行之.


.. image:: ../_static/figs/rwip_0301.pdf.png

插图 3.1. 数字数据类型

::

    some_var = 5
    创建类型为int 值为 '5'的对象,
    并将名字 "some_var" 绑定到对象

    nuther_var = some_var
    新名字"nuther_var" 绑定到已有整数对象
    
    some_vat = 6
    新创建整数值为 '6' 的对象,
    并绑定名字 'some_var'

    

要适应Python中变量皆对象这一事实的确得花点儿时间.
但这却正是Python强大特性之一，而且因为你可以选择性的忽略这一特性，所以，
在一切皆对象的Python中，依然可以创建出过程语言风格的程序.



</t>
<t tx="zoomq.20110419090531.8817">序列对象
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python提供三种有序集合的数据对象类型: 列表（数组）字符串和元组（列表样对象）.
这些也被称为``序列对象``.
“序列“的每一部分事实上都可以包含零个或由其他数据的组成的一个有序的对象序列.
除了字符串其它序列对象都允许其成员要素可以是任何有效的Python对象.
序列对象都有对应方法来操纵它们的数据，有些方法能作用与所有序列对象，有些针对的特定类型.
表3.2“序列对象“列出了三个序列类型和一些属性。


.. list-table:: 表3.2. 序列对象
   :widths: 10 10 40
   :header-rows: 1

   * - 对象类型
     - 可变?
     - 定界符
   * - 列表
     - 是
     - []
   * - 字符串
     - 非
     - '' 或 ""
   * - 元组
     - 非
     - ()


Python的序列对象分可变或不变.
例如，列表对象是可变的，因为其数据可以被修改.
另一方面字符串，是不能改变的.
一个字符串是无法取代，删除或直接插入字符的.
所以一个字符串对象是不可变的字符值的集合，被视为由字节数据组成的只读数组对象.


.. note:: (~_~)

    事实上,这种说法仅适用于8位的UTF- 8字符编码，其他字符
    集（如Unicode）的字串可能需要为每个字节的不只是单一个字符.不过本书中，我们将只使用了UTF- 8字符编码
    （见第12章，读，写ASCII和UTF-8等更多编码标准的数据文件）


为了使改变一个字符串，就必须创建合并了变化的新字符串.
原始字符串将对象保持不变，即使是给新的字符串对象重复使用相同的变量名
（原始字符串对象的"取消绑定",往往通过垃圾收集过程自动蒸发.但这是一个底层细节我们并不需要担心）



@others












</t>
<t tx="zoomq.20110419090531.8818">字典
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的字典是独立的数据对象.
而不是一个数据元素的有序集，字典中数据集是种无序的键/值对形式.
也就是说，每个数据元素有一个相关的关键唯一标识它.
这是Python中仅有的映射式数据对象.

同其他Python数据对象，字典可以作为参数传递给一个函数或作为返回值.
也可以成为元组或列表数据元素，其值可以是任何有效的Python对象类型.
不过,字典的键值必须是整数，字符串和元组，换句话说，键必须是不可变的对象.


我们可以通过初始化键值对来完成字典的创建::
    &gt;&gt;&gt; dobj = {0:"zero", 1:"one", "food":"eat", "spam":42}
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'one', 'food': 'eat', 'spam': 42}

以往要获得特定值我们可以索引,但是,实在不成了::

    &gt;&gt;&gt; dobj[0]
    'zero'
    &gt;&gt;&gt; dobj[1]
    'one'


如果对字典进行尝试,Python 会抱怨::

    &gt;&gt;&gt; dobj[2]
    Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    KeyError: 2


但只要给的是有效的键，我们会得到一个有效的值::

    &gt;&gt;&gt; dobj["spam"]
    42


字典有一整套方法来操纵纳入其中的数据.
表3.3，“字典方式“ 包含了可用的方法,接下去我们会考察其中几个.



.. list-table:: 表 3.3. 字典方式
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - clear()
     - 从字典中清除所有条目
   * - copy()
     - 字典的"浅"复制
   * - get()
     - 返回与键匹配的值,或是没有匹配时返回默认值
   * - has_key()
     - 查询字典中是否存在指定的键,若有返回 ``True``,反之返回``False``
   * - items()
     - 以2元组的形式反馈字典中所有键/值对
   * - iteritems()
     - 以迭代形式返回字典中所有键/值对
   * - iterkeys()
     - 以迭代形式返回字典中所有键
   * - itervalues()
     - 以迭代形式返回字典中所有值
   * - keys()
     - 以列表形式返回字典中所有键
   * - pop()
     - 通过键弹出一个特定条目，并从词典中删除之
   * - popitem()
     - 通过键/值对弹出一个条目，并从词典中删除之
   * - setdefault()
     - 配置 当 get() 匹配失败时返回的默认值
   * - update()
     - 从另一字典更新键匹配的值
   * - values()
     - 以列表形式返回字典中所有值



注意!字典没有列表中的 appende() 方法. 要添加一个新条目到字典中,只需简单分配一个值到一个新的键上::

    &gt;&gt;&gt; dobj[99] = "agent"
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'one', 99: 'agent', 'food': 'eat', 'spam': 42}


请注意，新键和对应的数据将在字典中中插入到一个任意位置.
字典是不是一个序列对象，数据访问必须通过键查询，
所以它确实不必关注键/值对具体存放的位置.


这种技术还可以用于修改现有的键的值::

    &gt;&gt;&gt; dobj[1] = "the big one"
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'the big one', 99: 'agent', 'food': 'eat', 'spam': 42}

安全的值获取方式,可以用 get() 方法::

    &gt;&gt;&gt; dobj.get(99)
    'agent'

If we attempt to get a value for a key that doesn’t exist, get() will by default return the
special value of None. At the Python command line, this doesn’t show anything
如果我们试图获取一个不存在的键值，get()方法默认会返回特殊的 None.
在Python的命令行环境中将没有显示::

    &gt;&gt;&gt; dobj.get(256)

我们也可以选择一个默认值,来替代 原先的 None::

    &gt;&gt;&gt; dobj.get(256,"Nope")
    'Nope'


字典常用以保存全局数据(如参数),
并能在外部没有提供可用值时,返回一个默认值以便程序使用预定义的参数值.


可能有时我们需要一个字典中所有内容的列表.
itrmes() 方法就是用以返回字典的键/值对2元组对象的::

    &gt;&gt;&gt; dobj.items()
    [(0, 'zero'), (1, 'the big one'), (99, 'agent'), ('food', 'eat'), ('spam', 42)]

如果我们要所有键的列表,用 keys()::

    &gt;&gt;&gt; dobj.keys()
    [0, 1, 99, 'food', 'spam']

最后,如果我们只对所有值有兴趣,可以用 values() ::

    &gt;&gt;&gt; dobj.values()
    ['zero', 'the big one', 'agent', 'eat', 42]


以上足以使用字典了.
我们还会看到其他一些有趣的方法来使用字典和其它的Python数据类型.
在此期间，随时在命令行交互环境中尝试各种新家伙,是学习Python 的最好方式之一!





</t>
<t tx="zoomq.20110420091053.2640">在 2011年4月20日 上午10:38，陈德志 &lt;chendz1979@gmail.com&gt; 写道：
&gt; 自己个人电脑上都必装的是CVSNT，自己是用CVS的，其实最主要的功能是自己写代码的时候能够查查change，其次就是rollback。如果代码写错了，还可以rollback。自己写小程序，都用自己的cvs。用了很多年，觉得挺有效。
...
&gt; 其实wiki挺好的，发现很多人还是不会用wiki，wiki有强大的版本管理呀，可就是。。很多人还是喜欢用word文档，结果就是word的版本管理是不强的，结果是还是用svn。
...于是，Knowledge系统又诞生了... 于是，新的系统又诞生了，那就是论坛...在web上写个漂亮的文档...用Googe Doc...嗯，用maillist？这年头还用maillist？... 听说sharepoint很好很强大...word文档还是很多
...
&gt; 那意味着还是一大堆文档，一大堆文档。

咔咔咔,俺长期忽悠维基哪,特别是moinmoin 系统,从上海推广到北京,再到珠海,早已发现这个问题了:
    - 在维基面前,大家的表现很极端,同样的不培训,有的一用就疯狂的爱上了,有的一看就疯狂的恨上了!没有中间的!
    - 俺想了很久,也观察了很久,发现,根本原因就在-- 对于"漂亮的文档" 的理解本质不同:
        + 接受了D版 Word 文化的,认为文档就得有眉头/页底/索引/图表/文字特效,否则不漂亮!
        + 真正作事儿的,从man 中学会了,文档是拿来用的,一切和内容无关的东西,都TMD是浪费老子时间!
        + 所以,市场的无法接受要进行"源代码"编写的维基,实干的爱死了有"源代码"自动管理和发布的维基!
    - 所以呢,俺后来也就不推广维基了,自个儿团队用得爽就好,不论什么人问什么事儿,不论在邮件/MSN/QQ什么的,都是一个链接丢过去,什么都不说了 ;-)

综上,不论维基也好,word 也好,还是人的因素哪:
    - 统一文档的认识
    - 约定好文档的创建/发布/变更/归档/销毁的流程
    - 所有人统一遵守
    - 你就是回到解放前,用油印也照样有非常爽快的文档管理体验的!

&gt;&gt; &gt;&gt;&gt;&gt; &gt; 2011/4/20 赖勇浩 &lt;mail@laiyonghao.com&gt;
&gt;&gt; &gt;&gt;&gt;&gt; &gt;&gt; 我曾经以为只有自己写代码的练手项目不需要版本控制系统，后来我发现我错了。
&gt;&gt; &gt;&gt;&gt;&gt; &gt;&gt; 我曾经以为只有自己写代码的练手项目不需要配置管理系统，后来我发现我错了。

-- 
人生苦短, Pythonic! 冗余不做,日子甭过!备份不做,十恶不赦!
俺: http://about.me/zoom.quiet
哲: http://www.zeuux.org/home/zoomquiet
豆: http://www.douban.com/group/zoomquiet
书: http://code.google.com/p/openbookproject
营: http://code.google.com/p/kcpycamp/wiki/PythoniCamp
</t>
<t tx="zoomq.20110425090758.3984">算术运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Python提供了通常的四种基本算术运算符：加，减，乘法和除法.
还有其它语言中没有的两种运算：指数和浮点除.
表3.4，“算术运算符“列出Python的算术运算符


.. list-table:: 表 3.4. 算术运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - + 
     - 加
   * - − 
     - 减
   * - * 
     - 乘
   * - / 
     - 除
   * - % 
     - 模(取余)
   * - ** 
     - 指数
   * - // 
     - 浮点除


当混合数字类型数据处理时，Python会自动地“提升“为其中最高级别的数字类型来操作.
该类型优先级如下::

    复数
    浮点数
    长整数
    整数


这意味着，如果一个表达式包含一个浮点值，但没有复数，结果将是一个浮点值.
如果一个表达式包含一个长整但没有浮点数或是复数，其结果将是一个长整数.
如果一个表达式包含一个复数，结果将是复数.
所以，如果有个表达式::

    5.0 * 5

结果将是一个浮点数::

    25.0

正如前述Python还具有独特的除运算，称之为"浮点除".
这用于将一个浮点数的商值截断为最接近的一个整数值，但是结果返回为一个浮动数.
在Python中，// 行为如下示::

    &gt;&gt;&gt; 5/2
    2
    &gt;&gt;&gt; 5//2
    2
    &gt;&gt;&gt; 5.0/2
    2.5
    &gt;&gt;&gt; 5.0//2
    2.0

</t>
<t tx="zoomq.20110428091054.3987">逻辑运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在表 3.5, “逻辑运算符”, 列出了所有Python中各种对象可用的逻辑值.



.. list-table:: 表 3.5. 逻辑运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - and 
     - 逻辑 与
   * - or 
     - 逻辑 或
   * - not 
     - 逻辑 非


Python支持在逻辑表达式中使用关键字True和False.
请注意，以下任何一条都是为``徦``:

- None 对象
- 零(数字)
- 空的序列对象 (列表,元组,字串)
- 空的字典


其它值情况都被视作``真``.
另外也建议用 1 和 0 来对应``真``和``徦``.

</t>
<t tx="zoomq.20110428091054.3988">比较运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


比较运算符评估两个操作对象间的关系，并判定是否相等,不等，大小
(见表3.6，“比较运算符“)



.. list-table:: 表 3.6. 比较运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - == 
     - 相等返回真,否则是徦
   * - !=  
     - 不等返回真,否则是徦
   * - &lt;&gt;
     - 同 !=
   * - &gt; 
     - 大于返回真,否则是徦
   * - &lt;
     - 小于返回真,否则是徦
   * - &gt;= 
     - 大于或等于返回真,否则是徦
   * - &lt;= 
     - 小于或等于返回真,否则是徦


使用比较运算符的Python表达式总是返回true或false.





</t>
<t tx="zoomq.20110428091054.3989">位运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的与，或，异或运算符对操作数进行比特位的运算;
不执行算术运算. 具体参考 表3.7，“位运算符“


.. list-table:: 表 3.7. 位运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - &amp; 
     - 二进制 与
   * - | 
     - 二进制 或
   * - ^
     - 二进制 异或
   * - ~
     - 二进制 补
   * - &lt;&lt;
     - 二进制 左移
   * - &gt;&gt;
     - 二进制 右移


在``与``操作将返回两个操作数那些同为 true(1) 的数位，
而``或``将"合并"两个操作数位，如在图3.4所示，“Python的位元``与``和``或``运算符“


.. image:: ../_static/figs/rwip_0304.pdf.png

插图 3.4. Python的位元``与``和``或``运算符


按位运算符时非常有必要设立一个特定的位（或）或测试一个1（和）的值位.
异或运算符返回两个操作数位元之间的差异，参考插图3.5所示的真值表，“Python的位异或运算符“


.. image:: ../_static/figs/rwip_0305.pdf.png

插图 3.5. Python的位异或运算符



求补运算将每个位值进行了逆转.
也就是说，二进制值00101100变为11010011.

二进制移位运算符通过将一个数据对象的内存数据向左或向右移动指定的数位;
效果是相当于乘2n(左移)或除2n(右移)(其中n是移动的位数）.
例如::

    &gt;&gt;&gt; 2 &lt;&lt; 1
    4
    &gt;&gt;&gt; 2 &lt;&lt; 2
    8
    &gt;&gt;&gt; 2 &lt;&lt; 3
    16
    &gt;&gt;&gt; 16 &gt;&gt; 2
    4


</t>
<t tx="zoomq.20110428091054.3990">赋值运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

正如我们已经看到，在Python中赋值涉及的不仅仅是一些数据填充到内存位置.
赋值相当于实例化对象的新数据.Python的赋值操作符列于表3.8，“赋值运算符“


.. list-table:: 表 3.8. 赋值运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - =  
     - 简单赋值
   * - +=  
     - 自增赋值(增量赋值)
   * - -=  
     - 自减赋值(增量赋值)
   * - *=  
     - 自乘赋值(增量赋值)
   * - /=  
     - 自除赋值(增量赋值)
   * - %=  
     - 自模赋值(增量赋值)
   * - **=  
     - 自指赋值(增量赋值)
   * - //=  
     - 浮点除再赋值(增量赋值)


除了简单的赋值操作符，Python为每个算术运算符提供了一个自增操作.
一种自增操作先执行对应操作，然后分配结果回传左手方对象自身.
例如::


    &gt;&gt;&gt; a = 1
    &gt;&gt;&gt; a += 1
    &gt;&gt;&gt; a
    2






</t>
<t tx="zoomq.20110428091054.3991">成员操作符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

成员操作符用以确定在一个序列或字典对象是否存在(in)，或不在（not in）一个值或对象，
（见表3.9，“成员操作符“）.
请注意，字典对象只能对键进行测试，不能对值进行成员测试.


.. list-table:: 表 3.9. 成员操作符
   :widths: 10 40
   :header-rows: 1

   * - 操作符
     - 描述
   * - in  
     - 若包含查询对象返回 True,反之为 False
   * - not in  
     - 若不含查询对象返回 True,反之为 False


可以这么用::

    if x in some_list:
        DoSomething(x, some_list)



在这种情况下，函数doSomething()只有当x如果x是在some_list中时,才会被调用.
也可以进行相反的测试，看看是否不在一个对象中::

    if x not in some_dict:
        some_dict[x] = new_value

如果键X不在字典中，它将会被追加并赋一个值.


</t>
<t tx="zoomq.20110428091054.3992">身份运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的身份运算符（表3.10所示，“身份运算符“）
用于确定一个名字是否和另一个名字指向同一对象(is)，或者不是(is not).


.. list-table:: 表 3.10. 身份运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - is  
     - 若为相同对象则为``真``,否则为``徦``
   * - is not
     - 若不是相同对象则为``真``,否则为``徦``


身份运算一般发生在试图确定一个对象是否可用于一个特定的操作.

这里给出一个(不可执行)的例子::

    def GetFilePath(name):
        global pathParse
        if pathParse is None:
            pathParse = FileUtil.PathParse()
        file_path = pathParse(name)
        if len(file_path) &gt; 1:
            return file_path
        else:
            return None


全局名称 pathParse 如果（在模块开始处）被初始化为无，
将使用FileUtil模块类pathParse对象作为南郊值.
如果此处不进行判定,那么一但被意外初始化成 None 接下来的程序将没有意义,会失败.



</t>
<t tx="zoomq.20110428091054.3993">运算优先级
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

我们已经看到了前述各种运算符的特性，现在让我们来仔细看看.
表3.11，“运算优先级“ 列出了Python所有运算符从低到高的优先顺序


.. list-table:: 表 3.11. 运算优先级
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - 最低
     - or
   * - . 
     - and
   * - . 
     - not x
   * - . 
     - in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, &lt;&gt;, !=, ==
   * - . 
     - |
   * - . 
     - ^
   * - . 
     - &amp;
   * - . 
     - &lt; &lt; , &gt; &gt;
   * - . 
     - +,-
   * - . 
     - *, /, //, %
   * - . 
     - +x, -x, ~x
   * - 最高
     - **


正如前面有提及的,使用括号来明确运算的顺序.
当你不记得为所有运算符的优先递,或是默认顺序是不是你想要的，
使用必要的括号，以获得所需的结果.

清晰的用括号从来不是一件坏事.(想想 LISP;-)







</t>
<t tx="zoomq.20110428091054.3994">缩进
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

谈及关程序结构时，人们常常提到的语句块.
块可以定义为一个或多个逻辑上相关联的语句.
与C和其他语言不同，Python没有使用特殊字符或保留字来声明逻辑的语句块.
它采用缩进! 

.. topic:: 译注

    这一设计恰恰是Python 同时赢得拥趸以及招致反对的核心特性!
    喜欢的人爱得发疯,反感的人恨到发疯.
    笔者认为,这一设计虽然引发了一定编辑环境的配置争议,
    但是从根本上引入了代码形式和功能必须同时追求优美的开发态度,是一创举,应该得到推广.


例如，在C中，人们这样写 if-else ::

    if (some_var &lt; 10) {
        printf("Yes\n");
        printf("Indeed\n");
    }
    else {
        printf("Sorry\n");
        printf("Nope\n");
    }


花括号告诉C编译器如何对语句进行分组，
实际上C不怎么在意每个语句有多少缩进，对于C这都是“空白”，而编译器会忽略它.
但是在Python中，缩进至关重要的，因为它告诉解释器如何理解代码的结构，哪些语句有逻辑关联.
具体的缩进量并不重要，只要它是一致的.
建议的缩进是每4个空格代表一个层次，不使用 TAB 
(TAB一般认为有点邪恶，因为他们并不能在不同的编辑器之间总是优雅得以迁移,
有的编辑器可能将制表符解释为四个空格，而另一个可能转化成八个空格).


有些在争论Python用缩进表示代码块是否靠谱，
对于那些在C或是C++有丰富的经验程序员言,这种形式很怪
(虽然在计算机科学领域绝不算新的想法).
用缩进来声明程序层次的的优点是统一所有开发者的风格并提高可读性.
当然也有些人声称在大段代码中使用如＃ENDIF，＃ENDFOR和＃endwhile 等注释更加有利于代码的阅读,
但我们不会把这种讨论到本书中.





</t>
<t tx="zoomq.20110428091054.3995">注释
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在Python中，注释用一个``#``字符表示(有时称为哈希)，
注释可以出现在任何地方.
解释器忽略``#``后面的所有内容.
尽情的在你的程序文本中注释吧,但是要有价值.
像这样的评论::

    a += 1 # increment by one

完全无问(可惜这种注释是最常见的), 如下注释::

    if (a + 1) &gt; maxval: # do not increment past limit

就有助于理解 mystery.

</t>
<t tx="zoomq.20110428091054.3996">关键字
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python 仅仅包含31个保留关键字, 列在表 3.12, “Python的关键字”.
Python

.. list-table:: 表 3.12. Python的关键字
   :widths: 20 20 20 20
   :header-rows: 1

   * - and
     - elif
     - if
     - print
   * - as
     - else
     - import
     - raise
   * - assert
     - except
     - in
     - return
   * - break
     - exec
     - is
     - try
   * - class
     - finally
     - lambda
     - while
   * - continue
     - for
     - not
     - with
   * - def
     - form
     - or
     - yield
   * - del
     - global
     - pass
     - .


本章我们将练习使用一些常用的关键字.
其它的将在我们开始一些更加复杂的程序时适时引出.




</t>
<t tx="zoomq.20110428091054.3997">示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在Python中，一个简单的语句（见表3.13，“简单语句”）是一行包含赋值或是关键字的代码.
当然,语句也可以包含多条表达式.


.. list-table:: 表 3.13. 简单语句
   :widths: 10 40
   :header-rows: 1

   * - 关键字
     - 描述
   * - assert  
     - assert &lt;表达式&gt;; if &lt;表达式&gt; 为非,一个另外将被抛出
   * - 赋值 (=)   
     - 创建新数据对象并绑定到名字
   * - 强制转换
     - 参考表 3.8, “赋值运算符”
   * - pass
     - 略过;当执行时,不作任何事儿
   * - del
     - 移除名称或是名称列表和对象间的绑定
   * - print
     - 发送到标准输出 (stdout)
   * - return 
     - 可选择的值或是表达式结果返回
   * - yield 
     - 使用生成器函式
   * - raise 
     - 抛出意外
   * - break  
     - 在for和while循环中跳出
   * - continue  
     - 在for和while循环中强行忽略当前一层循环跳到下一轮循环继续
   * - import  
     - 将外部模块包含到当前名称空间中
   * - global  
     - 指定一个名称列表作为当前模块的全局变量来处理
   * - exec   
     - Python代码的动态执行


我故意在以下章节跳过 del,exec,和 yield 语句,
因为本书中真的用不到他们.

而import语句的推迟到之后专门章节讨论.


assert
    assert语句通常用来判断某些条件是否已满足.如果没有，
    引发异常.一般是在单元测试，或捕获（虽然还有其他方法可以做到这一点）标称条件时大量使用.


Assignment
    赋值语句（=）大概是最基础的Python语句形式.正如
    我们已经看到，赋值基本上相当于实例化一些类型对象并绑定到一个名称.
    前面几节我们已经进行了广泛的讨论，这里不再深入.

Augmented assignment
    自增赋值语句是非常有用的，在Python中也很常见.
    因为任何类型的赋值将创建一个新的数据对象，所以，无法在表达式中包含自增赋值.
    换句话说，这将无法工作::

        if (a += 1) &gt; maxval:

    但是这样可以::

        if (a + 1) &gt; maxval:

    In an augmented assignment, the arithmetic operation is performed first, followed by
    the assignment. For a list of Python’s augmented assignment operators, see Table 3.8,
    “Assignment operators”.
    自增赋值中先执行算术运算，其次是赋值.
    对于Python的所有赋值运算符的简介，参阅表 3.8. "赋值运算符"


pass
    该声明是通过无操作语句而不执行任何操作.它通常用作
    一个占位符声明,也是必需的语法.
    经常在顶级类方法声明中使用,旨在通过子类方法进行其实覆盖.
    也可能出现在“回调”函数或方法中,为了语法的完整,即使并不真正需要做任何事情.


print
    打印写入一个或多个对象的值到标准输出，除非标准输出已经重定向
    或打印输出本身就是重定向的.
    如果给定的对象不是一个字符串，它会尝试将数据转换为字符串形式.
    默认情况下，打印追加一个换行符（``/n``）到最终的输出，当然这是可配置的.


return
    返回语句用于返回一个函数或方法给
    原调用方.
    return语句可以选择将数据传递回调用方,这里数据可以是任何有效的Python对象.
    如前所述，一个函数可能返回元组，而不仅仅是一个单一的价值，这使得它可以同时返回全部状态
    和数据值(或更多).
    虽然可以返回一个列表或字典，这样庞大而复杂的数据对象对大型程序来说可能产生问题，
    因为这些数据类型有天生的不透明性.
    在之后的章节,我将进一步说明这些问题.


break
    break语句只可能发生在for或while循环.它会终止当前的循环结构，并跳过可能的else语句.


continue
    continue语句只可能发生在for或while循环.
    强制返回到循环开始的for或while语句继续.
    任何后续语句将被跳过.
    如果continue语句之外有try-finally结构,那么finally 将在一轮循环前先执行.
    我们将在稍后讨论 try-except 结构语句.

global
    global语句用于声明一个函数或方法中可修改模块中声明的变量值.
    一般来说，这种全局变量尚未出现在函式或是方法中之前,是对于函式或是方法而言是只读的.





</t>
<t tx="zoomq.20110428091054.3998">字串
-------------------------------------------------------------------------------

Python能轻松创建包含格式化数据的字串,这点在许多程序中被广泛使用,本书中遇到的程序也不例外.
Python的字符串对象提供了一套丰富的方法，
当它们与格式化字串结合可以生成带格式的列，左或右对齐字段，输出各种指定的数据类型.
字符串真是非常重要，值得我们单独讨论.


@others
</t>
<t tx="zoomq.20110428091054.4000">if语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的if语句的表现正如我们所期望的那样.
跟随关键字if之后的表达式用以计算结果为True或False.
最简单的形式如下,它只是一个声明和一个或多个下属语句::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)


要指定替代的行动，人们会使用else语句::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


用elif语句（是"else if"的缩写）创建可能的结果选单，
同if语句,需要后跟一个表达式，但它只能出现在 if 之后::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)
    elif &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statements if necessary)



</t>
<t tx="zoomq.20110428091054.4001">while语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

逻辑控制表达式是真while语句块就重复执行::

    while &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


如果循环正常结束,且没有break语句,执行else语句块
(即控制表达式计算结果为False).
下例中，循环控制使用一个布尔变量，它被初始化为True，
然后从循环内部赋值为假::

    &gt;&gt;&gt; loop_ok = True
    &gt;&gt;&gt; loop_cnt = 10
    &gt;&gt;&gt; while loop_ok:
    ... print "%d Loop is OK" % loop_cnt
    ... loop_cnt -= 1
    ... if loop_cnt &lt; 0:
    ...
    loop_ok = False
    ... else:
    ... print "%d Loop no longer OK" % loop_cnt
    ...
    10 Loop is OK
    9 Loop is OK
    8 Loop is OK
    7 Loop is OK
    6 Loop is OK
    5 Loop is OK
    4 Loop is OK
    3 Loop is OK
    2 Loop is OK
    1 Loop is OK
    0 Loop is OK
    -1 Loop no longer OK


else语句是完全可选的

continue和break语句也可以用来控制while语句重新循环或是退出,
分别在:

    - 如果用break语句终止循环，else语句也将忽略
    - 而continue语句不会略过跟随的所有语句

</t>
<t tx="zoomq.20110428091054.4002">for 语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python中的 for 语句不同与其它语言中所期待的.
在Python中，for语句用于遍历序列对象的值.
for语句还支持一个可选的在else语句，同 while 中的效果::

    for some_var in &lt;sequence&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


另外一种指定序列对象的方法是使用内建函式 range()::

    &gt;&gt;&gt; for i in range(0,5):
    ... print i
    ...
    0
    1
    2
    3
    4


也常用以对序列对象进行处理,如"列表"::

    &gt;&gt;&gt; alist = [1,2,3,4,5,6,7,8,9,10]
    &gt;&gt;&gt; for i in alist:
    ... print i
    ...
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10


处理的对象也不必是整数.由一系列字符串集合成的元组也可以::

    &gt;&gt;&gt; stuple = ("this","is","a","4-tuple")
    &gt;&gt;&gt; for s in stuple:
    ... print s
    ...
    this
    is
    a
    4-tuple


同while语句，for语句也支持 continue和break语句，
且工作方式相同.


</t>
<t tx="zoomq.20110428091054.4003">try语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

try语句用以捕获和处理异常，它类似于C++或Java中的try-catch结构.
这对创建强大的Python应用程序非常有用，
允许程序设计者实现一个在发生错误时包含默认替代方法的处理流程
(通常是产生所谓的回溯消息，然后终止执行).
而完整的try-except控制结构类似::

    try:
        statement
        (more statements as necessary)
    except &lt;exception, err_info&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (more statements as necessary)
    finally:
        statement
        (and yet more statements if necessary)


可指定一个特殊的异常类型（&lt;exception&gt;）来使用，
如果没有给出，将尝试截获语句块中的任何异常.
有方法可使用 ``Exception``基类来探查发生了什么异常,
并指定一个变量为来记录异常信息::

    try:
        f = open(fname, "r")
    except Exception, err:
        print "File open failed: %s" % str(err)


上例,如果文件打开失败，程序将不会终止.
相反，一个消息将被打印到标准输出,用来说明相关的失败信息

如果没有异常else语句将被执行，
而如果在try语句中包含break 或是 continue, finally块将在最后执行.
进一步的参考有关try语句和异常信息Python文档.

</t>
<t tx="zoomq.20110428091054.4004">字串引用
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

字串使用下列形式之一引用::

    'A single-quote string.'
    "A double-quote string."
    '''This is a multiline string using triple single quotes.
    It is a medium-length string. '''
    """This is a multiline string with triple double quotes containing many
    characters along with some punctuation, and it is a very long string indeed."""


多行字串可以跨越多行，``\n`` (换行符）会自动插入,以便确保输出吻合原始格式.


</t>
<t tx="zoomq.20110428091054.4005">字串方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

字符串类型提供了许多方法，其中有些我们已经看到了.
表3.15 “字串方法”是从 Python2.6 文档中摘取的完整的列表（不包括Unicode的方法）

.. list-table:: 表 3.15. 字串方法
   :widths: 10 40
   :header-rows: 1

   * - capitalize 
     - lower
   * - center  
     - lstrip
   * - count   
     - partition
   * - decode 
     - replace
   * - encode   
     - rfind
   * - endswith   
     - rindex
   * - expandtabs   
     - rjust
   * - find   
     - rpartition
   * - format 
     - rsplit
   * - index  
     - rstrip
   * - isalnum  
     - split
   * - isalpha   
     - splitlines
   * - isdigit 
     - startswith
   * - islower 
     - strip
   * - isspace 
     - swapcase
   * - istitle 
     - title
   * - isupper 
     - translate
   * - join 
     - upper
   * - ljust 
     - zfill


其中一些比其它更加常用,不过给力的是其它不常见的依然可用.
具体的,我们不在这儿叙述,具体参考官方文档.
此外，记住以下形式::


    new_sring = "string text".method()

也可以这么来用::

    new_string = string_var.method()

记住，总是要用一个新的字符串对象来接收处理结果(字串不可变),
否则，修改后的字串数据只会消失.


表3.16，“常用字串方法”列出了14常用的字串处理方法.
其它不常用的方法将被在需要时进行介绍.
下述说明中,使用Python文档中的格式来表示显式(必需)和[可选]参数


.. list-table:: 表 3.16. 常用字串方法
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - capitalize()   
     - 将字串首字母大写后返回
   * - center(width[,fillchar]) 
     - 返回以指定长度宽度为中心的字串文本.如果指定了fillchar，则使用指定字符来填充两端的空白.默认fillchar是空格
   * - count(sub[,start[,end]])   
     - 统计指定的子串出现的次数. start和end 参数用以指定原始字符串的探查范围
   * - find(sub[,start[,end]]) 
     - 定位指定子串子第一次出现在原字串的位置,并返回这一索引值.如果子没有找到，则返回-1
   * - isalnum() 
     - 如果字串是纯由字母数字组成的(0..9, A..Z, a..z)返回 True,否则返回 False.
   * - isalpha() 
     - 如果字串是纯由字母组成的(A..Z, a..z)返回 True,否则返回 False.
   * - isdigit()   
     - 如果字串是纯由数字组成的(A..Z, a..z)返回 True,否则返回 False.
   * - islower()   
     - 如果字串是纯由小写字母组成的(a..z)返回 True,否则返回 False.
   * - isspace()   
     - 如果字串是纯由空白字符组成的(空格，制表符，换行等)返回 True,否则返回 False.
   * - ljust(width[,fillchar])   
     - 返回以指定长度为宽度的左对齐字符串.如果指定fillchar的则使用指定字符来填充右端空白.默认填充字符是空格.如果宽度比原字串还小，则原封不动地返回
   * - lower()   
     - 将字串所有字母小写后返回
   * - rjust(width[,fillchar])   
     - 返回以指定长度为宽度的右对齐字符串.如果指定fillchar的则使用指定字符来填充左端空白.默认填充字符是空格.如果宽度比原字串还小，则原封不动地返回
   * - split([sep[,maxsplit]]) 
     - 返回一个由指定分隔符切分开的字串条目组成的列表.如果没有指定分隔符，默认使用空格作为(空白可以是任何长度，只要它是连续的).如果maxsplit给出，仅返回指定数目的条目.
   * - upper()   
     - 将字串所有字母大写后返回
























</t>
<t tx="zoomq.20110428091054.4006">格式化字串
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

基本上有两种方法可以对Python数据进行格式化.
首先是我们前面看到的串接.
二是利用Python的字符串格式化能力.
哪种方法最适合,取决于你的目标.
虽然串接对简单字串容易操作，但不提供进一步对小数位数等的处理,
而且当字串中包含佷多需要嵌入的数据和字串时,使用串接就很繁琐了,
试考虑下面的例子::

    &gt;&gt;&gt; data1 = 5.05567
    &gt;&gt;&gt; data2 = 34.678
    &gt;&gt;&gt; data3 = 0.00296705087
    &gt;&gt;&gt; data4 = 0
    &gt;&gt;&gt; runid = 1
    &gt;&gt;&gt; outstr1 = "Run "+str(runid)+": "+str(data1)+" "+str(data2)
    &gt;&gt;&gt; outstr2 = " "+str(data3)+" : "+str(data4)
    &gt;&gt;&gt; outstr = outstr1 + outstr2
    &gt;&gt;&gt; outstr
    'Run 1: 5.05567 34.678 0.00296705087 : 0'


有更简易的方法.
类似C中的sprintf()函式,Python支持非常相似的字符串格式化占位符.
通过使用特殊的格式代码，可以指定各种数据如何以及插入到一个字串的哪里.
这里使用整个化字串输出上例相同字串的处理::

    &gt;&gt;&gt; outstr = "Run %d: %2.3f %2.3f %2.3f : %d" % (runid, data1, data2, data3, data4)
    &gt;&gt;&gt; outstr
    'Run 1: 5.056 34.678 0.003 : 0'

注意，所有要输出到字串中的变量应该包含在括号中, 它是一个封闭的N元组.
如果省略括号，将只有第一个变量名是有效的,并引发错误::

    &gt;&gt;&gt; "%d %d %d" % 1, 2, 3
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: not enough arguments for format string


字串格式化占位符语法::

    %[(name)][flags][width][.precision]type_code

每个占位符可在``%``第一个项目指定一个可选名称
(并必须用括号).
接下来是可选标识,有前导空格，符号字符和0填充.
然后是一个可选的宽度值，指定数据最小的占位宽度,
如果数据包含小数部分，则该值为精度字段,指明输出时的小数数位.
最后是类型码,指定转换成什么样的数据(字符串，整数，长整，浮点等).

表3.17，“字串格式化占位符“ 列出了所有可用的标识.
表3.18，“字串格式化占位符类型代码“总结了可用类型代码


.. list-table:: 表 3.17. 字串格式化占位符
   :widths: 10 40
   :header-rows: 1

   * - 标识
     - 含义
   * - #
     - 使用“替代形式”格式化（参见表3.18，“字串格式化占位符类型代码”的说明）
   * - 0
     - 用前导零来衬垫数值
   * - -
     - 左对齐(覆盖0标识，如果两者都指定)
   * - (空格)   
     - 在有效数字前用空格补齐
   * - +   
     - 对数值前导符号字符(+或 -).覆盖的 "空格"标识


.. list-table:: 表 3.18. 字串格式化占位符类型代码
   :widths: 10 30 30
   :header-rows: 1

   * - 类型码
     - 含义
     - 注意
   * - d
     - 单精度数
     - .
   * - i
     - 同上
     - .
   * - o
     - 8进制数
     - 这时用前导零 0o 是不处理的
   * - u
     - 过时的类型
     - 用 d 替代
   * - x
     - 16进制数(小写)
     - 这时用前导零 0x 是不处理的
   * - X
     - 16进制数(大写)
     - - 这时用前导零 0X 是不处理的
   * - e
     - 指数式浮点数 (小写)
     - 另一种形式是使用小数点，即使后面没跟数字
   * - E
     - 指数式浮点数 (大写)
     - 替代形式同 e 
   * - f
     - 浮点数 (小写)
     - 替代形式同 e 
   * - F
     - 浮点数 (大写)
     - 替代形式同 e 
   * - g
     - 小写指数式浮点数,如果指数小于-4或精度低于4位,同十进制格式
     - 而替代形式是包含一个小数点和尾随零
   * - G
     - 大写指数式浮点数,如果指数小于-4或精度低于4位,同十进制格式
     - 同 g
   * - c
     - 单字符(接受整数或单字符的字串)
     - .
   * - r
     - 字串(对任何Python对象使用repr()函数转换)
     - .
   * - s
     - 字串(对任何Python对象使用str()函数转换)
     - .
   * - %
     - 无参数​​转换
     - .



字串方法能和字符串格式化同时应用,
这可能看起来有点古怪，但完全有效::

    &gt;&gt;&gt; "%d %d".ljust(20) % (2, 5)
    '2 5            '
    &gt;&gt;&gt; "%d %d".rjust(20) % (2, 5)
    '            2 5'
    &gt;&gt;&gt;


因为实际上并没有将字符串对象赋值给新的名字，
只是Python在打印时应用了格式.

最后，Python支持字串中包含所谓的转义字符.
这是种由一个反斜杠字符接一个特殊字符,组成的双字串码，
如表3.19，“字符串转义序列”。


.. list-table:: 表 3.19. 字符串转义序列
   :widths: 10 40 40
   :header-rows: 1

   * - 转义序列
     - 解释 
     - ASCII
   * - \'
     - 单引号
     - '
   * - \"
     - 双引号
     - "
   * - \\
     - 单反斜线
     - \
   * - \a
     - ASCII 响铃
     - BEL
   * - \b
     - ASCII 空格
     - BS
   * - \f
     - ASCII 换页
     - FF
   * - \n
     - ASCII 换页行
     - LF
   * - \c
     - ASCII 回车
     - CR
   * - \t
     - ASCII 水平制表符
     - TAB
   * - \v
     - ASCII 垂直制表符
     - VT

反斜线字符（\）也可用于行延续，
如果它是在最后一个字符行，紧跟一个换行符（LF或CRLF）.
这将导致新行被解释器忽略，而将前后代码行当成一行来处理.














</t>
<t tx="zoomq.20110428091054.4007">作用域
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


早先提及的定义不在作用域是什么意思？ 现在开始探讨这事儿.


正如提过的，Python是将对象的名称作为集合的概念绑定到命名空间的.
其实，一个命名空间更像是一个字典对象，其中键是名称,值是关联的对象值.
在Python有三个层次的命名空间:
本地，全局，内建.

插图3.6，"Python的名称空间" 显示了Python模块的命名空间范围



当一个名称是在函数或方法的中声明时，首先尝试从一个本地名称空间搜索.
其次，对全局命名空间搜索.
最后，尝试内建命名空间.
如果没有在任何空间发现该名称，Python会抛出例外.


.. image:: ../_static/figs/rwip_0306.pdf.png

插图3.6，Python的名称空间

::

    内建
    (Python执行环境)
    内建-
        全局--
            本地---
    
    Module
    全局变量
    
    Function
    本地变量
    
    Function
    本地变量
    
    Class
    类变量
    
    Method
    本地变量
    
    Method
    本地变量
    
    
    

@others
</t>
<t tx="zoomq.20110428091054.4008">本地作用域
""""""""""""""""""""""""""""""""""""""""""""""""""

本地作用域是指特定的函式，类或方法命名空间.
换而言之，在一个函数中定义的任何变量是局部的,在其外是不可见的.
本地作用域还包括可能的嵌套函式.一会儿我们会研究这个情况.


插图3.7，"名称空间的搜索等级" 展示了这一搜索原则

.. image:: ../_static/figs/rwip_0307.pdf.png

::

    
    内建
    (Python执行环境)
    
    Module
    全局变量
    
    Function
    本地变量
    - 本地引用
    - 全局引用
    - 内建引用
    


插图3.7，名称空间的搜索等级


Class对象引入本地名称空间又一内容.
在类内部，任何定义的变量,都可以由内部的任何方法通过前缀 ``self`` 的形式来访问::

    self.some_var


一个类的对象实例的数据变量属性和方法可以通过使用"点号"形式从外部访问::

    SomeObj = SomeClass()
    SomeObj.var_name = value

这会将值分配给对象实例SomeObj的属性var_name.
如果var_name不存在，将立即创建.
这使我们注意到这一有趣的现象: 
Python的对象没有真正意义上的私有数据或方法.
一切都可以方便的从外部读取，即使并不愿意.
可以通过前缀下划线,来声明函数，类，或变量,以防止由通配符被自动导入，但这也并不能真正隐藏之.
甚至于用两个前导下划线字符来"糟蹋"对象名称，如果你知道方法,它仍然是可访问的.
所以，这儿没什么真正的隐藏，责任赋予了程序员,要求我们要有礼貌，不看不该看的.


如果你并不确认这些究竟是什么意思，不用担心.
我们将在之后开发用户界面应用时,详细讨论.





</t>
<t tx="zoomq.20110428091054.4009">全局作用域
""""""""""""""""""""""""""""""""""""""""""""""""""
全局作用域是指模块的名称空间.
函数不能修改除全局变量,
非用 global 来声明.
下面的例子，脚本 globals.py，说明了这点::

    # globals.py
        var1 = 0
        var2 = 1
    def Function1():
        var1 = 1
        var2 = 2
        print var1, var2
    def Function2():
        global var1, var2
        print var1, var22
        var1 = 3
        var2 = 4
        print var1, var2


为了测试，我们需要使用import语句加载它.
这告诉Python读模块和填充命令行的命名空间来发现有什么::

&gt;&gt;&gt; import globals


一旦globals.py 完成导入，我们可以用 help()函数，来看里面是什么::

    &gt;&gt;&gt; help(globals)
    Help on module globals:
        NAME
            globals
        FILE
            globals.py
        FUNCTIONS
            Function1()
            Function2()
        DATA
            var1 = 3
            var2 = 4


如果我们执行Function1，就可以验证全局变量 var1和var2 不改变::

&gt;&gt;&gt; globals.var1
    0
    &gt;&gt;&gt; globals.var2
    1
    &gt;&gt;&gt; globals.Function1()
    12
    &gt;&gt;&gt; globals.var1
    0
    &gt;&gt;&gt; globals.var2
    1


不过, Function2 就能变更var1 和 var2的值::

    &gt;&gt;&gt; globals.Function2()
    01
    34
    &gt;&gt;&gt; globals.var1
    3
    &gt;&gt;&gt; globals.var2
    4

如果一个函数想修改的变量名和某全局变量相同,
那么变量在函式内部使用时,就必须使用 ``global`` 加以区分.
globals2.py 说明了这一情况:

.. literalinclude:: globals2.py
    :language: python


观察调用这3个函式时的反馈::

    &gt;&gt;&gt; import globals2
    &gt;&gt;&gt; globals2.Function1()
    01
    &gt;&gt;&gt; globals2.Function2()
    12
    &gt;&gt;&gt; globals2.Function3()
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
        File "globals2.py", line 14, in Function3
    print var1, var2
    UnboundLocalError: local variable 'var1' referenced before assignment




Function1()成功了，因为没有局部变量和模块变量之间的冲突.
Function1()的var1和var2局部变量都在函式内部定义，是没有问题的.
然而，Function3() 引发错误.
在时全局名称的被阻止使用，
因为相同名称已经放入函式局部空间，
但第二次打印时，名称无法绑定到想打印的本地值对象上.
因此，触发UnboundLocalError例外.
如果在print语句之前，声明 ``global`` ，就不会发生错误.


</t>
<t tx="zoomq.20110428091054.4010">内建作用域
""""""""""""""""""""""""""""""""""""""""""""""""""

内置的名称空间是指Python运行时环境.
它包括类似ABS()，打印和各种异常的名称等等.
如果你想要一个内置的名称的列表，只需在Python提示符输入 dir(__builtins__) .
我没在这列出所有输出，因为它是相当大(至少有144个)

</t>
<t tx="zoomq.20110428091054.4011">模块和包
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

一个Python的源代码文件被称为一个模块.
这是一个变量和方法将各种语句结成的集合,
包含变量定义语句，import语句，直接执行语句，函数定义语句和类定义语句.


模块包含于软件包中，
而包实际上就是目录，
其中包含一个或多个模块.
包也可包含其他包.

插图3.8，“包和模块“ 演示了这一图景


模块是一个对象，因为我们已经看到，它有它自己的命名空间.
一个模块也有类似其它其他Python对象的属性.
一个模块的属性包括函数，类，方法，以及在其命名空间中定义的变量.

</t>
<t tx="zoomq.20110428091054.4012">函式，类和方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

def语句用于定义在模块中的函式和类中的方法::

    def SomeName (parameters):
        """ docstring goes here.
        """
        local_var = value
        statement...
        statement...
    more statements...

def语句用于定义函式时,缩进和同级函式相同.
当用于定义类方法时，相比类的声明，def语句要缩进一层.


.. image:: ../_static/figs/rwip_0308.pdf.png

插图3.8，“包和模块“


函式和方法可以嵌套.
这时，内部函式不能从外部访问.
下面是一个嵌套函数调用的例子, ``subfuncs.py`` ::

    #subfuncs.py

    def MainFunc():
        def SubFunc1():
            print "SubFunc1"
        def SubFunc2():
            print "SubFunc2"
        def SubFunc3():
        def SubSubFunc1():
            print "SubSubFunc1"
                def SubSubFunc2():
            print "SubSubFunc2"
                SubSubFunc1()
        SubSubFunc2()
    SubFunc1()
    SubFunc2()
    SubFunc3()


我们只能执行函式 ``MainFunc()`` ;
直接 MainFunc() 名称空间外部是访问不到嵌套的函式的.
如果导入 ``subfuncs`` ,设法得到它的帮助，将看到::
    &gt;&gt;&gt; import subfuncs
    &gt;&gt;&gt; help(subfuncs)
    Help on module subfuncs:
    NAME
    subfuncs
    FILE
    subfuncs.py
    FUNCTIONS
    MainFunc()


但是，当我们执行 MainFunc() 时，可以看到所有子函式都执行了::

    &gt;&gt;&gt; import subfuncs
    &gt;&gt;&gt; subfuncs.MainFunc()
    SubFunc1
    SubFunc2
    SubSubFunc1
    SubSubFunc2



类声明定义了一个类的对象，而这又是用来创建实例对象的.
下面的类定义了一个定时器对象，可用于获取程序执行的运行时间::


import time
class TimeDelta:
    def __init__(self):
        self.tstart = 0
        self.tlast = 0
        self.tcurr = 0
        self.Reset()

    def GetDelta(self):
        """ Returns time since last call to GetDelta(). """
        self.tcurr = time.clock()
        delta = self.tcurr - self.tlast
        self.tlast = self.tcurr
        return delta
    def GetTotal(self):
        """ Returns time since object created. """
        return time.clock() - self.tstart

    def Reset(self):
        """ Initializes time attributes. """
        self.tstart = time.clock()
        self.tlast = self.tstart

此类的对象可在代码的任意位置实例化，并检查运行时间，而且可多次实例使用.
如果TimeDelta是一模块的功能，将是相当尴尬的，
但作为一个类，每个实例都可以保持自己的数据，以便启动时自行使用.





</t>
<t tx="zoomq.20110428091054.4013">文档字串
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

文档字串是用来对模块，类，方法和功能提供文档的.
在一个模块，函数，类或方法开始时的多行字串,
被Python认为是作为文档的字串,会存储到对象的内部变量 ``__doc__`` 
这就是在命令行环境中键入 help() 看到的文档.

下面的例子显示了如何使用文档字符串.
pass语句使脚本可用,只要我们导入此代码,就可溶性使用 ``help()`` 来显示嵌入式文档::

    #docstrings.py
    """ Module level docstring.
        This describes the overall purpose and features of the module.
        It should not go into detail about each function or class as
        each of those objects has its own docstring.
    """

    def Function1():
        """ A function docstring.
        Describes the purpose of the function, its inputs (if any)
        and what it will return (if anything).
        """
        pass

    class Class1:
        """ Top-level class docstring.
            Like the module docstring, this is a general high-level
            description of the class. The methods and variable
            attributes are not described here.
        """
        def Method1():
            """ A method docstring.
            Similar to a function docstring.
            """
            pass
        def Method2():
            """ A method docstring.
            Similar to a function docstring.
            """
            pass


对该模块调用 ``help()`` 时,应该看到以下结果::

    &gt;&gt;&gt; import docstrings
    &gt;&gt;&gt; help(docstrings)
    Help on module docstrings:

    NAME
        docstrings - Module level docstring.

    FILE
        docstrings.py

    DESCRIPTION
        This describes the overall purpose and features of the module.
        It should not go into detail about each function or class as
        each of those objects has its own docstring.

    CLASSES
        Class1

        class Class1
        | Top-level class docstring.
        |
        | Like the module docstring, this is a general high-level
        | description of the class. The methods and variable
        | attributes are not described here.
        |
        | Methods defined here:
        |
        | Method1()
        |        A method docstring.
        |
        |        Similar to a function docstring.
        |
        | Method2()
        |        A method docstring.
        |
        |        Similar to a function docstring.

    FUNCTIONS
        Function1()
            A function docstring.
            Describes the purpose of the function, its inputs (if any)
            and what it will return (if anything).




</t>
<t tx="zoomq.20110428091054.4014">导入方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

导入语句有很多形式,这是最常见的::

    import module


模块中的对象添加到当前名称空间后,使用 module.function() 或module.class() 来调用.
要访问一个模块内的数据参数使用这种形式 module.variable


别名引用是支持的::

    import module as alias



这其实是进行了相同的模块导入，
这样别名就可用来调用模块内部资源了.
当一个模块有很长的名字时,这样导入使用起来很方便.例如::

    import CommonReturnCodes as RetCodes


也可以从模块只导入一个指定的对象:

    from module import somename


这种形式可从一个模块导入的特定函数，类，模块或数据.
这时可以使用不带模块的前缀形式来调用函数或参数 ``somename``,


也可使用通配符来导入外部模块的一切，以添加到当前命名空间::

    from module import *

普遍认为用通配符来导入，除非在某些特殊情况下,否则最好不用.
尽量显示的指定导入对象.
以免和现有名称空间中的对象名称冲突.
因为除非有预防措施, 通配符将导入模块的一切,如果和当前模块有的名称相同,目前同对象将被覆盖.

另外,期望通过在参数名称前缀单或双下划线来控制是否暴露,如果有属性如下聲明::

    _some_name



在通配符导入中将不包括，但它仍然可以通过前缀模块名来引用到.
如果用双下划线的形式来聲明::

    __some_name


这可能是Python中最常见的数据隐藏形式.
而实际上,它仍然可以从父模块外部访问到，
但其对外的名称是种“错位”，从而难以获得(但,不是不能获得).



</t>
<t tx="zoomq.20110428091054.4015">导入处理
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


因为Python一遇到 ``import``语句就会立即执行,
并会追踪所有 ``import`` 语句,以深度优先的方式来逐一导入,直到所有涉及的模块都被处理.

插图3.9，“模块导入序列”图形化显示导入是如何工作的


.. image:: ../_static/figs/rwip_0309.pdf.png
插图3.9，模块导入序列


插图 “模块导入序列”是用数字表示在循环.
模块A导入模块B，B又导入模块C，
从而导入模块G和H;
模块D将在模块H完成加载后,才尝试导入.
</t>
<t tx="zoomq.20110428091054.4016">循环导入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Python的导入体制有个缺点，就是可能引发导入的"挂起",
即所谓的 “循环导入" 参考:
插图3.10，"循环导入" 的情况

.. image:: ../_static/figs/rwip_0310.pdf.png
插图3.10，循环导入


在这里，我们有个模块A将导入模块B的情况，
当进一步导入模块C和D时，
模块C又要求导入模块A,
这时A模块还在等待模块B完成对模块C的导入,
所以,模块B无法继续完成模块D的导入,因为此时,模块C并没有完成加载,
于是,整体过程死锁.


一个确定的避免循环导入的方式就是坚持原则:
"决不向上导入,永远向下导入".
这意味着模块应该分层导入的,
同时模块实现时,也没有必要从一个更高层次的导入.
很多新人的典型的错误是把一堆"徦变量"(不期望有值改变的变量)
设置在模块中给其他相关的模块功能使用,
然后再导入整个模块仅为获得"徦变量"对象.
事实上各个模块中类似"徦变量"的对象,是应该包含在自身中,
这样就不必担心引发循环的导入了.

</t>
<t tx="zoomq.20110428091054.4017">用户输入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

从stdin(标准输入)获取用户输入的是最直截了当的.
Python提供了raw_input()来作这事儿.
模块getInfo.py包含了具体如何使用 raw_input()的简单实例::

    # getInfo.py
    def ask():
        uname = raw_input("What is your name? ")
        utype = raw_input("What kind of being are you? ")
        uhome = raw_input("What planet are you from? ")
        print ""
        print "So, %s, you are a %s from %s." % (uname, utype, uhome)
        uack = raw_input("Is that correct? ")
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."


观察这个脚本如何工作,我们要导入 getInfo 模块,并调用 ask()::

    &gt;&gt;&gt; import getInfo
    &gt;&gt;&gt; getInfo.ask()
    What is your name? zifnorg
    What kind of being are you? Zeeble
    What planet are you from? Arcturus III

好了你是来自Arcturus III.的 Zeeble 名叫 zifnorg::

    Is that correct? y
    Cool. Welcome.


raw_input()函数接受一个可选的提示字符串,并将自stdin获取的数据总是作为字符串返回.
如果程序期待数值，就需要转换.一种安全的方式是使用 try-except 来处理,这是getInfo2.py的 try-except 修订::

    def ask2():
        uname = raw_input("What is your name? ")
        utype = raw_input("What kind of being are you? ")
        uhome = raw_input("What planet are you from? ")
        getgumps = True
        while (getgumps):
            intmp = raw_input("How many mucklegumps do you own? ")
            try:
                ugumps = int(intmp)
            except:
                print "Sorry, you need to enter an integer number."
                continue
            else:
                getgumps = False
        print ""
        print "So, %s, you are a %s from %s, with %d mucklegumps."\
            % (uname, utype, uhome, ugumps)
        uack = raw_input("Is that correct? ")
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."


在我们继续之前，对这个简单功能有几件事情要考虑.
首先，它将只接受有关"mucklegumps"数目的徝,浮点数和字串都将被拒.
其次，没办法在用户输入时优雅的警告并中止.
这方面可以简单的通过特殊字符(例如 a .)来检查处理，
或只检测空输入(只按回车键而没有输入).
说到空的输入，如果用户在最后一个问题直接按回车键，Python会抛出一个异常::

    Is that correct? &lt;enter&gt;
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
        File "getInfo2.py", line 18, in ask2
            if uack[0] in ('y', 'Y'):

    IndexError: string index out of range


在 if 表达式中，对 uack[0] 判定是否匹配2元组("y", "Y")中任意一个,
当直接回车时,返回零长度字串，将触发异常并得到捕获处理::

    uack = raw_input("Is that correct? ")
    try:
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."
    except:
        print "Fine. Have a nice day."

在处理用户输入
(即，一个人在提示符状态下输入时)，
必须始终意识到可能的输入错误或异常.
人类总是会键入错误的超出限定的数据,意外的单词或短语，或是什么都没有.
用户是不可预知的，所以,建设一个能捕获错误输入的程序永远是个好主意.







</t>
<t tx="zoomq.20110428091054.4018">命令行参数
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在命令行输入的程序参数
由系统捕获并通过Python 解析器变为列表.
这一列表的第一个条目(索引值为0)永远是程序本身.
Python 的内建模块 sys 包含了这种数据处理方式.



以下程序(argshow.py)简单的指出了如何打印出所有通过命令行获得的参数列表::

    import sys

    print "%d items in argument list\n" % len(sys.argv)

    i=1
    for arg in sys.argv:
        print "%d: %s" % (i, arg)
        i += 1


这是应该的运行结果::
    C:\samples&gt; python argshow.py 1 2 3 4 -h -v
    7 items in argument list

    1: argshow.py
    2: 1
    3: 2
    4: 3
    5: 4
    6: -h
    7: -v


Python还提供用于检测特定的参数，并提对应取值的模块，我们当前不讨论这方面的技巧.
将在后面的章节来使用他们.


</t>
<t tx="zoomq.20110428091054.4019">文件
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python有一个内建的文件对象,提供了一些对磁盘文件的基础读写等各种处理方法.
在pgmrand.py 中我们已经看到了一点,现在来继续深入.

open() 方法用以创建一个文件对象实例::

    &gt;&gt;&gt; fname = "test1.txt"
    &gt;&gt;&gt; fmode = "w"
    &gt;&gt;&gt; f = open(fname, fmode)

当然,可以声明为可写::

    f = open("test1.txt", "w")

一样获得了文件对象.

一但我们拥有了文件对象,就可以通过 write() 写入点东西::

    &gt;&gt;&gt; f.write("Test line 1\n")
    &gt;&gt;&gt; f.write("Test line 2\n")
    &gt;&gt;&gt; f.close()

文件现在应该包含两行文本::

    Test line 1
    Test line 2


注意, 字串中写入了 \n (换行符的声明代码).
文件的write() 方法不象 print 那样会在字串尾部自动追加换行符,
所以必须被显式地包含在字符串中.

图表 3.20, "文件I/O 模式"列出了常见的文件模式


.. list-table:: 图表 3.20, 文件I/O 模式
   :widths: 10 40
   :header-rows: 1

   * - 模式  
     - 含义
   * - r  
     - 读
   * - rb  
     - 读二进制流
   * - w  
     - 写
   * - wb  
     - 写二进制流
   * - a
     - 追加
   * - ab
     - 二进制流追加



图表  3.21, “文件方法” 
列出了一些文件对象常用的方法.
其它更多可用方法,请参阅Python的文档.


.. list-table:: 图表  3.21, 文件方法
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - close()   
     - 关闭一个文件
   * - flush()   
     - 刷新内部缓冲区
   * - read([size]) 
     - 从文件中读取指定大小的字节
   * - readline([size]) 
     - 从文件中读取指定行数的内容
   * - write(str) 
     - 将字串写入文件




</t>
<t tx="zoomq.20110429085924.2674">控制台的打印输出
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


我们已经看到了Python的 print 函式的输出.
其主要功能就是发送结果到当前定义为STDOUT(标准输出)的通道中,
print函式可以透明的处理数字类型和字符串之间的转换,以便在控制台输出.
先前有关章节已经讨论过字串格式化,配合print 可以很好的完成格式化输出.

</t>
<t tx="zoomq.20110429085924.2675">重定向打印
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

默认情况下，print 输出被发送到目前任何己定义的STDOUT.
通过使用"锯齿形"( ``&gt;&gt;`` )运算符，print 行为可以修订输出到任何提供了 write() 方法的对象中去.

通常，这将是一个文件对象，如下所示::

    &gt;&gt;&gt; datastr = "This is a test."
    &gt;&gt;&gt; f = open("testfile.txt", "w")
    &gt;&gt;&gt; print &gt;&gt; f,datastr
    &gt;&gt;&gt; f.close()

</t>
<t tx="zoomq.20110429085924.2677">编辑器
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

如果你认为使用一个标准编辑器就足够了 (这正是笔者使用的方式;-)，
有几个优秀的套件可供选择. 表3.22，“文本编辑器的短名单”
列出了一些较受欢迎的推荐.


.. list-table:: 表3.22 文本编辑器的短名单
   :widths: 5 10 5 30 30
   :header-rows: 1

   * - 名称
     - 操作系统
     - 自由开源软件?
     - 赞誉
     - 吐糟
   * - Emacs
     - Linux,Windows,等等
     - 是
     - 支持先进的编辑功能，脚本，语法高亮，和多窗口显示
     - 有一些陡峭的学习曲线，并使用很多不直观的必须记忆的多键组合命令
   * - vi/vim
     - Linux,Windows,等等
     - 是 
     - 基本功能是简单易学的，在不同的Linux和类Unix平台中vi被非常广泛的支持. VIM除了传统的命令行操作还提供了一个GUI界面.
     - 学习更复杂和更高级的功能将是个艰难的过程,同样依赖不直观的组合键
   * - nano
     - Linux
     - 是 
     - 非常简单,支持部分语法高亮
     - 基于pico编辑器及其控制键命令.能力有限.
   * - Slickedit
     - Linux,Windows,等等
     - 否 ($$$) 
     - 大量的功能，完整的GUI界面，可编程的宏，语法高亮. 能仿效其他编辑的能力
     - 对于大多数开发任务来说,需要学习过量的操作细节，而且价格超贵.
   * - UltraEdit
     - Linux,Windows
     - 否 ($) 
     - 完整的GUI界面,非常简单易学,多个标签式的文本窗口，可编程的宏，和语法高亮
     - 有很多一般开发者永远用不到的功能,需要努力才能弄清楚如何调整默认设置，来关闭一些不必要的默认值.需要投入金钱(而且不仅仅)


这仅仅是个部分编辑器的列表，其他还有大量可用编辑器，其中包括很好的开源软件.
如果你还没找到一个非常喜欢的编辑器（或自己开发了一个），
在你的开发平台中值得多尝试比较一下.
但是注意: 有些人似乎对特定的编辑器陷入了狂热.
特别是Emacs 和 vi 尤为明显，两者的持续纷争已远超过20年
(参考 http://en.wikipedia.org/Editor_war).
其实,只要保持开放的心态，为工作选择正确的工具，
至于神马"编辑器战争"就当免费娱乐!


</t>
<t tx="zoomq.20110429085924.2678">IDE 工具
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

IDE环境,试图整合一切程序员的需求到一个单一的工具中.
第一种流行的为PC设计的低成本IDE 是Borland的菲利普卡恩在80年代中期开发的Turbo Pascal,
大多数现代IDE都提供源代码文本编辑器，编译器或解释器的接口，自动编译工具，
也许于包含一些版本控制的支持，以及某种形式的调试器.
换句话说，它是个针对软件开发的一站式购物体验.
我们这里列出的IDE并不是每一个都提供一切功能，
但最起码，你应该期望一个文本编辑器和的运行外部工具和应用程序(诸如如编译器，解释器，和调试器)的能力.
在这个意义上说，即使类似UltraEdit和Emacs的编辑器
(表3.22，“文本编辑器的短名单”列出过)也可用作集成开发环境(实际上通常就是这么用的).
表3.23，“集成开发环境的短名单“列出了一些现成的适合用作Python开发的IDE

.. list-table:: 表3.23 集成开发环境的短名单
   :widths: 5 10 5 30 30
   :header-rows: 1

   * - 名称
     - 操作系统
     - 自由开源软件?
     - 赞誉
     - 吐糟
   * - Boa
     - 所有支持 Python 和 wxPython 的系统
     - 是
     - 用于创建和维护wxPython的GUI组件和应用程序的优秀工具;包括一个像样的编辑器和一个基本的Python调试器
     - 仅为wxPython GUI包开发作了优化,无法作为通用全功能的开发环境
   * - Idle 
     - 所有支持 Python 的系统
     - 是
     - 用Python 本身支持对Python 脚本的编程;提供多编辑窗口，函数/方法提示清单，Python shell窗口，初级调试
     - Idle 的编辑窗口是自由浮动，有时要追踪一个特定的窗口是很恼人的
   * - Eclipse (配合 PyDev) 
     - Linux,Windows,等等
     - 是
     - 由Java编写的异常灵活的多语言IDE; 通过插件模块提供各种开发支持，如PyDev对Python开发支持
     - 项目/包的开发模型,需要应对相当陡峭的学习曲线,可能不是所有人都能适合
   * - PythonWin
     - Windows
     - 是
     - 由ActiveState的Python发行提供, 包含Idle 的大部分相同功能.
     - 仅仅在 Windows 平台可用
   * - WingIDE 
     - Linux,Windows,等
     - 否 ($$$) 
     - 专门面向Python开发和调试提供很多功能
     - 专门为Python开发服务的编辑器，当然,也可以用来写其它语言.界面可能过于纷乱,通常需要花时间来配置好







</t>
<t tx="zoomq.20110429085924.2679">调试
-------------------------------------------------------------------------------

调试器允许一个软件开发人员在软件运行时深入其内部观察.
尽管人们也许认为调试器是很少被使用的,
其实在必要时,调试器可以迅速揭露程序中的严重问题,节省大量的调试时间.
然而，正如其它成瘾物质，一个不小心调试器也将发展为一种严重的依赖症状!

那么,通过调试器我们究竟可以作什么?
对于初学者来说，一个调试器允许开发人员在源代码中选择一个特定的代码行,设置中"断点",
当程序执行到这一点，就可以制止程序运行并检查局部变量.
调试器还支持对代码进行单步执行.
如果调试器有支持"观察", 还可以选择特定的变量在"断点"处显示值,并逐句执行代码显示变量的变化.


目前没有"一刀切"式调试器,可以对任何语言进行调试,虽然也有一些"Shell"为多种开发语言提供了类似接口.

对于Python,
Boa, Idle, Eclipse, 和 WingIDE工具都包含了调试器.
有种独立的Python调试器Winpdb，也可用,
以及Python 本身还内置了一个命令行界面的调试器 PDB.

</t>
<t tx="zoomq.20110504084047.2679">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120301,3.75,4.50,2.00,3.50,4.25,6.00    6, 0, 3, 6
120302,5.75,2.25,0.00,3.00,5.00,6.00    6, 0, 3, 6
120305,0.00,8.75,1.00,3.25,6.00,6.00    6, 0, 3, 6
120306,4.00,1.25,2.00,4.00,6.50,6.00    6, 0, 3, 6
120307,2.00,5.50,1.00,4.00,5.00,6.00    6, 0, 3, 6
120308,0.75,6.00,5.00,3.00,2.50,6.00    6, 1, 1, 4
120309,0.00,7.50,1.74,1.75,4.50,6.00    6, 1, 1, 2
120312,2.50,2.50,1.00,5.75,4.00,6.00    6, 1, 2, 5
120213,1.75,3.00,6.25,4.75,0.75,6.00    6, 1, 2, 4
120314,0.00,4.75,1.25,5.25,4.50,6.00    6, 0, 3, 6
120315,0.00,2.00,0.50,7.50,2.50,6.00    6, 1, 2, 4
120316,2.00,5.00,0.00,5.75,4.50,7.00    6, 1, 2, 5
120319,0.00,3.00,2.00,6.00,4.50,6.00    6, 2, 2, 7
120320,1.00,7.00,2.50,3.50,4.50,7.00    6, 1, 1, 8
120321,0.00,4.25,1.25,7.00,4.00,7.00    6, 2, 1, 6
120322,1.50,2.75,3.00,8.00,2.25,7.00    6, 0, 3, 6
120323,1.00,5.00,0.00,7.00,4.50,7.00    6, 1, 1, 4
120326,2.75,1.00,0.00,8.00,7.00,7.00    6, 0, 2, 6
120327,1.00,8.00,2.00,1.25,3.00,7.00    6, 0, 2, 6
120328,0.00,7.25,0.00,1.50,9.50,6.00    6, 1, 1, 5
120329,4.00,0.00,2.75,3.75,8.00,5.00    6, 0, 3, 6
120330,6.00,1.50,0.00,4.50,8.50,6.00    6, 0, 3, 6
120331,6.25,1.00,0.00,4.25,7.00,6.00    4, 0, 0, 4




</t>
<t tx="zoomq.20110518221155.2680">@path ch00</t>
<t tx="zoomq.20110518221155.2683">@language rest
序言
===============

John Hughes

本书是有关自动化仪器,及对其的自动化控制.
我们将探讨如何运用 Python语言快速轻巧的构建自动化仪器的控制系统.

从研究实验室到工业厂房自动化仪器无所不在.
一但人们意识到收集随时间变迁的数据很有用,自然就需要某种手段来捕捉并完成数据记录.
当然,人们可以取叠纸拿个时钟,盯着温度计,刻度盘或是其它仪表,定期记录数值,但是很快就受不了这种乏味的工作.
如果这一记录过程可以自动化,将更加可靠和易行.
幸运的是,技术的进步早已超越过了手写日志及发条驱动的带状图记录的时代!

如今，人们可以购买各种便宜的物理仪器便宜并使用计算机来获取数据.
一旦计算机被连接到仪器，数据收集，分析和控制等等功能可以肆意扩展.
唯一受到限制的只是实现者自身的创造力了.


@others


</t>
<t tx="zoomq.20110518221155.2684">谁该看这书
-------------------------------------------------------------------------------

本书专为需要或是自制仪器控制器(也称为数据采集和控制系统)的人准备的.
你可能是名研究员，软件开发者，学生，项目主管，工程师，或一个业余爱好者.
想实现的应用系统,可能只是在实验过程中需要的自动化电子测试系统,
或是其它类型的自动化设备.

本书要完成的目标软件将是跨平台的.
我假定你至少在Windows 平台特别是XP 平台玩得很顺.
而我会使用 Ubuntu 发行版本的Linux 系统,
不过书中讨论的程序将在各种兼容发行版中良好运行,同时我也假定你是知道如何使用 csh 或是 bash 命令行脚本.

尽管本书是关于,如何通过物理硬件同现实世界交互,也也涉及到了一系列相关电气产品.
不过,你不必是名有足够背景知识的电气工程师,
在第2章,包含了基本电子理论知识的介绍,
虽然事实上,不必理解深层次的电子学知识也可以令计算机与现实世界交互.
不过,知道多点相关领域知识,绝对没坏处,万一首次遇到意外,我们可以从中获得思路.

不管你工作在哪种类型或是场所,最关键的,我假定你需要通过某地接口捕获一些数据,
或是产生控制信号.
更加重要的是,我们需要轻快精确可靠的构建出这种仪器控制软件来.


</t>
<t tx="zoomq.20110518221155.2686">有关编程
-------------------------------------------------------------------------------

我们将使用Python作为主要的编程语言，仅仅嵌入一点点的C程序.
在本书中，我将假定你有一些编程经验，并对Python或C熟悉（理想情况下，两者）。
如果不是这样，以Perl 或Tcl/ Tk或如Matlab或IDL分析工具的经验，也是一个合理的起点。
本书坚定地回避Python语言更深奥的知识，
配合大量的实例代码,图表注释，和截屏来引导理解.
对C涉及的很小，它只是用来说明如何创建和使用的Python应用的底层系统扩展.

第3章的覆盖了Python语言的基础介绍,
第4章的介绍了C语言的基础知识,
对以上语言进一步的探究通过阅读建议引导读者自行学习.

</t>
<t tx="zoomq.20110518221155.2688">为嘛Python?
-------------------------------------------------------------------------------

Python 是Guido van Rossum在八十年代未开发的解释型语言.
因其是种即时编译的脚本语言，用户可以在Python 命令行环境中直接创建并执行。
语言本身也很容易学习和理解，只要一开始不用理会过多的高级功能
（装饰器，自省，列表推导，等等）.
因此，Python 提供了快速构建原型及易懂的的双重好处，
这反过来又有利于快速为不同的设备创建各种不同应用，
没有开发者通常需要应对的学习曲线以及传统的编译语言依赖的特定供应商提供的编程环境。

Python是高度可移植的，它是几乎运行在所有现代计算平台中.
在项目中坚持只使用常用的接口方法，应用程序就很可能在Windows的PC中编写,
但是不用修改一行也可以在Linux操作系统中运行良好。
甚至于可以Sun的Solaris机器以及或苹果OS X系统中运行，
即使书中没有特意提及这点.
一但Python 必须配合特定平台的特定扩展或驱动程序,便失去了可移植，
所以在这些情况下，我将提供分别适用于Windows和Linux的替代品.


本书包括完整的可用示例代码，并配合框图和流程图来说明关键点，
来操作一些现成的，低成本的接口硬件。



</t>
<t tx="zoomq.20110518221155.2690">系统
-------------------------------------------------------------------------------

我们将探究的是那种即可以用在实验室,也可以直接用于工业环境的仪器设备.
比如说,在电子实验室,风洞,或是气象数据收集.
系统可能只是一个简单的温度记录仪,也可能是个复杂的真空控制系统.

一般来说，本书描述的技术可以作用于任何可以连接到PC机的硬件,
当然总是有些设备是使用封闭标准的特殊硬件,但是我们不会处理这种软件,
也不会深入到复杂的数据处理领域,比如说:炼油厂的自动工程方案，核电厂，或机器人飞船。
系统在这些领域通常是通过专用硬件来实现极其复杂的控制，配合同样精密和复杂的软件。
我们只关注最通用的设备,驱动和接口,以及使用一些常用界面方法轻松构建出可用的系统.



</t>
<t tx="zoomq.20110518221155.2692">方法论
-------------------------------------------------------------------------------

我们通过现实世界的实例一步步的理解如何定义设备应用,选择合理的接口以及硬件,
并建立可能需要的底层驱动以便配合Python接口与完成硬件控制。
我们还将探索TkInter和wxPython的图形界面,以及 curses 的图形化文字界面.

本书包含的主要内容有:

- 如何封装一个硬件供应商的DLL驱动,以便Python 扩展使用
- 如何与USB为基础的I / O设备
- 如何使用类似RS- 232和RS -485或是 GPIB工业标准接口
- 追加上一个什么样的硬件类型才可能发现并使用接口

本书还提供了参考,索引现成的开源工具和库,
以便即使从零开始,也可以用最短的时间完成一个可用的硬件控制系统.


</t>
<t tx="zoomq.20110518221155.2694">本书组织
-------------------------------------------------------------------------------

本书分为14个章节和2节附录。
第14章将前12章的所有实践集中应用为一系列现实世界的例子.
1至6章引入基础概念，读者可以选择跳过。

这里列出每章关键内容的简介:

- 第1章,仪器介绍
    - 从整体上来说什么是仪器,以及如何控制系统的工作，以及这些概念如何在实际世界使用.涵盖的例子包含自动户外灯，电器仪表在工程中的测试,在实验室中控制化学过程和热度批处理.
- 第2章，电气精要
    - 因为作为手册书,必须对物理硬件接口以及如何完成一个自动化工程从整体上涉及的各个方面要有描述.本章对电子以及电气产品,进行了简介;然后探讨了内置功能模块以及数字控制接口，模拟接口，计数器和计时器.最后，介绍了评论述了作为背景技术的串行和并行接口.如果你已经熟悉电子电路原理和装置，你以跳过本章。不过，建议至少要关注一下，以便为今后可能的利用留个印象
- 第3章，Python编程语言
    - 尽管这本书不是Python教程，但是本章提供了Python 的基本知识以及核心概念,以便读者快速上手将Python 最常用的功能在本书讨论情景中应用起来;本章还提供了一系列工具的概述,以便协助大家更加轻松的进行编程.
- 第4章，C语言
    - 从本章,引入高层次的C编程语言知识. 目标是提供足够的资料，以便理解书中实例代码,并不会引入C语言神秘的细节.幸运的是，C其实是相对简单的语言，而在这一章的信息应足以让你开始创建自己的驱动扩展以供给Python 脚本使用\
- 第5章，Python扩展
    - 本章介绍了如何Python扩展是如何创建的，以及通常有哪些种类的扩.提供的例子，无论是在本章，或是在后面的章节，都可以作为你自己应用的模板来开始.
- 第6章，硬件工具
    - 虽然读者可能是位从来没有触摸过仪器设备以及电烙铁,但是很有可能用过螺丝刀，钢丝钳，和数字万用表（DMM）,这也足够开始了. 在这一章我提供一个清单,来说明开发仪表系统需要什么样的基本工具,以便可以按图索骥的填充到书架上一个小盒子里,为你将来可能真的动手创造自动系统时使用. 在最后，充分讨论了两件可以帮助你免除猜测之苦快速定位问题的设备:示波器和逻辑分析仪. 本章还就应该准备哪些类型的工具提供了一​​些可行性建议，以便读者参考决定购置或是升級.
- 第7章，物理接口
    - 列出了一系列用Python进行数据采集或是控制时最常见的物理接口.RS -232和RS- 485，就仪器控制而言,这就是最常见的两个串行接口.本章还涵盖了讨论中一些场景中会遇见的USB和GPIB/IEEE-488接口的基础知识.最后，我们将关注PC的可插入式I/O硬件,即通常的PCI-型电路板，以及通常可从硬件供应商得到支持的API规范.
- 第8章，入门
    - 本章描述一个对软件开发行之有效的过程. 将这一内容设置在这，是因为，不论用何种语言来开发自控系统，至关重要的是计划，明确核心功能，比照预期数据来观察测试结果，并持续改进这一过程. 通过开发Python扩展,我们击穿了模糊和不确定之门，通过设备控制软件进入了真实世界.
- 第9章，控制系统概念
    - 要对现实世界进行数据采集和控制，必须至少经营部分控制和系统论. 本章扩展了在第一章中介绍的控制系统概念,详细介绍的检查与共同控制系统概念和模型，包括议题如反馈，“砰，砰“的控制器，和比例积微分（PID）控制.还提供了一个基本控制系统案例分析,并给出了如何选择一个合适模型的一些指导方针.最后，我们来看看如何应用数学控制系统转化为实际的Python代码.
- 第10章，建立和使用模拟器
    - 建立和使用模拟器,可以帮助我们加快开发过程，通过提供一个可以安全试错的环境，来检验思路，不仅针对控制软件，还可以针对可模拟的硬件提供一些宝贵的经验（非侵入式的. 无论是因为目标硬件暂时未能提供，或太昂贵无法承担损坏的风险，都可以通过模拟器,简便令软件可以运行,进行测试改进,获得足够的信心，令它正常在现实世界中工作.
- 第11章，设备I/O
    - 在这一章中，我们将看看如何使用在第7章中介绍的物理接口,在真实世界和你的应用间搬运数据. 我们将从接口协议格式开始讨论一些基本概念,然后引入一些软件实例,以便介绍几个常用协议解析包:pySerial，pyParallel和PyVISA. 最后，会展示一些技术来说明如何读取和写入数据到设备. 我们将对比阻塞与非阻塞的I/O事件，以及如何应对潜在的数据I/O错误，以便使你的应用程序更加健壮.
- 第12章，计件读写
    - 本章谈及如何实施对设备文件的读写以及审查,并对比了文件格式,从普通的ASCII和CSV文件和到二进制文件数据库都进行了简述. 我们还将研究Python对配置文件的处理能力，看看它通过库方法是多么容易存储和检索配置参数的.
- 第13章，用户界面
    - ​​除非应用程序是嵌入硬件或是专门设计作为后台运行过程的，可能都会需要种用户界面. 本章考察命令行界面,或是用Python 的curses模块生成的文字控制界面,以及如何使用ANSI-的终端仿真器程序显示数据，接受输入. 本章还包含如何用Python 内置的TkInter模块来生成GUI界面,并另外阐述了 wxPython GUI包.
- 第14章，真实实例
    - 我们将考察几种不同类型的设备如何进行数据采集和控制. 本章首先是一个捕捉从连续的数据输出的数字万用表实例子.然后，我们考察一个采用普通的串行接口进行命令和数据交换的数据采集装置. 最后，我们将详细分析硬件供应商提供的一个API接口如何通过DLL对USB设备进行数据I/O操作. 借鉴较早章节的例子对常见设备完成几乎所有的关键操作,以展示如何将理论付诸实践.
- 两章附录,包含其它实用信息:
    - 附录 A, 自由及开源软件资源
    - 附录 B, 仪器设备资源





</t>
<t tx="zoomq.20110518221155.2696">图书规约
-------------------------------------------------------------------------------

以下是本书的排版规约:


.. list-table:: 
   :widths: 10 40
   :header-rows: 1

   * - *斜体*
     - 用于 新条目,URL,邮箱,文件名,文件后綴
   * - ``等宽``
     - 用于 程序清单，以及段落内Python模块和参考，如变量或函数名，数据类型，描述以及关键字
   * - :sup:`等宽粗体`
     - 显示应当由用户输入的命令或其他文本面
   * - :sub:`等宽斜体`
     - 显示应由用户提供的值或值根据上下文应该替换的文本


.. note:: (~_~)

    - 有这种图标的表示是建议和提示


.. warning:: (#_#)

    - 有这种图标的表示警告和注意




</t>
<t tx="zoomq.20110518221155.2698">示例使用
-------------------------------------------------------------------------------

本书的宗旨就是帮助你完成工作.
一般而言,你可以在自己的程序和文档中随意使用书中的代码.
除非你原样引用大量代码.否则无须联系我们获得授权.
例如,在编写程序时引用了本书若干代码片段是无须授权的,
然而销售或分发O'Reilly图书示例光盘则是需要许可授权的.
通过引用本书内容以及代码的方式来答疑解难是不必有授权的.而将书中的代码大量加入到你的产品以及文档中,则需要授权.


如果你在引用书中内容时注明出处,我们将不胜感激,但是这不是必须的.
引用声明通常是包含了标题,作者,出版商和ISBN编码.
例如：“Real World Instrumentation with Python by J.M. Hughes. Copyright 2011 John M. Hughes, 978-0-596-80956-0.”

如果你发现自己对书中代码的使用有失公允,或是违反了前述条款,敬请通过 &lt;permissions@oreilly.com&gt; 与我们联系.



</t>
<t tx="zoomq.20110518221155.2699">Safari® Books Online
-------------------------------------------------------------------------------

.. note:: (~_~)

    - Safari在线丛书是项长期的数字图书馆计划，旨在帮助你您轻松地搜索超过7500科技和创意的参考书籍和视频，快捷找到您需要的答案。
    - 通过订阅，你可以翻阅所有网页，看我们的图书馆的任何在线视频。通过手机和移动设备阅读的书籍。查阅还末印刷的图书，并得到作者的手稿,反馈以及独家访问。复制并粘贴代码样本，组织您的收藏夹，下载章节，书签重点地段，创建笔记，打印页面，从节省多种时间中受益。
    - O'Reilly 已经将这本书上传到 Safari在线丛书。探索权限的用户可以直接查阅本书内容,公众可以查阅摘要内容. 从 http://my.safaribooksonline.com 可以免费注册.



</t>
<t tx="zoomq.20110518221155.2701">联系我们
-------------------------------------------------------------------------------

如果对本书有任何疑问和建议,敬请联系出版社 ::

    O’Reilly Media, Inc.
    1005 Gravenstein Highway North
    Sebastopol, CA 95472
    800-998-9938 (in the United States or Canada)
    707-829-0515 (international or local)
    707-829-0104 (fax)

本书发布有专门页面,收集有堪误,示例,以及其它信息:
    - http://www.oreilly.com/catalog/9780596809560/

想对本书发表评论或是有技术疑问,请发送电子邮件至::

    &lt;bookquestions@oreilly.com&gt;

有关O’Reilly更多的图书,会议,资源中心以及网站,请移移步:

    http://www.oreilly.com


</t>
<t tx="zoomq.20110518221155.2703">感谢
-------------------------------------------------------------------------------

我要感谢那些帮助我完成本书的人:
我的妻子，卡罗尔，和女儿，Seren，当我从办公室长时间消失，感谢他们的耐心和理解;
我的朋友和同事Michael North-Morris ,为他永久的乐观，
我的责任编辑，朱莉斯蒂尔，为她主动抓住我,鼓励我抓住为O'Reilly写书，
Rachel Head,勤奋的文字编辑，忍受我滥用英语,
以及所有在O'Reilly工作人员的友好帮助。

我还要感谢 LabJack Corporation 公司提供真实硬件使用,并慷慨地提供他们的时间和支持，
以帮助我确保它工作正常。
还要感谢珍妮史密斯安捷伦提供，他们的一些产品质量的照片。


</t>
<t tx="zoomq.20110523143238.2694">对外 py 服务资源

http://py.kingsoft.net:8080/rwiwpyzh/
访问帐号是:
User: obp
Paass: RWIwPyZh
</t>
<t tx="zoomq.20110523143238.2695"># 当前主力资源发布主机
</t>
<t tx="zoomq.20110523143238.2696">部署 zqrgen 时，发现 nginx 异常，所以!
zoomq@trac2ubuntu:/data/_src/uwsgi-0.9.7.2
$ python uwsgiconfig.py --build 
...
$ /opt/sbin/uwsgi --version
    uWSGI 0.9.7.2

$usr/bin/openssl version
    OpenSSL 0.9.8k 25 Mar 2009
$ agi libssl-dev
    ...
    libssl-dev 0.9.8k-7ubuntu8.6
    
zoomq@trac2ubuntu:/data/_src/nginx-1.0.2
# ./configure \
    --prefix=/data/nginx \
    --user=www \
    --group=www \
    --sbin-path=/data/nginx/sbin/nginx \
    --conf-path=/data/nginx/conf/nginx.conf \
    --pid-path=/data/nginx/run/nginx.pid  \
    --lock-path=/data/nginx/lock/nginx.lock \
    --error-log-path=/data/nginx/log/error.log \
    --http-log-path=/data/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --http-client-body-temp-path=/data/nginx/tmp/client_body  \
    --http-proxy-temp-path=/data/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/data/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/data/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/data/nginx/tmp/scgi_temp 
...
Configuration summary
  + using system PCRE library
  + using system OpenSSL library
  + md5: using OpenSSL library
  + sha1 library is not used
  + using system zlib library

  nginx path prefix: "/data/nginx"
  nginx binary file: "/data/nginx/sbin/nginx"
  nginx configuration prefix: "/data/nginx/conf"
  nginx configuration file: "/data/nginx/conf/nginx.conf"
  nginx pid file: "/data/nginx/run/nginx.pid"
  nginx error log file: "/data/nginx/log/error.log"
  nginx http access log file: "/data/nginx/log/access.log"
  nginx http client request body temporary files: "/data/nginx/tmp/client_body"
  nginx http proxy temporary files: "/data/nginx/tmp/proxy"
  nginx http fastcgi temporary files: "/data/nginx/tmp/fastcgi"
  nginx http uwsgi temporary files: "/data/nginx/tmp/uwsgi_temp"
  nginx http scgi temporary files: "/data/nginx/tmp/scgi_temp"

</t>
<t tx="zoomq.20110523143238.2697"></t>
<t tx="zoomq.20110601083753.2699">date,tI,tO,tC,tM,tF,tS
110503,4.00,4.75,2.00,1.75,3.50,8.00
110504,1.25,4.50,2.25,2.50,5.00,7.00
110505,0.00,1.75,4.75,3.00,6.00,7.00
110506,1.75,2.25,1.00,5.50,4.00,7.50
110507,1.50,3.50,0.00,7.25,4.00,8.50
110509,3.00,3.50,0.00,6.50,3.50,8.00
110510,5.00,2.75,2.25,4.50,2.50,7.50
110511,3.00,4.75,1.25,3.25,5.50,7.00
110512,1.50,7.25,3.25,4.00,4.00,6.50
110513,0.00,4.75,0.00,6.75,5.50,7.00
110516,0.00,6.00,0.00,4.50,3.50,7.00
110517,0.00,5.50,1.00,4.50,4.25,7.50
110518,2.75,3.25,1.50,4.00,3.75,8.00
110519,0.00,4.00,3.50,4.50,4.00,8.00
110520,2.25,2.50,0.00,5.75,5.50,7.50
110521,1.00,3.25,1.50,6.75,4.00,7.00
110523,0.00,5.35,1.75,4.60,4.00,7.50
110524,2.50,1.50,0.30,6.75,5.00,7.00
110525,0.00,4.25,1.00,5.75,5.00,7.00
110526,1.00,3.50,4.75,5.50,0.50,6.00
110527,0.00,3.75,0.00,8.75,4.00,7.50
110530,1.00,1.75,2.00,7.25,5.00,7.50
110531,1.00,2.00,2.25,6.75,3.50,7.50



</t>
<t tx="zoomq.20110705091223.2700">date,tI,tO,tC,tM,tF,tS
110601,0.00,2.75,1.00,6.00,5.75,10.0
110602,1.00,2.00,3.00,8.50,1.00,6.50
110603,1.00,2.50,2.00,6.50,4.00,7.50
110607,1.75,1.75,0.00,8.25,5.00,7.50
110608,0.00,0.00,0.00,3.00,13.0,8.00
110609,2.00,3.00,2.00,4.00,1.50,11.0
110610,0.50,4.00,0.75,3.75,6.75,8.25
110613,1.00,3.50,1.00,6.25,4.00,8.00
110614,3.25,2.75,0.00,4.75,5.25,8.00
110615,1.00,2.50,1.50,6.00,6.00,8.00
110616,0.00,3.25,0.75,6.50,6.00,7.00
110617,1.50,2.25,2.00,5.00,4.00,7.50
110620,1.00,2.50,0.00,8.50,1.00,7.50
110621,0.00,3.00,1.00,8.00,1.00,7.50
110622,0.00,3.50,1.00,7.00,5.00,7.50
110627,2.00,1.00,0.50,6.00,5.50,9.50
110628,1.00,1.50,2.50,5.50,5.75,6.00


</t>
<t tx="zoomq.20110709131924.2700">110725+w2 ZQ:
    + .5d CVS 数据重构
    + 1d 大图片下载
    + 2d 网页信息分析
    + 1d 文档
110713~   ZQ 完成自动化抓取/分析/入库和提取API 的设计,工作量估计:
    '+ .5d  API 设计
    + .5d  架构 设计
    '+ 1d  MongoDB 试用
    + 1d  #Spider框架对比
        gcrawler.py
        猛禽 raptor.zh@gmail.com
    + 1d  vancl 页面元素分析
    + 1d  fadpop 原型
    + 1d  原型调试
    + .5d  #文档
    ~ 6.5d 左右完成可演示原型

</t>
<t tx="zoomq.20110709131924.2701">db-&gt;docfad
collec-&gt;items

女装商品抓取:
    item
        _id
        uri
    + 背景 bg:
       - com   电商名
       - brand  品牌名
       - sid    编号
       - store  库存数量
       - sale   已售出
       - prix   价格(原价+各种优惠价格)
       - agio   折扣
       - vip 
    + 属性 attr :
       - name   品名
       - class (分类)
       - desc   描述
        - txt   读本描述
        - size   尺寸(码表)矩阵数据...
        - others    其它各种属性:
            
        '''
        - cut   剪裁：常规款
        - design    花色：素色
        - detail    细节：前胸烫钻,门襟五爪扣
        - series    系列：商务系列,休闲系列
        - arm   袖型：短袖
        - neck  领型：单层领,翻领
        '''
       - color  颜色
       - 图片(根据内容分类)
        #DBRef 指向各个 GFS 对象
        - filename  文件名
        - showas  thumb|mid|big
        - asmain    true|false
        - size 长x宽
        In [12]: import Image
        In [13]: im = Image.open("/home/zoomq/workspace/yuike/stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang/2010_3_4_15_54_18_5529.jpg")
        In [14]: im.size
Out[14]: (400, 400)

       - apt    aptitude 材质
        - cons  constituent 成分：100%棉
        - wash  洗涤要求
            - #列表，所有标志图片？
    + comments 评议:
        - feel 很舒服（45%）、透气性适中（53%）、厚度适中（87%）、重量适中（80%）、材质适中（57%）、样式很漂亮（48%）
        - unit  综合
        - noma  外观
        - bask  舒适
        - size 尺码 
            # 2% 的用户认为实际尺码[偏大]
            # 66% 的用户认为实际尺码[合适]
            # 31% 的用户认为实际尺码[偏小]
        - taker 购买者评论
            - total 共2949条
            - comment
                - name
                - date
                - cont
                - hold  拥有的商品描述
            - shiner    晒单图片/文字
                - total 共7条
                - shine
                    - foto DBref
                    - name
                    - date
                    - cont
       - 搭配商品
       </t>
<t tx="zoomq.20110709131924.2702">#110717 vancl cvs-&gt;大图url 列表
wget -c -nv -P 20110709_nvzhuang_bigpic --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i taobao_Week_20110709_nvzhuang_bigpic.uri

wget -c -nv -P 20110709_nvzhuang_htm --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i taobao_Week_20110709_nvzhuang_htm.uri


wget -S http://images.vancl.com
'''
--2011-08-04 19:51:18--  http://images.vancl.com/
正在解析主机 images.vancl.com... 119.147.105.159, 121.14.235.123, 121.14.234.202, ...
正在连接 images.vancl.com|119.147.105.159|:80... 已连接。
已发出 HTTP 请求，正在等待回应... 
  HTTP/1.0 403 Forbidden
  Content-Type: text/html
  Server: Microsoft-IIS/7.5
  X-Powered-By: ASP.NET
  Date: Thu, 04 Aug 2011 11:52:30 GMT
  Content-Length: 1157
  X-Cache: MISS from vanclimg-squid-admin
  Via: 1.0 vanclimg-squid-admin (squid/3.1.12)
  Powered-By-ChinaCache: MISS from CHN-TJ-2-389
  Cache-Control: max-age=43200
  Powered-By-ChinaCache: MISS from CHN-DG-1-37a
  Connection: close
2011-08-04 19:51:18 错误 403：Forbidden。
'''

</t>
<t tx="zoomq.20110709131924.2703">人体工学电脑椅选购建议 | 潘魏增
http://panweizeng.com/chairs.html

兴豪正品 吐血价 ergohuman-B01 金豪B01 CS 亚梭111杭州包快递-淘宝网
    http://item.taobao.com/item.htm?id=2513676658
    3000

1800元超高性价比人体工学电脑椅评测 | 电脑椅,转椅,电脑椅品牌推荐
    http://www.diannaoyi2.info/rentigongxuediannaoyipingce.html
    SL-B3 金豪B01正品山寨 2000
        http://item.taobao.com/item.htm?id=10818151961
    供应全国各地网椅老板椅SL-B3-广州一铭办公家具有限公司
        http://gzyiming.b2b.bestb2b.com/b2bproduct3405734.htm
    可以直购

皇冠信誉 2011最新款DXRACER F88高级电脑椅/办公椅/躺椅/转椅-淘宝网
    http://item.taobao.com/item.htm?id=1368574010
    1200


</t>
<t tx="zoomq.20110711090727.6882">- 所有成员配置统一的 MacBook pro(从HK订购直送)
    - 因为 MacBook(Z0JQ;4G/500G)要HK$ 9,368 ~ RMB:7869.19
    - 同时 MacBook Pro(Z0LY;4G/500G)也就HK$ 9,498 ~ 7953.12
    - 只差100HKS(即84RMB), 为什么不要更加漂亮的?

MacBook
    * RMB 9,795
    ~ HK$ 9,368
    * 编号: Z0JQ

配置
    * 2.4GHz Intel Core 2 Duo
    * 4GB 1066MHz DDR3 SDRAM (2x2GB)
    * 500GB Serial ATA 驱动器 (5400 rpm)
    * KEYBOARD/USERS GUIDE,K87 -CHN

    * SuperDrive 8 倍速 DVD+/-R DL/DVD+/-RW/CD-RW
    * Mini DisplayPort 至 VGA 转接器
    * COUNTRY KIT,K87 -CHN


13 英寸 MacBook Pro
    * RMB 9,621
        HK$ 9,698
    * 產品編號: Z0LY

配置
    * 2.3GHz 雙核心 Intel Core i5
    * 4GB 1333MHz DDR3 SDRAM - 2x2GB
    * 500GB Serial ATA 硬碟 @ 5400 rpm
    
    * SuperDrive 8x (DVD±R DL/DVD±RW/CD-RW)
    * Mini DisplayPort to VGA Adapter
    * Country Kit

13 吋 MacBook Pro
    # HK$ 11,258
    ~ CNY 9569.3
    * 產品編號: Z0LY
配置
    * 2.3GHz 雙核心 Intel Core i5
    * 8GB 1333MHz DDR3 SDRAM - 2x4GB
    * 500GB Serial ATA 硬碟 @ 5400 rpm

    * SuperDrive 8x (DVD±R DL/DVD±RW/CD-RW)
    * Mini DisplayPort to VGA Adapter
    * Country Kit


</t>
<t tx="zoomq.20110711090727.6883">- 服务器,计划内网4台,外网1台先,用途:
    + 外网(代号:Li) 负责全应用的测试部署,以后转为应用/存儲均衡机之一
    + 内网(代号:Be) 承担日常自动化开发支撑,具体的:
        + Be0 持续集成/测试/发布机(对外联系/代理)
        + Be1 代码仓库/任务追踪/SCM
        + Be2 数据仓库/spider 管理
        + Be3 数据备份机(代码/应用/团队资料...)
    采购建议:
        - 都统一一个廠商,以便长期优惠(Dell 硬件价格最低,服务价格较高,在IBM/HP之间)
        - 外网,先用 PowerEdge R310 机架式服务器
            + RMB21,171.77 配置16G/500Gb(SATA)*4 作RAID1+0
        - 内网,先用 Vostro 230微塔式台式机
            + RMB4,362 配置4G/500GbSATA
            # &gt;8G 才有amd64 的威力!
            + 另外采购若干西部数据（Western Digital）2TB SATAII 3.5寸台式机硬盘;京东价：569(平均: 0.28/Gb最便宜)
            + 配套的18.5宽屏就配置为开发人员的第2屏幕以便编程
</t>
<t tx="zoomq.20110711090727.6884">dreamhost SSH 一年 700 RMB

(17:49:26) 小白}khsing: 
公司用的话还是linode好一些
(17:48:56) 小白}khsing: 
我目前用photonvps $6/月</t>
<t tx="zoomq.20110711214730.2707">du -hs *
44M     4m18
260M    4moonbasa
3.5M    channel.vancl.com
1.9G    item.vancl.com
24K     mkt.vancl.com
108K    news.vancl.com
24M     s.vancl.com
4.7G    www.vancl.com

</t>
<t tx="zoomq.20110711214730.4102">http://leankitkanban.com/
P:  Zq@sns
   +fadpop@gmail.

u行:Flow:
    BackLog
    Ready
    WiP
    Test
    Livin
列:分类:
    Suport
    Dialy
    Proj*
    outplanned
Size:
    .5d XS
    1d  S
    2d  M
    3d  L
    4d  XL    
    5d  XXL
    &gt;5d XXXL


</t>
<t tx="zoomq.20110713090346.2709">@path /home/zoomq/workspace/yuike/fadpop
#   /home/zoomq/workspace/yuike/fadpop
#   /home/zoomq/mnt/kup.pyk/fadpop
#   /home/zoomq/mnt/kup.common/fadpop

是也乎,是也乎,服务端...

经常性的超时:

Traceback (most recent call last):
  File "vancl-up4info2karait.py", line 197, in _loadpics
    open(realpic,'wb').write(urllib2.urlopen(foto['uri']).read())
  File "/usr/local/lib/python2.7/socket.py", line 351, in read
    data = self._sock.recv(rbufsize)
  File "/usr/local/lib/python2.7/httplib.py", line 561, in read
    s = self.fp.read(amt)
  File "/usr/local/lib/python2.7/socket.py", line 380, in read
    data = self._sock.recv(left)
KeyboardInterrupt
        None
</t>
<t tx="zoomq.20110714001632.2710">@path api
zq：关于如何从商家获得返利佣金，请参考：51fanli，qq返利，360返利等网站，通过查看他们的导向商家URL，一看便知，进而可以找到电商的WEB API列表，一般都很简单。


</t>
<t tx="zoomq.20110714090951.4108">#110708 进入!
fadpop
    fast apt daemon for platform of ply
    交易快速敏捷守护平台

visualseawind@gmail.com 海峰
周君亮 jesuzjl18@gmail.com
胡磊磊 huleilei@gmail.com
王刚  gang.wang.china@gmail.com

</t>
<t tx="zoomq.20110714090951.5508">梦芭莎: 网站联盟: 注册
http://union.moonbasa.com/register.aspx
    U:  fadpop
    P:  Fad@m00n
#分类:
    图片链接:
    &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/" target="_blank"&gt;&lt;img src="http://union.moonbasa.com/adpic?e=176" width="136" height="240" border="0" /&gt;&lt;/a&gt;
    文字链接:
    &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/010204-1-20-0.html" target="_blank"&gt;dddd&lt;/a&gt;
商品:
     &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/p-010111111.html" target="_blank"&gt;经典集中豹纹蝶形一片式挺拔性感文胸&lt;/a&gt;

#链接跟踪参数说明
Moonbasa根据链接中的参数，判断联盟会员的来源。
    Moonbasa提供2个可接受跟踪参数的页面，分别是首页和跳转页。
参数1：a_id，指定mbs值
参数2：other，指定联盟帐号名
参数3：Url，指定要跳转到的页面

如果联盟帐号为user1，要跳转的页面地址为：
http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004
则指定source值的地址链接应该为：
http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=user1&amp;url=http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004

如果你想推广其它产品页面，只要把"http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004"换成您自己指定要跳转到的页面地址就可以了。
</t>
<t tx="zoomq.20110714090951.5509">新手必读：网站联盟合作伙伴初级帮助教程下载 - VANCL论坛
    http://bbs.vancl.com/showtopic-191551.aspx
'''
投放Vancl广告，赚取高额佣金！
    如果您每月为凡客诚品进行推广获得的推广服务费达到人民币伍仟元（包括5000元）以上，则您必须与凡客诚品签署书面联盟协议后方可进行结算。如有问题请联系我们：E-mail：unionA@vancl.cn
个人网站联盟推广方法：
   1、网站会员链接推广：
      登录联盟账户--获取广告代码链接--投放广告--用户通过链接购买--赚取佣金
   2、网店会员代客下单：
      登录联盟账户---绑定购买账户--下载数据包--通过淘宝助手上传--用户挑选产品-- 代客下单--赚取佣金
'''
http://union.vancl.com/register_webUnion.aspx
    U:  fadpop
    P:  Fad@un10n


#110804 vim :set fileencoding
fileencoding=utf-16le
?!?!</t>
<t tx="zoomq.20110714090951.5510">绑定凡客购物账户教程：

1. 注册凡客购物账户http://www.vancl.com/login/Reg.aspx
2. 绑定填写刚注册的购物账户信息http://union.vancl.com/Agent_BuyToVancl.aspx
3. 完成绑定后，就可通过代客下单入口进行代客下单

绑定: zoomquiet@gmail.com

</t>
<t tx="zoomq.20110714090951.5511">    * 总数据包：包含凡客诚品官网上所有在售的商品信息，适合第一次开始售卖凡客诚品商品的网店
    * 新增数据包：包含最近一周内新上架的产品信息，适合已经在经营凡客诚品商品的网店
    * 商品每天的上下架信息，需要在联盟账户 — 信息查询 — 查询上下架信息里查询
</t>
<t tx="zoomq.20110714090951.5512">网站专用
    轻松链
        在轻松链中您可以找到适合自己网站尺寸的图片广告，将代码黏贴到自己网站即可。
    自定义链接
        如果在轻松链里您没有找到适合的图片广告，或者想制作一个的文字链接，那么就来制作自定义的链接吧
    商品XML文件下载
        此文件为VANCL网站商品信息，主要向一些第三方网上商城（淘宝店铺除外）提供全面及时的商品信息
onsale_products_20110713.xml 92.6Mb
'''
XML节点信息做一个详细的介绍: 
1,products为XML的根节点.product节点为单一商品 
2,productCode为商品编号.name为商品名称 
3,url 商品在vancl上的详细页 
4,photos 商品图片链接地址.photo为photos子节点提供具体的链接地址 
5,currentPrice 当前价格.originalPrice 原始价格 
6,category 分类.firstCategory 一级分类.secondCategory 二级分类. 
7,color 颜色.sizes 尺寸 
8,isSpecial 是否特例.description 商品描述
'''
    手机平台链接
        在这里，您可以制作符合手机浏览的图片链接或文字链接
        &lt;a href="http://m.vancl.com/style/StyleHome/0/0123708/0/.mvc?guid=918e3afadc0e48d381698d4baefc1bf4&amp;source=fadpop" target="_blank"&gt;dfadpop&lt;/a&gt;
</t>
<t tx="zoomq.20110714090951.5513">
&lt;div class="pic_ct"&gt;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;div class="jqzoom"&gt;
                &lt;img id="bigimg" src="http://images.moonbasa.com/ProductImg/Large/0321112720L01.jpg"
                        alt="假日风情宽条纹T恤衫" jqimg="http://images.moonbasa.com/ProductImg/HUGE/0321112720H01.jpg" /&gt;
                &lt;img src="http://images.moonbasa.com/ProductImg/HUGE/0321112720H01.jpg" onerror='javascript:$("#bigimg").attr("jqimg","");' style="display:none" /&gt;
直接是大图！
            &lt;/div&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</t>
<t tx="zoomq.20110714090951.5514">&lt;div class="fangdaArea"&gt;
    &lt;p class="fangda"&gt;
        &lt;img src="//images.vancl.com/Others/2010/8/20/fangda.gif" alt="放大查看" /&gt;&lt;span&gt;&lt;a
            href="/Styles/BigImg.mvc?ProductCode=0088416&amp;ProductName=%e7%bb%8f%e5%85%b8%e7%99%be%e6%90%ad%e7%a9%ba%e8%b0%83%e8%a1%ab+%e9%bb%91%e8%89%b2"
            target="_blank"&gt;放大查看&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
指向大图:
    ProductCode=0088416
    http://item.vancl.com/Styles/BigImg.mvc?ProductCode={{商品编号}}

而最终实际的:
    同名，不同目录进行生成
    http://images.vancl.com/product/0/0/0/0002655/Small/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/mid/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/Big/2010_7_2_16_44_0_354.jpg

相关颜色变化
&lt;div class="selColor"&gt;
    &lt;ul&gt;
        &lt;li
            name="productcode=0088404&amp;point=0"  title="粉蓝色" &gt;
直接指向相关的最终产品页!
    - http://item.vancl.com/{{productcode}}.html
            &lt;div class="colorBlock" name="False"&gt;
                &lt;img src="http://images.vancl.com/product/0/0/8/008840/0088404.jpg" 
                  alt="粉蓝色"
                 /&gt;
                 &lt;p&gt;
                    粉蓝色&lt;/p&gt;
            &lt;/div&gt;
        &lt;/li&gt;

</t>
<t tx="zoomq.20110714090951.6916">735250855 
參考	8162799701 
提貨日期	12 Jul 2011 
目的地	CHEK LAP KOK 
送貨日期	 
簽名	 
日期	時間	地點	貨件狀態
14 Jul 2011 	06:23:00 	Kwai Fong Depot 	Shipment Arrived In Warehouse 
14 Jul 2011 	06:20:00 	Kwai Fong Depot 	Late Shipment Data From Sender. Follow Up Action Underway. 
14 Jul 2011 	06:15:00 	Kwai Fong Depot 	Held Awaiting Correct Address. Follow Up Actions Underway. 
14 Jul 2011 	01:13:39 	Kwai Fong Depot 	Shipment Received At Destination Depot. 
12 Jul 2011 	19:13:33 	Pudong International Airport 	Shipment Received At Transit Point. 
12 Jul 2011 	18:55:16 	Pudong International Airport 	Shipment In Transit. 
12 Jul 2011 	18:32:00 	Shanghai 	Shipment In Transit. 
12 Jul 2011 	18:27:37 	Shanghai 	Shipment In Transit. 
12 Jul 2011 	17:17:58 	Shanghai 	Shipment Collected From Sender. 
</t>
<t tx="zoomq.20110714090951.6917">Wordnik OSS tools
Take our tools-They work!!!

    SnapshotUtil
    Selectively snapshot in BSON

Index info too!
     IncrementalBackupUtil

Tail the oplog, stream to disk
     Only the collections you want!
     Compress &amp; rotate
     RestoreUtil

Recover your snapshots
    
Apply indexes yourself
     ReplayUtil
    Apply your Incremental backups



</t>
<t tx="zoomq.20110718091518.2721">@path spider</t>
<t tx="zoomq.20110718091518.2722">@path parser

分析器</t>
<t tx="zoomq.20110718091518.2723">@path queues

</t>
<t tx="zoomq.20110718091518.2724">@path _stuff
</t>
<t tx="zoomq.20110718091518.2725">@path test</t>
<t tx="zoomq.20110718091518.2726">默认32位的 mongod
$ /opt/bin/mongodb/bin/mongod
/opt/bin/mongodb/bin/mongod --help for help and startup options
Mon Jul 18 16:16:47 [initandlisten] MongoDB starting : pid=12526 port=27017 dbpath=/data/db/ 32-bit 

** NOTE: when using MongoDB 32 bit, you are limited to about 2 gigabytes of data
**       see http://blog.mongodb.org/post/137788967/32-bit-limitations
**       with --dur, the limit is lower

Mon Jul 18 16:16:47 [initandlisten] db version v1.8.2, pdfile version 4.5
Mon Jul 18 16:16:47 [initandlisten] git version: 433bbaa14aaba6860da15bd4de8edf600f56501b
Mon Jul 18 16:16:47 [initandlisten] build sys info: Linux bs-linux32.10gen.cc 2.6.21.7-2.fc8xen #1 SMP Fri Feb 15 12:39:36 EST 2008 i686 BOOST_LIB_VERSION=1_37
Mon Jul 18 16:16:47 [initandlisten] waiting for connections on port 27017
Mon Jul 18 16:16:47 [websvr] web admin interface listening on port 28017
Mon Jul 18 16:17:08 [initandlisten] connection accepted from 127.0.0.1:39516 #1
Mon Jul 18 16:18:01 [conn1] end connection 127.0.0.1:39516

</t>
<t tx="zoomq.20110718091518.2727">In [25]: print cvs[1].split()[0]
cvs[1].split("\t")[0]
    宝贝名称 : 经典双珠地短袖POLO衫（女款）
cvs[1].split("\t")[7]
    宝贝价格
cvs[1].split("\t")[9]
    宝贝数量
cvs[1].split("\t")[24]
    宝贝描述
    #复杂html 使用 w3m 输出为 txt再分析
cvs[1].split("\t")[35]
    新图片 2010_7_2_16_44_0_354:0:0:|;
cvs[1].split("\t")[40]
    商家编码 2010_7_2_16_44_0_354:0:0:|;
</t>
<t tx="zoomq.20110719082515.2728">w3m -dump taobao_1_20110709_intro.html</t>
<t tx="zoomq.20110719082515.2729">重新编译 Nginx 来发布-gridfs

# ./configure \
    --prefix=/usr/local/nginx \
    --user=nginx \
    --group=nginx \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --pid-path=/usr/local/nginx/run/nginx.pid  \
    --lock-path=/usr/local/nginx/lock/nginx.lock \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_realip_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --add-module=/home/zoomq/workspace/5git/nginx-gridfs
    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 


    --with-http_ssl_module \
    --with-openssl=../openssl-0.9.8q \ 

"
./configure     --prefix=/usr/local/nginx     --user=nginx     --group=nginx     --sbin-path=/usr/local/nginx/sbin/nginx     --conf-path=/usr/local/nginx/conf/nginx.conf     --pid-path=/usr/local/nginx/run/nginx.pid      --lock-path=/usr/local/nginx/lock/nginx.lock     --error-log-path=/usr/local/nginx/log/error.log     --http-log-path=/usr/local/nginx/log/access.log     --with-http_stub_status_module     --with-http_realip_module     --with-http_sub_module     --with-http_gzip_static_module     --add-module=/home/zoomq/workspace/5git/nginx-gridfs    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body      --http-proxy-temp-path=/usr/local/nginx/tmp/proxy      --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi      --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp     --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 
"

Nginx 发布:
        location /gfs/ {
           gridfs gridfs_fig field=filename type=string;
           mongo 127.0.0.1:27017;
       }

配合Py 写入：
In [1]: from pymongo import Connection
In [2]: import gridfs
In [8]: db = Connection().gridfs_fig
In [9]: fs = gridfs.GridFS(db)
In [10]: fs.put(open("/home/zoomq/workspace/yuike/stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang/2010_3_4_15_54_18_5529.jpg","rb").read()
    ,filename="2010_3_4_15_54_18_5529")
Out[10]: ObjectId('4e2532781702fe1dcd000002')


</t>
<t tx="zoomq.20110719082515.2733">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "cvsvancl.py v11.08.1"

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/cvsvancl.py /path/2/taobao_Week_20110709_nvzhuang.csv
                 |             +-- taobao 联盟用户的相关商品数据文件
                 +- 指向本脚本
        """ % VERSION
    else:
        CVS = sys.argv[1]
        loadall(CVS)

</t>
<t tx="zoomq.20110719082515.4236">'''vancl cvs data file push into Mongo
    - 单进单线,批量 vancl 联盟用户cvs数据导入
    - 自动抓取相关图片到 gFS
依赖:
    + PIL
    + PyMongo &gt; 1.11
'''
</t>
<t tx="zoomq.20110719082515.4237">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110719082515.4238">#path
PATH_CVS_PIC = "/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

#   shell call
SHM = "/dev/shm/%s.html"
W3M = "w3m -dump %s"

# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNDB = Connection('localhost', 27017)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)

FAD = CONNDB[DBFAD][COFAD]
FAD.create_index("uri", unique=True)
GFS = gridfs.GridFS(CONNDB[DBGFS])
FSFILE = CONNDB[DBGFS].fs.files

@others

&lt;&lt;doc_foto&gt;&gt;
&lt;&lt;doc_item&gt;&gt;
</t>
<t tx="zoomq.20110719082515.4239">@run_time
def loadall(cvsfile):
    '''解析 taobao cvs 数据，摄取可用部分，填入 mongo
    '''
    cvsls = open(cvsfile).readlines()
    count = 0
    skiped = 0
    for idata in cvsls[1:10]:
        info = idata.split("\t")
        if 45 != len(info):
            skiped += 1
            print "^"*79, "SKIPED bad cvs data::", skiped
            break
        else:
            count += 1
            CF.LOG.debug("loaded:%s"% count)
            &lt;&lt;整理入collection&gt;&gt;
            print "+"*79, "loaded:", count

</t>
<t tx="zoomq.20110719082515.4240">def run_time(func):
    '''from http://www.oschina.net/code/snippet_74928_3896
        - 简单的计时装饰器
    '''
    def cal_time(*args):
        '''完成目标函式的运行计时
        '''
        # 记录开始时间
        start = time.time()
        # 回调原函数
        result = func(*args)
        passtime = time.time() - start
        # 在结果输出追加计时信息
        #print "\n\t&lt;!-- %s GONE~= %.5f ms --&gt;" % (func.__name__, passtime*1000)
        CCFG.LOG.info("\n\t%s() RUNed~ %.5f ms" % (func.__name__, passtime*1000))
        # 返回结果
        return result
    # 返回重新装饰过的函数句柄
    return cal_time

</t>
<t tx="zoomq.20110720091129.2763">= fadpop =
    ~时尚流行
    ~fast apt daemon for platform of ply
    ~不间断供应平台的快速敏捷守护

== 原则 ==
趋向 UNIX 编程艺术中揭示的原则:
    + KISS
    + 宽进严出
    + 尽可能文本流化
    + 小即是美!

== 发布 ==
py.kingsoft.net:
    9007-&gt;common:27017  monogod
    9008-&gt;common:28017  rest http
    9017-&gt;common:27117  mongod
    9018-&gt;common:28117  rest http

== 运维 ==
@others

== Changelog ==
110927 进行串联化自动化,从远程主机对MongoDB 主机进行操作,,,
    - PhantomJS 部属要大量时间,,,

110713  ZQ 完成自动化抓取/分析/入库和提取API 的设计,工作量估计:
    + .5d  API 设计
        - done 110715 URI 设计
    + .5d  架构 设计
        - done 110718 数据/网络设计
    + 1d  MongoDB 试用
    + 1d  Spider框架对比
        - CANCEL
    + 1d  vancl 页面元素分析
        - 110719 doing 联盟的 cvs 数据解析
    + 1d  fadpop 原型
    + 1d  原型调试
    + .5d  文档
    ~ 6.5d 左右完成可演示原型
</t>
<t tx="zoomq.20110720091129.2765">= fadpop分析器 =
== 依赖 ==
以下扩展模块:
    Image
    pymongo(gridfs)
    mongolog
    pyquery

== 当前 ==

=== 凡客专用处理 ===
数据处理链:
    # vanclcsv.py -&gt; 获得联盟用户使用的 cvs 中基本商品信息和中等图片
        loadall() RUNed~ 133503.31306 ms
        5031 loaded as 4819件 4819图片
    common.expuri -&gt; 导出大图以及商品页面url 列表
        + 使用 wget 批量下载,使用 split 进行分批并发下载
        # vanclhtmbigpic.py -&gt; 分析大图首页 生成大图下载链接和商品图片对应 dict 序列数据文件
            + 使用 wget 批量下载图片
            #vanclpicloader.py -&gt; 导入所有图片数据到对应的商品文档中
            10分钟    暂时仅仅 1.99G 15350张图片
            共有 5G图片
        # vanclhtmitem.py -&gt; 逐一分析已经下载的商品页面,完成信息的增补
            1014730.72386 ms 完成所有静态页面的分析和提交

== TODO ==
数据源分析:
- 不同电商的网页数据识别和过滤
    - vancl
    - moonbasa
    - m18

运营分析:
- 用户访问内容统计分析

运行性能分析:
- MongoDB 运行时效率分析
- GridFS 运行时响应效率

== Logging ==
Vacnl:
    http://item.vancl.com/0002079.html 已售罄 样例
    http://item.vancl.com/0002655.html 数据齐全

== ERROR ==
@others
</t>
<t tx="zoomq.20110720091129.2767">= fadpop爬虫 =

@others

== TODO ==

- 对比爬虫框架的学习/开发/运维效率
- 定制框架,结合现行资源,架构可监控的持续数据巡查的 Spider
    - 分布式
    - 多进程
    - 并发
    - MQ協同
</t>
<t tx="zoomq.20110720091129.2769">= fadpop队列 =
根据:
    Kiwipycon2011 async-with-gevent-redis
        http://www.slideshare.net/alexdong/kiwipycon2011-asyncwithgeventredis
    gevent+redis(HotQueue)
配合工具可以远程清查:
    hotwatch --host py.kingsoft.net --port 9079 myqueue
分布式部属 redis 在 pyk 主机

== TODO ==

- 对比 MQ 产品特性,学习/开发/运维效率
- 设计 fadpop 多功能MQ 总线,容纳:
    - 分布式 logging
    - 分布式 task queue
    - 分布式 worker
    + 包含自身工作统计</t>
<t tx="zoomq.20110720091129.2771">= fadpop持测 =

== TODO ==

- 对比 Unit test 框架, 学习/开发/运维效率
- 设计 fadpop 持续测试方案 包含:
    - 各个功能组件的自动化测试 和 统计汇报
    - demo 环境的性能测试
    - Mongo 的分布式性能分析

</t>
<t tx="zoomq.20110720091129.2773">= fadpop原料 =
收集各种 fadpop 所需组件的探索性代码


== Changelog ==

110727 imgrilus.py 创建:
    - 积累 Mongo 业务用代码
    - 将以往的高复用代码聚集到 fadutil.py 模块中

110726 mongo*.py 创建:
    - 进行 mongo-log 的测试和探索

110719 cvsvancl.py 创建:
    - 单进单线,批量 vancl 数据导入
    - 自动抓取相关图片到 gFS
Fiddler
</t>
<t tx="zoomq.20110720091129.2775">def _popen(cmdline):
    '''通用外部工具调用包装
    '''
    subp =  subprocess.Popen(cmdline
        ,shell=True
        ,stdin=subprocess.PIPE
        ,stdout=subprocess.PIPE
        ,stderr=subprocess.PIPE)
    errlis = subp.stderr.readlines()
    errstr = "".join(errlis)
    outlis = subp.stdout.readlines()
    outstr = "".join(outlis)
    return errlis, errstr, outlis, outstr



</t>
<t tx="zoomq.20110720091129.2777">= fadpop 接口 =
逐步测试和发布接口用
api.yuike.com

@others

== TODO ==

- 先CLI 可查询!
    - 通过 mongoose 直接提供 http 接口
    - 或是用 bottle 原型一个先

== Changelog ==

</t>
<t tx="zoomq.20110720193936.2772">def _pick_table_data(txt):
    '''处理 w3m dump 出来的页面 中表格 片段 成为 Mongo 的多重数组:
        [[,,,]
        ,[,,,]
        ,[,,,]
        ]
    '''
    attr_descs_others = {}
    attr_desc_size = []
    attr_desc_txt = ""
    besize = 0
    for line in txt:
        if "[]" in line or "[service" in line:
            continue
        elif "─┼─" in line or "┌─" in line or "└─" in line:
            continue
        elif "  •" in line:
            #as attr.desc.cut...
            desc = line.split("•")[1].split("：")
            attr_descs_others[desc[0]] = ":".join(desc[1:])
        elif "尺码" in line:
            besize = 1
            attr_desc_size.append(line.replace("│", "").split())
        else:
            if 0 == besize:
                #as attr.desc.txt
                attr_desc_txt += line
            else:
                #as attr.desc.size
                if 2 &lt; len(line):
                    # cancel null data lines
                    attr_desc_size.append(line.replace("│", "").split())
    return attr_desc_txt, attr_descs_others, attr_desc_size


</t>
<t tx="zoomq.20110720193936.2773"># VANCL esp.
TPL_VANCL_URITEM = "http://item.vancl.com/%s.html"
TPL_VANCL_URIPIC = "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s"
'''esp. base images.vancl.com
    http://images.vancl.com/product/0/0/0/0002655/Small/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/mid/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/Big/2010_7_2_16_44_0_354.jpg
'''
TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/Small/%(fotoid)s.%(imgex)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/mid/%(fotoid)s.%(imgex)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/Big/%(fotoid)s.%(imgex)s"
</t>
<t tx="zoomq.20110720193936.2774">DOC_ITEM = {"uri":""
    #, "com":"VANCL"                # 电商名
    , "brand":"VANCL 凡客诚品"      # 品牌名
    , "sid":""                      # 编号
    , "store":0                     # 库存数量
    , "saled":0                     # 已售出
    , "prix":""                     # 价格(原价+各种优惠价格) | saleout 已售罄
    , "agio":""                     # 折扣
    , "vip":""                      # 优惠价格
    , "attrs":{"name":""            # 品名
        , "class":[]                # 分类
        , "color":""                # 顔色们
        , "cons":""                 # constituent 成分
        , "wash":""                 # 洗涤要求
        , "descs":{                 # 描述
            "txt":""                # 读本描述
            ,"size":[]              # 尺寸(码表)矩阵
            ,"others":{}            # 其它各种属性
            }
        ,"fotos":[]                 # 图片集，DBref-&gt;DBGFS.fs.files.
        } # attrs
    ,"comments":{                   # 评议集
        "feel":""                   # 整体很舒服（45%）、透气性适中（53%）...
        , "unit":""                 # 綜合
        , "noma":""                 # 外观
        , "bask":""                 # 舒适
        , "size":""                 # 尺码 2% 的用户认为实际尺码[偏大],,,
        , "taker":{                 # 购买者评论
            "total":0               # 留言总数
            ,"totalask":0           # 疑问总数
            , "comment":{           # 评注
                "name":""
                , "date":""
                , "title":""        # 标题
                , "cont":""
                , "hold":""         # 拥有的商品描述
                }# comment
            , "ask":{               # 回答
                "name":""
                , "date":""
                , "title":""        # 标题
                , "issue":""        # 问题
                , "reply":""        # 回答
                }# comment
            } # taker
        , "shiner":{                # 晒单图文
            "total":0               # 总数
            , "shine":{             # 晒单
                "name":""
                , "date":""
                , "cont":""
                , "foto":[]         # 图片集，DBref-&gt;DBGFS.fs.files.
                }# comment
            } # taker
        }   # comments
    }   # TPL

</t>
<t tx="zoomq.20110720193936.2775">DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
'''取用
from pymongo import Connection
import gridfs
fs = Connection('localhost', 27017).static_files
fs = gridfs.GridFS(fs)

In [71]: gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0])
Out[71]: &lt;gridfs.grid_file.GridOut object at 0x91adf8c&gt;

就可以:
    gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0]).uri

'''
</t>
<t tx="zoomq.20110721084347.2775">import os
import sys
import time
from copy import deepcopy as copy
import subprocess
import traceback
import logging

import Image

# import PyMongo
from pymongo import Connection
from pymongo import errors as ERR
import gridfs

from mongolog.handlers import MongoHandler

# import original mod.
sys.path.append(os.path.abspath("../../../"))
from fadpop.common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110721084347.2776">    location  /thumb/
    {   
      gridfs        files root_collection=thumbnail field=filename type=string;
      mongo         192.168.0.11:27017;
      error_page    404 =201 /thumb.php?f=$request_filename;
      expires       30d;
    }
    ... ...
  }

注意 error_page 这一行中的 =201，它的作用是将404的Status Code改变为201，当然您可以写成 =200，我们这里用201的目的是为了通过 HTTP Status Code来判断是否为缓存中读到的文件
</t>
<t tx="zoomq.20110721084347.2777"># 因为 Borg(),所以,要对单例类的对象进行复制,否则 insert() 知道是同一对象不进行插入的...而且要进行深复制!否则...
item = copy(CF.DOC_ITEM)
#print "id(CF.DOC_ITEM)",id(CF.DOC_ITEM),"id(item)",id(item)
#print "\n\t\t attrs.fotos:", item["attrs"]['fotos']
#print id(item["attrs"]['fotos'])
sid = info[40][1:-1]
item["sid"] = sid
item["uri"] = CF.TPL_VANCL_URITEM % sid
item["prix"] = info[7]
item["store"] = info[9]
item["attrs"]['name'] = info[0][1:-1]

attr_desc_txt, attr_descs_others, attr_desc_size = _pick_by_w3m(info[24])

item["attrs"]['descs']['txt'] = attr_desc_txt
item["attrs"]['descs']['size'] = attr_desc_size
item["attrs"]['descs']['others'] = attr_descs_others

print "item.uri::", item["uri"]
# DBref -&gt; GFS foto collections 无法跨DB 进行!??! 使用普通硬关联
foto_id = _put_img_gfs(info)
if foto_id in item["attrs"]['fotos']:
    pass
else:
    item["attrs"]['fotos'].append(_put_img_gfs(info))
try:
    this_id = CF.FAD.insert(item, safe=True)
    print "CF.FAD.insert :: ", this_id
except ERR.DuplicateKeyError:
    print "\t safe=True BROKENNN! by pymongo.errors.DuplicateKeyError"
    continue


</t>
<t tx="zoomq.20110721084347.2779">@run_time
def _put_img_gfs(info):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    sid = info[40][1:-1]
    foto_filename = info[35].split(":")[0][1:]
    dirurl = "/".join(sid[:3])
    goodsid = sid
    # 处理,可能的其它图片格式现象
    &lt;&lt;可能的其它图片格式&gt;&gt;
    imguri = CF.TPL_VANCL_MFOTO % locals()
    #print fotoid, imguri
    main_mid_pic = "%s/%s.jpg"% (CF.PATH_CVS_PIC, info[35].split(":")[0][1:])
    if os.path.exists(main_mid_pic):
        if CF.GFS.exists({'uri':imguri}):
            img_id = CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            print imguri, "&lt;------ HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            return img_id
        else:
            img = CF.GFS.put(open(main_mid_pic,'rb').read()
                , uri = imguri
                , filename = fotoid
                , imgtype = imgex
                , showas = 'mid'
                , asmain = True
                , size = Image.open(main_mid_pic).size
                )
            return img
    else:
        print "the %s NOT exists!!" % main_mid_pic
        sys.exit(1)





</t>
<t tx="zoomq.20110721084347.2781">def _pick_by_w3m(htm):
    '''动用 w3m 集中处理 vancl cvs 数据中的html 片段
    '''
    try:
        shmtmp = CF.SHM % (str("%.4f"% time.time()))
        open(shmtmp,"w").write(htm)
        dumptxt = CF.W3M % shmtmp
        err_li, err_st, out_li, out_st = _popen(dumptxt)
        os.remove(shmtmp)

        return _pick_table_data(out_li)

    except:
        print "_pick_by_w3m() BROKENNN!\n\t", traceback.print_exc()
        sys.exit(1)





</t>
<t tx="zoomq.20110725090916.4180">try_other_img_type = foto_filename.split(".")
if 1 &lt; len(try_other_img_type):
    fotoid = try_other_img_type[0]
    imgex = try_other_img_type[1]
else:
    fotoid = foto_filename
    imgex = 'jpg'
</t>
<t tx="zoomq.20110726202222.2796">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "mongoltry.py v11.07.26"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/mongoltry.py 'test message...'
                 |             +-- 测试用消息
                 +- 指向本脚本
将每一秒钟给出一个测试消息
        """ % VERSION
    else:
        mes = sys.argv[1]
        logit(mes)

</t>
<t tx="zoomq.20110726202222.2798">import os
import sys
import time
import traceback
from pymongo import Connection
from pymongo import errors as ERR

import logging
from mongolog.handlers import MongoHandler
</t>
<t tx="zoomq.20110726202222.2804">def logit(mess):
    '''
    '''
    log = logging.getLogger('try')
    log.setLevel(logging.DEBUG)

    log.addHandler(MongoHandler.to(db='mongolog', collection='log', host='127.0.0.1', port=27117,))

    loop = 0
    while 1 == 1 :
        time.sleep(1)
        log.debug(mess)
        log.debug("1 - debug message")
        log.info("2 - info message")
        log.warn("3 - warn message")
        log.error("4 - error message")
        log.critical("5 - critical message")
        loop += 1
        print "log.debug() ~", loop

</t>
<t tx="zoomq.20110726202222.2815">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "mongolisten.py v11.07.26"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 5 != len(sys.argv):
        print """ %s usage::
$ python /path/2/mongolisten.py host port db collection
                 |                |    |   |    +-- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
将每一秒钟给抓出尾消息
        """ % VERSION
    else:
        #host = sys.argv[1]
        #port = sys.argv[2]
        #db = sys.argv[3]
        #coll = sys.argv[4]
        db = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        print db.collection_names()
        coll = db[sys.argv[4]]
        print coll.count()
        cursor = coll.find(tailable=True)
        while cursor.alive:
            try:
                doc = cursor.next()
                print "%s [% 8s](%s) %s by:%s @%s %s %s l:%s" % (doc["time"]
                    ,doc["level"]
                    ,doc["name"]
                    ,doc["msg"]
                    ,doc["user"]
                    ,doc["host"]
                    ,doc["file"]
                    ,doc["funcname"]
                    ,doc["line_no"]
                    )
            except StopIteration:
                time.sleep(1)

</t>
<t tx="zoomq.20110726202222.2816">import os
import sys
import time
import traceback
from pymongo import Connection
from pymongo import errors as ERR

import logging
from mongolog.handlers import MongoHandler
</t>
<t tx="zoomq.20110727085946.4249">@path ch08</t>
<t tx="zoomq.20110727085946.4250">@language rest

第8章: 开始吧
============================================


.. include:: 0_intro.rst


.. toctree::
    :maxdepth: 2

    1_defining_project.rst
    2_requirements.rst
    3_designing_software.rst
    4_functional_testing.rst
    5_implementation.rst
    6_summary.rst
    7_suggested_reading.rst


</t>
<t tx="zoomq.20110727085946.4251">@language rest
.. include:: ../LINKS.rst


.. epigraph::

    领先的秘密是开始干,开始干的秘密在于放弃复杂设计转变成一系列可受控的小任务,
    并按次序,就地开工!

    —Mark Twain



在这一章中，我们将继续遭遇那些在各种规模的工程中被反复证明过的东西.
对，没错，我说的就是计划,这包含需求分析,以及对应的设计说明,文档化对可预见的各种问题的测试规划,
然后用这些测试来验证是否吻合设计要求.
要知道,缺乏或不明确的需求设计一向是软件项目失败的主要原因,
另一大因素就是测试不足.


对于小项目，如果没按期交付成果当然是恼人的，但可能不算是个大灾难.
不过，对于大项目其结果可能就是灾难性的了.
对于逻辑复杂,而且健壮性又有要求的程序,
在开始之前确实的需求分析,并构筑良好的测试环境就是战略需求.
另外,还要注意对于仪器软件,必须面对现实世界中可能非常严重的不确定,模糊,蠕变和其它各种意外,
这时,有个明确的技术路径和良好定义的目标就非常关键了.


这一章的目的很简单:我想让你成功.
我假设你已可以很好完成一些小软件.
尽管它们本身可能很简单，但却能成为其它工程的关键组件.
它或许是实验室仪器的控制器，或许是研究过程中的数据采集系统，又或许是世界级高尔夫球场的洒水控制器.
不管是什么，如果它不能工作，或者可靠地工作，可能就意味着时间,收入的损失,或是无用数据.
甚至更糟.


多年以来的经历使得我逐渐确信需求分析是十分必要的,
我不认为任何人坐在键盘旁边猛敲一会就能写出没有 bug，功能完善的软件来.
其实，我遇到过很多人真信那是可能的(他们当中的许多人真的是心里有数的).
更糟的是，有的人不明白学校编程课里的那点小练习不经过大改是没法成为真正的应用程序的.
也有一些人没法明白为什么他们的软件不按照他们(或者客户)所预期的那样运行，
不明白它为什么充满了 bug. 
其实那完全可以避免的.



我希望这一章能向你展示为软件制定一些基本的需求和计划是多么的简单.
在这一阶段所花费的时间和精力会在项目的后期给你带来丰厚的回报.
除了不用解决 bug 或者对错误的数据感到奇怪，你还可以自豪地展示你的作品.
因为你知道你已经采取了正确的措施来保证软件按照预期工作.


</t>
<t tx="zoomq.20110727085946.4252">@language rest
.. include:: ../LINKS.rst

项目定义
===============================================================================


究竟你想创造什?
这是最重要的问题,
但是多数人在这上面花的精力并不比会上下意识的随手涂鸦更多.
缺少确实的需求分析和将需求转化为能用的代码的计划是大部分软件工程失败的原因.
(当前,所有重大项目工程中约50%到70% 是失败的--这取决于你如何定义"失败")
试试搜索 "需求脑残 软件失败"(poor requirements software failures)
就能知道到有多少文章在写这种事儿了.


所有的项目都是由某种 **需求陈述** 开始的.
它可以是一个非正式的想法，或者是电子邮件里的一个请求.
当然也可以是正式的文档.
从这时刻开始，项目的目标就以 **工作说明**(statement of work,SOW) 的形式开始发展了.
工作说明书有需求陈述所不具备的细节.
接着各种具体要求就聚集过来，最后才能得到软件设计指标
(design specification) 插图 8-1
展示了从需求陈述到设计指标过程中的每一步变迁.


需求在每一阶段都得到进一步细化.
细节最后在 软件设计文档(software design description,SDD)
当中得到最终陈述.
(理想中)说明书包含足够的信息来促成满足要求的软件的诞生.
在接下来的小节里我们将逐一体会迈向 设计说明书 的每一步.

@others

</t>
<t tx="zoomq.20110727085946.4253">@language rest
.. include:: ../LINKS.rst

需求(Requirements)
===============================================================================

需求来自很多层级的细节.
SOW(statement of work,工作清单)之后的层级,
可能是高阶工程目标,科学需求,操作需求,等等,
通过逐层递进的细节积累,最终将软件的主要需求包含在SDD(Software Design Document,软件设计文档)中.


.. image:: ../_static/figs/rwip_0803.pdf.png

插图 8-3. 工作清单

::

    工作清单
    
    试验组需要一种自动交流电源控制系统,以监察燃烧室.
    系统应该达成以下特性:
    1.  可基于目前的交流电控制装置支持64种设备(UUT,被测单元)
    2.  可用软件控制任意一个设备可用或反之
    3.  可接收测试监控系统的状态数据, 并能立即停止UUT 以免造成灾难性伤害
    4.  可在预订的时间点完成电源开关处置
    5.  可感知UUT在电源关闭后的状态,并在UUT出错时自行决定处置方案
    6.  可在图形界面中实时展示所有电源通路的状态
    
    该系统应包括可安装在机架的AC电源控制单元和一个专用机架式控制PC配液晶显示器.
    交流电源控制单元可使用RS - 232串口,USB或GPIB(两者都是最便宜的)接口.
    接入其他测试系统的控制和数据可以是RS - 232或以太网.
    
    系统必须能完成无监控的7*24小时运行.
    一但检测到异常,必须有能力从本地或通过网络提醒操作员.
    系统必须有能力分辨异常警报的严重级别,以尽量减少警报.
    

.. the system should consist of rack-mounted AC power control units and a dedicated rack-mounted control PC with LCD monitor. the control interface for the AC power vontrol nunits may be RS-232 serial, USB or GPIB(whichever is the least costly). the control and data interface to other test systems may be either RS-232 or Ethernet.
    the system must be capable of operationg 24 hours a day, seven days a week, without operator supervision, it must have the ability to alert an operator, either locally or via a network connection, should an anomaly be detected. the system must have the ability to assign levels of severity to anomalies in alerts to minimize alerts from mon-critical event.



较低层次的需求都来源于他们的要求，自上而下的方式
在自上而下的方式(瀑布(waterfall)模型)中,各层需求分解自高层需求.
每层都需要进行需求分析，以得出足够的细节来指导实施.
究竟这种分解活动要用多少时间，依工程类型而定.
有些足够简单的，一个可测试的功能需求就好了,
而有特殊状况都已经包含，
所有底层实现的界定和审查都有对应系统的必要指标和方案.
这种工程的需求文档能轻易超过数百页。
需求分析的难点之一，就是对所有部分的了解必然保持更新，不断增补细节.



@others

</t>
<t tx="zoomq.20110727085946.4305">@language rest
.. include:: ../LINKS.rst
设计软件 Designing the Software
===============================================================================

现在，你有一些功能需求(可以是任何格式记述的)，
是时候开始思考设计软件来满足这些要求了.
设计有多少自由度,取决于功能需求对目标的描述有多详细.
如果每条需求都设定的非常详细，即使面对一个松散的需求集,你也不会多少回旋余地.




@others




</t>
<t tx="zoomq.20110727085946.4306">软件设计说明 (The Software Design Description,SDD)
-------------------------------------------------------------------------------

插图8-4中指出在开发流程中,获得最终软件的前一件事情就是SDD(软件设计说明,Software Design Description)，
实际上 SDD(软件设计说明,Software Design Description) 是底层的实现要求.
通常情况下,SDD(软件设计说明,Software Design Description) 描述了比功能需求更多的细节.
通常包含包含返回值，流程图，框图，继承图，消息序列图，等等. 
SDD(软件设计说明,Software Design Description) 是用以构建目标系统的系统性理论读本,
应该包含足够的细节,可以支持程序员直接转化为工作代码.
SDD(软件设计说明,Software Design Description) 也遵循经典的软件工程路线来完成.
一个完备的 SDD(软件设计说明,Software Design Description) 
可能包含一个或多个概要介绍部分,来说明在SOW(statement of work,工作清单)中指出的开发任务的技术实现细节,
可能有 数据采集或是数据处理以及用户界面等等.

对于小型项目SDD(软件设计说明,Software Design Description)也许没有必要,
但除非工程中只有你这唯一的人,
否则,为了确保每个参与者,都明确什么是必要的需求,以及软件如何来满足这些需求;
那么,SDD(软件设计说明,Software Design Description)是最合适的载体,
可以同时用来驱动软件和单元测试的开发.

面对SDD(软件设计说明,Software Design Description)要保持头脑清醒的事情是，
SDD仅能由对应需求驱动产生,
每个条目必须可追溯对应到一个或多个功能需求.


在RDD(Requirements-Driven Design,需求驱动的设计)开发模式中，
如果有什么东西不能追溯到更高级别的需求,那它不用设计.
如果事情真的需要设计，但没有对应的需求,那么,必须为之建立派生需求.


无论如何,SDD的存在表明了人们想把什么加到软件中去,
即，它是无法从含混不清的地方拉出来,并假设成完整和准确的描述.

</t>
<t tx="zoomq.20110727085946.4309">@language rest
.. include:: ../LINKS.rst
功能测试
===============================================================================

现在我们的设计文件中包含了一些要求和希望，
但在第一行代码写下之前，我们还需要认真思考有关测试.
这里我指的是功能测试，而不是单元测试，
这两种测试的目标和方法不能混为一谈.
单元测试在之后的章节将提及,
但现在，让我们来看看功能测试，
看看为什么说它是检验需求的基本方法(可以说是唯一的).


@others
</t>
<t tx="zoomq.20110727085946.4310">@language rest
.. include:: ../LINKS.rst

推荐阅读
===============================================================================

涵盖本章主题内容的好书,数以百计.
在此我只能推荐特别喜欢的:


Code Complete, Second Edition. Steve McConnell, Microsoft Press, 2004.
    我有这本书的第一版和第二版，我认为他们都是很优秀的.
    麦康奈尔出色的指出了成功界定或实施高质量软件的必要步骤.
    我只能鼓励更多的人来阅读和应用他的著作中指出的各种材料在.

Software Requirements: Objects, Functions and States, 2nd ed. Alan Davis, Prentice Hall,1993.
    这是有关软件需求本质的书籍中我最喜欢的一本.
    我总是带着这本书参加会议反复引用关键语句.
    作者以清晰的风格,明确讨论了分析和捕获需求的各种方法,还包括了各种方法的实用案例.
    书中的引用列表提供了丰富的路径进一步探索和发现.

Software Testing. James McCaffrey, Booksurge, 2009.
    作者通过亲身访谈一些测试经理,针对软件测试的技能和技巧整理出一个很好的概览.
    章节内容精巧,对软件测试新人而言是很好的开始,还可以当成经验丰富的医生随时查询.

Writing Effective Use Cases. Alistair Cockburn, Addison-Wesley, 2001.
    如何编写好测试用例的易用指南.
    这本书介绍了良好的用例由什么构成,
    指出在制作好案例的过程中可能遇到到什么陷井.
    虽然我并不热衷于用户案例(我更喜欢需求分层),
    如果你在规划用户案例，应该先读一下这本书.


Essential CVS, Second Edition. Jennifer Vesperman, O’Reilly, 2006.
    这本书介绍背后CVS的基本概念，并从那里开始讨论
    标记，分支，合并和日志等其他议题.
    有助于填补正规的CVS在线参考文档空白，并澄清一些尖端的CVS特殊功能.


    谈及网上资源，在Google 中输入"软件需求"会返回"百万点击率"之类的东西.
这里,从自己的书签分享几个我认为是值得注意:


http://software.gsfc.nasa.gov
    在戈达德太空飞行中心的美国宇航局,其过程资产库发布到了网络中.
    虽然相对典型的小项目,其过程过于复杂，但是整体观念和方法是普遍适用的.
    这是值得一试，看看是否有东西在这里你可以用于你自己的开发活动.

http://www.techwr-l.com/techwhirl/magazine/writing/softwarerequirementspecs.html
    ``TECHWR-L`` 是面向技术交流的网站,
    包含了各种讨论如何编写需求规模说明等等相关文章.

http://www.aspera-3.org/idfs/APAF_SRS_V1.0.pdf
    这是来自瑞典空间物理研究所的Aspera-3项目的SRS(“火星快车”任务的一部分).
    真正的SRS并不是经常都能看
    (感谢ITAR,特别是最近美国宇航局的项目就是没有)，
    但在这里您可以休闲的查阅.



</t>
<t tx="zoomq.20110727085946.4312">@language rest
.. include:: ../LINKS.rst

实施
===============================================================================

现在，终于，我们来到最有趣的部分：编写软件.
我们已经讨论了需求，设计，和功能测试，
现在我们总算可以把注意力转向代码的创建活动.

代码应该做什么，
已经在SDD(Software Design Description,软件设计说明)中被详细定义了.
本节讨论如何对代码进行组织，格式化，审查，并使用单元测试进行测试.
这些细节,有时会被忽视，当作鸡毛蒜皮的小事，
但这是错误的，很可能埋下问题,直到开发完成几个月甚至几年后爆发.
漫不经心的编程，
造就了那些悲惨生活,
即使软件已经发布,但是,一但有需要你还是得独自回来重新理解你自己写的漫不经心的代码.


@others




</t>
<t tx="zoomq.20110727085946.4316">@language rest
.. include:: ../LINKS.rst
小结
===============================================================================


在这一章中，我们论述了软件需求，设计，实施，测试，和文件.
需求在软件工程中就象舵之与船,没有最基础的需求,总是很轻易的能创造出点东西,但是并不会按照预期来工作,甚至于根本不能正常工作.
在完成需求的功能后,通过测试来检验,不仅有助于找出代码中潜在缺陷,而且还能确保代码在吻合需求的路线上稳固发展.
如果你诚心渴望获得认同,就得形成文件,以便他人容易理解和欣赏你的成果(可能无法达到您理解的深度).
然而,本意的核心要点,并不是要求严格遵守特定的过程或是生命周期的模式,
也不是如何创造包含大量技术细节的文档.
而是大致指出软件开发的过程,以便读者明确当前处于什么位置,还需要作什么来达成目标;
以及给出整体图景,分享文档的组织结构,以便读者可以参考.

</t>
<t tx="zoomq.20110727085946.4317">需求驱动的设计(Requirements-Driven Design)
-------------------------------------------------------------------------------

如果你学习过相关课程,应该反应过来了,寻求项目定义的过程,正好和所谓的"瀑布式"(waterfall) 软件开发模式相吻合.
如果你不熟悉这个软件工程的术语"瀑布"(waterfall)，不用理会它就好,这只是一种软件构思和开发活动的组织方式.
瀑布(waterfall)模型是描述软件开发的生命周期(software development life cycle,SDLC)方法之一.
插图 8-1 基本上是瀑布模型的前半部分,再多一点点.
当然, 在不同的问题领域可能有更优越的模型.
不过，我并不迷信哪种模式，也不相信对需求的剪裁能更好的和真实世界同步.
对需求的修订,最大的问题是如何令变化尽可能的减少对已完成工作的影响.
变更会引发"涟漪效应",如果涟漪过大将变成真正的巨浪.
在大型项目中,这将变成重大问题,
不过,同样的问题在小项目中,现场也就解决了,没什么大不了的.


.. image:: ../_static/figs/rwip_0801.pdf.png

插图 8-1. 需求的进化

::
    
    需要陈述
    
    项目对象(SOW)
    - 功能需求
    - 性能需求
    - 安全需求
    - 失误容忍需求
    等等..
    
    软件设计说明
     


在整本书中我始终运用的是所谓 需求驱动设计(RDD)的模式.
当需求可以及早确立并不会经常变动时,RDD工作良好.
有些项目,特别是那些和人进行交流的项目
(例如，银行，医疗记录和其他"流通性"领域)
,可能需要比 RDD 更多的灵活性.
在我们的场景中,则多数是类似 "黑盒子" 的商用接口和控制协议,
都是专门用来完成反复进行的简单任务,除非硬件磨损或是电源关闭,否则不会出现变更;
主要的挑战在于如何确保所有部件可靠的结合在一起,并明确收集的数据是什么.

软件开发模式就象工具箱中的工具:
你总是想(我假设)要使用适当的工具完成手头的工作.
螺丝刀无法和钉子配合起来,锤子对于螺丝钉是无用的.
在我们的例子中，我相信该工具恰好是RDD范式.
同样的道理也适用于编程语言，编辑器和开发平台.
20世纪一个著名的社会学家 马斯洛曾经说过:
"如果你所拥有的唯一工具是一把锤子，你往往会看到每一个钉子的问题."
如果你想要了解更多其他软件开发模式，我会鼓励你自主探索己有的大量信息.
事实上线上和线下会议中,的确存在各种开发模式的激烈讨论.



</t>
<t tx="zoomq.20110727085946.4319">从需要开始
-------------------------------------------------------------------------------

无论采用哪种开发東西方,建立需要陈述(statement of need)是一切的开端.
它可以简单的是一句话:
"我们需要能根据预设值来监视和控制试验室中的温度和照明水平."
,或是更复杂一些，如:
"我们希望能够在压力测试时,对多达20个固态激光器的功率和因为同时进行调节和监控."
注意,需要陈述(statement of need)中不应该包含任何实现细节,只是单纯的概念,阐述需要什么.
当我们讨论需要时,是无法从模糊的输入建立什么东西而最后又能完成预期目标的,
因为,在这一阶段根本无法明确什么是实际的期望.
当你在给人们创建东西时(比如说客户),一般而言他们不会清楚自己真正的期许是什么.

插图8-2显示了一个虚拟交流电源控制器项目的需要陈述(statement of need).
这份说明没有包括任何具体的细节，但它确实有很多含义.
虽然还有很多悬而未决的问题，
但足够帮助我们推断，系统是必须计算机控制的，
它必须是无人值守的.
再分析几分钟还应推导出如果它是7*24小时自动运行的，
还应该能够感知到是否发生错误并及时采取适当的行动，并以某种方式提醒操作员.

最重要的一点是，需要陈述(statement of need)和需求(requirement)是两码事.
在某些圈子里它有时被风趣地称为 "性欲"
它只有基础大纲，它不是包含整个结构，
但仔细考虑并指出是什么,通过一些问题指出了前进的方向，以获取必要的细节。


.. image:: ../_static/figs/rwip_0802.pdf.png

插图 8-2. 需要陈述

.. the test group needs a way to automaticall control the AC power to various units under test in the burn-in room, the current method of manually controlling the power at predetermined intervals is both cumbersome and prone to error, for 24-hour (or longer) test cycles it also means that an operator must be on duty during the entire test period. an automated system would allow the testing to go on unattended during evening hours.

::

    需要陈述
    
    试验组需要一种可以自动呼叫的交流电源测试系统, 以便监察各测试单元所在的燃烧室,
    目前在预选约定的固定时刻进行的手工控制方法既繁琐且易出错,涉及24小时(或更长)的测试周期时,
    就意味着要有运营组在整个测试期间进行值守. 自动化系统将允许测试期间无人值守.
    





</t>
<t tx="zoomq.20110727085946.4321">工程目标
-------------------------------------------------------------------------------

工程目标是下一级详细设计阶段,也被称为工作清单(statement of work,SOW).
这些仍然不是严格意义上的需求(requirements)，
但已经相当明确的定义了如何达成需求的具体目标.
例如，我们的假设的交流控制系统的工作清单可能如 插图8-3所示的说明.

要注意的是,这里的目标仍然不包含任何明确定义的参数,例如工期,特例，或数据通信协议.
只包含最终系统高层次的功能特性(即一般行为(behavior)),
以及这些功能需求从哪儿衍生出.

工作清单(statement of work,SOW)定义了从最终用户视角来判定工程是否成败的基础标准.
(或从你的角度来看，如果这是为你自己的工程在写的SOW)
</t>
<t tx="zoomq.20110727085946.4323">为什么需要需求 Why Requirements Matter
-------------------------------------------------------------------------------

没有需求或是工作清单,
那是没办法对最终的结果形成清晰的思路，来明确如何行事的.
当然，有时系统应该作什么只是一些模糊的概念,
模糊的概念终究只是一个模糊的概念,
肯定是不和其它人模糊的概念相同的.
午餐期间餐巾纸上的涂鸦不是需求，
会议期间草草记在白板上的也不是.
类似的东西都不是明确的需求,
不仅因为他们不符合可核查的标准，
而且还因为他们只是些浪花儿，而实际上其下面可能是非常深的海沟！


即使是最小的需求集合，也足以引导我们定义出明确和具体实现要求.
那种可以令所有人认同的就是好需求.
同时，好需求还可以对成品的成败给出明确的测量.


.. topic:: 需求故事真实一则 A True Requirements Story

    很久以前,我负责为一个大型射电望远镜系统的过滤器阵列建立实时数据采集系统.
    该过滤器阵列是遗留设备,其存储单元甚至要人工拖出来,而且有640个独立通道,各自对应到一个特定的频率.
    我的工作是要将高速模拟数字转换器和旧的过滤器阵列系统整合起来,通过实时操作系统获得每个通道的数据.
    射频工程师(RF engineer)也时刻准备好了,
    一切都很靠谱,直到我向过滤器阵列负责人咨询有什么特殊需要时,开启了一段奇幻之旅...

    我问:"每个通道的转换时间最大可容忍多少？"
    回答:"嗯嗯嗯，尽可能的快"，
    这明显是谱的，所以我尝试换种方式再问,仍然收到模糊的回答.
    一来一去,就这样至少30分钟，我越来越沮丧,而其他人越来越恼火,认为我只是企图制造一些数字.
    最终我总算挤出了一点儿基本的数值来开展工作，
    但仍然不得不用乱猜的方式来弥补一些"失踪"的数值.

    最终，系统满足，甚至超过了对其稳定性的期望.
    事实上，它确实有点太清楚它的工作.
    我们第一次尝试让它在全速度下运行,
    对望远镜所有640通道的控制和数据流进行处理,
    于是崩溃了,,结果整个价值数百万美元的无线电望远镜也死了.
    用了两个小时才重新激动整个系统.
    幸运的是，这发生在预定的工程时间之内，
    否则我们可能不得不面对一堆愤怒的科学家.

    这个故事的寓意是:
    永远不要假设用户能够提供需求中正确的基准值
    (并愿意承认他的确不知道).
    你得作好准备自行填空，并仔细检查你的假设.
    这其实是个好主意，让你需要的答案从必须监控的报警中自己跳出来.
    至少这样，他们无法指责你总是要拷问他们.



</t>
<t tx="zoomq.20110727085946.4325">良好(Well-Formed)的需求
-------------------------------------------------------------------------------

需求的描述，必须是清晰，准确，和毫不含糊的的，
所有特性必须指出具备什么行为来满足一个或多个项目目标.
每条需求的文本总会包含"应......"的句式,
这里有个例句::

    该系统应能对任何指定的待测物,
    在100毫秒内感知AC电源无UUT响应并切换到ON的状态.

靠谱的需求具有一个非常明显的特性:它是可验证的.
换句话说，一定定义了可以用测试来验证特性能力的具体数值，限制和例外(如果有的话).
前例中的功能要求就是可测试的，因为提供了精确的事件和时间要求.
但是，即使包含字"应......"的句式，人们也很容易写出无法测试的需求描述,例如::

    该系统应能够及时发现并妥善处理无效数据


就行文本身而言，这不是个真正的需求;
只算个要求.
例如, 什么是“无效数据”？什么是“处理”？怎么算是否合适？
什么都没有定义，因此无法进行有效的​​测试.
是否算需求的底线是，这个"需求"是否能被验证!

基本上有五个基本点可以促成靠谱的需求,在表8-1中列出.


表 8-1. 需求的必要元素

.. list-table:: 表 8-1. 需求的必要元素
   :widths: 10 40
   :header-rows: 1

   * - 元素 
     - 描述
   * - 必需的  
     - 需求只应该提供足以达成在SOW(statement of work,工作说明)中定义目标的基础功能和特性就好,换言之,不得有"花里胡哨"的想象
   * - 明确的  
     - 每条需要只能有唯一的一种阐述.对需求多种可能的解释将导致系统无法满足SOW(statement of work,工作说明)中定义的目标,需求必须简洁明确.
   * - 一致的  
     - 需要绝不能引入相互冲突的目标，参数或功能. 项目范围内的需求,必须能互相支撑.
   * - 可追踪的 Traceable  
     - 每条需要必须有一个可追溯的成立理由.这确立了需求或是SOW(statement of work,工作说明)中定义目标间的关联并支撑起高级别的需求项. 换言之，需求能够向下传递并向上追踪.
   * - 可验证的 Verifiable  
     - 每条需要，必须能够进行测试，分析，检查，或(在某些情况下)演示来验证是否成功.一个无法验证的需求是无法实现的，因为有没有办法明确该软件是否达成承诺.


当然还有其它标准，但是这五个通常被认为是最重要的。








</t>
<t tx="zoomq.20110727085946.4327">全景 The Big Picture
-------------------------------------------------------------------------------

探讨了需求基本要求之后,
我们才能更好的理解什么是合适的软件开发和核查.
图8-4 显示了如何从SOW(项目描述和目标)到达可用的软件，
以及如何依据需求设立测试.
</t>
<t tx="zoomq.20110727085946.4329">需求类型
-------------------------------------------------------------------------------

我们已经明确了SOW(项目描述和目标)，在讨论插图8-4之前,根据的流程，
接下来我们会在需求集合中遇到三个不同类型的要求:“一体化”，“性能”和“功能”.
这些都是可能出现在相同文档中密切相关的要求.
(也有基于以上被称为"派生需求"的)让我们仔细看看在这些不同类型的要求::


功能需求 :
    功能以及任何相关的性能和集成需求,
    通常指对外部设备和系统的行为.
    换句话说,他们响应电源设置为“开”或是接受某种输入,系统应该作什么.
    功能需求可以定义为将系统或是设备视作"黑盒子"时应有的行为,
    换句话说,对于任何给定的输入，必须生成特定的输出.
    至于如何实现，这不在功能范围内,那是由SDD(software design description,软件设计文档)实施的.


性能需求 :
    性能需求描述系统必须有多出色.
    通常涉及类似如速度(即，单位时间内完成传输的数据)，容量(可存储多少数据)，
    实时显示更新率(视频直播，实时数据图形显示等)相关的指标.
    性能需求一般是对功能需求的补充,所以,两者有时会合并成同一需求文件.

集成需求 :
    集成需求定义了系统如何同其它系统交互.
    关注类似通信协议,命令,数据格式以及物理接口.
    有时这类需求也附有性能需求.
    另外，集成需求可能包含在单独的接口控制文件(Interface Control Document,ICD)中


衍生需求:
    派生需求是没有在规定功能中被明确要求但是包含在需求分析和设计文档中的性能或集成性需求.
    例如，系统可能需要有通信接口错误检测报告功能,
    虽然没有在其它地方明确指出,但是考虑到底层开发的便利,应该包含进来.
    可以这么说派生需求就是"查遗补缺",为其它高层需求提供可追溯的设计元素.


多数情况下，需求是要求着眼于我们将作什么，有时这被称为合同风格的需求要求.
即，每个需求须是包含"应..."句式的书面语句,
形成明确的可核查的有组织有次序的僵硬的正式文档.
直至今日特别是在航空航天和国防行业，这都是标准的需求捕捉和记录格式.
然而，目前商业软件的需求工程中,已经有趋势在逃离这一模式,
用户故事或其它技术正在兴起.
插图8-5显示了新风格需求记录的例子.
在下一节我们就来看看使用情况下.

对于小需求集(20条到50条之间的),其实用什么形式真的没什么大不了的.
但是当需求集变得非常大时，形式就成为问题了.
因为,合同形式的记录趋于抽象远离SOW(项目描述和目标)其他原始，
所以,要求上下文格式可能造成很难察觉出需求如何关系到另一个.





</t>
<t tx="zoomq.20110727085946.4331">用例 Use Cases
-------------------------------------------------------------------------------


合同式需求不是唯一的需求捕获方法.
此外已经提及,对于图形用户界面或是其它人机交互的需求细节,合同式就变得很笨拙.
这时,用例式需求可能就更加合适.


.. image:: ../_static/figs/rwip_0804.pdf.png

插图 8-4. 开发流程中的软件需求

::

    start - 开始
    Project Description and Objectives - 项目描述和目标
    Requirements:   需求
        - Intenration   集成
        - Performance 性能
        - Functional    功能
    Derived Requirements - 设置需求 
    Software Design Description - 软件设计描述
    Trace - 追踪
    Functional Tests - 功能测试 
    Unit testes - 单元测试
    Software - 软件
    Test - 测试
    Fail - 失败
    pass - 通过
    Review/Revise - 复审/修正
    Final product - 最终成品
    Delivery - 交付
    

.. note:: (~_~)

    类似算法和数学方面的需求就不适合用例式的需求捕获.
    其它非功能性特征如性能,定时,或是安全要求也同样不适用.


.. image:: ../_static/figs/rwip_0805.pdf.png

插图 8-5. 合同式需求


::

    1.1 the data acquisition subsystem software shall be capable of acquiring and converting analog data as 16-bit signed data samples at a sustained rate of 1000 samples pre second
        数据采集子系统软件应能够获取和持续率在1000个样本前第二的模拟数据转换为16位有符号数据样本
    
    1.2 the data acquisition subsystem software shall generate values between -32768 and +32768 scross a nominal input range of -10 to +10 V with an accuracy of +/- 1bit
        数据采集子系统软件将产生值在-32768和32768 scross之间的标称输入电压范围为-10至+10 V，精度为+ / - 1位
    
    1.3 the data acquisition subsystem software shall detect both positive and negative voltage input over-range conditions in the conversion hardware, set a software status bit to indicate the condition, and return the maximum possible or negative digital value depending on the sign of the over-range condition.
        应检测数据采集子系统软件的正面和负面的电压输入转换硬件条件超范围，设置软件状态位指示的条件，并返回最大可能的或负的数字值超范围的标志条件。
    
    1.4 the data acquisition subsystem software shall incorporate the ability to set upper and lower limits for acceptable input values via a configuration parameters file.
        数据采集子系统软件应纳入的能力，为可接受的输入值，通过配置参数文件上限和下限。
    
    1.5 in the event of an input beyond the configurable range limits, the data acquisition subsystem software shall set a  status bit to indicate the condition, and return the actual value of the conversion.
        超出配置的范围限制输入时，数据采集子系统软件应设置一个状态位来表示的条件，并返回实际值的转换。
    
    1.6 the data acquisition subsystem software shall incorporate the ability to detect a failure in the data conversion hardware, set a status bit to indicate the condition, and return an error code value in lieu of valid data.
        应纳入数据采集子系统软件的能力，在数据转换的硬件检测失败，设置一个状态位来表示条件，代替有效的数据，返回一个错误代码值。
        

伊瓦.雅各布森(Ivar Jacobson)在1986年发明了用例,作为一种模型,
描述系统和一个或是多个用户系统(可以是真实的人或其他系统)
之间为完成特定任务的相互作用.
用例将系统视作一个"黑盒子",只关注重点输入输出操作.
从这个角度看,用例是种功能需求.
所以,用例可能不适合作为底层执行的情况说明方式，
尽管有些人也试图在SDD 中强行尝试用例形式.
在20世纪90年代末用例方法被纳入了统一建模语言(UML).


用例最简单的形式中,有四个主要的元素：角色，系统，目标，和实现目标必要的步骤.
用例可以通过分层的组织形式来定义其它用例,一般从高层次的用例开始,并逐级引入细节.
也可以通过关联同级的其它用例来一起描述为完成共同目标的必要步骤.


插图8-6展示一个假想的温室控制系统的使用情况(诚然有点做作).
在这个例子中使用有6个元素，逐一在表8-2中列出.


表 8-2. 用例基础元素

.. list-table:: 表 8-2. 用例基础元素
   :widths: 10 40
   :header-rows: 1

   * - 元素
     - 描述
   * - 身分标识 Identification  
     - 一个用例的唯一标识. 在项目的整个生命周期中,用以明确的指代特定的用例.
   * - 标题 Title  
     - 用例标题. 和身份标识绑定在一起,在整个项目周期中用以简要的说明用例.
   * - 描述 Description  
     - 也被称为用例的"目标".试图在较高层次定义用例的企图.
   * - 角色 Actors 
     - 在描述中指出的需要完成的目标或目标的代理(人或其他对象)
   * - 系统 System 
     - 响应角色来实现目标的事物.
   * - 假设 Assumptions 
     - 为了目标的可达成,而设定的必须条件.
   * - 步骤 Steps  
     - 为了完成目标所必须完成的事件序列(可能只有一个)


如果只接触用例,你可能认为他们只是漫画,被称作"用例图"而已.
其实不是,
用例图的目的不是为了定义功能要求,而是提供一种视图,可以从高层次表述系统将由谁怎么使用,

插图 8-6 展示了一个典型的正式用例，有时也叫传统用例 或者具体用例.

另一件需要注意的是,
良好的需求标准也同时适用与用例.
毕竟到最后都是为了需求描述而服务的.
事实上，一个正式的用例图,根本就是一个或一组合同式要求对单一目标的可视化描述.

用例的生成和组织的细节是此书范围以外的了，
如果你有进一步的兴趣,我会建议参考本章结束时的"推荐阅读"一节,
或者也可以钻研互联网上的资料.
维基百科有一个很好的介绍，在http://en.wikipedia.org/wiki/Use_case

我会建议使用ASCII纯文本文件来组织用例，
因为你可以把文本使用类似CVS或Subversion的版本工具进行控制.
CVS和Subversion的有能力自动追踪文件的修改到特殊标记的行,最后的作者，版本号，上次检查的日期等等.







</t>
<t tx="zoomq.20110727085946.4333">可追溯性
-------------------------------------------------------------------------------

可追溯性是指需求和其它关联事务间存在的先决条件问题.
不论以合同式或是用例什么形式记录都得说明需求存在的理由.

插图8-7是展示了可追溯性的图景，从SOW开始，
然后派生出功能和需求，再到SDD，最后是软件本身。
在插图8-4 中也用虚线标示出了这一"追溯"关系


.. image:: ../_static/figs/rwip_0806.pdf.png

插图 8-6. 正式使用案例范例 Example formal use case


::

    title: obtain periodic temperature data from the greenhouse control system

    description: a monitor system(the actor) periodically queries the control system and obtains temperature data for display with a gui. the transactions between the control system and the monitor system are accomplished using a custom communications protocol over a network connection
    
    actors: one actor consisting of an outboard computer system used to monitor the primary control system and display data such as temperature over time and error notification using a gui
    
    system: a dedicated control system for control of temperature, humidity, watering and illumination within the greenhouse.
    
    assumptions: the communications protocol used to exchange commands and fate between the actor and the system is defined in the project icd, and implemented in both the monitor and control systems.
    
    the control system is powered on and running correctly
    the monitor sysytem is powered on and running correctly
    an ethernet connection has been established between the control and monitor systems
    
    stepd:
    1. actor sends query to system requesting current greenhouse temperature
    2. contriol system responds with a string of ascii characters as define in the icd
    Interface Control Document 接口控制文件
    3. actor parses the response from the system and either plots a new data point or displays an error message, as appropriate
    4. if the control system is nonresponsive then the monitor displays an appropriate error message.
    
    
    标题：定期获得温室控制系统的温度数据
    
    描述：监控系统（演员）定期查询控制系统，并获得GUI显示的温度数据。控制系统和监控系统之间的交易是通过网络连接使用一个自定义的通信协议完成
    
    演员：演员组成一个外置的计算机系统，用于监视主控制系统和显示数据，如温度随着时间的推移和错误通知使用GUI
    
    系统：控制温室内的温度，湿度，浇水和照明的专用控制系统。
    
    假设：通信协议用于交换命令和命运之间的演员和系统的定义是在该项目ICD中，监测和控制系统的实施。
    
    控制系统供电和运行正常
    监察sysytem通电和运行正常
    以太网连接之间已建立的控制和监视系统
    
    stepd：
    1。演员向系统发送查询请求目前的温室温度
    2。 contriol系统响应与ASCII字符的字符串定义在ICD
    接口控制文件接口控制文件
    3。演员分析系统的响应，要么给出一个新的数据点，或显示适当的错误消息，
    4。如果控制系统没有响应，然后在显示器上显示相应的错误



.. image:: ../_static/figs/rwip_0807.pdf.png

插图 8-7. 需求的可追溯性

::

    SOW     功能和关联需求     SDD =&gt; 软件


在每个级别,可追溯性对于"需求范围"的核实至关重要.
换句话说，功能和派生需求是否已经涵盖所有SOW要求的事情?
SDD是否已经涵盖所有功能和派生需求?
没有可追溯性，可能无法明确以上基础问题,尤其是在需求复杂的案例中.

核实有“要求的覆盖范围，建立可追溯性是必不可少的”
在每个级别。换句话说，功能和派生的要求涵盖所有
在荒野的事情？是否在功能和派生的SDD面面俱到
要求是什么？没有可追溯性，它可能无法肯定知道，尤其是在那里有超过短短几年的要求处理的案件。


一个需求追踪矩阵如 
表格8-3所示需求追踪矩阵,展现了各基础需求是如何被映射到每个功能的.
类似的有所谓"验证矩阵"，用于将测试映射到对应的需求.


.. list-table:: 表格 8-3. 需求追踪矩阵 
   :widths: 5 40 5
   :header-rows: 1

   * - 功能(FR,FunctionalRequirement) 编号 
     - 需求
     - SDD 定义
   * - 1.1
     - 数据采集子系统软件应能够以每秒1000个样本的速率,接收并转换模拟信号为16位符号数据样本
     - 3.2.1
   * - 1.2
     - 数据采集子系统软件应产生-32,768到+32767之间的值,输入精度为+ /-10至+10 V的输入电压对应 +/- 1位.
     - 3.2.2
   * - 1.3
     - 数据采集子系统软件应能对超出硬件检测范畴的正负电压设置一个软件的状态位
     - 3.3.1
   * - 
     - 以特定软件状态位作条件,根据约定的范围条件返回最大或是最低值.
     - 3.7.3
   * - 1.4
     - 数据采集子系统软件应通过配置参数文件,调节输入可接受的上下限数值
     - 3.3.2
   * - 1.5
     - 在实际输入超出配置限定范围时，数据采集子系统软件应设置一个条件状态位
     - 3.4.1
   * - 
     - 并返回转换后的实际数值
     - 4.2.4
   * - 1.6
     - 数据采集子系统的软件应能够检测到数据转换硬件的失败
     - 3.4.2
   * - 
     - 用一个条件状态位来标识，并返回一个错误代码值代替有效的数据
     - 4.2.5

表格8-3中，条目使用了需求的原始文本,其实只用需求标题的也足够了.












</t>
<t tx="zoomq.20110727085946.4335">需求捕获
-------------------------------------------------------------------------------

捕获正确需求可能是个艰巨的任务，
特别是如果用户自身并不知道答案时.
在研究环境中这实际上是常态,
因为主要用户(首席研究员，部门主管等)
对项目可产生的数据远比明确系统如何工作要更有感兴趣.
他们真的不在乎所有设备的详细信息,能作什么,是否可靠和准确,
数据转换率,电压限额，等等具体问题，
所以,从他们心中捕获需求往往难以高效达成.

在商业环境中,如果软件产品的需求是营销部门主导时,也有类似情况.
营销部门对包含什么功能才能形式有竞争力的产品更加有兴趣,
但具体底层细节，咨询他们通常是疾而终的.

当然在在航空航天和国防工业和一些工业领域,
有些特定需求在高层级就已能得出,例如:性能，错误处理，等等.
但这些领域外，这类需求更多被归类成异常规则.
即使己有详细规定，这类需求也不应盲目接受.
必须有人将审查的必要的一致性和可行性，
而且他们的努力将成为控制项目成本的主要动力.

综上，多数情况下，如果您想有扎实的需求来展开工作
(意思说,你真的渴望要这东西)，
你就得去帮助用户创建需求.
为此，您可能需要进行的采访所有相关人士，
明确他们对项目的真实期待.
如果发现还末支持的需要,立即建立一条需求,
并获得所有相关人的同意
(在商务用语中,您需要得到"买进"的许可).
一旦关键需求部分到位，
接下来就是按照层次先后进行细节的推敲,直到足够指引设计，建造，测试所需的系统.



要试图捕捉到底层细节，
起草问题清单是个好方法，
清单中要包含你会采访的人,以及获取的答案;
以及从回答中推断出的停息;
最好也包含你扣除的需要,以及假设和对应提供者.



对于需求捕获和文档,虽然有专门的商业工具,
但是,通常一个字处理甚至电子表格软件,往往足以满足大多数小到中等规模项目的需求管理.
如果您选择使用其他方法，如用例，也有可用的开放源码工具，
但一般文字处理软件真的足够用了.





</t>
<t tx="zoomq.20110727085946.4337">SDD的图景
-------------------------------------------------------------------------------


SDD(Software Design Description,软件设计说明) 可以简单到只有几页文字,
但如果有图形,可以帮助读者(这可能就是日后的你自己)更好的理解
软件中一些体系结构的关键环节.
图形表示也可以让您和设计师，从新的角度来理解软件.
原先方法无法工作时,使用其它类型的图表理解后就成功的情况并不少见.
图形不仅仅用来表示模式,帮助设计识别问题所在,
还可以提高沟通效率,得出更好的做事方式.


本节绝不是任何图形表示或建模技术的教程.
只是相关概览，我期望读者可以根据实际情况自主使用书中所提及的工具.
另外这里介绍的各种术语和概念在在网络中都免费提供有大量的信息可供参考.


@others
</t>
<t tx="zoomq.20110727085946.4339">框图
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

框图一般用以表述系統中不同功能区，软件，硬件，或之间相互的关系.
事实上，本书已经展示了很多框图.
例如插图8-4就是框图
(实际上，它是种混合图,既是框图，也是个流图表）.
其实,如果设计得当,框图能以非常紧凑的的形式传达大量信息.

为了编写SDD, 从描述目标系统的概览框图是开始,是一个很好的方法.
事实上，一个良好的框图，配合伴随着一两页文本或是网页,就可以是一个简单的项目的整个SDD.


</t>
<t tx="zoomq.20110727085946.4341">流程图 Flowcharts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


流程图的概念可是比电脑本身年龄都大了，
至少比编程语言问世要早30年!
最初流程图用以表示工业生产中活动流程和和模型.
1947年左右在IBM由赫尔曼(Herman Goldstine)和冯.诺伊曼(John von Neumann)创造了今天
我们熟知的软件流程图.
ISO标准5807:1985包含最新的流程图定义;
不幸的是，必须上缴 $100 才能看到原文;
不过,有篇从IBM流传出来的老文件
(GC20- 815- 1，"流程图技术"1969年)可以在网上找到并免费下载.

插图8-8展示了一个简单控制器的流程图.
流程图不仅显示了该算法的基本功能，
也表明那里有余地可改进.
例如，没有规定处理传感器1的输出错误.
也没有约定如何检查以确定输出(任何可能)是否为响应.

.. image:: ../_static/figs/rwip_0808.pdf.png

插图 8-8. 流程图例子

::

    进入
    -&gt; 从传感器1读入电压
    -&gt; v &gt; 最大值?
        是 -&gt; 不能输出
    否 -&gt; v &lt; 最小值?
        是 -&gt; 能输出
    否-&gt; 返回



有些人可能会对流程图嗤之以鼻，并声称他们已经过时，
但在现实中流程图的运用是非常活跃和良好的.
在UML中流程图相当于"活动图".
流程图是程序逻辑路径的有效的可视化形式.
虽然在复杂控制流(如交换机或循环)的表述中,流程图有些力不从心.
尽管如此，流程图作为程序段逻辑的直观说明方式，在SDD 中就不应该被忽视.
</t>
<t tx="zoomq.20110727085946.4343">状态图
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


状态图是对状态变化进行建模的强大工具.
事实上，状态图已发展到通过专用工具可以将状态图直接转化成程序代码进行编译地步.
此外，这种类工具通常可以创建基于状态图的模拟图示并能执行,以便在开发过程中观察其行为.


插图 8-9 展示了一个简单开关的控制状态图.
该通道可能是交流电也可能是中继电路.
从图中我们可以看到，控制器接受三种类型的输入:
ON命令，关闭命令，和一个复位(RESET)命令.
您可能还注意到，如果出现错误，或有什么未正常工作时，
逻辑会忽略除了复位命令之外的任何输入.

.. image:: ../_static/figs/rwip_0809.pdf.png

.. image:: rwipy-fig-8-9.png

插图 8-9. 状态图示例

</t>
<t tx="zoomq.20110727085946.4345">消息序列图
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

消息序列图(The message sequence chart,MSC)
由国际电信联盟(International Telecommunication Unio,ITU)维护的Z.120文件定义.
以目前的形式,消息序列图(MSC)是对多个实体间指令-响应式交互进行建模描述的强大工具.

UML中的序列图相当于消息序列图(MSC).
插图8-10展示了一个简单的消息序列图(MSC).


.. image:: ../_static/figs/rwip_0810.pdf.png

插图 8-10. 消息序列图(MSC)示例

::

    远程系统        系统监控        日志子系统       界面接口
    -&gt;状态请求
                                    -&gt; 数据读取
                                    输入数据&lt;-
                                    -&gt;日志传输
    状态数据&lt;-




MSC模型中的实体，是指可能产生交互的实体,如用户，流程或服务.
交互通常涉及各种形式的交流如请求，指令或数据.
在插图8-10所示的简单消息序列图(MSC)中四个流程：
远程系统，主系统监控，日志记录子系统，数据采集硬件(接口API的过程代表).
当远程系统要获取数据时，它向系统监视器发出一个请求.
由命令接口API解析返回系统指令，然后与硬件进行交互，
最终返回请求的数据.
系统监视器在交易周期内记录所有接口API的响应和远程系统的原始请求.


即便像图8-10所示如此简单的消息序列图(MSC),依然可以令你快速注意到一些东西.
首先，一个状态请求需要一个有限的时间来处理.
消息序列图(MSC)并没有显示有限的时间究竟是多长.
在更详细的消息序列图(MSC)中可以表示成可接受的响应时间上限.
其次，简单消息序列图中不显示在接口API级别出错时的备用响应方案.
当然完整语法的消息序列图(MSC)是可以有效表述出的.

Z.120的最新修订版,包含大量消息序列图(MSC)语法上的细节,
如果对此有兴趣,绝对值得研究通过使用这些图示可以表达什么.
当然的,有各种商业或是开源工具可以辅助创建 消息序列图(MSC).








</t>
<t tx="zoomq.20110727085946.4349">伪代码
-------------------------------------------------------------------------------

OK，也许你对图形没感觉,宁愿处理文本.
那么,有种建模称为伪代码(Pseudocode)。

伪代码是用自然语言书写而成,基于某种样式将程序或算法描述成人直接可读的文本.
(不论哪种语言,只要支持必要的技术词汇就可以，但似乎多数情况都是用英语).
通常伪代码使用编程语言的结构约定，如缩进,if语句，等等，
但它并不打算成为真正的编程语言.

目前还没有标准的伪代码格式，
但一般是借用现有的编程语言，C语言成为通用的语法选择.
有些语法元素一般会省略,
比如变量声明，函数调用或循环结构内的代码块会被替换为一个或两个自然语言的描述语句.
伪代码主要目的是记录算法的功能或程序，
而不是低层如何实施的细节，
虽然在某些情况下包含一些细节可能更有用.


在实践中，伪代码随着作者和环境的不同可能有风格的很大差异.
它可以看起来极端像一个真正的编程语言,也可以近似一篇散文.
理想情况下，作者应该努力在两种风格间取得平衡.


图8-11显示了伪代码示例:一个从底层功能读取模拟数据的函式.
正如你所见. ``ReadAnalog`` 的主要意图是包装底层 ``ReadAnalogChan`` 的参数检查，
并取代从驱动API返回的代码,将其转化成高级别的程序可以理解的事物
(实际上，它简化了返回代码，因为某些API调用可能会返回20或30种不同的数值，
都是些只有硬件工程师有兴趣的各种硬件错误警告).


伪代码应足够详细，以记录程序或算法的基本功能，
同时还得确保对编程不熟悉的人也可以容易阅读.
这使依法办事代码具备可审查性，以确保最终方案将满足设计规范,
是否潜伏的缺陷，是否忽略了原作者的意图.
(因为人们往往忽略了自己的写作中的错误).




</t>
<t tx="zoomq.20110727085946.4351">分而治之
-------------------------------------------------------------------------------

我们已考察过一些创建SDD可用的工具,
现在让我们来看看如何真正组织一个SDD.
插图8-12展示了如何根据高层次系统框图创建SDD的大纲.


.. image:: ../_static/figs/rwip_0811.pdf.png

插图 8-11. 伪代码示例




这里的思想很简单：只为系统框图中的主要功能块撰写章节.
需要增补的,可能是两个图示,或是描述如何将功能模块融入整个系统.
详细描述,可以包含在适当章节中,或是每个模块有自个儿的章节,这由你定.


正如之前所述,SDD不必包含所有细节的大部头文章,
但应该包含足够的细节,以便读者可以了解如何实现软件.
还展示了软件的开发计划,而不仅仅是不管不顾的开发(hacked)出来.

顺便说一下,开发计划绝对不应是"粉饰太平"之类的表面文章.
如果不按照计划进行,软件很可能在几个月或是几年后出问题,
通过SDD 的帮助,我们可以事先明确为什么发生问题,并指定数个方案应对.

如果软件是产生用以研究的数据,SDD 也可以在数据的准确性不断出现问题时,
事先给出方法来处理.

SDD超值发挥之时,就是你在捍卫由软件生成的数据之时.






</t>
<t tx="zoomq.20110727085946.4353">处理错误和故障
-------------------------------------------------------------------------------

不幸的是，我们没有生活在完美的世界，
我也没有达到完美的软件开发者報界，
所以,设计文档必须考虑到意外,并说明错误或故障一旦发生,软件将如何处置.
这是个有关安全的赌注，
即使在软件中对明显的错误都进行了处理,
例如:发现和处理超标输入，硬件错误，或计划外的事件序列,
到最后,仍然会有意外发生.

.. image:: ../_static/figs/rwip_0812.pdf.png

插图 8-12. 组织SDD 

::

                    用户界面
                    /       V ^
    错误句柄        数据处理
            \            //          \\
            硬件界面        远程界面

    1.0 系统概述
    1.1     系统说明
    1.2     系统框图
    
    2.0 硬件界面
    2.1     API扩展
    2.2     串口界面
    
    3.0 数据处理
    3.1     控制算法
    3.2     趋势监控
    3.3     参数读/写
    
    4.0 用户界面
    4.1     图形架构
    4.2     菜单项
    4.3     数据显示
    4.4     状态展示
    
    5.0 远程界面
    5.1     TCP/IP 套接服务
    5.1.1       命令协议
    5.1.2       数据格式
    5.2     串口界面
    5.2.1       命令协议
    5.2.2       数据格式
    
    6.0 错误响应
    6.1     失败分析
    6.2     错误句柄
    
    7.0 验证集



@others
</t>
<t tx="zoomq.20110727085946.4355">确定潜在的故障
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

找出潜在的故障的方法之一,就是通过做基本的的故障分析.
失败分析是种简单而有效的方式,
先列出所有的系统可能会失败的途径，
然后识别软件会如何处理.
在本质上，它是一套 "这是什么?"的问题，
你最好尝试给每个问题一个合理的答案.

表8-4显示了一个简单的故障分析表。


.. list-table:: 表 8-4. 简单故障分析
   :widths: 10 20 20
   :header-rows: 1

   * - 故障
     - 原因
     - 对策
   * - 硬件输入错误
     - 无效的输入通道
     - 通知用户并记录.系统不会停止
   * - 
     - 无效的输入端口
     - 通知用户并记录.系统不会停止
   * - 
     - 硬件无响应
     - 通知用户.系统终止
   * - 硬件输出错误
     - 无效的输出通道
     - 通知用户并记录.系统不会停止
   * - 
     - 无效的输出端口
     - 通知用户并记录.系统不会停止
   * - 
     - 硬件无响应
     - 通知用户.系统终止
   * - 无效的用户输入
     - 用户提供的参数或命令代码是无效的
     - 通知用户并记录.系统不会停止

这种类型的分析使用电子表格可以很容易地进行.
随着一步步的增补(系统开始真正工作),
表8-4有可能被扩大，以涵盖更多可能的失败的案例，
但这里的思路是，
只要每种错误都能列出来,那么响应策略就可以被定义.
审查潜在的故障时你可能会说:"不,这种情况不可能出现!"
正是这种假设，导致多年来各种壮观的软件故障.





</t>
<t tx="zoomq.20110727085946.4357">故障响应
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

失败条件一般可以分为三组：致命的，非致命性，微不足道的.

重要的是要规划出系统应该如何处理每一类的故障.

例如，当出现致命的错误时，系统会优雅的尝试自行关闭，还是直接死掉(​​即崩溃)?
如果出现非致命的错误，是个别功能还是所有功能应该被禁用?
系统仍然是可用的嘛? 怎么算是细小的错误?
沉默地记录事件以后,系统应该尝试发送哪种形式的通知? 或者只是完全忽略它?

等等所有这些事情,在制订对策时,都应该考虑到.
</t>
<t tx="zoomq.20110727085946.4359">为需求而测 Testing to the Requirements
-------------------------------------------------------------------------------

功能测试，顾名思义，摆在首位的是对系统能否达成需求的功能的测试.
建立功能测试用例的要求其实很简单.
良好的需求设计已经包含了所有必要的测试案例的信息.
例如，假设我们有这样一个需求::

    数据采集子系统软件应能够获取和转换
    以每秒1000个样本为速率的16位有符号整型数.


由此可以得出，
我们需要输入模拟，以便触发系统生成-32,768和32,767之间的值数据.
我们还需要能够对一秒钟内生成的样本进行计数.
如果软件有能力来实时确定其实际采样率，并显示它(或至少记录)，我们基本上完成了.
如果它无法作到，也许这就是应该收录为一条派生需求，
然后进入SDD
(这也是需求如何被发现的例子).

但是，即使没有新派生需求，仍然是可以确定采样率的.
也许系统可以伴有时间戳来保存数据样本到一个缓冲的文件.
也许不用保存每个样品，但也许会保存每100样本数据.
如果日志记录功能纳入到软件中，就可能获得必要的核查数据的方式.
最后，它可能会连接仪器的硬件,结合数据采集的时间,换算成运行时的转换速率.


顺便说一下，这也就是为什么说,在开始编码前要进设计功能测试.
在测试用例的设计过程中，原有的缺陷就可能忽然明显起来,
那么这时修订,远比代码全部完成了再改要优雅得的多.
在代码之前编写测试案例，可以照亮思维的暗角，刺激思维方式，终将在后期开发过程中节省时间
(也可能是钱).
</t>
<t tx="zoomq.20110727085946.4361">测试用例
-------------------------------------------------------------------------------

功能测试用例描述介绍必要的场景,
以便测试系统对特定的要求，在特定的环境中如何响应。
需求驱动的测试用例，却是反过来，通过实际的测试执行来定义或是生成功能。
功能测试的情况也可以是用例的一部分，
但在本书，我们将以两个独立实体来分享讨论用例和功能测试。


插图8-13 用框图形式，展示了需求驱动的测试用例之间的关系，
让程序执行，根据测试数据的通过/失败状态来最终确定需求是否达成.

.. image:: ../_static/figs/rwip_0813.pdf.png

插图 8-13. 需要和测试用例关系

::

    需求
    =&gt; 测试用例:
        测试编号
        测试标题
        测试目标
        测试步骤
        测试过程
        通过/失败 条件

    =&gt; 执行测试
        人工测试
        自动测试

    =&gt; 测试数据




在某些场景中,你可能会听到"测试程序"，或者"测试程序文档"
这就是"脚本"，或是说为了测试要完成的一系列行动.
实际也像演员(测试仪)要遵循的脚本(例如，第1步，第2步，3步，等)，
或是说某种类型方案的测试程序
(例如，一个Python脚本，或者一个通讯模拟器的控制脚本).
这些构成插图8-13中指出的"自动测试".


将测试分离分为两个独立但相关的文件，用例和程序,多数情况并不是真的有必要.
然而，随着项目复杂程度的增补,
将测试分成可执行的(测试程序)以及不可执行的(测试用例)两个部分,
就很有必要.
因为抽象出来的测试案例以及程序,都可以独立编写,互不干挠,
面对成批的相关测试时,这么安排绝对有必要.
当然这么作,也相应增加了精力和成本,毕竟现在有两个文件要维护.

然而,不论怎么组织,测试都是来"买通"需求的,
即,根据通过或失败的测试状态来独立判定成果.


插图 8-14展示了测试用例的模板.
类似插图 8-13 中所示,测试用例中的测试过程就是案例的一部分.

.. image:: ../_static/figs/rwip_0814.pdf.png
插图 8-14. 通用测试用例模板

::

    测试_id 功能测试标题
    
        测试类型:   人工测试?脚本?扩展驱动?
        模拟用值:   是否在虚拟模式中测试?
        硬件用值:   是否在真实硬件中运行?
        脚本带宽:   如果是自动化测试,哪些脚本要使用?
        C扩展/源码:如果测试有支持命令/控制资源,它们在哪?
        
    目标:
        此处叙述要进行此项测试的理由,以及测试人员须知.不用定义如何算通过/失败
    
    预测步驟:
    
        定义测试准备工作,说明所有在测试开始前应该准备好的各方面事物
        
        A. 步骤
        B. 步驟
        C. 步驟
            (追加必要条目)
    
    测试过程:
        
        此处详进说明测试环节.每一环节可以包含多个步驟.每一步骤都应该是可检验的行动
        (比如说:"将开关s1置为开启,并确认通路1的灯点亮" 或是 "启动测试脚本,并确认在脚本运行期间没有错误信息抛出")
    
        A. 步骤描述
        B. 步骤描述
        C. 步骤描述
        D. 步骤描述
            (追加必要步骤)
    
    通过/失败:
        
        此节定义测试通过/失败标准. 
        测试的通过, 应表现出的行为类似,不超过定义的指标范围或限制.或测试执行期间没有生成任何错误.
        测试的失败标准,可能是函式执行的输出值过高或过低, 或是在测试过程中发生任何错误,从而抛出错误消息, 这都是明显的失败表现.


.. a test that passes would exhibit the behavior define by the requirement without exceeding nominal ranges or limits. or generation any errors during the execution of the test. a test failure might be a value that is too high or too low or a function taking too long to execute. any error that occurred during the test resulted in an error message is an obvious failure.



同时,注意,模板头部附加了一点东西.

我喜欢在每一个测试案例头部追加一个概要,说明
是什么类型的测试，需要开发还是脚本(即自动化脚本).
摘要还指出测试是否需要在模拟模式下运行软件，或者必须以实际的硬件来执行.
请注意，如果"模拟器检验"为"是","硬件检验"为"否".
这时意味着,该软件内部包含仿真功能，有些功能可能无法和运行态系统一样执行
(例如，使用故障注入来测试错误处理).
其次，如果有配套的自动化脚本,将在此进行命名.
最后，如果有外部信号源进行命令或控制,也在这里指出.

测试用例可以作为大文档中的章节内容,
也可以收集在单独的文件中.
这两种方法各有利弊.
大文件方便统一查阅.
单独文本,允许和测试案例一起置于版本管理中进行追踪和修订.
您将需要一些方法来记录每个测试用例的通过/失败状态，
并标上执行日期.
电子表格可以很好的管理这些,
打印时,记得在用例ID号前留点空间,以便记录执行结果.



</t>
<t tx="zoomq.20110727085946.4363">测试错误处理 Testing Error Handling
-------------------------------------------------------------------------------

测试中常常被忽视的方面是故障检测和错误处理。
之前我们讨论故障分析时简要谈及了一点,
现在，我们将论述，为什么不仅仅要对功能的正确响应进行测试，
更要测试系统没按期待执行时将如何应对.
软件错误处理的测试往往比测试成功要更加困难.
例如，如何在通信频道里策动故障?
如何能在模拟器中引发模拟数字转换器的故障?

测试错误处理中常用的方法被称为"故障注入".
顾名思义，这涉及在代码中纳入某些功能，以允许测试可达，
简单的说，就是设置会引起故障的内部变量.

做到这点的方法之一,就是通过网络套接字连接，
在连接前,必须通过配置参数才可以启用这种专用通道.
串口连接也可担任这个角色.
如果测试涉及到外部设备，只需拔下它就等于注入了故障，
但只能引发一种类型的故障.
这种做法将不会注入因数据损坏而造成的错误，它只会模拟通信的缺失.


重要的是牢记，测试系统错误的响应目的,
不是来模拟错误条件自身,
而是激发对应处理错误的代码.
我发现创建全局状态变量集很有用,
这个集合可以内置在记录软件执行错误的条件模块.
例如,底层硬件数据读取模块中,
在其成功或失败时可记录对应全局状态变量，它不应该覆盖现有的错误指示.
然后可以检查代码的错误状态,以便进一步从硬件获取数据,
如果出现错误,则触发相应的行动.

在这种方案中就可以简单地通过修改全局变量的设置来引发对应的错误条件.
底层代码不会屏蔽它，而上级代码，将看到并在发生了错误时回应.
只有最底层的代码部分无法通过这种方法进行测试，
但它们可以被分开处理，使用其他测试技术进行测试.

错误处理和错误注入先讲这么多，稍后有关章节再探讨.
当然要注意:
总是会有不不止一种方法去作,
这里我描述的只是其中的一个办法.






</t>
<t tx="zoomq.20110727085946.4365">回归测试 Regression Testing
-------------------------------------------------------------------------------

回归测试背后的想法很简单：关注的问题是
"近期的变化是否破坏了什么?"
任何时候，你对代码进行了更改，不论是为了修复一个现有问题，或是实现新的功能，
你都应该做回归测试。

为了执行回归测试，通常对修改后的软件运行部分或全部现有的功能测试.
局部回归测试将侧重于变化中的特定软件功能.
一个完整的回归测试将执行所有可用的功能测试.


对软件进行更改必然会频繁地引入缺陷，这是既定事实.
可能是激发了先前处于休眠状态的错误，
或是由于创建了新的执行路径从而包含了以前未知的缺陷.
"修复"行为本身总是不尽如人意.
感觉软件发"脆",那是因为软件总是有没有考虑到的超标,不正常,非期待的输入.
回归测试可以帮助发现这类问题,以便在它们变得更加混乱或是发布出去前及时被修订.


回归测试不仅只能同功能测试结合.
它也适用于单元测试.
回归测试在多数情况下,是可以自动运行的,
这意味着回归测试可以作为完整的测试套件反复运行.
比如说,在每晩的自动构建中,
这样一来,每日清晨,第一件事就是查阅测试简报,明确当天要修订什么.

</t>
<t tx="zoomq.20110727085946.4367">进展追踪 Tracking Progress
-------------------------------------------------------------------------------

如果在整个项目生命周期中，对功能测试结果进行追踪,
你可能获得类似插图8-15 的图形.
这是相当典型的依赖功能测试验证成效的项目，
开始时软件有点粗糙，然后随着项目的进展不断改善.
如果该项目的开发活动还包括广泛的单元测试和代码复审，
这种情况可以得到改善，
功能测试整体失败率水平,
应比这里显示的要呈现更快的下降趋势.
但是，在任何情况下，最终目标都是追求在项目结束时,
达到测试的零失败和100％的需求覆盖.


.. image:: ../_static/figs/rwip_0815.pdf.png
插图 8-15. 功能测试失败与通过率的变迁
</t>
<t tx="zoomq.20110727085946.4369">代码风格
-------------------------------------------------------------------------------

几乎每种编程语言都有自己的代码风格.
有时同一编程语言可以有不同的风格.
甚至于不同的公司，政府机构，研究团体，开源项目，以及个别开发商也都有自己的代码风格.
在某些情况下代码风格可能是正式的文件，
而在多数情况中,代码风格只是随着时间的推移和发展被反复使用最终成为习俗的东西.

在某些情况下编码风格可能被当成一组可核查的编码要求来执行.
这在高可靠性或安全性软件的生产过程中是典型要求.
己有各种工具，可以根据一组编码规则分析源代码并在代码偏离规则时生成消息.
对于这本书中涉及项目的严谨程度而言,我不觉得有必要提倡使用工具.
但是,我认为定义或通过一个良好的编码风格，建立一些基本规则，然后坚持贯彻很重要.


@others
</t>
<t tx="zoomq.20110727085946.4371">
组织你的代码 Organizing Your Code
-------------------------------------------------------------------------------

如果你有一个良好的SDD来开始，
那么代码显而易见的应该根据SDD来组织.
当然，也有一些基本的方针可以运用，使代码保持整齐，整洁，便于阅读.

首先，要拒绝将一切塞入一个文件的诱惑.
划分成多个只包含相关功能或类的模块不会被被罚款，
其实这样组织是好事，因为有助于理解软件.
而且也令改变更加容易,因为在修订相关模块时,并不会影响其它部分的代码.
所以，即使SDD暗示20不同的功能要安置在同一个模块，
你可能也要考虑应该分解成两个，或是四个模块，
每个模块只包含紧密关联的功能.

Python 内置有包和模块的组织方式，
可以协助确保代码的齐整,
如果你不熟悉相关概念,应该花一点时间阅读相关文档.
C没有相应的源代码组织方式，
但它也可以很容易地将代码模块到，头文件，源文件或是库模块中.


插图8-16用框图展示了仪器应用系统的代码组织方式.
其中的要点是,代码依据水平切分的功能来组织,
图中每个块,仅涉及到指定的群体或是阶段的功能.

.. image:: ../_static/figs/rwip_0816.pdf.png
插图 8-16. 代码组织案例

::

    程序开始-&gt;主模块-&gt;程序终止
    
    主功能:
        用户界面 | 数据处理 | 远程接口 | 数据保存/载入
        
    支持和工具函式:
        工具函式 | 串口I/O接口 | 仪器接口 | 网络接口 | 数据格式化 | 文件 I/O
    
    操作系统
    (服务,驱动,等等.)
        
        
        
        
        
        
        
        </t>
<t tx="zoomq.20110727085946.4373">代码复审
-------------------------------------------------------------------------------

代码审查非常有用，尤其是在帮助团队维持代码和文档一致性时,
因为原作者的代码可能被不断忽视，或包含尚未意识到的错误。
但是，代码审查，不能替代测试，这两项活动好象同枚硬币的两面.


如果处理不当,代码复查也可能是一项艰巨的苦差事.
有一次，我参加了一系列的代码复查，竟然历时近八天.
为什么呢？因为在参加复审前,其它人并没有事先查阅对应的SDD,
所以他们不知道结构，不知道功能的意图，为什么要这么开发,
等等,所有小细节都要逐一向他们解释，就好像重新进行一回详细设计.
好在毕竟都是我们必须回顾的代码,总体而言也不算浪费时间.


当仅有两个人写代码时,复审可以很简单，
也可以成为正式的会议,包含主持人，一名秘书，一些评论，加上软件的作者来推进.
这一切都取决于软件的复杂度,重要程度有多少,以及是否一开始就有SDD(Software Design Description,软件设计说明).
对于本书中大部分项目,其实只要有人认真看一下代码,就足够了.
即使你已离开,其他人(可能都不是名程序员)，
也可以轻易理解你可能忽略了什么事情.


.. note:: 译者按

    除了项目足够简单之外, Python 代码行文如此象自然英语也是有这种效果的重要保证.
    另外,Python 使用缩进,而不是其它语言选择特殊的字符来划分语法结构,
    也使代码更加直觉,干净,有层次感,有助于理解!
    当然,这种设计也招至大量非意,不过,仁者见仁智者见智,译者本身感受是非常舒服的.

这有一些我认为进行代码复审要注意的几条非常有用的规则:

- 每位参与者都应该事先熟悉过代码.如果有人没有作到,取消复审资格.
- 每位参与者都应该事先查阅代码对的SDD章节.
- 关注适合进行代码复查的方面:风格一致性，明显的逻辑错误(例如:if-elif-else结构问题)，未初始化的变量，不匹配的malloc和free调用（C代码），或放置不当的类模块的范围变量(反之亦然)等等,这只列举几个例子,具体的应该在对应项目中事先约定.
- 统一到一个清单尽量坚持记录.代码复审清单应包含所有关键信息，在复审期间,尽量不要偏离检查列表太远，因为这会浪费时间.


最后一点尤为重要:
一个基本的清单，可以节省时间和精力,帮助审查期间集中注意力，
它提供了一个方便的方法来保持跟踪审查结果。
一个最小的清单看起来可能像插图8-17。

.. image:: ../_static/figs/rwip_0817.pdf.png

插图 8-17. 最小复审检查列表

::

    1. 是否按照SDD设计进行了正确实施? 
    2. 是否有任何明显的拼写错误和错别字? 
    3. 软件是否遵守项目的编码准则和公约?
    4. 各种注释有意义吗?都有必要吗?注释足够或太多? 
    5. 数据对象被充分定义了嘛(例如，结构，字典，数组等)? 
    6. 如果变量根据字面含义来使用,是否正确? 
    7. 在多个地方被使用的同一常数，是否将他们统一在共同位置定义?
    8. 是否有代码重复明显的部分? 是否可以封装为函式或方法?
    9. 是否有代码永远不会被执行?
    10. 所有定义过的变量和常量都真正使用了嘛?
    


让我们进一步理解插图8-17 揭示的条目含义:
Let’s look at the items in Figure 8-17 a bit more closely:

1. 是否按照SDD设计进行了正确实施? 
    代码必须尽最大可能遵循SDD的设计
    (当然这取决于，SDD本身有多靠谱).
    假设我们的目的是符合需求(初始或派生)，
    代码不遵循SDD是最有可能造成需求不被吻合的原因.
    不论怎么花里胡哨或是耍酷,只要没有吻合用户的需求,最好的结局也是浪费程序员时间开发出无用的软件.
    在最坏的情况下，无证，不符合需求的特性,可能会向代码引入各种邪恶的缺陷,即使单元测试也无法发觉.


2. 是否有任何明显的拼写错误和错别字? 
    虽然单元测试可能发觉一些拼写错误的变量名，
    但是无法捕获所有类似错误,
    特别是像Python这种允许代码来动态创建变量的语言.
    一个变量可能已在另一模块，函数或方法中被定义，
    即使拼写错误代码仍可能通过单位测试.
    比如说,在模块或是类中有变量只用以追踪内部状态,
    而且只能通过类或是模块之外的代码进行读取和设置,
    如果拼写错误,那么它可能永远不会被改变,然而外部调用者也永远意识不到其中的问题.

3. 软件是否遵守项目的编码准则和公约?
    这是相当明显的，并在审查期间将更加明显.
    如果团队选择了一个编码风格，那么它应该始终用以保持一致性。

4. 各种注释有意义吗?都有必要吗?注释足够或太多? 
    注释有时被用来掩盖糟糕的编码
    (或许还没有理解代码的含义,或代码写得有点夸大当它被).
    注释也常常被滥用(例如注释 a +=1 ，实际上这种情况很常见).
    注释只应出现在需要解释的地方，包括功能或是方法应该作什么.

5. 数据对象被充分定义了嘛(例如，结构，字典，数组等)? 
    所有数据对象都应该有一个注释，除非它们的使用是显而易见的.
    尤其是对于Pythonf中字典或复合结构的对象.
    用在循环中当成简单索引计数器的变量可能并不需要一个注释.

6. 如果变量根据字面含义来使用,是否正确? 
    文本常量的值应该"一成不变"的来使用.
    所以需要从一开始就正确,错误的键入可能导致软件严重的意外行为.

7. 在多个地方被使用的同一常数，是否将他们统一在共同位置定义?
    如果同一常量在两个或两个以上的地方被使用，就应该转换成名字具有全局唯一性标识的变量,
    而不是"赤裸裸的数据".
    这使得开发者能够在一个地方进行修订,所有使用的地方都得到统一变更.
    另一种方式,是尝试人工追踪常量可能出现的每一个地方,
    随着数量的增加,总是会有错过的现象,从而引发无数悲痛.

8. 是否有代码重复明显的部分? 是否可以封装为函式或方法?
    如果代码中在多个地点重复包含本质上相同的功能代码,
    那么,该功能应该是一个可以随时调用的函式或是方法.

9. 是否有代码永远不会被执行?
    所谓的"死码"正是要避免的东西.
    很难确定它真正应该做什么,
    有可能后来有人无意间激活了这段代码,即使完全不理解它为什么存在,从而混乱了软件.
    或是为了一个只有在非常独特的情况下才可能发生的,设置了这一未经考验的执行路径.
    如果不准备使用它，就清除它.
    要真正确保所有的代码执行需要使用代码覆盖工具，
    不过在复审期间人工可以注意到这种"死码"，是一个良好的开端.

10. 所有定义过的变量和常量都真正使用了嘛?
    如果一个模块，函数，方法或类中定义了变量，它就应该被使用.
    如果从始致终都没有使用过,那就像死代码段，就应该被清除.

当然，你可以使用比这个清单更多检查条目，
但我觉得这是一个足够好的开端.
它足够短，但已经可以切实检查自己的代码(如果没有其它人来作复审)，
当然有第二双眼睛(或更多)总是更好的.





</t>
<t tx="zoomq.20110727085946.4375">单元测试 Unit Testing
-------------------------------------------------------------------------------


单元测试的目的是为通过锤炼软件每一小功能的质量从而确保整体的.
单元可以是一个函式，一个类，或在类中的单个方法.
这是通常是可执行代码的最小逻辑单元.
例如，有个函式，
它接受一个从外部仪器采集到的原始二进制数据，
执行一些扩展和范围检查，并由返回代码返回一个二进制值,
这就可以作为一个单元,用合理和超标的输入值来完成测试.
当单元被测试时，代码覆盖率也就可确定了.
这在C语言较困难，
特别是当代码作为低层扩展模块时,但它是可行的.

不过，在本书中，我们将坚持Python单元测试.


@others
</t>
<t tx="zoomq.20110727085946.4377">连接到硬件
-------------------------------------------------------------------------------


要想和硬件良好共舞,软件本身靠谱是整个工程中必经的一个点.
越跨越这点越好,因为你肯定不愿意到最后才发现硬件并没有按照你的设想工作,
或是你的代码总是有这儿那儿的问题,直到接口终于激活
(我曾经一直面对这类问题,实话说它们一点也不好玩).
都是些类似数据表述,位顺序,时间值或是其它琐碎的问题,
你绝对不想花11个小时好容易将手机硬件调配好后,再不得不等一个月,才能真正使用它.


从体积小易管理的底层模块开始创建.
换句话说，若应用通过串行端口与外部设备进行通信,
那么应该第一时间测试硬件接口
(或​​模拟器的串行接口模块，我们将在第10章讨论).
确认正常工作之后,再添加更多的功能.
人们最常犯的最大错误就是在开发新系统时,试图一次性将所有功能都作出来.
如果你人品真的很牛,可能会运行起来,
但是绝大多数情况是相反.
这种全好或是全坏的开发方式,
真正的问题在于,你可能作错了不只一件事,
但是错误可能相互掩盖,导致你无法发觉.
更加糟糕的是,个别单元独立运行时没有问题,但是当你尝试整合其它单元时,立即引发严重的问题.


这是一份推荐的开发顺序,在你的具体工程中可能略有不同，但是宏观上建议这么来推进::

    1. 底层扩展(驱动器之类)
    2. 通讯(例如:串行接口处理和远程通讯支持)
    3. 实用工具类 (如我们前面看到的InputUtils.py模块)
    4. 数据处理和错误响应



换句话说，软件集成以自下而上的顺序,从硬件到本身来实现,
这样实施的好处是
::

    • 先对底层的配套功能进行测试和验证,为以后增加复杂的功能,提供了坚实的基础
    • 如果代码是正确的并足够的模块化,底层模块(甚至一些中层模块),可收入你的 ``软件零件盒`` 在未来的项目中复用
    • 在软件很小时,错误能轻易被识别和解决,从而令异常传播到整个软件前,得到有效的管理



一旦所有基本功能都完成,最后一个步骤才是配合测试和验证模块整合所有上层功能,
例如,数据处理和用户界面.



</t>
<t tx="zoomq.20110727085946.4378">为什么编码风格是重要的
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

始终遵循一个特定编码风格的一个好处是，
它会导致软件代码将拥有清晰和易于理解的格式，形成一致的风格.
通常这并不只是为了美观，它使完成的代码除原作者以外的人，也可以轻易读懂和降低审查的成本.

另一个好处是，它定义的编程风格可以避免语言潜在的危险的功能.
例如,在C语言中可以使用指针参数直接使用已分配给该程序的内存.
这对很多应用软件而言是好技巧,
但当软件运行在内存受限的嵌入式系统时，
编码规则通常会禁止使用动态内存分配,
以避免致命的指针错误和内存"泄漏".
在嵌入式系统里运行，周围不会总有人来推复位按钮，
所以,这些情况可以引发的问题绝不仅仅是程序崩溃了.
另一个例子是，Python语言允许程序员动态创建字典对象，
并通过参数和返回值，可以随时动态修改它们.
结果在字典对象经过多个函数或方法调整后，
字典实际已经很难确认它是从哪里来的，以及它在做什么.


</t>
<t tx="zoomq.20110727085946.4380">采纳现有的编码风格准则
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python.org的好人们,已经发布了在线文档,
定义了一套基本的编码风格准则.
主文档为 `PEP-8`_ ,"Python代码风格指南";
 `PEP-257`_ ,"Docstring公约"也包含有用的信息.


风格主要是有关布局，名称和代码组织的一致性约定.
引用 `PEP-8`_ :
"风格指南事关一致性.
一致性对于风格指南是重要的.
在一个项目内保持一致性更加重要.
在模块或功能内部保持一致性则是最重要的事!"

如果你是Python新手，
我建议你尽可能的坚守 `PEP-8`_ 的约定.
想明确什么有用什么没用,这是最好的办法.
当你获得或是拥有了足够的经验时，
你可能会使用自己定制的合理风格准则了.

虽然总是有一些C编程风格准则不断漂出来，而且看起来都有很大变化.
但是,有些程序员总是使用古老的 K＆R"的ANSI C"参考书作为自己的风格指南.
在其他情况下，风格指南可能已经存在，或可能有明确的编码风格的要求.
那么,请确保您选择的风格，与现行的保持一致.
</t>
<t tx="zoomq.20110727085946.4388">定义单元测试 Defining a unit test
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

单元测试并不一定直接映射到一个需求，
但它是对 SDD 的直接映射.
假设SDD定义了一个数据衡量函式,代码类似 ::

    def ScaledInput(data):
        rc = NO_ERR
        scaled_data = data
        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
            if scaled_data &gt; SCALE_MAX:
                scaled_data = SCALE_MAX
                rc = ERR_MAXSCALE
            elif scaled_data &lt; SCALE_MIN:
                scaled_data = SCALE_MIN
                rc = ERR_MINSCALE
        else:
            rc = ERR_OVER
        return (rc, scaled_data)


对于我们而言，可以假设data_scale和data_offset是在其它地方设置的
(也许是软件初始化时).
DATA_MIN，DATA_MAX，SCALE_MIN，SCALE_MAX, NO_ERR，ERR_MAXSCALE，以及ERR_MINSCALE是"常量",
都是硬编译的数值，并在执行过程中不发生改变,
当然，也可能在另外的模块中，会有变动.

最后，请注意，返回的数据值是由原始输入的值初始化而成的.
如果发生值范畴错误时，该函式将依然有数据返回,
但它不会对数据进行缩放或以其他方式调整.
如果发生缩放错误，返回的数据将是最大或最低允许值.
这也是为什么返回的是2元组,包含用以进行功能检查的返回码(RC),来识别发生了什么.


单元测试构造所有可能的输入用于强制遍历所有可能的执行路径.
实现这一目标的方法之一是创建一个测试数据表.
在 ``ScaledInput()`` 的情况下，我们可以看到，有三个明显的输入案例:
太低，太高，范围之内.
表8-5显示了此函式对应的三个测试用例:



.. list-table:: 表 8-5. ScaledInput() 测试用例
   :widths: 5 20 5 20
   :header-rows: 1

   * - 测试
     - 输入
     - RC(返回码)
     - 输出
   * - 1  
     - data &lt; DATA_MIN 
     - ERR_OVER 
     - 原始输入数据
   * - 2  
     - data &gt; DATA_MAX 
     - ERR_OVER 
     - 原始输入数据
   * - 3  
     - min &lt;= data &lt;= max 
     - NO_ERR 
     - 处理后数据



这是个很好的开始,但它的确不完整:
没有测试 ``scaled_data`` 可能超过比例变换的限制,
所以有原有的三个测试用例无法覆盖到有的执行习路径.
表8-6显示了这个看似简单的功能所需要的完整测试用例.


.. list-table:: 表 8-6. ScaledInput() 测试用例(完整)
   :widths: 5 10 5 5 10 10
   :header-rows: 1

   * - 测试
     - 输入
     - 数据缩放 data_scale 
     - 数据偏移 data_offset
     - RC(返回码)
     - 输出
   * - 1
     - data &lt; DATA_MIN 
     - 1.0
     - 0.0
     - ERR_OVER 
     - 原始输入数据
   * - 2
     - data &gt; DATA_MIN 
     - 1.0
     - 0.0
     - ERR_OVER 
     - 原始输入数据
   * - 3
     - min &lt;= data &lt;= max 
     - 2.0
     - 0.0
     - NO_ERR 
     - 处理后数据
   * - 4
     - min &lt;= data &lt;= max 
     - 10.0
     - 0.0
     - ERR_MAXSCALE  
     - SCALE_MAX
   * - 5
     - min &lt;= data &lt;= max 
     - -10.0
     - 0.0
     - ERR_MINSCALE  
     - SCALE_MIN
   * - 6
     - min &lt;= data &lt;= max 
     - 1.0
     - 1000.0
     - ERR_MAXSCALE  
     - SCALE_MAX
   * - 7
     - min &lt;= data &lt;= max 
     - 1.0
     - -1000.0
     - ERR_MINSCALE  
     - SCALE_MIN


data_scale和data_offset的实际值，当然取决于SCALE_MAX和SCALE_MIN值，
但对于我们,可以假设他们都应匹配表中定义的测试用例结果.
这点也适用于DATA_MIN和DATA_MAX.



虽然看起来最后两个案例真的没必要,
他们只是补全了所有可能的值来覆盖函式功能.
我想指出的是,
表格也描述了函式预期的行为，其中包括 ``RC`` (返回码)不是 ``NO_ERR`` 的情况.
一个单元测试只要返回值不吻合表中的期待值就是算失败,不仅仅是 RC 有返回错误码.
每个单元测试用例文档,都应该包含类似 表8-6 来所有测试成功的必要条件组合.




.. topic:: 无正当理由,纯粹浪费时间的创意测试 Creative Time Wasting—Testing Without Justification

    单元测试，即使没有同功能测试一样直接映射到对应的需求,
    仍需要有某种文件来形容它们的目的是展示和如何达成.
    无论是单元或功能测试,没有对应的存在理由和通过/失败标准描述,通常只是浪费时间,
    即使只是最简单的测试.
    如果你不知道一个测试应该证明什么,那你怎么能判定运行是否成功?!

    这有个值得重视的箴言: ``包含无文档的测试的代码,比根本不包含测试代码的代码,要更加烂!``
    为什么呢? 未经测试的代码，你可以相当肯定，它可能含有错误, 
    而代码包含无意义的测试可能会令你麻痹,
    即使代码含有严重缺陷的可能性仍然很高,你也有种虚假的安全感.
    简而言之(其它许多人多次重复说过类似的):
    ``为测试而测试比没有测试还要糟``











</t>
<t tx="zoomq.20110727085946.4392">执行单元测试
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

有了测试用例表，现在我们可以编写本单元的实际测试了.
幸运的是，Python包括一个内置的单元测试模块，甚至包含代码覆盖能力
(正如Python的乡亲们常说的:电池内置).
下面是一个模块，称为InputUtils.py只包含一个函数，ScaledInput（）.
我们没有理由不包含更多的实用函式来进行更好的输入验证和处理功能，
但现在，先这样就好.

``ScaledInput()`` 使用的"常量"在同一模块定义,
虽然在现实中，你可能会希望封装到一个单纯的定义模块,
使他们可以轻易的在其它应用程序中导入.
虽然我们知道，通配符导入一般是要避免的使用，
但是,在这里,我没有对所有变量名使用下划线前缀，
但在实践中这样做是个好主意，
因为你不知道的后人会怎么使用你的代码.

先来看一下模块代码::

    """ InputUtils.py
        收集各种输入验证和处理函式

        目前仅有ScaledInput()
    """
    NO_ERR = 0
    ERR_OVER = −1
    ERR_MAXSCALE = −2
    ERR_MINSCALE = −3

    DATA_MIN = −10.0
    DATA_MAX = 10.0
    SCALE_MIN = −50.0
    SCALE_MAX = 50.0

    data_scale = 1.0
    data_offset = 0.0

    def ScaledInput(data):
        rc = NO_ERR
        scaled_data = data

        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
            if scaled_data &gt; SCALE_MAX:
                scaled_data = SCALE_MAX
                rc = ERR_MAXSCALE
            elif scaled_data &lt; SCALE_MIN:
                scaled_data = SCALE_MIN
                rc = ERR_MINSCALE
        else:
            rc = ERR_OVER
        return (rc, scaled_data)


现在我们只需以某种方式运用表8-6列出的所有测试参数来执行 ScaledInput().
Python的单元测试库是首选工具.
在Python中包含了所有相关库, 甚至于有几种方法进行单元测试,
这只展示其中一种.
我喜欢比较这种方法，因为它的简单直白(至少对我来说).
让我们来看看代码，它位于 ``test_001.py`` 然后我们将运行它，看看能做什么::

    import unittest
    import InputUtils as UUT

    class test_001_UT(unittest.TestCase):
        def test_001_UT_01(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 0.0
            data = −11
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_OVER
            assert sdata == data

        def test_001_UT_02(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 0.0
            data = 11
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_OVER
            assert sdata == data

        def test_001_UT_03(self):
            UUT.data_scale = 2.0
            UUT.data_offset = 0.0
            data = 5
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.NO_ERR
            assert sdata == data * UUT.data_scale
        def test_001_UT_04(self):
            UUT.data_scale = 10.0
            UUT.data_offset = 0.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MAXSCALE
            assert sdata == UUT.SCALE_MAX
        def test_001_UT_05(self):
            UUT.data_scale = −10.0
            UUT.data_offset = 0.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MINSCALE
            assert sdata == UUT.SCALE_MIN
        def test_001_UT_06(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 1000.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MAXSCALE
            assert sdata == UUT.SCALE_MAX
        def test_001_UT_07(self):
            UUT.data_scale = 1.0
            UUT.data_offset = −1000.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MINSCALE
            assert sdata == UUT.SCALE_MIN

    suite = unittest.TestLoader().loadTestsFromTestCase(test_001_UT)
    unittest.TextTestRunner(verbosity=3).run(suite)


首先要注意的是，它仅导入了两个模块:单元测试库( ``unittest`` )和目标模块 ``InputUtils`` (以别名 UUT)就能进行测试.
然后,是声明继承自通用测试的类作为测试用例模板.
在这个新的类中，我们创建了七个成员方法的，
每一个方法对应表8-6中设定的测试案例.

每个测试案例方法接受类似的一组参数:数据,缩放,偏移.
变量 ``data_scale`` 和 ``data_offset`` 驻留在UUT模块中，
而输入的数据在每个测试案例方法中都直接传递到 ``ScaledInput()`` .


测试用例的方法在初始条件设置之后,调用 ``ScaledInput()`` .
返回代码和处理后的数据,捕获为 RC和SDATA.


使用Python的断言语句返回测试结果.
如果表达式为 ``True``，则断言通过;
只有案例有所有方法的断言都为真的情况下测试才算通过.
输出结果看起来像这样::

    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    ok

    ----------------------------------------------------------------------
    Ran 7 tests in 0.000s

    OK






</t>
<t tx="zoomq.20110727085946.4394">断言与assertEqual() 及其朋友们
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

单元测试库( ``unittest`` )，专门针对单元测试使用其TestCase类中的断言类型方法来收集测试结果.
两个最常用的方法是 ``assertEqual()`` 和 ``assertNotEqual()`` .
作为示例，我们可以用这些方法来重写 ``test_001_UT_07()``
::

    def test_001_UT_07(self):
        UUT.data_scale = 1.0
        UUT.data_offset = −1000.0
        data = 10
        rc, sdata = UUT.ScaledInput(data)
        self.assertEqual(rc, UUT.ERR_MINSCALE)
        self.assertEqual(sdata, UUT.SCALE_MIN)

为什么用 ``assertEqual()`` 而不是单纯的 ``assert`` ?
有两个可能的原因:
- 第一，如果代码运行时启用优化(- O命令行开关)，assert语句会被忽略;
- 第二，``assertEqual()`` 可会产生一些 ``assert`` 不会反馈的额外信息 (至少,没有一些额外的工作，我们将演示这种情况)

让我们来观察测试用例07，使用普通的 ``assert`` 语句，
遇到一个错误导致最终断言失败时,运行的输出会是这样子的
::

    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    FAIL
    ======================================================================
    FAIL: test_001_UT_07 (test_001.test_001_UT)
    ----------------------------------------------------------------------
    Traceback (most recent call last):

    File "test_001.py", line 61, in test_001_UT_07
    assert sdata == data
    AssertionError

    ----------------------------------------------------------------------
    Ran 7 tests in 0.050s

    FAILED (failures=1)



虽然这表明测试案例7失败了，但它不会告诉我们为什么.
如果我们使用 ``assertEqual()`` 断言语句，并再次运行测试，它仍然会失败，
但 ``assertEqual()`` 方法会显示失败时两个变量的值以协助检查
::
    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    FAIL

    ======================================================================
    FAIL: test_001_UT_07 (test_001.test_001_UT)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
        File "test_001.py", line 61, in test_001_UT_07
            self.assertEqual(sdata, data)
    AssertionError: −50.0 != 10

    ----------------------------------------------------------------------
    Ran 7 tests in 0.000s

    FAILED (failures=1)


现在我们可以看到具体哪儿出问题，并确切到是哪一行的代码.


.. seealso:: (^.^)

    公平起见，我得指明，制造这个测试，说明了
    ``ScaledInput()`` 对原始输入数据和处理值进行比较可引发错误,
    不是因为 ``UUT.ERR_MINSCALE`` ,而是探测究竟什么产生了错误.




虽然目前已指出 ``assertEqual()`` 代替原生断言的好处,
但我认为，归结到最终还是要看你需要怎么样来完成您的单元测试.
如果你是从未准备根据单元测试来优化你的代码,
或对于你来说看到每次失败的具体参数并不是令人信服的需求,
那么,继续使用原始 ``assert`` 语句吧.
虽说只是一种观察失败的形式,只是需要多打一点字,就可以获得更多,何乐而不为?



正式的断言语法是(在Python2.6.5文档6.3节所述)::

    assert_stmt ::= "assert" expression ["," expression]


第二个表达式可用于消息追加到异常的输出，如
::
    &gt;&gt;&gt; var1 = 1
    &gt;&gt;&gt; var2 = 2
    &gt;&gt;&gt; assert var1 == var2, "%s != %s, at least not in this universe!" % (var1, var2)
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    AssertionError: 1 != 2, at least not in this universe!


以上只算一次简单的鸟瞰,展示单元测试可以做什么,
当然，Python文档中还有更多关于单元测试和它的方法的信息.
希望大家明白,单元测试是作为正常的软件开发是应做的事.


每当完成了新函式或是方法,都你应该立即为之创建对应的单元测试,
并经常运行.
在某些环境中可能会设专人维护功能测试和测试环境，
但代码作者是唯一有资格创建单元测试的人.
这比其它人来揣摩代码之后,再为之创建测试案例要靠谱的多.



</t>
<t tx="zoomq.20110727085946.4396">代码覆盖率
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

虽然单元测试是用于执行基本的底层测试，
它也可以同时达到另一个同样重要的目的:代码覆盖分析.

如果你不熟悉代码覆盖率分析不用担心，这个想法其实很简单.
就是要求每行程序代码必须是可执行的.
或者，换句话说，不希望在软件代码中存在任何将来会出问题的 "死码".
代码覆盖分析还能告诉你，单元测试是否是完整的.
不完整的单元测试可能在你的软件中遗漏包含邪恶东西的暗角,
所以测试时,你就得想办法确保触摸到一切.


插图 8-18 展示了 ``ScaledInput()`` 函数的流程图.
如果和表8-6列出的测试情况对比,
你应该能够很容易地识别的每个测试用的执行路径(只要根据返回代码).
为了漂亮些,我改变了一些变量名.

正如我们前面讨论过，发现 ``死码`` 的方式之一是通过代码复审.
另一个方法是使用工具，监察软件的执行，
并跟踪报表记录哪些已执行,哪些还没有.
我推荐使用 Ned Batchelder 发布的代码覆盖测试工具: ``coverage.py``:
http://nedbatchelder.com/code/coverage/ 

.. image:: ../_static/figs/rwip_0818.pdf.png

插图 8-18. ScaledInput() 流程图


一旦安装完成，启动测试,只需在命令提示符下键入 ``coverage`` 参数并指定源文件名
(注意，不是 ``python coverage`` ,只是 ``coverage`` 命令).
此命令将执行指定的程序模块和输出覆盖率统计数据. 
例如使用我们的示例单元测试，输入::

    coverage -x test_001.py


``-x`` 命令行开关告诉 ``coverage`` 执行程序并收集覆盖数据.
也可用新的 ``run`` 参数.
在命令行输入 ``coverage help`` 可以查阅新风格参数的样子，``coverage help classic``
则是查阅旧式的命令行参数.
我个人喜欢旧风格的参数.
一般输出是象以往我们单元测试运行时直接到标准输出,
但是 ``coverage`` 为我们生成外部文件 ``覆盖度量数据文件`` 来记录汇报.


使用 ``coverage`` 的报告功能，就可以看到一个很不错的代码覆盖率数据表格.
 ``-m`` 开关参数控制是否显示没有执行的代码行数统计::

    coverage report -m


输出如下::

Name        Stmts   Exec Cover  Missing
------------------------------------------
inpututils  23      23      100%
test_001    54      54      100%
------------------------------------------
TOTAL       77      77      100%



这表明，对于 ``ScaledInput()`` 在图8-18中的每一个可能的路径都覆盖的情况下,
所有代码都得到测试.
所以,这里没有 ``死码``!
``coverage`` 甚至于还追踪了测试包本身(test_001),
当然你可以在分析中忽略这部分,具体的参考 ``coverage`` 的文档.






</t>
<t tx="zoomq.20110727085946.4398">软件文档化 Documenting Your Software
-------------------------------------------------------------------------------

虽然SDD(Software Design Description,软件设计说明)
可作为软件的开发计划，
不是代码级文档存在的地方.
就SDD(Software Design Description,软件设计说明)的详细水平而言,
至多笼统的描述应用程序的架构,不会涉及函数或方法参数,全局变量等等具体细节.
事实上，
不在SDD(Software Design Description,软件设计说明)投入过多的细节是有道理的，
因为根据单元测试和集成活动的结果,架构总是在频繁的变动.
那么，我们把类似功能参数的描述放在哪里?
当然是在代码中!


Python包括嵌入式文档的概念，被称为 ``docstring`` (文档字串).
对于自动提取注释并生成漂亮的含有索引的HTML格式文档,
我推荐来自爱德华.洛珀(Edward Loper) 的 ``Epydoc`` 工具.
可以从 http://epydoc.sourceforge.net 下载.


为了说明它是如何工作的，再次引用 ``InputUtils`` 模块，
只是这一次我添加了文档字串的，并更名为 ``InputUtils2.py``
::

    """ InputUtils.py
        A collection of input verification and processing functions.

        Just have one (ScaledInput) for now.
    """
    NO_ERR = 0  #: No error
    ERR_OVER = −1  #: Overrange error code (+ or −)
    ERR_MAXSCALE = −2 #: Maximum + output value exceeded
    ERR_MINSCALE = −3 #: Maximum − output value exceeded
    DATA_MIN = −10.0 #: Maximum - input value
    DATA_MAX = 10.0 #: Maximum + input value
    SCALE_MIN = −50.0 #: Maximum - output value
    SCALE_MAX = 50.0 #: Maximum + output value
    data_scale = 1.0 #: scaling coefficient
    data_offset = 0.0 #: offset coefficient

    def ScaledInput(data):
        """ Input data checking and scaling.
            Uses global coefficients to scale a data value and apply an offset to it.

            The operation is, in effect, the common y = mx + b slope intercept form,
            where m is the scaling coefficient, b is the offset, and x is the input
            data. The values of m and b are provided via adjustable global variables.

            The input data is checked against predefined range limits. The result is
            also checked to ensure that it does not exceed predefined output range
            limits.

            If the input is out of range then ERR_OVER (overrange) is returned.

            If the output is out of range then the maximum possible value (+ or −)
            is returned.

            The output is a 2-tuple consisting of the return code and the result value.

            @param data: The input data value

            @return: Returns a 2-tuple with the return code and the modified
                    input data if no range errors occur. Otherwise returns
                   the unmodified input data value.
        """
        rc = NO_ERR
        scaled_data = data

        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
        if scaled_data &gt; SCALE_MAX:
            scaled_data = SCALE_MAX
            rc = ERR_MAXSCALE
        elif scaled_data &lt; SCALE_MIN:
            scaled_data = SCALE_MIN
            rc = ERR_MINSCALE
        else:
            rc = ERR_OVER

        return (rc, scaled_data)


``Epydoc`` 将默认生成一组 HTML 文件.
如果打开顶层的 index.html ,看起来像插图8-19.
请注意，模块的全局变量也进行了文档化.


.. image:: ../_static/figs/rwip_0819.pdf.png

插图 8-19. Epydoc 输出示例


``Epydoc`` 是个非常有用并强大的工具.
对于C或C++ 语言有个同类工具: ``Doxygen`` ，
由迪米特.冯.黑森(Dimitri van Heesch)开发，
同样根据注释中的约定标注生成html 文档.
可从 SourceForge 访问: http://sourceforge.net/projects/doxygen/ .



.. note:: (~_~)

    实现上 Doxygen 还可以输出 pdf/rdf/chm 等等格式文档;
    而且 Doxygen 支持多种注释形式,也可以兼容 Python 脚本等等.


</t>
<t tx="zoomq.20110727085946.4400">版本控制
-------------------------------------------------------------------------------

版本控制是任何设计和开发活动的重要组成部分.
一个良好的版本控制工具可以让您跟踪特定的文件的更改和维护历史.
如果发现有不如意的,
版本控制系统也提供方法,可以方便的回退到指定的较早版本.
即使你是唯一的软件开发人员，
在版本控制工具帮助下,可随时说:"哦，没问题，我退回以前的版本就好."
其实就是哀号和安心间的的差异.


我选择的版本控制工具是CVS.
虽然CVS 已经很有年头了,但是依然在被广泛的使用.
已经出现各种颠覆性的新工具，
但我感觉还是 CVS 最舒服 (顺便说一下，CVS 其实算RCS的后裔).
我主张尽量使用纯文本文件，比如说:源代码，用例，或HTML文件.
尽量不和其它二进制文件混合使用，比如:Word文档，
虽然有可用的开源工具,进行处理 Word/Excel 文档,保存版本历史.


对于版本控制有太多可以说的了,一整本书都不够容纳的.
本书内容重点不是这个,但我会鼓励你继续探索.
由珍妮弗.威斯波曼(Jennifer Vesperman)撰写的 "CVS基础" (O'Reilly出版) 开始就非常好.
当然维基百科上也有记载: http://en.wikipedia.org/wiki/Concurrent_Versions_System



最后，我发现，CVS在大多数Linux安装的联机帮助页中有大量组织良好的信息.
事实上，我最喜欢的CVS"手册是"就是打印输出的CVS的联机帮助页和一些额外的提示页面.


.. note:: (~_~)

    实现上对于小型团队,特别是分布式合作的团队,当前各种分布式版本控制系统比CVS 这种集中式的要好,
    比如说 Python 工程自身使用的 Mercurial(Hg),以及 Linux 内核团队使用的 git.

</t>
<t tx="zoomq.20110727085946.4402">缺陷跟踪
-------------------------------------------------------------------------------


BUG跟踪又称缺陷跟踪，在团队环境中是必不可少的工具，
当某人(也许是位测试工程师)发现可能的缺陷时，
通常由另一个人(问题代码的作者)来试图解决问题.
当然对于单人的项目，可能没必要配备完整的缺陷跟踪系统，
只要善用版本控制工具,确保用笔记或是其它方式来跟踪你的"待办"任务,就足够了.
由于本书的重点是小项目，在一到两个人的小团队中追踪问题,不会花费太多时间.
不过，我会尽量提供足够的信息包括网址和软件包,以便你来判定是否有更好的解决方案.


缺陷跟踪系统背后的想法很简单.
首先，发现缺陷.
然后录入到系统，并对应产生"传票"分配给某人.
然后缺陷条目就可以通过设定好的流程进行处置,比如:非读,修订中,测试中,已核实,已解决.
条目也可能在测试和修订环节中往复几次,才能最终标定为已解决.


大多数开源缺陷跟踪系统利用Web界面，
有的需要专门的Web服务器.
我偏爱 ``Roundup`` ,
它简单易用,而且可以部署在SourceForge上，并不需要Web服务器
(尽管如果你愿意,也可以部署到专用主机中).
当然,它是完全Python实现的.

如果你想进一步研究 ``Roundup``, 请访问主页:
http://roundup.sourceforge.net .

最后推荐，史蒂夫.麦康奈尔(Steve McConnell)发布的一篇有趣文章,阐述缺陷跟踪如何协助软件发布.
访问地址是: http://www.stevemcconnell.com/ieeesoftware/bp09.htm。</t>
<t tx="zoomq.20110727085946.4408">用户文档
===============================================================================

在某个时间点,你的项目将完成(严正期望).
所有需求已被定义,SDD(Software Design Description,软件设计说明)也已完成,
代码编写和测试也完成了,而且一切看起来工作良好.
如果一切都顺利按计划一丝不苟的达成了，
可运行的软件就是你兢兢业业辛勤工作的成果.
但是,还必须完成真正的最后一步:用户文档.

即使你已经创建了主要供自己使用的文档，
但是,还应该有一些介绍如何使用你的软件的文档.
对于范畴有限的项目，我常在三孔活页夹中使用横格纸.
将主要程序段,参数表,错误码和其它必要信息打印成单页,追加到活页夹中.
从本质上讲，这就是完整用户手册的一个高度浓缩的版本.
这种方法的优点是,我可以随时创建每个页面,
根据需要丢入活页夹中,一但事情发生变化(几乎总是会变化)替换它们也非常容易.
这样活页夹就生活在实验室中了,任何人,包括我自己,
都需要这样一个活页夹,以便随时更新并查阅系统相关信息.

如果系统涉及范畴足够复杂时,你就得要考虑创建实际的用户手册了.
这听起来令人生畏，但参考其它系统的用户手册是种靠谱的开始方法.
哪种手册你喜欢(或不喜欢)?以及为什么?
选择一两个你认为写得很好，参照着来就成.


.. note:: (~_~)

    实现上对于小型团队,特别是分布式合作的团队,使用维基系统,跟随开发进度,随手完成关键信息的组织,
    本身就是一个可维护可交付的用户手册.当然,最好事先,根据喜欢的用户手册内容,规划好章节结构和层次.
    http://www.wikimatrix.org/ 列出了几乎所有维基引擎系统,译者推荐纯Python 实现的,不依赖数据库的MoinMoin.

</t>
<t tx="zoomq.20110727085946.4409">LOG = logging.getLogger('cvs')
LOG.setLevel(logging.DEBUG)
LOG.addHandler(MongoHandler.to(db='mongolog', collection='log', host='127.0.0.1', port=27117,))
</t>
<t tx="zoomq.20110727085946.4412">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''fadpop 常用工具集
'''
VERSION = "fadutil.py v11.09.22"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    print """ fadpop 常用小工具集 usage:
from fadutil import run_time
        """ % VERSION

</t>
<t tx="zoomq.20110727085946.4413">import os
import sys
import time
import hashlib
import logging
import subprocess
import threading

import Image

# import PyMongo
from pymongo import Connection
from pymongo import errors as ERR
import gridfs

from mongolog.handlers import MongoHandler

</t>
<t tx="zoomq.20110727085946.4416">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "loadpics.py v11.08.1"

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

FOTO_SIZE = {'thumb':"Small"
    ,'mid':"mid"
    ,'big':"Big"
    }
@others

if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s 
进一步处理anapichtm.py生成的大图对应字典,将实际下载的各种图片加载到 Mongo 中
usage::
$ python /path/2/loadpics.py /path/2/*_bigpic.pkl /path/2/images.vancl.com
                 |               |                      +- 镜像的图片目录入口(注意!不应该有最后的/)
                 |               +- 字典对象序列化文件
                 +- 指向本脚本
        """ % VERSION
    else:
        loadpics(sys.argv[1], sys.argv[2])
</t>
<t tx="zoomq.20110727085946.4417">import os
import sys
#import fnmatch
#import time
import types
import traceback
#import urllib
import pickle
#from copy import copy

import Image

#from pyquery import PyQuery as pq
#from lxml import etree

from pymongo import Connection
from pymongo import errors as ERR
import gridfs

# import original mod.
sys.path.append(os.path.abspath("../../../"))
from fadpop.common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110727201525.2842">wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://s.vancl.com/3360.html" http://www.vancl.com/map/default.aspx

http://www.vancl.com/
    http://www.vancl.com/map/default.aspx
    http://s.vancl.com

wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://www.moonbasa.com/p-010110409.html" http://www.moonbasa.com/help/sitemap.aspx

http://www.moonbasa.com/
    http://www.moonbasa.com/help/sitemap.aspx

wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://list.m18.com/N1-N102-12-40-1-00-1.htm" http://www.m18.com/statichtml/fenlei.html

http://www.m18.com/
    http://www.m18.com/statichtml/fenlei.html
</t>
<t tx="zoomq.20110728084936.4223">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''vancl shining info. grasp:
    need:
        phantomjs
'''
VERSION = "shineinfo.py v11.09.29"

&lt;&lt;imports&gt;&gt;

@others


if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 根据条件将指定商品的晒单信息/图片更新到仓库 usage::
$ python /path/2/shineinfo.py {凡客商品号} [0002655]

        """ % VERSION
    else:
        SID = sys.argv[1]
        LERR, SERR, LOUT, SOUT = __popen("/usr/local/bin/phantomjs /data/apps/fadpop/spider/graspage.js http://item.vancl.com/%s.html"% SID)
        up_shines_info(SOUT, SID)

</t>
<t tx="zoomq.20110728084936.4224">import os
import sys
import time
import urllib2
import hashlib
#import traceback
#from pymongo import Connection
#from pymongo import errors as ERR
from pyquery import PyQuery as pq

import Image

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time, _up4img2gfs

</t>
<t tx="zoomq.20110729105657.4269">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "imgurlistr.py v11.07.28"

&lt;&lt;imports&gt;&gt;

@others

@run_time
def expallsid(cursor):
    loop = 0
    while cursor.alive:
        try:
            print "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s" % cursor.next()['sid']
            loop += 1
        except:
            break
    #print loop
    LOG.info("exp. all as:%s"% loop)

if __name__ == "__main__":
    if 6 != len(sys.argv):
        print """ %s 根据条件将指定仓库.集合中的文档内容输出到 STDOUT usage::
$ python /path/2/imgurlistr.py host port db collection {'sid':1,'_id':0}
                 |                |    |   |    |           +-- 过滤条件
                 |                |    |   |    +-- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
        """ % VERSION
    else:
        FADDB = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        FADCOLL = FADDB[sys.argv[4]]
        #print sys.argv[-1]
        CURSOR = FADCOLL.find({}, eval(sys.argv[-1]))
        expallsid(CURSOR)
</t>
<t tx="zoomq.20110729105657.4270">#import os
import sys
#import time
#import traceback
from pymongo import Connection
#from pymongo import errors as ERR



# import original mod.
from fadutil import run_time, LOG

</t>
<t tx="zoomq.20110729105657.4271">@run_time
def loadpics(pkl, pathpic):
    dictpic = pickle.load(open(pkl, 'rb'))
    #print dictpic.keys()
    total = 0
    for sid in dictpic.keys():
        '''
        if type(dictpic[sid]) is types.ListType:
            pass
        else:
            print sid,dictpic[sid]

        '''
        try:
            for foto in dictpic[sid]:
                dirurl = "/".join(sid[:3])
                asize = FOTO_SIZE[foto['showas']]  # 翻译TMD实际目录
                filename = foto['filename']
                imgtype = foto['imgtype']
                realpic = "%(pathpic)s/product/%(dirurl)s/%(sid)s/%(asize)s/%(filename)s.%(imgtype)s"% locals()
                #print sid,realpic
                @others
                #print CF.FAD.find({'sid':sid})[0]['attrs']['fotos']
                total += 1
        except :
            print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
            sys.exit(1)
        print "\n\t &gt;&gt;&gt; %s fotos loaded !&lt;&lt;&lt;\n"% total


</t>
<t tx="zoomq.20110801085156.2824">@path vancl

#esp. for vanl spiders

</t>
<t tx="zoomq.20110801085156.2825">@path common
</t>
<t tx="zoomq.20110801085156.2827">= fadpop通用 =

收集各种通用工具类函式,定义,参数

== mongolog ==
init. as:
    &gt; use mongolog
    &gt; db.createCollection('log', {capped:true, size:100000})

== TODO ==
</t>
<t tx="zoomq.20110801085156.2831">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''fadpop 常用工具集
'''

</t>
<t tx="zoomq.20110801085156.2851">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "vanclinfoflush.py v11.09.29"
&lt;&lt;imports&gt;&gt;
DLERRORS = []

@others

if __name__ == "__main__":
    if 1 != len(sys.argv):
        print """ %s 
对指定主机和端口的Mongo 扫描全部Vancl 商品信息并更新 usage::
$ python /path/2/vanclinfoflush.py
                 |                
                 +- 指向本脚本
        """ % VERSION
    else:
        flush_info_one_by_one()
</t>
<t tx="zoomq.20110801085156.2852">import os
import sys
import fnmatch
#import time
import traceback
#import urllib
import pickle
#from copy import copy

#import Image

from pyquery import PyQuery as pq
#from lxml import etree

#from pymongo import Connection
#from pymongo import errors as ERR

# import fadpop as mod for common
sys.path.append('/data/apps/')
from fadpop.common.fadutil import CCFG, __popen, run_time, _up4img2gfs
</t>
<t tx="zoomq.20110801085156.2853">#@run_time
def flush_info_one_by_one():
    for fad in CCFG.FAD.find(fields={'_id':0,'uri':1}):
        print fad['uri']

    return
    if ".html" == pathml[-5:]:
        print "esp page..."
        qhtm = pq(filename=pathml, parser='html')
        chksid = pathml.split("/")[-1].split(".")[0]
        print chksid
        if not _isnorm(qhtm, chksid):
            return
        if not _isfound(chksid):
            return
        _updateitem(qhtm, chksid)
    else:
        for htmfile in os.listdir(pathml):
            if fnmatch.fnmatch(htmfile, '*.html'):
                chksid = htmfile.split(".")[0]
                print chksid
                qhtm = pq(filename="%s/%s" % (pathml, htmfile), parser='html')
                if not _isnorm(qhtm, chksid):
                    continue
                if not _isfound(chksid):
                    continue
                _updateitem(qhtm, chksid)
                #return
    output = open('20110713_nvzhuang_all_downloaderrors.pkl', 'wb')
    pickle.dump(DLERRORS, output)
    output.close
</t>
<t tx="zoomq.20110801085156.2858">@run_time
def _put_img_gfs(fotoinfo,pathpic):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    if os.path.exists(pathpic):
        if CF.GFS.exists({'uri':fotoinfo['uri']}):
            img_id = CF.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1})['_id']
            print fotoinfo['uri'], "&lt;------ HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            return img_id
        else:
            img = CF.GFS.put(open(pathpic,'rb').read()
                , uri = fotoinfo['uri']
                , filename = fotoinfo['filename']
                , imgtype = fotoinfo['imgtype']
                , showas = fotoinfo['showas']
                , asmain = fotoinfo['asmain']
                , size = Image.open(pathpic).size
                )
            return img
    else:
        print "the %s NOT exists!!" % main_mid_pic
        sys.exit(1)





</t>
<t tx="zoomq.20110801085156.2866">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110801085156.2867">#path
#PATH_CVS_PIC = "/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNDB = Connection('localhost', 27017)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)

FAD = CONNDB[DBFAD][COFAD]
FAD.create_index("uri", unique=True)
GFS = gridfs.GridFS(CONNDB[DBGFS])
FSFILE = CONNDB[DBGFS].fs.files
</t>
<t tx="zoomq.20110801085156.2872">try:
    this_item = CF.FAD.find({'sid':sid})
    #print "CF.FAD.this_item :: ", dir(this_item),this_item[0]['attrs']['fotos']
    #print this_item[0]['attrs']['fotos']
    #this_item[0]['attrs']['fotos'].append(_put_img_gfs(foto,realpic))
    fotoid =  _put_img_gfs(foto,realpic)
    fotos = this_item[0]['attrs']['fotos']
    if fotoid in fotos:
        print fotoid,"\t atta.ed inthe sid::",sid
        pass
    else:
        fotos.append(fotoid)
        #print fotos
        CF.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
except :
    print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
    sys.exit(1)

</t>
<t tx="zoomq.20110801085156.2873">0084853 ../../../_stuff/4vancl/taobao_Week_nvzhuang/images.vancl.com/product/0/0/8/0084853/mid/0084853-9201107071146390758.jpg
[ObjectId('4e2d35ca1702fe246e0007ac'), ObjectId('4e3674fe1702fe203f00862b'), ObjectId('4e3674fe1702fe203f00862e'), ObjectId('4e3674fe1702fe203f008631'), ObjectId('4e3674fe1702fe203f008637'), ObjectId('4e3674fe1702fe203f00863a'), ObjectId('4e3674fe1702fe203f00863d'), ObjectId('4e3674fe1702fe203f008640'), ObjectId('4e3674fe1702fe203f008643'), ObjectId('4e3674fe1702fe203f008646'), ObjectId('4e3674fe1702fe203f008649'), ObjectId('4e3674fe1702fe203f00864d'), ObjectId('4e3674fe1702fe203f008650'), ObjectId('4e3674fe1702fe203f008653'), ObjectId('4e3674fe1702fe203f008656'), ObjectId('4e3674ff1702fe203f008659'), ObjectId('4e3674ff1702fe203f00865c'), ObjectId('4e3674ff1702fe203f00865f'), ObjectId('4e3674ff1702fe203f008662'), ObjectId('4e3674ff1702fe203f008665'), ObjectId('4e3674ff1702fe203f008668'), ObjectId('4e3674ff1702fe203f00866b'), ObjectId('4e3674ff1702fe203f00866e'), ObjectId('4e3674ff1702fe203f008671'), ObjectId('4e3674ff1702fe203f008674'), ObjectId('4e3674ff1702fe203f008677'), ObjectId('4e3674ff1702fe203f00867a')]

	 loaded 13086 fotos 

Traceback (most recent call last):
  File "loadpics.py", line 137, in &lt;module&gt;
    loadpics(sys.argv[1], sys.argv[2])
  File "/home/zoomq/workspace/3hg/bitbucket.org/Yuike/fadpop-src/common/fadutil.py", line 26, in cal_time
    result = func(*args)
  File "loadpics.py", line 68, in loadpics
    for foto in dictpic[sid]:
TypeError: 'bool' object is not iterable

#因为!
anapichtm.py 中
    ibgpics = 开始是 copy(DOC_FOTO)
    TMD 导致部分元键不是有效值!
</t>
<t tx="zoomq.20110802085156.2837">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
110701,0.00,11.5,0.00,2.50,4.00,7.50
110704,3.00,0.00,1.75,4.75,6.75,8.00
110705,1.00,0.50,7.75,1.50,5.25,7.50
110706,1.75,4.25,1.00,4.00,4.75,7.00
110707,2.75,0.75,8.00,5.50,1.00,7.00
110711,2.75,5.75,1.50,0.50,5.50,7.50
110712,2.25,5.50,0.50,3.25,4.50,7.50
110713,3.50,2.75,8.50,0.00,4.35,7.00
110714,4.75,6.25,3.50,1.50,1.00,5.00
110715,3.00,4.00,0.00,5.00,4.50,7.00
110718,3.25,3.75,0.75,1.00,5.25,7.50
110719,1.50,3.50,0.00,4.75,2.50,7.50
110720,0.00,6.75,0.00,4.50,4.50,7.50
110721,0.00,5.25,4.50,3.00,2.50,7.00
110725,2.50,3.50,1.00,3.00,6.00,7.50
110726,1.50,4.25,0.00,1.00,9.75,7.50    8, 6, 1, 4
110727,4.50,2.50,0.00,4.00,5.00,7.50    8, 5, 2, 8
110728,4.25,1.75,2.50,5.50,2.00,7.50    8, 3, 2, 5
110729,0.00,3.50,0.00,6.00,5.75,7.50    6, 5, 2, 5
</t>
<t tx="zoomq.20110802085156.2839">= fadpop凡客专用处理 =

== 当前 ==

数据处理链:
    cvsvancl.py -&gt; 获得联盟用户使用的 cvs 中基本商品信息和中等图片
    expuri.py -&gt; 导出大图以及商品页面url 列表
        + 使用 wget 批量下载
    anapichtm.py -&gt; 分析大图首页 生成大图下载链接和商品图片对应 dict 序列数据文件
        + 使用 wget 批量下载图片
    loadpics.py -&gt; 导入所有图片数据到对应的商品文档中

</t>
<t tx="zoomq.20110802085156.2841">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''fadpop 常用工具集
'''

</t>
<t tx="zoomq.20110802085156.2847">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "anapichtm.py v11.08.1"


&lt;&lt;imports&gt;&gt;

TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Small/%(foto)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/mid/%(foto)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Big/%(foto)s"
DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 
对统一下载的 http://item.vancl.com/Styles/BigImg.mvc?ProductCode={sid} 页面html代码分析出sid 对应的所有大图名
输出到 STDOUT usage::
$ python /path/2/anabigpic.py /path/2/BigImg.mvc?ProductCode
                 |               +- 页面文件目录
                 +- 指向本脚本
        """ % VERSION
    else:
        anabigpicnames(sys.argv[1])
</t>
<t tx="zoomq.20110802085156.2848">import os
import sys
import fnmatch
#import time
#import traceback
#import urllib
import pickle
from copy import copy

#import Image

from pyquery import PyQuery as pq
from lxml import etree

#from pymongo import Connection
#from pymongo import errors as ERR

# import original mod.
sys.path.append(os.path.abspath("../../../"))
from fadpop.common.fadutil import run_time, LOG
</t>
<t tx="zoomq.20110802085156.2849">@run_time
def anabigpicnames(pathml):
    ibgpics = {}
    for file in os.listdir(pathml):
        if fnmatch.fnmatch(file, 'BigImg.mvc*'):
            sid = file.split("=")[1]
            ibgpics[sid] = []
            dirurl = "/".join(sid[:3])
            d = pq(filename="%s/%s" % (pathml, file), parser='html')
            @others
    output = open('20110709_nvzhuang_bigpic.pkl', 'wb')
    pickle.dump(ibgpics, output)
    output.close</t>
<t tx="zoomq.20110802085156.2850">foto = d('#large').find('img').attr('src').split("/")[-1]
print TPL_VANCL_BFOTO % locals()
print TPL_VANCL_MFOTO % locals()
print TPL_VANCL_SFOTO % locals()
bfoto_big = {                # 图片
        "uri":TPL_VANCL_BFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"big"       # thumb|mid|big
        , "asmain":True    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(bfoto_big)
sfoto_big = {                # 图片
        "uri":TPL_VANCL_MFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"thumb"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(sfoto_big)
mfoto_big = {                # 图片
        "uri":TPL_VANCL_SFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"mid"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(mfoto_big)
</t>
<t tx="zoomq.20110802085156.2851">for foto in d('#thumbnail').find('img'):
    #print foto.get('src').split("/")[-1]   #.base_url()
    foto = foto.get('src').split("/")[-1]
    print TPL_VANCL_BFOTO % locals()
    print TPL_VANCL_MFOTO % locals()
    print TPL_VANCL_SFOTO % locals()
    bfoto_big = {                # 图片
            "uri":TPL_VANCL_BFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"big"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(bfoto_big)
    sfoto_big = {                # 图片
            "uri":TPL_VANCL_MFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"thumb"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(sfoto_big)
    mfoto_big = {                # 图片
            "uri":TPL_VANCL_SFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"mid"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(mfoto_big)


</t>
<t tx="zoomq.20110804090725.2868">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vanclcsv.py v11.10.26"
&lt;&lt;imports&gt;&gt;
PATH_CVS_PIC = ""

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vanclcsv.py /path/2/taobao_Week_20110709_nvzhuang.csv
                 |             +-- taobao 联盟用户的相关商品数据文件
                 +- 指向本脚本
        """ % VERSION
    else:
        CVS = sys.argv[1]
        loadall(CVS)

</t>
<t tx="zoomq.20110804090725.2869">'''vancl cvs data file push into Mongo
    - 单进单线,批量 vancl 联盟用户cvs数据导入
    - 自动抓取相关图片到 gFS
依赖:
    + PIL
    + PyMongo &gt; 1.11
'''
</t>
<t tx="zoomq.20110804090725.2870">import os
import sys
import time
import codecs
#import csv
#import csv, codecs, cStringIO
#import unicodecsv
#from cStringIO import StringIO
from copy import deepcopy as copy
import subprocess
import traceback
import logging
import hashlib
#   3party mod.s
#import chardet
import Image

# import PyMongo
from pymongo import Connection
from pymongo import errors as ERR
import gridfs

from mongolog.handlers import MongoHandler

# import fadpop as mod for common
sys.path.append('/data/apps/')
from fadpop.common.fadutil import CCFG, _up4img2gfs, __popen


</t>
<t tx="zoomq.20110804090725.2871">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110804090725.2872">#path
PATH_CVS_PIC = ""
#"/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_ALL_nvzhuang/taobao_ALL_20110713_nvzhuang"
#"/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

#   shell call
SHM = "/mnt/shm/%s.html"    #"/dev/shm/%s.html"
#W3M = "/usr/local/bin/w3m -dump %s"
W3M = "/usr/local/bin/w3m -T text/html %s"


@others

&lt;&lt;doc_foto&gt;&gt;
&lt;&lt;doc_item&gt;&gt;
</t>
<t tx="zoomq.20110804090725.2875">TPL_VANCL_URITEM = "http://item.vancl.com/%s.html"
TPL_VANCL_URIPIC = "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s"
DOC_ITEM = {"uri":""
    #, "com":"VANCL"                # 电商名
    , "brand":u"VANCL 凡客诚品"      # 品牌名
    , "sid":""                      # 编号
    , "store":0                     # 库存数量
    , "saled":0                     # 已售出
    , "prix":""                     # 价格(原价+各种优惠价格) | saleout 已售罄
    , "agio":""                     # 折扣
    , "vip":""                      # 优惠价格
    , "attrs":{"name":""            # 品名
        , "class":[]                # 分类
        , "color":""                # 顔色们
        , "cons":""                 # constituent 成分
        , "wash":""                 # 洗涤要求
        , "descs":{                 # 描述
            "txt":""                # 读本描述
            ,"size":[]              # 尺寸(码表)矩阵
            ,"others":{}            # 其它各种属性
            }
        ,"fotos":[]                 # 图片集，DBref-&gt;DBGFS.fs.files.
        } # attrs
    ,"comments":{                   # 评议集
        "feel":""                   # 整体很舒服（45%）、透气性适中（53%）...
        , "unit":""                 # 綜合
        , "noma":""                 # 外观
        , "bask":""                 # 舒适
        , "size":""                 # 尺码 2% 的用户认为实际尺码[偏大],,,
        , "taker":{                 # 购买者评论
            "total":0               # 留言总数
            ,"totalask":0           # 疑问总数
            , "comment":[{           # 评注
                "name":""
                , "date":""
                , "title":""        # 标题
                , "cont":""
                , "hold":""         # 拥有的商品描述
                }]# comment
            , "ask":[{               # 回答
                "name":""
                , "date":""
                , "title":""        # 标题
                , "issue":""        # 问题
                , "reply":""        # 回答
                }]# comment
            } # taker
        , "shiner":{                # 晒单图文
            "total":0               # 总数
            , 'bask':[{"name":""    # 晒单
                , "uri":""          # 达人
                , "title":""
                , "cont":""
                , "foto":[]         # 图片集，DBref-&gt;DBGFS.fs.files.
                }# shine
                ]
            } # taker
        }   # comments
    }   # TPL

</t>
<t tx="zoomq.20110804090725.2876">TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Small/%(foto)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/mid/%(foto)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Big/%(foto)s"
DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
FOTO_SIZE = {'thumb':"Small"
    ,'mid':"mid"
    ,'big':"Big"
    }

'''取用
from pymongo import Connection
import gridfs
fs = Connection('localhost', 27017).static_files
fs = gridfs.GridFS(fs)

In [71]: gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0])
Out[71]: &lt;gridfs.grid_file.GridOut object at 0x91adf8c&gt;

就可以:
    gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0]).uri

'''
</t>
<t tx="zoomq.20110804090725.2878">def loadall(cvsfile):
    '''解析 taobao cvs 数据，摄取可用部分，填入 mongo

so to open a file, process its contents, and make sure to close it, you can simply do:
with open("x.txt") as f:
    data = f.read()
    do something with data
    '''
    cvsls = open(cvsfile).readlines()
    #print os.path.exists(os.path.abspath(cvsfile[:-9]))
    PATH_CVS_PIC = cvsfile[:-9]
    #print 'PATH_CVS_PIC::', PATH_CVS_PIC
    count = 0
    skiped = 0
    for idata in cvsls[1:]:
        info = idata.split('\t')
        #print len(info)
        if 45 != len(info):
            skiped += 1
            print "^"*79, "SKIPED bad cvs data::", skiped
            break
        else:
            #continue
            count += 1
            CCFG.LOG.debug("loaded:%s"% count)
            &lt;&lt;整理入collection&gt;&gt;
            print "+"*79, "loaded:", count
            #break

</t>
<t tx="zoomq.20110804090725.2879"># 因为 Borg(),所以,要对单例类的对象进行复制,否则 insert() 知道是同一对象不进行插入的...而且要进行深复制!否则...
item = copy(CCFG.DOC_ITEM)
#print "id(CF.DOC_ITEM)",id(CF.DOC_ITEM),"id(item)",id(item)
#print "\n\t\t attrs.fotos:", item["attrs"]['fotos']
#print id(item["attrs"]['fotos'])
sid = info[40][1:-1]
item["sid"] = sid
item["uri"] = CCFG.TPL_VANCL_URITEM % sid
item["prix"] = info[7]#.decode('utf-8')
item["store"] = info[9]#.decode('utf-8')
item["attrs"]['name'] = info[0][1:-1]#.decode('utf-8')#.encode('utf-8')
#print item["attrs"]['name']
#break
# 111025 cancel exist insert
if CCFG.FAD.find_one({'sid':sid}, {'_id':1}):
    continue
else:
    #print sid, CCFG.FAD.find_one({'sid':sid}, {'_id':1})
    attr_desc_txt, attr_descs_others, attr_desc_size = _pick_by_w3m(info[24])
    #print attr_desc_txt, attr_descs_others, attr_desc_size
    #return
    item["attrs"]['descs']['txt'] = attr_desc_txt#.encode('unicode_escape').decode('string_escape')#.decode("utf-8")
    #'utf-8').encode('utf-8')
    #attr_desc_txt#.encode('utf-8')#.encode('utf-8')
    item["attrs"]['descs']['size'] = attr_desc_size#.decode('utf-8')#.encode('utf-8')
    item["attrs"]['descs']['others'] = attr_descs_others#.decode('utf-8')#.encode('utf-8')
    # DBref -&gt; GFS foto collections 无法跨DB 进行!??! 使用普通硬关联
    foto_id = _put_img_gfs(info,PATH_CVS_PIC)
    item["attrs"]['fotos'].append(foto_id)
    #print item
    try:
        # bson.errors.InvalidStringData: strings in documents must be valid UTF-8
        this_id = CCFG.FAD.insert(item, safe=True)
        print "\t CF.FAD.insert ed:: ", this_id
    except ERR.DuplicateKeyError:
        print "\t safe=True BROKENNN! by pymongo.errors.DuplicateKeyError"
        continue


</t>
<t tx="zoomq.20110804090725.2880">def _put_img_gfs(info, path2foto):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    sid = info[40][1:-1]
    #foto_filename = info[35].split(":")[0][1:]
    foto_filename = info[35].split(":")[0][1:]
    dirurl = "/".join(sid[:3])
    goodsid = sid
    # 处理,可能的其它图片格式现象
    &lt;&lt;可能的其它图片格式&gt;&gt;
    foto = "%s.%s"% (fotoid, imgex)
    imguri = CCFG.TPL_VANCL_MFOTO % locals()
    #print sid, imguri
    #main_mid_pic = "%s/%s.%s"% (PATH_CVS_PIC, fotoid, locex)
    main_mid_pic = "%s/%s.%s"% (path2foto, fotoid, locex)
    #print "PATH_CVS_PIC", path2foto
    print main_mid_pic
    if os.path.exists(main_mid_pic):
        if CCFG.GFS.exists({'uri':imguri}):
            existimg = CCFG.FSFILE.find_one({'uri':imguri}, {'_id':1,'filename':1})
            img_id = existimg['_id']
            print "..",imguri[-56:], "\t&lt;&lt;&lt; HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            #return img_id
            return existimg['filename']
        else:
            # make time+uri as inter. filename
            crtfoto = "%.4f;%s"%(int(time.time()),imguri)
            urifoto = hashlib.sha224(crtfoto).hexdigest()
            img = CCFG.GFS.put(open(main_mid_pic,'rb').read()
                , uri = imguri
                , filename = urifoto    #fotoid
                , imgtype = imgex
                , showas = 'mid'
                , asmain = True
                , size = Image.open(main_mid_pic).size
                )
            #return img
            return urifoto
    else:
        print "the %s NOT exists!!" % main_mid_pic
        sys.exit(1)





</t>
<t tx="zoomq.20110804090725.2881">try_other_img_type = foto_filename.split(".")
if 1 &lt; len(try_other_img_type):
    fotoid = try_other_img_type[0]
    imgex = try_other_img_type[1]
    locex = imgex
else:
    fotoid = foto_filename
    imgex = 'jpg'
    locex = 'tbi'

</t>
<t tx="zoomq.20110804090725.2882">def _pick_by_w3m(htm):
    '''动用 w3m 集中处理 vancl cvs 数据中的html 片段
    '''
    ELINKS = "/usr/local/bin/elinks -force-html -dump-charset utf8 -dump %s"
    try:
        shmtmp = "%s/%s.htm"% (CCFG.SHM, str("%.4f"% time.time()) )
        open(shmtmp,"w").write(htm)
        dumptxt = ELINKS % shmtmp
        #CCFG.W3M % shmtmp
        #print htm
        #print "dumptxt", chardet.detect(dumptxt)
        err_li, err_st, out_li, out_st = __popen(dumptxt)
        #print out_st#.decode('windows-1252')#.encode('utf-8')
        #print chardet.detect(out_st)    #out_st,err_st
        #print "out_st", chardet.detect(out_st.decode('windows-1252').encode('utf-8'))
        #return
        os.remove(shmtmp)
        return _pick_table_data(out_li)
    except:
        print "_pick_by_w3m() BROKENNN!\n\t", traceback.print_exc()
        sys.exit(1)





</t>
<t tx="zoomq.20110804090725.2883">def _pick_table_data(txt):
    '''处理 w3m dump 出来的页面 中表格 片段 成为 Mongo 的多重数组:
        [[,,,]
        ,[,,,]
        ,[,,,]
        ]
    '''
    attr_descs_others = []
    attr_desc_size = []
    attr_desc_txt = ""
    besize = 0
    for line in txt:
        #line = textli.decode('windows-1252').encode('utf-8')
        if "[]" in line or "[service" in line:
            continue
        #elif "─┼─" in line or "┌─" in line or "└─" in line:
        elif "--+--" in line or "+--" in line or "--+" in line:
            continue
        #elif "  •" in line:
        elif " * " in line:
            #as attr.desc.cut...
            #desc = line.split("•")[1].split("：")
            desc = line.split("*")[1].split(":")
            attr_descs_others.append([desc[0],":".join(desc[1:])])
        elif "尺码" in line:
            besize = 1
            attr_desc_size.append(line.replace("│", "").split())
        else:
            if 0 == besize:
                #as attr.desc.txt
                attr_desc_txt += line
            else:
                #as attr.desc.size
                if 2 &lt; len(line):
                    # cancel null data lines
                    attr_desc_size.append(line.replace("│", "").split())
    return attr_desc_txt, attr_descs_others, attr_desc_size


</t>
<t tx="zoomq.20110804090725.2889">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "anapichtm.py v11.08.1"


&lt;&lt;imports&gt;&gt;

TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Small/%(foto)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/mid/%(foto)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Big/%(foto)s"
DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 
对统一下载的 http://item.vancl.com/Styles/BigImg.mvc?ProductCode={sid} 页面html代码分析出sid 对应的所有大图名
输出到 STDOUT usage::
$ python /path/2/anabigpic.py /path/2/BigImg.mvc?ProductCode
                 |               +- 页面文件目录
                 +- 指向本脚本
        """ % VERSION
    else:
        anabigpicnames(sys.argv[1])
</t>
<t tx="zoomq.20110804090725.2890">import os
import sys
import fnmatch
#import time
#import traceback
#import urllib
import pickle
from copy import copy

#import Image

from pyquery import PyQuery as pq
from lxml import etree

#from pymongo import Connection
#from pymongo import errors as ERR

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time
</t>
<t tx="zoomq.20110804090725.2891">@run_time
def anabigpicnames(pathml):
    ibgpics = {}
    for file in os.listdir(pathml):
        if fnmatch.fnmatch(file, 'BigImg.mvc*'):
            sid = file.split("=")[1]
            ibgpics[sid] = []
            dirurl = "/".join(sid[:3])
            d = pq(filename="%s/%s" % (pathml, file), parser='html')
            @others
    output = open('110713_nvzhuang_all_bigpic.pkl', 'wb')
    pickle.dump(ibgpics, output)
    output.close

</t>
<t tx="zoomq.20110804090725.2892">foto = d('#large').find('img').attr('src').split("/")[-1]
print TPL_VANCL_BFOTO % locals()
print TPL_VANCL_MFOTO % locals()
print TPL_VANCL_SFOTO % locals()
bfoto_big = {                # 图片
        "uri":TPL_VANCL_BFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"big"       # thumb|mid|big
        , "asmain":True    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(bfoto_big)
sfoto_big = {                # 图片
        "uri":TPL_VANCL_MFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"thumb"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(sfoto_big)
mfoto_big = {                # 图片
        "uri":TPL_VANCL_SFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"mid"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(mfoto_big)
</t>
<t tx="zoomq.20110804090725.2893">for foto in d('#thumbnail').find('img'):
    #print foto.get('src').split("/")[-1]   #.base_url()
    foto = foto.get('src').split("/")[-1]
    print TPL_VANCL_BFOTO % locals()
    print TPL_VANCL_MFOTO % locals()
    print TPL_VANCL_SFOTO % locals()
    bfoto_big = {                # 图片
            "uri":TPL_VANCL_BFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"big"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(bfoto_big)
    sfoto_big = {                # 图片
            "uri":TPL_VANCL_MFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"thumb"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(sfoto_big)
    mfoto_big = {                # 图片
            "uri":TPL_VANCL_SFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"mid"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(mfoto_big)


</t>
<t tx="zoomq.20110804090725.2901">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "vanclpicloader.py v11.08.18"

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

FOTO_SIZE = {'thumb':"Small"
    ,'mid':"mid"
    ,'big':"Big"
    }
@others

if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s 
进一步处理anapichtm.py生成的大图对应字典,将实际下载的各种图片加载到 Mongo 中
usage::
$ python /path/2/vanclpicloader.py /path/2/*_bigpic.pkl /path/2/images.vancl.com
                 |               |                      +- 镜像的图片目录入口(注意!不应该有最后的/)
                 |               +- 字典对象序列化文件
                 +- 指向本脚本
        """ % VERSION
    else:
        loadpics(sys.argv[1], sys.argv[2])
</t>
<t tx="zoomq.20110804090725.2902">import os
import sys
#import fnmatch
import time
import types
import traceback
#import urllib2
import hashlib
import pickle
#from copy import copy

import Image

#from pyquery import PyQuery as pq
#from lxml import etree

from pymongo import Connection
from pymongo import errors as ERR
import gridfs

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time

</t>
<t tx="zoomq.20110804090725.2903">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind
    &lt;&lt;configures&gt;&gt;
    NOEXISTS = []

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110804090725.2904">#path
#PATH_CVS_PIC = "/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNFAD = Connection('localhost', 27017)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)
'''
try:
    CONNGFS = Connection('localhost', 27217)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27217", traceback.print_exc()
    sys.exit(1)
'''
FAD = CONNFAD[DBFAD][COFAD]
FAD.create_index("uri", unique=True)
GFS = gridfs.GridFS(CONNFAD[DBGFS])
FSFILE = CONNFAD[DBGFS].fs.files
</t>
<t tx="zoomq.20110804090725.2905">@run_time
def loadpics(pkl, pathpic):
    dictpic = pickle.load(open(pkl, 'rb'))
    #print dictpic.keys()
    total = 0
    for sid in dictpic.keys():
        try:
            for foto in dictpic[sid]:
                dirurl = "/".join(sid[:3])
                asize = FOTO_SIZE[foto['showas']]  # 翻译TMD实际目录
                filename = foto['filename']
                imgtype = foto['imgtype']
                realpic = "%(pathpic)s/product/%(dirurl)s/%(sid)s/%(asize)s/%(filename)s.%(imgtype)s"% locals()
                #print sid,realpic
                @others
                #print CF.FAD.find({'sid':sid})[0]['attrs']['fotos']
                total += 1
        except :
            print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
            #sys.exit(1)
            continue
        print "\n\t &gt;&gt;&gt; %s fotos loaded !&lt;&lt;&lt;\n"% total

    output = open('110713_nvzhuang_all_lostpics.pkl', 'wb')
    pickle.dump(CF.NOEXISTS, output)
    output.close
    print "\n\t &gt;&gt;&gt; wget losted pics ~==",len(CF.NOEXISTS)


</t>
<t tx="zoomq.20110804090725.2906">try:
    this_item = CF.FAD.find({'sid':sid})
    fotoid =  _put_img_gfs(foto,realpic)
    if fotoid:
        fotos = this_item[0]['attrs']['fotos']
        if fotoid in fotos:
            print fotoid,"\t atta.ed inthe sid::",sid
            pass
        else:
            fotos.append(fotoid)
            CF.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
    else:
        # wget is not completed!
        continue
except :
    print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
    #sys.exit(1)
    continue


</t>
<t tx="zoomq.20110804090725.2907">#@run_time
def _put_img_gfs(fotoinfo,pathpic):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    if os.path.exists(pathpic):
        if CF.GFS.exists({'uri':fotoinfo['uri']}):
            existimg = CF.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1,'filename':1})
            img_id = existimg['_id']
            #img_id = CF.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1})['_id']
            print fotoinfo['uri'], "&lt;------ HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            return existimg['filename'] #img_id
        else:
            # make time+uri as inter. filename
            crtfoto = "%.4f;%s"%(int(time.time()),fotoinfo['uri'])
            urifoto = hashlib.sha224(crtfoto).hexdigest()
            img = CF.GFS.put(open(pathpic,'rb').read()
                , uri = fotoinfo['uri']
                , filename = urifoto    #fotoinfo['filename']
                , imgtype = fotoinfo['imgtype']
                , showas = fotoinfo['showas']
                , asmain = fotoinfo['asmain']
                , size = Image.open(pathpic).size
                )
            return urifoto  #img
    else:
        print "\tNOT exists!!!  %s " % pathpic
        CF.NOEXISTS.append(pathpic)
        return None
        #sys.exit(1)





</t>
<t tx="zoomq.20110804090725.2910">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "expuri.py v11.08.1"

&lt;&lt;imports&gt;&gt;

@others

@run_time
def exp_all_sid_in_tpl(cursor, uritpl):
    loop = 0
    while cursor.alive:
        try:
            print uritpl % cursor.next()['sid']
            loop += 1
        except:
            break
    CCFG.LOG.info("exp. all as:%s"% loop)

if __name__ == "__main__":
    if 7 != len(sys.argv):
        print """ %s 根据条件将指定仓库.集合中的文档内容用URI模板输出到 STDOUT usage::
$ python /path/2/expuri.py host port db collection {'sid':1,'_id':0} "http://..."
                 |                |    |   |    |           |           +- URI模板字串
                 |                |    |   |    |           +- 过滤条件
                 |                |    |   |    +- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
localhost 27017 fad_docs vancl_items "{'sid':1,'_id':0}" "http://item.vancl.com/{sid}.html"
localhost 27017 fad_docs vancl_items "{'sid':1,'_id':0}" "http://item.vancl.com/Styles/BigImg.mvc?ProductCode={sid}"
        """ % VERSION
        # localhost 27017 fad_docs vancl_items "{'sid':1,'_id':0}" "http://item.vancl.com/%s.html"

    else:
        FADDB = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        FADCOLL = FADDB[sys.argv[4]]
        #print sys.argv[-1]
        CURSOR = FADCOLL.find({}, eval(sys.argv[-2]))
        exp_all_sid_in_tpl(CURSOR, sys.argv[-1])
</t>
<t tx="zoomq.20110804090725.2911">import os
import sys
#import time
#import traceback
from pymongo import Connection
#from pymongo import errors as ERR



# import original mod.
# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time

</t>
<t tx="zoomq.20110804090725.2914">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "mongolisten.py v11.07.26"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 5 != len(sys.argv):
        print """ %s usage::
$ python /path/2/mongolisten.py host port db collection
                 |                |    |   |    +-- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
将每一秒钟给抓出尾消息
$ python mongolisten.py py.kingsoft.net 9017 mongolog log
        """ % VERSION
    else:
        #host = sys.argv[1]
        #port = sys.argv[2]
        #db = sys.argv[3]
        #coll = sys.argv[4]
        db = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        print db.collection_names()
        coll = db[sys.argv[4]]
        print coll.count()
        cursor = coll.find(tailable=True)
        while cursor.alive:
            try:
                doc = cursor.next()
                print "%s [% 8s](%s) %s by:%s @%s %s %s l:%s" % (doc["time"]
                    ,doc["level"]
                    ,doc["name"]
                    ,doc["msg"]
                    ,doc["user"]
                    ,doc["host"]
                    ,doc["file"]
                    ,doc["funcname"]
                    ,doc["line_no"]
                    )
            except StopIteration:
                time.sleep(1)

</t>
<t tx="zoomq.20110804090725.2915">import os
import sys
import time
import traceback
from pymongo import Connection
from pymongo import errors as ERR

import logging
from mongolog.handlers import MongoHandler
</t>
<t tx="zoomq.20110804090725.2916">使用 
python anabigpic.py ../../_stuff/4vancl/taobao_Week_nvzhuang/20110709_nvzhuang_bigpic &gt; 20110709_nvzhuang_bigpic.dl.uri
然后:
wget -x -c -nv  --cookies=off  -t 3 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i 20110709_nvzhuang_bigpic.dl.uri

中断后...
wget -x -c -nc -nv --cookies=off  -t 3 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i pics110713-nvzhuang.dl.aa


2011-08-04 20:02:06 URL:http://images.vancl.com/product/0/0/1/0013484/Big/2010_10_8_13_50_15_9936.jpg [226291/226291] -&gt; "images.vancl.com/product/0/0/1/0013484/Big/2010_10_8_13_50_15_9936.jpg" [1]
下载完毕 --2011-08-04 20:02:07--
下载了：2385 个文件，0s (301919790 GB/s) 中的 155M


in ~/workspace/3hg/bitbucket.org/Yuike/_stuff/4vancl 
$ du -hs *
284K	110713_nvzhuang_bigpic.uri
7.0M	110713_nvzhuang_dl_pic.uri
168K	110713_nvzhuang_items.uri
5.5G	images.vancl.com
    # 可能超出 32 系统的数据上限...
20M	nvzhuang_bigpic.dl
825M	nvzhuang_htm
....</t>
<t tx="zoomq.20110805090147.2885">    , size = Image.open(pathpic).size
  File "/usr/local/lib/python2.6/dist-packages/gridfs/__init__.py", line 116, in put
    grid_file.close()
  File "/usr/local/lib/python2.6/dist-packages/gridfs/grid_file.py", line 220, in close
    self.__flush()
  File "/usr/local/lib/python2.6/dist-packages/gridfs/grid_file.py", line 202, in __flush
    root=self._coll.name)["md5"]
  File "/usr/local/lib/python2.6/dist-packages/pymongo/database.py", line 293, in command
    msg, allowable_errors)
  File "/usr/local/lib/python2.6/dist-packages/pymongo/helpers.py", line 126, in _check_command_response
    raise OperationFailure(msg % response["errmsg"])
OperationFailure: command SON([('filemd5', ObjectId('4e3bb0381702fe2103006740')), ('root', u'fs')]) failed: exception: chunks out of order
	None
loadpics(pkl,pathpic) BROKENNN!
Traceback (most recent call last):
  File "vanclpicloader.py", line 100, in loadpics
    sys.exit(1)
SystemExit: 1
	None

</t>
<t tx="zoomq.20110809101420.2886"></t>
<t tx="zoomq.20110809101420.2887"></t>
<t tx="zoomq.20110809101420.2888"></t>
<t tx="zoomq.20110809101420.2890">date,tI,tO,tC,tM,tS
090402,0,4,3.5,8,7
090403,0,2.5,6.5,10,6
090407,0,17,1,5,0
090408,0,5,2,8,5
090409,0,4,4,9,7
090413,0,7.5,2.5,7,7
090414,0,9.5,1,7.5,6
090415,0,4.5,4,7,5.5
090416,0,6,2,9,7
090417,0,2,6,9,7
090420,0,6,5,5,6
090421,0,5,5,6,5.5
090422,0,6,3,4.5,5.5
090423,1,4.5,3,8,6
090424,0,5,2,9,6
090427,0,6,1.5,7,7
090428,0,6.5,1.5,8,7
090429,0,5,1.5,9.5,7
</t>
<t tx="zoomq.20110809101420.2891">date,tI,tO,tC,tM,tS
090302,0,4.5,5,4,6.5
090303,0,5.5,3,3,6
090304,4.5,4.5,2,3,8
090305,1,3.5,3.5,4,6
090306,0,9.5,1.5,5.5,6
090309,0,6,4,5,6
090310,0,5.5,4,5,7
090311,0,4,6,6,8
090312,1,6.5,3,3,7
090313,0,7.5,3.5,7,6
090316,0,10,4,5,6
090317,0,9.5,2,4,5
090318,2,3.5,1.5,6,7
090319,0,3.5,3,11.5,6.5
090320,0,5,4,6,5
090323,2.5,3.5,2.5,8,7
090324,0,6,2.5,9,6
090325,0,5,2,9,5
090330,0,13,1,3,6
090331,0,9,3.5,6,7
</t>
<t tx="zoomq.20110809101420.2892">date,tI,tO,tC,tM,tS
090202,1,0,5.5,7,7
090203,0,3,4.5,8.5,7
090204,2,0,7,7.5,5.5
090205,0,7.5,1.5,7,5.5
090206,0,2,4,8,6
090209,0,4.5,4.5,4.5,5.5
090210,0,4,2.5,8,6.5
090211,0,6.5,1.5,7,7
090212,0,7.5,1.5,7,7
090213,0,0,0,16,6.5
090216,0,7.5,1.5,8.5,6
090217,0,4.5,3.5,7,6.5
090218,0,9.5,1,6.5,7.5
090219,0,10,1,7,6.5
090220,1.5,1.5,4.5,3,6.5
090223,0,2.5,6,8,6.5
090224,0,2.5,6.5,5.5,7.5
090225,0,4,4,8,6
090226,1.5,0,7,7.5,6
090227,0,8,3.5,5.5,6.5
</t>
<t tx="zoomq.20110809101420.2893">date,tI,tO,tC,tM,tS
090104,0,4.5,4.5,4.5,9
090106,0,5.5,3,8,6.5
090107,1.5,3.5,4,4,6
090108,2.75,3.5,2.5,5.5,6.5
090109,3.5,5.5,1.5,6,6
090112,0.5,5,5,6,7
090113,0,5,2,6.5,6.5
090114,2,4.5,3,7,6
090115,2.5,1.5,2.5,6,6.5
090116,1,7,3,6.5,8
090119,0,4,3,6,8.5
090120,0,5.5,0,7,7
</t>
<t tx="zoomq.20110809101420.2894">date,tI,tO,tC,tM,tS
081204,1,3,3,0,5
081205,2,3,2,6,5
081208,0,5,3,4,6
081209,4.5,1.5,2,1,7
081210,2.5,7,3,1,6
081211,3,5,4,2,5
081212,1,2.5,3,7.5,6
081215,0,3,6.5,4,7
081216,0,4.5,1.5,8.5,6
081217,0,7.5,0.5,6.5,5
081218,2.5,2.5,3.5,7,6.5
081219,0,6,2.5,5.5,9
081222,0,1.5,8,5,9
081223,2,3.5,5,6,6
081224,0,4,1,7,6
081225,0,3,5,5,6
081226,1,2,5,7,7
081229,2.5,5,5.5,4,7
081230,2.5,3.5,3,6,6.5
081231,1.5,3,3,1,5.5
</t>
<t tx="zoomq.20110809202237.2909">def _updateitem(htm, sid):
    if htm('#saleout').attr('href'):
        # 已售罄
        &lt;&lt;放空价格&gt;&gt;
    else:
        &lt;&lt;价格抓取&gt;&gt;

    &lt;&lt;bread_nav&gt;&gt;
    &lt;&lt;attrs_wash&gt;&gt;
    &lt;&lt;attrs_color&gt;&gt;
    &lt;&lt;comments_unit&gt;&gt;
    &lt;&lt;comments_size&gt;&gt;
    &lt;&lt;comments_feel&gt;&gt;
    &lt;&lt;comments_taker_comment&gt;&gt;

    CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.class':bread_nav
                , 'attrs.wash':attrs_wash
                , 'attrs.color':attrs_color
                , 'comments.unit':comments_unit
                , 'comments.noma':comments_noma
                , 'comments.bask':comments_bask
                , 'comments.size':comments_size
                , 'comments.feel':comments_feel
                , 'comments.taker.total':comments_taker_total
                , 'comments.taker.totalask':comments_taker_totalask
                , 'comments.taker.comment':comments_taker_comment
                , 'comments.taker.ask':comments_taker_ask
                }
            }
        )

</t>
<t tx="zoomq.20110809202237.2910">prix = "saleout"
CCFG.FAD.update({'sid':sid}, {"$set":{'prix':prix}})


</t>
<t tx="zoomq.20110809202237.2911">prix_agio = htm('.MSpriceArea').find('strong').text()
prix_vip = htm('.cuxiaoPrice').find('strong').text()
prix_vip += ","
prix_vip += ",".join([vip_rice.text_content() for vip_rice in htm('.vipPrice').find('span')[1:]])
CCFG.FAD.update({'sid':sid}, {"$set":{'agio':prix_agio, 'vip':prix_vip}})
</t>
<t tx="zoomq.20110809202237.2912">bread_nav = []
for bread in htm('.breadNav').find('a'):
    bread_nav.append(bread.get('title'))


</t>
<t tx="zoomq.20110809202237.2913">attrs_wash = {}
for attricon in htm('.attricon'):
    icon = attricon.find('img')
    iconkey = icon.get('src').split("/")[-1].split(".")[0]
    attrs_wash[iconkey] = icon.get('alt')
</t>
<t tx="zoomq.20110809202237.2914">attrs_color_id = []
for color in htm('.selColor').find('li'):
    if color.get('name'):
        sid_color = color.get('name').split("&amp;")[0].split("=")[1]
        if sid == sid_color:
            pass
        else:
            attrs_color_id.append(sid_color) 
attrs_color = []
for relsid in attrs_color_id:
    cursor_item = CCFG.FAD.find({'sid':relsid})
    if 0 &lt; cursor_item.count():
        # NULL relation collors
        attrs_color.append(cursor_item[0]["_id"])

</t>
<t tx="zoomq.20110809202237.2915">try:
    pingfen = htm('.pingfen').find('li').text().split()
    comments_unit = pingfen[:6]
    comments_noma = pingfen[6:-6]
    comments_bask = pingfen[-6:]
except:
    print "还没有人打分!\n\t", traceback.print_exc()
    comments_unit = ""
    comments_noma = ""
    comments_bask = ""
</t>
<t tx="zoomq.20110809202237.2916">comments_size = htm('.sizePingjia').find('li').text()
</t>
<t tx="zoomq.20110809202237.2917">comments_feel =  htm('.voteArea').find('p').text()

</t>
<t tx="zoomq.20110809202237.2918">for tabmenu in htm('.RsetTabMenu').find('li'):
    if "item-buyfeedback" == tabmenu.get('name'):
        comments_taker_total = tabmenu.text_content().split("(")[1][:-1]
    if "item-quiz" == tabmenu.get('name'):
        comments_taker_totalask = tabmenu.text_content().split("(")[1][:-1]

&lt;&lt;comments_taker_ask&gt;&gt;
&lt;&lt;comments_taker_comm&gt;&gt;


</t>
<t tx="zoomq.20110809202237.2919">comments_taker_comment = []
for urcomment in htm('#styleAssesseslist').find('div'):
    askuser = urcomment.find_class('area2Head')
    if len(askuser) &gt; 0:
        comments_taker_comment_name = askuser[0].find_class('area2HeadCenter')[0].text_content().strip()[3:]
        comments_taker_comment_title = askuser[0].find_class('area2HeadLeft')[0].text_content().strip()
        comments_taker_comment_date = askuser[0].find_class('area2HeadRight')[0].text_content().strip()
    askcnt = urcomment.find_class('area2ConP')
    if len(askcnt) &gt; 0:
        comments_taker_comment_cont = askcnt[0].text_content().strip()
    else:
        comments_taker_comment_cont = ''

    askhold = urcomment.find_class('selCS')
    if len(askhold) &gt; 0:
        userhold = "".join(askhold[0].text_content().replace('\r','').split("\n")[2:])
    else:
        userhold = ""

    comments_taker_comment.append({'data':comments_taker_comment_date
            , 'name':comments_taker_comment_name
            , 'title':comments_taker_comment_title
            , 'issue':comments_taker_comment_cont 
            , 'userhold':userhold
            }
        )
</t>
<t tx="zoomq.20110809202237.2920">comments_taker_ask = []
for question in htm('#stylequestionslist').find('.area3Con'):
    userq = question.findall('div')[:2]
    userqa = userq[0].text_content().replace('\r','').strip().split("\n")
    comments_taker_ask_name = userqa[0].strip()
    comments_taker_ask_title = userqa[1].strip()[2:]
    comments_taker_ask_date = userqa[-1].strip()
    comments_taker_ask_issue = userq[1].text_content().strip()
    comments_taker_ask_reply = question.find_class('adminAsk')[0].text_content().strip()
    comments_taker_ask.append({'data':comments_taker_ask_date
            , 'name':comments_taker_ask_name
            , 'title':comments_taker_ask_title
            , 'issue':comments_taker_ask_issue 
            , 'reply':comments_taker_ask_reply
            }
        )

</t>
<t tx="zoomq.20110809202237.2922">def _isnorm(htm, sid):
    if not htm('.breadNav'):
        print "下载失败"
        LOG.info("下载失败:%s"% sid)
        DLERRORS.append(sid)
        return False
    else:
        return True
        #continue

</t>
<t tx="zoomq.20110809202237.2924">def _isfound(chksid):
    try:
        FAD.find({'sid':chksid})[0]
        return True
    except :
        print "graspiteminfo(pathml) ALERT! %s no-exist\n\t"% chksid, traceback.print_exc()
        #sys.exit(1)
        return False
        #continue

</t>
<t tx="zoomq.20110810082729.4308">大图片:
 &lt;img id="bigimg" src="http://images.moonbasa.com/ProductImg/Large/0111112510L01.jpg"
                        alt="韩国进口花边缩褶闪钻U型上托塑身文胸" jqimg="http://images.moonbasa.com/ProductImg/HUGE/0111112510H01.jpg" /&gt;

将整体图片分解成系列:
http://images3.moonbasa.com/Images/2011_fang/1meter/032011212/fang052402_39.jpg

&lt;input type="hidden" value="[{StyleCode:&amp;#39;011111247&amp;#39;,ColorArr:[{ColorCode:&amp;#39;003&amp;#39;,ColorName:&amp;#39;肤色&amp;#39;,ColorPic:&amp;#39;Color/003.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;70A&amp;#39;,WareCode:&amp;#39;011111247-00370A,620.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;70B&amp;#39;,WareCode:&amp;#39;011111247-00370B,433.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;75A&amp;#39;,WareCode:&amp;#39;011111247-00375A,1214.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;75B&amp;#39;,WareCode:&amp;#39;011111247-00375B,1125.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;80A&amp;#39;,WareCode:&amp;#39;011111247-00380A,494.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;80B&amp;#39;,WareCode:&amp;#39;011111247-00380B,755.0000,0,现在有货&amp;#39;}]},{ColorCode:&amp;#39;056&amp;#39;,ColorName:&amp;#39;湖蓝&amp;#39;,ColorPic:&amp;#39;Color/056.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;70A&amp;#39;,WareCode:&amp;#39;011111247-05670A,629.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;70B&amp;#39;,WareCode:&amp;#39;011111247-05670B,435.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;75A&amp;#39;,WareCode:&amp;#39;011111247-05675A,1234.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;75B&amp;#39;,WareCode:&amp;#39;011111247-05675B,1117.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;80A&amp;#39;,WareCode:&amp;#39;011111247-05680A,507.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;80B&amp;#39;,WareCode:&amp;#39;011111247-05680B,755.0000,0,现在有货&amp;#39;}]}]},{StyleCode:&amp;#39;011211246&amp;#39;,ColorArr:[{ColorCode:&amp;#39;003&amp;#39;,ColorName:&amp;#39;肤色&amp;#39;,ColorPic:&amp;#39;Color/003.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;S&amp;#39;,WareCode:&amp;#39;011211246-003S,918.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;M&amp;#39;,WareCode:&amp;#39;011211246-003M,2744.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;L&amp;#39;,WareCode:&amp;#39;011211246-003L,2781.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;XL&amp;#39;,WareCode:&amp;#39;011211246-003XL,1733.0000,0,现在有货&amp;#39;}]},{ColorCode:&amp;#39;009&amp;#39;,ColorName:&amp;#39;黑色&amp;#39;,ColorPic:&amp;#39;Color/009.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;S&amp;#39;,WareCode:&amp;#39;011211246-009S,198.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;M&amp;#39;,WareCode:&amp;#39;011211246-009M,559.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;L&amp;#39;,WareCode:&amp;#39;011211246-009L,639.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;XL&amp;#39;,WareCode:&amp;#39;011211246-009XL,383.0000,0,现在有货&amp;#39;}]},{ColorCode:&amp;#39;056&amp;#39;,ColorName:&amp;#39;湖蓝&amp;#39;,ColorPic:&amp;#39;Color/056.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;S&amp;#39;,WareCode:&amp;#39;011211246-056S,673.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;M&amp;#39;,WareCode:&amp;#39;011211246-056M,2005.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;L&amp;#39;,WareCode:&amp;#39;011211246-056L,2219.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;XL&amp;#39;,WareCode:&amp;#39;011211246-056XL,1319.0000,0,现在有货&amp;#39;}]},{ColorCode:&amp;#39;Y03&amp;#39;,ColorName:&amp;#39;洋酒红&amp;#39;,ColorPic:&amp;#39;Color/Y03.jpg&amp;#39;,SpecArr:[{Spec:&amp;#39;S&amp;#39;,WareCode:&amp;#39;011211246-Y03S,143.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;M&amp;#39;,WareCode:&amp;#39;011211246-Y03M,427.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;L&amp;#39;,WareCode:&amp;#39;011211246-Y03L,498.0000,0,现在有货&amp;#39;},{Spec:&amp;#39;XL&amp;#39;,WareCode:&amp;#39;011211246-Y03XL,306.0000,0,现在有货&amp;#39;}]}]}]" id="hdColorSize" /&gt;


&lt;&lt;doc_foto&gt;&gt;
&lt;&lt;doc_item&gt;&gt;</t>
<t tx="zoomq.20110810082729.4310">DOC_ITEM = {"uri":""
    , "brand":""      # 品牌名
    , "pid":""                      # 编号
    , "prix":""                     # 价格(原价+各种优惠价格) | saleout 已售罄
    , "agio":""                     # 折扣
    , "vip":""                      # 优惠/套装 价格
    , "attrs":{"name":""            # 品名
        , "cons":""                 # constituent 成分
        , "suit":""                 # 套装搭配推荐
        , "descs":{                 # 描述
            "txt":""                # 读本描述
            , "size":[]              # 尺寸(码表)矩阵
            , "tags":[]             # 标签
            , "icon":[]             # 特性图标
            , "class":[]            # 分类
            , "color":[]            # 顔色s
            , "other":{}            # 其它各种属性
            }
        ,"fotos":[]                 # 图片集，DBref-&gt;DBGFS.fs.files.
        } # attrs
    ,"comments":{                   # 评议
        "unit":""                   # 綜合
        , "noma":""                 # 外观
        , "bask":""                 # 舒适
        , "cost":""                 # 性价比
        , "size":""                 # 尺码 2% 的用户认为实际尺码[偏大],,,
        , "taker":{                 # 购买者评论
            "total":0               # 留言总数
            , "feeds":[{            # 评注
                "name":""
                , "date":""
                , "ip":""           # 地域
                , "cont":""
                , "vote":""         # 评分
                },,,# comment
                ]
            } # taker
        }   # comments
    }   # TPL

</t>
<t tx="zoomq.20110810082729.4312">DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big|model|detail
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}

'''取用
from pymongo import Connection
import gridfs
fs = Connection('localhost', 27017).static_files
fs = gridfs.GridFS(fs)

In [71]: gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0])
Out[71]: &lt;gridfs.grid_file.GridOut object at 0x91adf8c&gt;

就可以:
    gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0]).uri

'''
</t>
<t tx="zoomq.20110810082729.4316">基本都是图片哪,,,

&lt;&lt;doc_foto&gt;&gt;
&lt;&lt;doc_item&gt;&gt;

颜色在页面JSON 数据中:
    	&lt;script type="text/javascript"&gt;
    //这是一个Json对象，用来存放当前页面所有style的维度信息。通过的形式赋值
    var styleSKUItemsJson = [{"Key":"SF118450","Value":[{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B23011.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S23011.JPG","IsRegionSell":false,"ItemId":"SF11845023-S","ItemName":"RIKA韩版伊人七分袖衬衫 绿色 S","ProductId":"011281-U11408423-00S","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B23011.JPG","SKUColorImageName":"SF118450B23011.JPG","SKUDimentionId1":"23","SKUDimentionId2":"S","SKUDimentionName1":"绿色","SKUDimentionName2":"S","SKUDimentionOrder1":0,"SKUDimentionOrder2":3,"SKUImageFileName":"SF118450B23011.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B23011.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S23011.JPG","IsRegionSell":false,"ItemId":"SF11845023-M","ItemName":"RIKA韩版伊人七分袖衬衫 绿色 M","ProductId":"011281-U11408423-00M","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B23011.JPG","SKUColorImageName":"SF118450B23011.JPG","SKUDimentionId1":"23","SKUDimentionId2":"M","SKUDimentionName1":"绿色","SKUDimentionName2":"M","SKUDimentionOrder1":0,"SKUDimentionOrder2":4,"SKUImageFileName":"SF118450B23011.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B23011.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S23011.JPG","IsRegionSell":false,"ItemId":"SF11845023-L","ItemName":"RIKA韩版伊人七分袖衬衫 绿色 L","ProductId":"011281-U11408423-00L","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B23011.JPG","SKUColorImageName":"SF118450B23011.JPG","SKUDimentionId1":"23","SKUDimentionId2":"L","SKUDimentionName1":"绿色","SKUDimentionName2":"L","SKUDimentionOrder1":0,"SKUDimentionOrder2":5,"SKUImageFileName":"SF118450B23011.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B23011.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S23011.JPG","IsRegionSell":false,"ItemId":"SF11845023-XL","ItemName":"RIKA韩版伊人七分袖衬衫 绿色 XL","ProductId":"011281-U11408423-0XL","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B23011.JPG","SKUColorImageName":"SF118450B23011.JPG","SKUDimentionId1":"23","SKUDimentionId2":"XL","SKUDimentionName1":"绿色","SKUDimentionName2":"XL","SKUDimentionOrder1":0,"SKUDimentionOrder2":6,"SKUImageFileName":"SF118450B23011.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B80012.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S80012.JPG","IsRegionSell":true,"ItemId":"SF11845080-S","ItemName":"RIKA韩版伊人七分袖衬衫 本白 S","ProductId":"011281-U11408480-00S","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B80012.JPG","SKUColorImageName":"SF118450B80012.JPG","SKUDimentionId1":"80","SKUDimentionId2":"S","SKUDimentionName1":"本白","SKUDimentionName2":"S","SKUDimentionOrder1":0,"SKUDimentionOrder2":3,"SKUImageFileName":"SF118450B80012.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B80012.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S80012.JPG","IsRegionSell":false,"ItemId":"SF11845080-M","ItemName":"RIKA韩版伊人七分袖衬衫 本白 M","ProductId":"011281-U11408480-00M","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B80012.JPG","SKUColorImageName":"SF118450B80012.JPG","SKUDimentionId1":"80","SKUDimentionId2":"M","SKUDimentionName1":"本白","SKUDimentionName2":"M","SKUDimentionOrder1":0,"SKUDimentionOrder2":4,"SKUImageFileName":"SF118450B80012.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B80012.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S80012.JPG","IsRegionSell":false,"ItemId":"SF11845080-L","ItemName":"RIKA韩版伊人七分袖衬衫 本白 L","ProductId":"011281-U11408480-00L","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B80012.JPG","SKUColorImageName":"SF118450B80012.JPG","SKUDimentionId1":"80","SKUDimentionId2":"L","SKUDimentionName1":"本白","SKUDimentionName2":"L","SKUDimentionOrder1":0,"SKUDimentionOrder2":5,"SKUImageFileName":"SF118450B80012.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"},{"DisplaySKUImageLarge":"http:\/\/img.m18.com\/GOODS\/LARGE\/N10400\/SF118450B80012.JPG","DisplaySKUImageSmall":"http:\/\/img.m18.com\/GOODS\/SMALL\/N10400\/SF118450S80012.JPG","IsRegionSell":false,"ItemId":"SF11845080-XL","ItemName":"RIKA韩版伊人七分袖衬衫 本白 XL","ProductId":"011281-U11408480-0XL","SKUColorImageFileName":"http:\/\/img.m18.com\/GOODS\/COLOR\/N10400\/SF118450B80012.JPG","SKUColorImageName":"SF118450B80012.JPG","SKUDimentionId1":"80","SKUDimentionId2":"XL","SKUDimentionName1":"本白","SKUDimentionName2":"XL","SKUDimentionOrder1":0,"SKUDimentionOrder2":6,"SKUImageFileName":"SF118450B80012.JPG","SaleOnWebFlag":true,"StyleId":"SF118450"}]}];
    //获取当前页面style信息 
    var styleEntityListJson = [{"&lt;IsEmpty&gt;k__BackingField":false,"CheckPOFlag":false,"ChineseName":"RIKA韩版伊人七分袖衬衫","ClassId3":"N10400","IsRegionSell":true,"IsScareBuying":false,"KitFlag":false,"OriginalStyleId":"U114084","SKUDimentionTypeName1":"颜色","SKUDimentionTypeName2":"尺寸","SaleAloneFlag":true,"SaleDate":"2011-08-02 13:35:37","SaleOnWebFlag":true,"ScareBuyingMaxQtyPerUser":0,"ScareingBeginTime":"","ScareingEndTime":"","StockAllocateMode":1,"StyleId":"SF118450","StyleTypeClass":"special"}];
    //存储Ajax服务的地址
    var ajaxServiceAddress = {"AddFavorite":"http:\/\/product.m18.com\/Service\/FavoriteService.asmx\/AddFavorite","CheckLogin":"http:\/\/product.m18.com\/Service\/LoginService.asmx\/CheckLogin","GetLastView":"http:\/\/product.m18.com\/Service\/StyleService.asmx\/GetLastView","GetMatchingDetail":"http:\/\/product.m18.com\/Service\/Matching.asmx\/GetMatchingDetail","GetMatchingListByClassId":"http:\/\/product.m18.com\/Service\/Matching.asmx\/GetMatchingListByClassId","GetQuickChannelService":"http:\/\/product.m18.com\/Service\/UserStyleList.asmx","GetStyleDetailInfo":"http:\/\/product.m18.com\/Service\/StyleService.asmx\/GetStyleDatailInfo","LoginForm":"http:\/\/product.m18.com\/LoginForm.aspx","MemberShip":"http:\/\/product.m18.com\/Service\/LoginService.asmx\/GetMemberShipId","UserLogin":"http:\/\/product.m18.com\/Service\/LoginService.asmx\/UserLogin","UserPoints":"http:\/\/product.m18.com\/Service\/UserPoints.asmx\/GetPoint"};
    //此商品单卖的文字
    var aloneMessage = "";
    //搭配信息
    var matchingJson = [];
    //评分的样式
    var stisficationCss = 'point4b-0';
    //品牌店铺链接
    var brandLink = 'http://www.m18.com/app/AdEntrance.aspx?from=E001&amp;targetURL=http://static.m18.com/brand/euromoda.shtml';
    myShishangData.styleId="SF118450";
    myShishangData.imageUrl1="";
    myShishangData.imageUrl2="";
	//Comment config
    var commentMaxWordShowCount = 5;
    var commentShowCount = 10;
    var questionShowCount = 5;						
	&lt;/script&gt;
</t>
<t tx="zoomq.20110810082729.4317">DOC_ITEM = {"uri":""
    , "brand":""                    # 品牌名
    , "pid":""                      # 编号
    , "prix":""                     # 价格(原价+各种优惠价格) | saleout 已售罄
    , "agio":""                     # 折扣
    , "vip":""                      # 优惠/套装 价格
    ,'model':""                     # 模特info.
    , "attrs":{"name":""            # 品名
        , "cons":""                 # constituent 成分
        , "suit":""                 # 套装搭配推荐
        , "descs":{                 # 描述
            "txt":""                # 读本foto
            , "size":[]             # 尺寸(码表)矩阵 foto
            , "class":[]            # 分类
            , "color":[]            # 顔色s
            , "other":{}            # 其它各种属性
            }
        ,"fotos":[]                 # 图片集，DBref-&gt;DBGFS.fs.files.
        } # attrs
    ,"comments":{                   # 评议    http://comm.m18.com/comment/SF118450-1.htm
        "unit":""                   # 綜合
        , "noma":""                 # 外观
        , "bask":""                 # 舒适
        , "cost":""                 # 性价比
        , "size":""                 # 尺码 2% 的用户认为实际尺码[偏大],,,
        , "taker":{                 # 购买者评论
            "total":0               # 留言总数
            ,"vote":0               # 总评
            , "feeds":[{            # 评注
                "name":""
                , "date":""
                , "cont":""
                , "hold":""         # 拥有
                },,,# feeds
                ]
            ,"totalask":0           # 问答总数
            , "asks":[{             # 提问    http://comm.m18.com/question/7111920-1.htm
                "name":""
                , "date":""
                , "cont":""
                , "reply":""        # 回答
                },,,# asks
                ]
            } # taker
        }   # comments
    }   # TPL

</t>
<t tx="zoomq.20110810082729.4318">DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big|model|detail
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}

'''取用
from pymongo import Connection
import gridfs
fs = Connection('localhost', 27017).static_files
fs = gridfs.GridFS(fs)

In [71]: gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0])
Out[71]: &lt;gridfs.grid_file.GridOut object at 0x91adf8c&gt;

就可以:
    gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0]).uri

'''
</t>
<t tx="zoomq.20110811160257.2904">== union VACNL ==
自动登录,并用 get 下载数据包

使用FF插件将登录过的 cookie 记录到文件中:

下载:
curl -o 110811union-vancl-data-dl.html -b 110811-union.vancl.com-cookie.txt -A "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -e "union.vancl.com" http://union.vancl.com/renewal.aspx?menuid=55&amp;functionid=14 
分析出所有女装下载包:
$ cat 110811union-vancl-data-dl.html | grep women | sed 's/"/\n/' | cut -d '"' -f1 | grep rar &gt; 110811-union.vancl.com-rar.uri 

$ wget -N -c -P nvzhuang_rars/ -i 110811-union.vancl.com-rar.uri
下载完毕 --2011-08-11 17:02:34--
下载了：13 个文件，5m 42s (231 KB/s) 中的 77M

解压:
$ cd nvzhuang_rars
$ ls ./ | xargs -i 7z x {}

转码:
vim 中 :set fileencoding 看文件编码
#fileencoding=utf-16le

所以
$ ls ./*.csv | xargs -i iconv -f utf16 -t utf8 {} &gt;&gt; ../utf8-taobao_20110811_Women.csv
iconv -f UTF-16LE -t UTF-8



#find -name *.csv -print | xargs -J % iconv -c -f UTF-16 -t UTF-16 % &gt; %.utf
</t>
<t tx="zoomq.20110811160257.2905">== JS 解析 ==
Crowber 启动后:
curl -s --data "url=http://item.vancl.com/0002655.html" http://127.0.0.1:10000/ &gt; nvzhuang_htmjs/0002655.html

使用没有 X 需要的:
/usr/ports/lang/phantomjs

$ DISPLAY=:9 /opt/sbin/phantomjs graspage.js http://item.vancl.com/0002655.html

in BSD:
# sudo /opt/sbin/Xvfb.server start
[zoomq@common] /data/apps/fadpop/spider&gt; 
Fatal server error:
Server is already active for display 9
        If this server is no longer running, remove /tmp/.X9-lock
        and start again.
# setenv DISPLAY :0
要部署到 .cshrc 中使用 source .cshrc 生效
# /usr/local/bin/phantomjs graspage.js http://item.vancl.com/0002655.html



</t>
<t tx="zoomq.20110815085436.2906">BSD中,,,
    netstat -an -p tcp

#系统内核级优化+防止ddos

根据某位unix前辈的观点：本来就很好，加加更健康。加载文件修改方法如下：

# vim /boot/loader.conf加入如下文本
kern.dfldsiz="2147483648"
kern.maxdsiz="2147483648"
kern.ipc.nmbclusters="0"
kern.ipc.nsfbufs="66560"


解释:
a、第一、二行主要是为了突破1G内存设置的。
b、第三行其实是bsd的一个bug，当系统并发达到一个数量级的时候，系统会crash，这个是非常糟糕的事情。所幸更改了这个参数后，在高并发的时候，基本可以没有类似情况，当然非常bt的情况，还得进一步想办法。

c、第四行是读取的文件数，如果你下载的文件比较大，且比较多，加大这个参数，是非常爽的。

Sysctl修改方法如下：
#vi /etc/rc.local
sysctl kern.ipc.maxsockets=100000    ##增加并发的socket，对于ddos很有用
sysctl kern.ipc.somaxconn=65535      ##打开文件数
sysctl net.inet.tcp.msl=2500         ##timeout时间
</t>
<t tx="zoomq.20110816085806.11271"># ./configure \
    --prefix=/usr/local/etc/nginx \
    --user=www \
    --group=www \
    --sbin-path=/usr/local/etc/nginx/sbin/nginx \
    --conf-path=/usr/local/etc/nginx/conf/nginx.conf \
    --pid-path=/usr/local/etc/nginx/run/nginx.pid  \
    --lock-path=/usr/local/etc/nginx/lock/nginx.lock \
    --error-log-path=/data0/logs/httpd/nginx-error.log \
    --http-log-path=/data0/logs/httpd/nginx-access.log \
    --with-http_stub_status_module \
    --with-http_sub_module \
    --with-http_ssl_module \
    --with-http_gzip_static_module \
    --http-client-body-temp-path=/usr/local/etc/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/etc/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/etc/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/etc/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/etc/nginx/tmp/scgi_temp \
    --add-module=/data0/stuff/nginx-gridfs/

./configure --prefix=/usr/local/etc/nginx     --user=www     --group=www     --sbin-path=/usr/local/etc/nginx/sbin/nginx     --conf-path=/usr/local/etc/nginx/conf/nginx.conf     --pid-path=/usr/local/etc/nginx/run/nginx.pid      --lock-path=/usr/local/etc/nginx/lock/nginx.lock     --error-log-path=/data0/logs/httpd/nginx-error.log     --http-log-path=/data0/logs/httpd/nginx-access.log     --with-http_stub_status_module     --with-http_sub_module     --with-http_ssl_module     --with-http_gzip_static_module     --http-client-body-temp-path=/usr/local/etc/nginx/tmp/client_body      --http-proxy-temp-path=/usr/local/etc/nginx/tmp/proxy      --http-fastcgi-temp-path=/usr/local/etc/nginx/tmp/fastcgi      --http-uwsgi-temp-path=/usr/local/etc/nginx/tmp/uwsgi_temp     --http-scgi-temp-path=/usr/local/etc/nginx/tmp/scgi_temp     --add-module=/data0/stuff/nginx-gridfs/
</t>
<t tx="zoomq.20110816085806.2907">You have built the Boost library with thread support.

Don't forget to add -pthread to your linker options when
linking your code.

You have built the Boost.Python library. You have to add the following
options when building your own code:

Compiler options:
   -I/usr/local/include/python2.7 -I/usr/local/include

Linker options:
   -L/usr/local/lib/python2.7 -L/usr/local/lib -lboost_python -lpython2.7

===============================================================================
</t>
<t tx="zoomq.20110817090724.2909">== 原型 ==
http://py.kingsoft.net:9008/
localhost:27017
localhost:28017

http://py.kingsoft.net:9028/
localhost:27217
localhost:28217

http://py.kingsoft.net:9038/
sleepy -&gt; 27080

$ curl 'http://py.kingsoft.net:9038/_hello'
{"ok" : 1, "msg" : "Uh, we had a slight weapons malfunction, but uh... everything's perfectly all right now. We're fine. We're all fine here now, thank you. How are you?"}
$ curl --data localhost:27017 'http://py.kingsoft.net:9038/_connect'
{"ok" : 1, "server" : "mongodb://localhost:27017", "name" : "default"}

$ curl --data 'name=fad&amp;localhost:27017' 'http://py.kingsoft.net:9038/_connect'
{"ok" : 1, "server" : "mongodb://localhost:27017", "name" : "fad"}

$ curl --data 'name=gfs&amp;localhost:27217' 'http://py.kingsoft.net:9038/_connect'
{"ok" : 1, "server" : "mongodb://localhost:27017", "name" : "gfs"}

curl -X GET 'http://py.kingsoft.net:9038/fad_docs/vancl_items/_find?name=fad&amp;criteria=%7B%22sid%22%3A%220002655%22%7D'


$ curl -X GET 'http://py.kingsoft.net:9038/fad_docs/vancl_items/_find?fields=%7B%22attrs.color%22%3A1%7D&amp;criteria=%7B%22sid%22%3A%220002655%22%7D'
{"ok": 1, "results": [{"_id": {"$oid": "4e412af51702fe34530002c5"}, "attrs": {"color": [{"$oid": "4e412af51702fe34530002ca"}, {"$oid": "4e412b401702fe3453003bf3"}, {"$oid": "4e412af51702fe34530002bb"}, {"$oid": "4e412b401702fe3453003bf8"}, {"$oid": "4e412b401702fe3453003bee"}, {"$oid": "4e412b681702fe3453005682"}, {"$oid": "4e412af51702fe34530002c0"}, {"$oid": "4e412af51702fe34530002b6"}, {"$oid": "4e412af31702fe345300008b"}, {"$oid": "4e412b661702fe34530055ac"}, {"$oid": "4e412af31702fe3453000090"}, {"$oid": "4e412b661702fe34530055b1"}, {"$oid": "4e412af31702fe3453000086"}, {"$oid": "4e412b401702fe3453003be9"}]}}], "id": 5}

$ curl -X GET 'http://py.kingsoft.net:9038/fad_docs/vancl_items/_find?fields=%7B%22attrs.fotos%22%3A1%7D&amp;criteria=%7B%22sid%22%3A%220002655%22%7D'
{"ok": 1, "results": [{"_id": {"$oid": "4e412af51702fe34530002c5"}, "attrs": {"fotos": [{"$oid": "4e412af51702fe34530002c2"}]}}], "id": 6}

$ curl -X GET 'http://py.kingsoft.net:9038/static_files/fs/files/_find?criteria=%7B%22_id%22%3A%7B%22%24oid%22%3A%224e412af51702fe34530002c2%22%7D%7D'
{"ok": 1, "results": [{"size": [400, 400], "chunkSize": 262144, "_closed": true, "asmain": true, "uri": "http://images.vancl.com/product/0/0/0/0002655/mid/2010_7_2_16_44_0_354.jpg", "showas": "mid", "filename": "2010_7_2_16_44_0_354", "length": 10534, "uploadDate": {"$date": 1312893685873}, "imgtype": "jpg", "_id": {"$oid": "4e412af51702fe34530002c2"}, "md5": "15f489aa041b5a8120a2f608b3c81b6e"}], "id": 3}


</t>
<t tx="zoomq.20110817090724.2910">== Mongo 迁移 ==
导出:
/opt/bin/mongodb32/bin/mongodump -h 127.0.0.1:27217 -d static_files -o /data/dumps/

/opt/bin/mongodb32/bin/mongodump -h 127.0.0.1:27017 -d static_files -o /data/dumps/110818/
/opt/bin/mongodb32/bin/mongodump -h 127.0.0.1:27017 -d fad_docs -o /data/dumps/110818/

复制 scp ..
导入:
/usr/local/mongodb/mongorestore -h 127.0.0.1:27017 -d static_files --directoryperdb /data/dumps/static_files/

[zoomq@common] /data/_stuff&gt; du -hs *
6.9G    4vancl
2.0K    gcrawler.tar.gz
5.8M    leilei110712-tplorig
4.9M    leilei110731-think
2.0K    moonbasa
230K    old-wiki
464K    saoatech_service.pdf
288K    scsh-curl
280K    sleepy.mongoose


~/workspace/3hg/bitbucket.org/Yuike/_stuff 
$ du -hs *
6.9G	4vancl
4.0K	gcrawler.tar.gz
6.0M	leilei110712-tplorig
4.9M	leilei110731-think
4.0K	moonbasa
284K	old-wiki
440K	saoatech_service.pdf
360K	scsh-curl
364K	sleepy.mongoose

110819 終于导入全部下载到的图片:
         &gt;&gt;&gt; 88263 fotos loaded !&lt;&lt;&lt;
         &gt;&gt;&gt; wget losted pics ~== 3

</t>
<t tx="zoomq.20110817090724.2911">************************************************************
Important: You have currently no wiki instance installed.

If you're installing from ports, just run 'make instance'
with appriopriate arguments.
eg. make MOINTYPE=FCGI MOINDEST=/usr/local/www/wiki instance

If you're installing from package, run these commands.

# Choose here one script depending on the type of wiki you
# want : moin.py (standalone), moin.fcg (FCGI), moin.wsgi (WSGI) or moin.cgi.
export MOINSCRIPT="moin.cgi"
# Defaults should be fine but you may want to modify these.
export MOINDIR="/usr/local/share/moin"
export MOINDEST="/usr/local/www/wiki"
# Set this to your apache user and group.
export CGIUSER="www"
export CGIGROUP="www"

mkdir -p ${MOINDEST}/data
mkdir -p ${MOINDEST}/underlay
cp -R ${MOINDIR}/data ${MOINDEST}
cp -R ${MOINDIR}/underlay ${MOINDEST}
chmod -R u+rw,go-ws ${MOINDEST}/data
install -m 0555 ${MOINDIR}/config/wikiconfig.py ${MOINDEST}
test -z "${MOINSCRIPT}" || \
        install -m 0555 ${MOINDIR}/server/${MOINSCRIPT} ${MOINDEST}
chown -R ${CGIUSER}:${CGIGROUP} ${MOINDEST}

Note: export might not work with your shell, use
# setenv VAR 'value' instead
************************************************************
===&gt;   Registering installation for moinmoin-1.9.3


**************************************************************************
Please add /usr/local/lib/X11/fonts/wqy for your X server by either:

# xset fp+ /usr/local/lib/X11/fonts/wqy
# xset fp rehash

or by adding the following line to the section "Files" of
your X-server configuration file (usually /etc/X11/xorg.conf)
and restarting the X-server:

Section "Files"
...
    FontPath   "/usr/local/lib/X11/fonts/wqy"
...
EndSection

**************************************************************************

===&gt;   Compressing manual pages for graphviz-2.26.3_3
===&gt;   Registering installation for graphviz-2.26.3_3
===&gt; SECURITY REPORT:
      This port has installed the following files which may act as network
      servers and may therefore pose a remote security risk to the system.
/usr/local/bin/lefty

      If there are vulnerabilities in these programs there may be a security
      risk to the system. FreeBSD makes no guarantee about the security of
      ports included in the Ports Collection. Please type 'make deinstall'
      to deinstall the port if this is a concern.

      For more information, and contact details about the security
      status of this software, see the following webpage:
http://www.graphviz.org/

</t>
<t tx="zoomq.20110818135824.2912">"_id": {"$oid": "4e412af51702fe34530002c2"}
</t>
<t tx="zoomq.20110818135824.2913">py.k.pass 设定:
    zoomq 5t4r...
    yuike fadpop

</t>
<t tx="zoomq.20110819082933.2914">@language javascript
@tabwidth -4
// 110819 re init. by base example
// 110902 for BSD phantomjs1.1 only so...

if (phantom.state.length === 0) {
    if (phantom.args.length === 0) {
        console.log('Usage: graspage.js &lt;some URL&gt;');
        phantom.exit();
    } else {
        phantom.state = Date.now().toString();
        address = phantom.args[0];
        phantom.userAgent = 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)';
        //console.log('try Loading URI  ' + address);
        phantom.open(address);
    }
} else {
    &lt;&lt;hold tip&gt;&gt;
    phantom.exit();
}


</t>
<t tx="zoomq.20110830090738.5015">FreeBSD common.s.kingsoft.net 8.2-RELEASE FreeBSD 8.2-RELEASE #0: 
Thu Feb 17 02:41:51 UTC 2011     root@mason.cse.buffalo.edu:/usr/obj/usr/src/sys/GENERIC  amd64
其中的部属,很有点时间

portsnap fetch extract
portsnap fetch extract
portsnap update

然后,引发各种不匹配,要进行
portupgrade -a

# sudo portversion -L =
cython                      &lt;
docbook-xsl                 &lt;
expat                       &lt;
firefox                     &lt;
gstreamer-plugins           &lt;
haproxy                     &lt;
libssh2                     &lt;
p5-XML-Parser               &lt;
pcre                        &lt;
python26                    &lt;
v4l_compat                  &lt;


</t>
<t tx="zoomq.20110830090738.5017"> install  -o root -g wheel -m 444 xorg-server.m4 '/usr/local/share/aclocal'
 install  -o root -g wheel -m 444 xorg-server.pc '/usr/local/libdata/pkgconfig'
===&gt;   Compressing manual pages for xorg-server-1.7.7_2,1
===&gt;   Registering installation for xorg-server-1.7.7_2,1
===&gt; SECURITY REPORT: 
      This port has installed the following binaries which execute with
      increased privileges.
/usr/local/bin/Xorg

      This port has installed the following files which may act as network
      servers and may therefore pose a remote security risk to the system.
/usr/local/bin/Xorg

      If there are vulnerabilities in these programs there may be a security
      risk to the system. FreeBSD makes no guarantee about the security of
      ports included in the Ports Collection. Please type 'make deinstall'
      to deinstall the port if this is a concern.

      For more information, and contact details about the security
      status of this software, see the following webpage: 
http://www.freedesktop.org/Software/xorg
</t>
<t tx="zoomq.20110830090738.5018">===&gt;   Compressing manual pages for xorg-vfbserver-1.7.7,1
===&gt;   Registering installation for xorg-vfbserver-1.7.7,1
===&gt; SECURITY REPORT: 
      This port has installed the following files which may act as network
      servers and may therefore pose a remote security risk to the system.
/usr/local/bin/Xvfb

      If there are vulnerabilities in these programs there may be a security
      risk to the system. FreeBSD makes no guarantee about the security of
      ports included in the Ports Collection. Please type 'make deinstall'
      to deinstall the port if this is a concern.

      For more information, and contact details about the security
      status of this software, see the following webpage: 
http://www.x.org/

</t>
<t tx="zoomq.20110830090738.5019">======================================================================

Firefox 3.6 and HTML5

Certain functions used to display HTML5 elements need the sem module.

If your Firefox crashes with the following message while viewing a
HTML5 page:
"Bad system call (core dumped)"

you need to load the sem module (kldload sem).

To load sem on every boot put the following into your
/boot/loader.conf:
sem_load="YES"

======================================================================

Any bug reports should be addressed to the maintainers at:
        gecko@FreeBSD.org
You may also Cc: freebsd-ports@FreeBSD.org. Please do not send
bug reports to any other addresses.

Please include the following information with any bug report:
* Output from 'uname -a'.
* Date/time stamp from www/firefox/Makefile.
* Where/when did the problem occur: configuring, building, or
        running firefox
* How can you reproduce the problem?

Thank you for your help in testing and reporting bugs, and we hope you
enjoy using Firefox.
The Maintainers (gecko@)
======================================================================
===&gt;   Registering installation for firefox-3.6.18,1

</t>
<t tx="zoomq.20110830090738.5020">PyPhantomJS
need:
    argparse
    LICENSING
    ------------------
    Copyright (C) 2011 James Roe &lt;&lt;roejames12@hotmail.com &gt;
    Copyright (C) 2011 PyPhantomJS authors (see AUTHORS file)

    PyPhantomJS is licensed with the GNU GPL v3.
    See the included file LICENSE for the licensing terms.

    ADDITIONAL INFO
    -----------------------------
    This program is a port of PhantomJS to Python/PyQt4 (thus, PyPhantomJS).

      1. We try to make PyPhantomJS to be as compatible with PhantomJS as possible,
          this means having the exact same features as they do. It happens to be fully
          compatible, with the exception of some very small things.
      2. PyPhantomJS however, has a few differences as well:
        * Some of the features work a little differently than PhantomJS.
          In most of these cases, the features were only changed to improve their
          reliability and performance, so they work more often/better, and break less.
        * There may also be additional features present that aren't in PhantomJS.

    PhantomJS was written by Ariya Hidayat, and I'd like to give him a BIG thanks
    for all his work on PhantomJS! :)

    warning: no previously-included files found matching '*.swp'
    changing mode of build/scripts-2.6/pyphantomjs from 644 to 755
    changing mode of /usr/local/bin/pyphantomjs to 755
Successfully installed PyPhantomJS

</t>
<t tx="zoomq.20110830090738.5021">/bin/sh ../libtool  --tag=CC   --mode=compile cc -DHAVE_CONFIG_H -I.  -I/usr/local/include/python2.7 -I/usr/local/include/python2.7 -D_THREAD_SAFE -D_REENTRANT -I/usr/local/include/cairo -I/usr/local/include/glib-2.0 -I/usr/local/include/pixman-1 -I/usr/local/include -I/usr/local/include/freetype2   -I/usr/local/include  -O2 -pipe -fno-strict-aliasing -std=c99 -Wall -fno-strict-aliasing -MT _cairo_la-cairomodule.lo -MD -MP -MF .deps/_cairo_la-cairomodule.Tpo -c -o _cairo_la-cairomodule.lo `test -f 'cairomodule.c' || echo './'`cairomodule.c
mv -f .deps/_cairo_la-cairomodule.Tpo .deps/_cairo_la-cairomodule.Plo
mv: rename .deps/_cairo_la-cairomodule.Tpo to .deps/_cairo_la-cairomodule.Plo: No such file or directory
gmake[2]: *** [_cairo_la-cairomodule.lo] Error 1
gmake[2]: Leaving directory `/usr/ports/graphics/py-cairo/work/pycairo-1.8.10/src'
gmake[1]: *** [all] Error 2
gmake[1]: Leaving directory `/usr/ports/graphics/py-cairo/work/pycairo-1.8.10/src'
gmake: *** [all-recursive] Error 1
*** Error code 1

Stop in /usr/ports/graphics/py-cairo.
*** Error code 1

Stop in /usr/ports/devel/py-gobject.
*** Error code 1

Stop in /usr/ports/x11-fonts/font-manager.
*** Error code 1

Stop in /usr/ports/x11-fonts/font-manager.
*** Error code 1

Stop in /usr/ports/x11-fonts.


FreshPorts -- graphics/py-cairo
http://www.freshports.org/graphics/py-cairo
看起来 py2.6 需要,所以,尝试
To install the port: cd /usr/ports/graphics/py-cairo/ &amp;&amp; make install clean
#To add the package: pkg_add -r py26-cairo

</t>
<t tx="zoomq.20110902084216.4334">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
110801,1.50,4.00,1.50,2.50,6.00,9.00    6, 5, 1, 5
110802,1.00,4.25,0.25,6.25,4.75,6.50    5, 5, 0, 2
110803,0.50,6.50,0.00,0.00,12.0,7.00    6, 4, 3, 4
110804,1.75,6.25,4.50,2.25,2.00,5.00    5, 5, 2, 7
110805,0.00,3.25,1.00,3.00,9.00,7.50    5, 4, 2, 8
110808,0.00,1.75,2.25,1.00,6.00,9.50    5, 2, 2, 4
110809,3.50,3.75,0.00,6.25,3.00,6.00    5, 5, 1, 4
110810,0.50,3.50,1.00,3.75,5.00,9.00    5, 3, 0, 0
110811,3.00,3.00,4.00,3.50,2.00,6.00    5, 5, 1, 2
110812,0.00,0.00,0.00,10.0,7.25,7.50    5, 1, 2, 4
110815,0.00,5.25,4.00,4.00,5.00,7.00    6, 2, 2, 3
110816,2.75,7.00,0.50,5.75,1.00,6.00    6, 3, 1, 4
110817,0.00,4.75,0.00,6.35,6.00,8.00    5, 2, 2, 3
110818,0.00,7.75,3.00,0.00,5.25,6.00    5, 2, 1, 2
110818,0.75,4.25,0.00,4.25,7.75,9.00    5, 3, 0, 3
110822,2.00,1.75,2.50,4.00,4.75,7.50    5, 1, 2, 5
110823,2.00,1.25,0.00,6.25,7.00,6.75    5, 2, 1, 3
110824,0.00,8.50,0.00,5.25,2.50,5.00    5, 3, 1, 3
110825,0.50,5.00,5.00,7.50,1.00,7.00    5, 3, 2, 2
110826,0.75,3.25,0.00,7.50,5.00,7.50    5, 2, 3, 4
110829,0.00,4.50,0.00,7.50,5.00,4.00    5, 3, 1, 4
110830,0.50,5.25,0.00,9.00,1.00,6.00    5, 3, 2, 3 
110831,1.25,6.00,0.50,3.00,6.75,6.00    5, 2, 2, 4
</t>
<t tx="zoomq.20110902084216.7166">@language javascript
@tabwidth -4
// 110819 re init. by base example
var page = new WebPage(),
    t, address;
page.settings.userAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)";

if (phantom.args.length === 0) {
    console.log('Usage: graspage.js &lt;some URL&gt;');
    phantom.exit();
} else {
    t = Date.now();
    address = phantom.args[0];
    console.log('Loading URI  ' + address);
    page.open(address, function (status) {
        if (status !== 'success') {
            console.log('FAIL to load the address');
        } else {
            t = Date.now() - t;
            console.log('Loading time ' + t + ' msec');
            console.log('Page HTML ' + page.evaluate(function () {
                //return document.getElementById('starItem').innerHTML;
                // get detail imgs...
                //return document.querySelector('div.imgCon').innerHTML;
                var imgCon = document.querySelector('div.imgCon').innerHTML;
                // get shine all div
                var bask = document.querySelector('div.bask').innerHTML;
                return bask+'^^^'+imgCon;

            }));
        }
        phantom.exit();
    });
}



</t>
<t tx="zoomq.20110902084216.7167">var elapsed = Date.now() - new Date().setTime(phantom.state);
if (phantom.loadStatus === 'success') {
    //console.log('Loading time ' + elapsed + ' msec');
    //console.log('Page title is ' + document.title);
    var body = document.body;
    var imgCon = document.querySelector('div.imgCon').innerHTML;
    var bask = document.querySelector('div.bask').innerHTML;
    console.log(bask);
    console.log(imgCon );
} else {
    console.log('FAIL to load the address');
}

</t>
<t tx="zoomq.20110902084216.8585">[zoomq@common] /usr/ports&gt;  sudo portversion -F -L 
docbook-xsl-1.75.2_1        &lt;
gstreamer-plugins-0.10.35,3  &lt;
libssh2-1.2.8_2,2           &lt;
v4l_compat-1.0.20110603     &lt;


[zoomq@common] /usr/ports&gt; sudo portsclean -CDLP
Cleaning out /usr/ports/*/*/work...
Delete /usr/ports/devel/qmake/work
done.
Detecting unreferenced distfiles...
Delete /usr/ports/distfiles/gcc-g++-3.4.6.tar.bz2.0
Cleaning out /usr/ports/packages...
cd: can't cd to /usr/ports/packages/All
find: /usr/ports/packages: No such file or directory
** /usr/local/lib/qt4/libphonon.so.4 is shadowed by /usr/local/kde4/lib/libphonon.so.4
        /usr/local/kde4/lib/libphonon.so.4      &lt;- phonon-4.5.0
        /usr/local/lib/qt4/libphonon.so.4       &lt;- phonon-4.5.0
 --&gt; Two packages install the same library in different directories!

** /usr/local/lib/qt4/libphononexperimental.so.4 is shadowed by /usr/local/kde4/lib/libphononexperimental.so.4
        /usr/local/kde4/lib/libphononexperimental.so.4  &lt;- phonon-4.5.0
        /usr/local/lib/qt4/libphononexperimental.so.4   &lt;- phonon-4.5.0
 --&gt; Two packages install the same library in different directories!


sudo pkg_deinstall python26-2.6.7
---&gt;  Deinstalling 'python26-2.6.7'
pkg_delete: package 'python26-2.6.7' is required by these other packages
and may not be deinstalled:
cython-0.15
** Listing the failed packages (-:ignored / *:skipped / !:failed)
        ! python26-2.6.7        (pkg_delete failed)

</t>
<t tx="zoomq.20110902084216.8586">New commit for form "{vol.23}文君: 缓存管理器":
suggest : 讲的之前，可不可说说重要关键词，因为课还是比较深奥
name : youthterm
whereknow : mlist
goodtutorial : 5
blog :
iftutorial : True
other :
want :
isgoodtalk : 5
mail : no_sure@163.com
netenv : 3M网络，品质好

New commit for form "{vol.23}文君: 缓存管理器":
suggest : 听了这么多金山的讲座，这次是最好的，张文君同学的讲座思路清晰，逻辑性强，强烈要求今后多多上来讲座！
感谢金山，感谢张文君同学！
name : evilshark
whereknow : bbs
goodtutorial : 5
blog :
iftutorial : True
other :
want :
isgoodtalk : 5
mail : evilshar@163.com
netenv : 流畅

New commit for form "{vol.23}文君: 缓存管理器":
suggest : 建议张文君老师多讲几节，听她讲课真的可以说是意犹未尽啊。
再此感谢她为大家带来这么精彩的讲解！！！
name : KelJony
whereknow : bbs
goodtutorial : 5
blog :
iftutorial : True
other :
want : 内核，听得瞌睡都没了。太爽了。
isgoodtalk : 5
mail : 125916588@qq.com
netenv : 2M联通，中间有断过几次，刷新下页面就恢复了。

New commit for form "{vol.23}文君: 缓存管理器":
suggest : 可能因为自己是小白的原因，每次讲座都听得一头雾水，我希望每次讲座能讲少一点，讲透一点。。。
name : 席康杰
whereknow : mlist
goodtutorial : 5
blog :
iftutorial : True
other :
want : 作为一名在校生，就那点可怜的知识，懂一点C++，参加过ACM，未涉足过真正的Windows软件开发，自然是迫切想知道做Windows软件开发需要的知识，针对这些知识能不能提供一些书籍和网站做参考资料，极度迷茫中。。。极度想摆脱这种迷茫。。。
isgoodtalk : 2
mail : xikangjie@qq.com
netenv : 还算流畅，声音也较清晰。
</t>
<t tx="zoomq.20110902202629.2926">joyent 提供的no.de 虚拟主机!
$ ssh2no.de 
Last login: Mon Sep  5 14:38:51 2011 from 10.2.128.20
             __                       __                      __
    __      / /___  __  _____  ____  / /_   ____  ____   ____/ /__
 __/ /___  / / __ \/ / / / _ \/ __ \/ __/  / __ \/ __ \ / __  / _ \
/_  __/ /_/ / /_/ / /_/ /  __/ / / / /_   / / / / /_/ // /_/ /  __/
 /_/  \____/\____/\__, /\___/_/ /_/\__/  /_/ /_/\____(_)__,_/\___/
                 /____/  Welcome to zoomquiet.no.de

Useful Commands:
 pkgin -h
 node-service-info
 node-service-log
 node-service-restart
 node-service-disable
 node-service-enable
 node-service-howto

Useful URLs:
 http://wiki.joyent.com/display/node/Node+SmartMachine+FAQ
 https://no.de/
 http://nodejs.org/docs/latest/api/
 https://api.no.de/

$ cat .inputrc 
## 060729 from xyb ; auto search in history
"\e[A": history-search-backward
"\e[B": history-search-forward

[node@zoomquiet ~]$ cat .bash_profile 
. ~/.bashrc
# base http://linuxtoy.org/archives/history-command-usage-examples.html
# cnf history remember zise...
HISTSIZE=2048
HISTFILESIZE=2048
</t>
<t tx="zoomq.20110902202629.2927">$ git push joyent master 
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 380 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
remote: Deploying node-service.
remote:     revision:  a93832e01c23dd1016510a641767432c3996f34d
remote:     timestamp: 2011-09-02T12-26-00.086499460
remote: --
remote: Consider adding a 'package.json' to your repository to specify
remote: server dependencies. Here is an example with detected npm installs
remote: in your no.de SmartMachine:
remote: 
remote:     {
remote:       "name": "my-app",
remote:       "version": "1.0.0",
remote:       "scripts": {
remote:         "start": "node server.js"
remote:       },
remote:       "dependencies": {}
remote:     }
remote: 
remote: See &lt;http://wiki.joyent.com/display/node/npm+Integration&gt; for more info.
remote: --
remote:     npm WARN invalid config node-version="v0.4"
remote:     
remote: Starting node-service.
remote: Win!
To node@zoomquiet4node:repo
 * [new branch]      master -&gt; master

</t>
<t tx="zoomq.20110902202629.2928">Getting Started with a Node.js SmartMachine - Node - Joyent Customer Wiki ::        
    http://wiki.joyent.com/display/node/Getting+Started+with+a+Node.js+SmartMachine

~/.ssh/config
#   110902 for no.de
host zoomquiet4node
hostname zoomquiet.no.de
port 58274

/path/2/no.de
[remote "joyent"]
	url = node@zoomquiet4node:repo
</t>
<t tx="zoomq.20110902202629.2929">[node@zoomquiet ~]$ curl http://npmjs.org/install.sh | sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  3927  100  3927    0     0  21231      0 --:--:-- --:--:-- --:--:-- 78540
fetching: http://registry.npmjs.org/npm/-/npm-1.0.27.tgz
0.4.11
1.0.27
cleanup prefix=/home/node/local/nodejs
altprefix=/opt/nodejs/v0.4.11

This script will find and eliminate any shims, symbolic
links, and other cruft that was installed by npm 0.x.

Is this OK? enter 'yes' or 'no' 
yes

All clean!
! [ -d .git ] || git submodule update --init --recursive
node cli.js rm npm -g -f
node cli.js cache clean
node cli.js install -g -f
/home/node/local/bin/npm -&gt; /home/node/local/lib/node_modules/npm/bin/npm.js
/home/node/local/bin/npm_g -&gt; /home/node/local/lib/node_modules/npm/bin/npm.js
/home/node/local/bin/npm-g -&gt; /home/node/local/lib/node_modules/npm/bin/npm.js
npm@1.0.27 /home/node/local/lib/node_modules/npm 
It worked

</t>
<t tx="zoomq.20110902202629.2930">Installing MongoDB service...

Congratulations, MongoDB looks like it was successfully installed.
The mongo binaries are in /root/local/bin and the data is in /root/local/var/mongodb
To start using MongoDB, run the following two commands:

  source ~/.bashrc
  pfexec svcadm enable mongodb

For security purposes, MongoDB is only listening for connections from 127.0.0.1.
[root@zoomquiet /home/admin]# 

pfexec svcadm disable mongodb</t>
<t tx="zoomq.20110902202629.2931">===========================================================================
$NetBSD: MESSAGE,v 1.4 2003/12/01 22:47:02 grant Exp $

You may want to create and edit the file:

        /opt/local/etc/screenrc

to customize screen globally. Example configuration files have been
installed to:

        /opt/local/share/examples/screen/screenrc
        /opt/local/share/examples/screen/etcscreenrc

===========================================================================
processing local summary...
updating database: 100%
marking screen-4.0.3nb4 as non auto-removable

</t>
<t tx="zoomq.20110914214854.2931">zoomq @ zq4wk1ubuntu in ~/workspace/OBP.b/docs-py2-zh on default
$ python tools/sphinx-build.py -b html -d build/doctrees/ ./ ./build/

</t>
<t tx="zoomq.20110919090657.2932">张晓晅 &lt;zhangxiaoxuan@conew.com&gt; 写道：
&gt; 直接把我qq给那边吧：99945558
&gt; 比邮件快，我这边看邮件不是很频繁的




在很多代码中有如下的函数：
   static BkPngPool* _Instance()
   {
       if (!ms_pInstance)
           ms_pInstance = new BkPngPool;
       return ms_pInstance;
   }

__declspec(selectany) BkPngPool* BkPngPool::ms_pInstance = NULL;

我们理解，定义一个全局指针变量，在第一次用到这个池子的时候才开始分配内存，这样的好处是尽量延迟分配资源的工作，但是没有在代码中看到释放资源的地方。是不是这个资源一旦分配，生存期直到整个程序结束？最后进程结束后，heap的回收统一由操作系统负责？
就是把垃圾一股脑留到最后让windows去擦屁股？

这样设计，有无内存泄露等问题？ 是否显示delete更好？


BkWin中并没有实现EditBox, ComboBox,
ListBox等常用控件，仅仅留了一个realwnd接口。我们的问题是：在BkWin最新版中对这些常用控件用DirectUI思想进行设计了吗？如果没有，未来是否有这个打算？
主要是第二个问题：EditBox/ComboBox等需要用户输入的控件，只能走realwnd接口吗？贵方有没有计划用DirectUI技术实现？



我们打算整个培训体系分为2部分：
1. Windows编程基础/Windows GUI编程基础介绍
2. 金山界面库解读和使用培训视频。</t>
<t tx="zoomq.20110921083446.4495">@run_time
def up_shines_info(jsout, sid):
    fotoinfo = CCFG.DOC_FOTO.copy()

    @others

#urllib2.urlopen("http://starusr.vancl.com.cn/star/suits/6305311/30955b8d5d4a4b6983de95f5be08f7b5.jpg").read()
'''
#CF.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
        , "shiner":{                # 晒单图文
            "total":0               # 总数
            , 'bask':[{"name":""           # 晒单
                , "date":""
                , "cont":""
                , "foto":[]         # 图片集，DBref-&gt;DBGFS.fs.files.
                }# shine
                ]

DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
'''

</t>
<t tx="zoomq.20110921083446.4497">#@run_time
def _up4img2gfs(pathpic, fotoinfo):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    if os.path.exists(pathpic):
        if CCFG.GFS.exists({'uri':fotoinfo['uri']}):
            existimg = CCFG.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1, 'filename':1})
            img_id = existimg['_id']
            #print fotoinfo['uri'], "\n\t`~~~ HAD PUTed!", img_id
            CCFG.LOG.info("%s\n\t`~~~ HAD PUTed as: %s"% (fotoinfo['uri'], img_id))
            return existimg['filename'] #img_id
        else:
            # make time+uri as inter. filename
            crtfoto = "%.4f;%s"% (int(time.time()), fotoinfo['uri'])
            urifoto = hashlib.sha224(crtfoto).hexdigest()
            img = CCFG.GFS.put(open(pathpic, 'rb').read()
                , uri = fotoinfo['uri']
                , filename = urifoto    #fotoinfo['filename']
                , imgtype = fotoinfo['imgtype']
                , showas = fotoinfo['showas']
                , asmain = fotoinfo['asmain']
                , size = Image.open(pathpic).size
                )
            return urifoto  #img
    else:
        CCFG.LOG.warn("\tNOT exists!!!  %s " % pathpic)
        #print "\tNOT exists!!!  %s " % pathpic
        #CCFG.NOEXISTS.append(pathpic)
        return None
        #sys.exit(1)





</t>
<t tx="zoomq.20110921083446.4498">使用 mdmfs 来新建内存介质文件系统

# mdmfs -s 5m md2 /mnt
# df /mnt
Filesystem 1K-blocks Used Avail Capacity  Mounted on
/dev/md2        4846    2  4458     0%    /mnt

创建5M 的内存文件目录...
sudo mdmfs -s 16m md2 /mnt/shm
sudo mdmfs -s 8m md2 /mnt/shm</t>
<t tx="zoomq.20110922090434.5850">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CCFG = Borg()


</t>
<t tx="zoomq.20110922090434.5851">#   PATH collection
SHM = "/mnt/shm"    # memory FS  directory
#W3M = "/usr/local/bin/w3m -T text/html %s"
W3M = "/usr/local/bin/w3m -dump %s"

#   SYS. env. collection
MONGOIP = "proxy7f"
#   "py.kingsoft.net"  
#   "10.20.239.40"
MONGOdocPORT = 9007
MONGOlogPORT = 9017
LOG = logging.getLogger('fadloc')
LOG.setLevel(logging.DEBUG)
LOG.addHandler(MongoHandler.to(db='mongolog', collection='log', host=MONGOIP, port=MONGOlogPORT,))
# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNFAD = Connection(MONGOIP, MONGOdocPORT)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)
'''
try:
    CONNGFS = Connection('localhost', 27217)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27217", traceback.print_exc()
    sys.exit(1)
'''
FADB = CONNFAD[DBFAD]
FAD = FADB[COFAD]
GFS = gridfs.GridFS(CONNFAD[DBGFS])
FSFILE = CONNFAD[DBGFS].fs.files

# mongo doc. define::
&lt;&lt;doc_item&gt;&gt;
&lt;&lt;doc_foto&gt;&gt;
</t>
<t tx="zoomq.20110922090434.7415">def __popen(cmdline):
    p =  subprocess.Popen(cmdline
        ,shell=True
        ,stdin=subprocess.PIPE
        ,stdout=subprocess.PIPE
        ,stderr=subprocess.PIPE)
    lisERR = p.stderr.readlines()
    strERR = "".join(lisERR)
    lisOUT = p.stdout.readlines()
    strOUT = "".join(lisOUT)
    return lisERR,strERR,lisOUT,strOUT
    #return strERR,lisOUT,strOUT



</t>
<t tx="zoomq.20110922090434.7416"># for shinning goods;
shinning = {}
shinning['bask'] = []

htm = pq(jsout, parser='html')

for bask in htm('.bask-div-left').find('a'):
    #print 'http:%s'% bask.get('href')
    shinr = 'http:%s'% bask.get('href')
    basks = {}
    basks['uri'] = shinr
    ex = pq(url=shinr)
    basks['name'] = ex('.other_zhankai').text().split()[1]
    basks['title'] = ex('.show_title').attr('title')
    desc = ex('.dapei_xiangqing').find('p').text()
    if None == desc:
        desc = ""
    basks['cont'] = desc
    basks['foto'] = []
    for img in ex('.jcarousel-skin-slide').find('img'):
        small = img.get('src')
        fotoinfo['uri'] = small
        fotoinfo['imgtype'] = small.split('.')[-1]
        fotoinfo['showas'] = 'thumb'
        tmpic = '%s/tmpload.%s'% (CCFG.SHM, fotoinfo['imgtype'])
        open(tmpic,'wb').write(urllib2.urlopen(fotoinfo['uri']).read())
        #print fotoinfo,tmpic
        fotoname = CCFG._up4img2gfs(tmpic, fotoinfo)
        basks['foto'].append(fotoname)

        norma = img.get('ref')
        fotoinfo['uri'] = norma
        fotoinfo['imgtype'] = norma.split('.')[-1]
        fotoinfo['showas'] = 'mid'
        open(tmpic,'wb').write(urllib2.urlopen(fotoinfo['uri']).read())
        #print fotoinfo,tmpic
        fotoname = CCFG._up4img2gfs(tmpic, fotoinfo)
        basks['foto'].append(fotoname)
    #print basks
    shinning['bask'].append(basks)
shinning['total'] = len(shinning['bask'])
#print shinning
CCFG.FAD.update({'sid':sid}, {"$set":{'comments.shiner':shinning}})

'''
CF.FAD.update({'sid':sid}, {"$set":{'comments.shiner':shinning}})

        , "shiner":{                # 晒单图文
            "total":0               # 总数
            , 'bask':[{"name":""           # 晒单
                , "uri":""
                , "title":""
                , "cont":""
                , "foto":[]         # 图片集，DBref-&gt;DBGFS.fs.files.
                }# shine
                ]

DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
'''




</t>
<t tx="zoomq.20110922090434.7417"># for exp. goods foto load;
attrs_fotos = CCFG.FAD.find_one({'sid':SID}, {'_id':0, 'attrs.fotos':1})
attrs_fotos_uri = []
for foto in attrs_fotos['attrs']['fotos']:
    gfsuri = CCFG.FSFILE.find({'filename':foto}, {'_id':0, 'uri':1})[0]
    attrs_fotos_uri.append(gfsuri['uri'])

for img in htm.find('img'):
    expic = img.get('original')
    if None == expic:
        pass
    else:
        if expic in attrs_fotos_uri:
            pass
        else:
            print expic
            fotoinfo['uri'] = expic
            fotoinfo['imgtype'] = expic.split('.')[-1]
            fotoinfo['showas'] = 'big'
            tmpic = '%s/tmpload.%s'% (CCFG.SHM, fotoinfo['imgtype'])
            fotoname = CCFG._up4img2gfs(tmpic, fotoinfo)
            attrs_fotos['attrs']['fotos'].append(fotoname)

CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':attrs_fotos['attrs']['fotos']}})

#open(tmpic,'wb').write(urllib2.urlopen(fotoinfo['uri']).read())
#print fotoinfo,tmpic
#fotoname = _up4img2gfs(tmpic,fotoinfo)



</t>
<t tx="zoomq.20110927084702.2941">[zoomq@py] /usr/ports&gt; sudo pip install PIL
...
    --------------------------------------------------------------------
    PIL 1.1.7 SETUP SUMMARY
    --------------------------------------------------------------------
    version       1.1.7
    platform      freebsd8 2.7.2 (default, Sep  6 2011, 15:02:57)
                  [GCC 4.2.1 20070719
                  [FreeBSD]]
    --------------------------------------------------------------------
    *** TKINTER support not available
    *** JPEG support not available
    --- ZLIB (PNG/ZIP) support available
    *** FREETYPE2 support not available
    *** LITTLECMS support not available
    --------------------------------------------------------------------
    To add a missing option, make sure you have the required
    library, and set the corresponding ROOT variable in the
    setup.py script.
</t>
<t tx="zoomq.20110927084702.4405">@path cron

定期任务支持</t>
<t tx="zoomq.20110927084702.4420">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vancl-csv-walkr.py v11.09.27"

&lt;&lt;imports&gt;&gt;
FAD=" /data/apps/fadpop"

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vancl-uri-flush.py /path/2/当日下载目录
                 |             +-- vancl 联盟用户的相关商品数据文件下载入口
                 +- 指向脚本自身
        """ % VERSION
    else:
        PATHCVS = sys.argv[1]
        PATHCRON = sys.argv[0]

        loader(PATHCVS,PATHCRON)

</t>
<t tx="zoomq.20110927084702.4421">'''vancl cvs data file Walkr:
    - 单进单线,批量识别 .rar 解出的 .csv
    - 调用 incov 完成 UTF-16 -&gt; UTF-8 的转换
    - 然后逐一进行新品插入
依赖:
    + PyMongo
    + fadpop.common.fadutil
'''
</t>
<t tx="zoomq.20110927084702.4422">import os
import sys
import time
import fnmatch
#from copy import deepcopy as copy
#import subprocess
#import traceback
#import logging
#import hashlib

#import Image

#import PyMongo
#from pymongo import Connection
#from pymongo import errors as ERR
#import gridfs
#from mongolog.handlers import MongoHandler

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time

</t>
<t tx="zoomq.20110927084702.4428">def loader(pathcvs,pathcron):
    asroot = os.path.abspath(pathcvs)
    cron = os.path.dirname(os.path.abspath(pathcron))
    #print cron,FAD
    #return
    shcall = "#!/bin/sh"
    shcall = "PY='/usr/local/bin/python'"
    for f in os.listdir(asroot):
        if fnmatch.fnmatch(f, '*.csv'):
            #print f, os.path.abspath(f)
            fas = f.replace("(","\(").replace(")","\)").replace("&amp;","\&amp;")
            iconv = "iconv -c -f UTF-16LE -t UTF-8 %(asroot)s/%(fas)s &gt; %(asroot)s/%(fas)s.utf8"% locals()
            err_li, err_st, out_li, out_st = __popen(iconv)
            vanclcsv = "%s/parser/vanclcsv.py"% FAD
            callvanclcsv = "$PY %(vanclcsv)s %(asroot)s/%(fas)s.utf8" % locals()
            shcall += "\n"+callvanclcsv
    open("%s/vancl-csv-all.sh"% cron, 'w').write(shcall)

</t>
<t tx="zoomq.20110928083621.2947">    cvsls = open(cvsfile).readlines()
    for idata in cvsls[:2]:
        print ",".join(idata.split('\t'))
        #print len(idata.split('\t'))
    return
    fread = codecs.open(cvsfile, 'rU', 'utf-16')
    csv_reader = csv.reader(utf_8_encoder(fread))
    for row in csv_reader:
        # decode UTF-8 back to Unicode, cell by cell:
        print len([unicode(cell, 'utf-8') for cell in row])
    ur = UnicodeReader(cvsfile)
    print ur
    row = ur.next()
    print row
    return
    #fread = open(cvsfile, 'rb').read()
    #cvsf = open(cvsfile,'rU')
    #idata = csv.reader(nonull(cvsf), dialect='excel')
    #idata = csv.reader(fread, dialect='excel')
</t>
<t tx="zoomq.20110929090256.4413">def _up4img2gfs(pathpic, fotoinfo):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    if os.path.exists(pathpic):
        if CCFG.GFS.exists({'uri':fotoinfo['uri']}):
            existimg = CCFG.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1, 'filename':1})
            img_id = existimg['_id']
            #print fotoinfo['uri'], "\n\t`~~~ HAD PUTed!", img_id
            CCFG.LOG.info("%s\n\t`~~~ HAD PUTed as: %s"% (fotoinfo['uri'], img_id))
            return existimg['filename'] #img_id
        else:
            # make time+uri as inter. filename
            crtfoto = "%.4f;%s"% (int(time.time()), fotoinfo['uri'])
            urifoto = hashlib.sha224(crtfoto).hexdigest()
            img = CCFG.GFS.put(open(pathpic, 'rb').read()
                , uri = fotoinfo['uri']
                , filename = urifoto    #fotoinfo['filename']
                , imgtype = fotoinfo['imgtype']
                , showas = fotoinfo['showas']
                , asmain = fotoinfo['asmain']
                , size = Image.open(pathpic).size
                )
            return urifoto  #img
    else:
        CCFG.LOG.warn("\tNOT exists!!!  %s " % pathpic)
        #print "\tNOT exists!!!  %s " % pathpic
        #CCFG.NOEXISTS.append(pathpic)
        return None
        #sys.exit(1)





</t>
<t tx="zoomq.20110929090256.4431">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "vanclhtmitem.py v11.08.9"
&lt;&lt;imports&gt;&gt;
DLERRORS = []

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 
对统一下载的 http://item.vancl.com/{sid}.html 页面代码分析出sid 对应的主要信息
输出到 STDOUT usage::
$ python /path/2/vanclhtmitem.py /path/2/[*.html]
                 |               |      +- 如果指向了具体的文件 则是专门解析
                 |               +- 页面文件目录
                 +- 指向本脚本
        """ % VERSION
    else:
        graspiteminfo(sys.argv[1])
</t>
<t tx="zoomq.20110929090256.4432">import os
import sys
import fnmatch
#import time
import traceback
#import urllib
import pickle
#from copy import copy

#import Image

from pyquery import PyQuery as pq
#from lxml import etree

#from pymongo import Connection
#from pymongo import errors as ERR

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, __popen, run_time
</t>
<t tx="zoomq.20110929090256.4433">@run_time
def graspiteminfo(pathml):
    if ".html" == pathml[-5:]:
        print "esp page..."
        qhtm = pq(filename=pathml, parser='html')
        chksid = pathml.split("/")[-1].split(".")[0]
        print chksid
        if not _isnorm(qhtm, chksid):
            return
        if not _isfound(chksid):
            return
        _updateitem(qhtm, chksid)
    else:
        for htmfile in os.listdir(pathml):
            if fnmatch.fnmatch(htmfile, '*.html'):
                chksid = htmfile.split(".")[0]
                print chksid
                qhtm = pq(filename="%s/%s" % (pathml, htmfile), parser='html')
                if not _isnorm(qhtm, chksid):
                    continue
                if not _isfound(chksid):
                    continue
                _updateitem(qhtm, chksid)
                #return
    output = open('20110713_nvzhuang_all_downloaderrors.pkl', 'wb')
    pickle.dump(DLERRORS, output)
    output.close
</t>
<t tx="zoomq.20110929090256.4434">def _isnorm(htm, sid):
    if not htm('.breadNav'):
        print "下载失败"
        LOG.info("下载失败:%s"% sid)
        DLERRORS.append(sid)
        return False
    else:
        return True
        #continue

</t>
<t tx="zoomq.20110929090256.4435">def _isfound(chksid):
    try:
        FAD.find({'sid':chksid})[0]
        return True
    except :
        print "graspiteminfo(pathml) ALERT! %s no-exist\n\t"% chksid, traceback.print_exc()
        #sys.exit(1)
        return False
        #continue

</t>
<t tx="zoomq.20110929090256.4436">def _updateitem(htm, sid):
    if htm('#saleout').attr('href'):
        # 已售罄
        &lt;&lt;放空价格&gt;&gt;
    else:
        &lt;&lt;价格抓取&gt;&gt;

    &lt;&lt;bread_nav&gt;&gt;
    &lt;&lt;attrs_wash&gt;&gt;
    &lt;&lt;attrs_color&gt;&gt;
    &lt;&lt;comments_unit&gt;&gt;
    &lt;&lt;comments_size&gt;&gt;
    &lt;&lt;comments_feel&gt;&gt;
    &lt;&lt;comments_taker_comment&gt;&gt;

    FAD.update({'sid':sid}, {"$set":{'attrs.class':bread_nav
                , 'attrs.wash':attrs_wash
                , 'attrs.color':attrs_color
                , 'comments.unit':comments_unit
                , 'comments.noma':comments_noma
                , 'comments.bask':comments_bask
                , 'comments.size':comments_size
                , 'comments.feel':comments_feel
                , 'comments.taker.total':comments_taker_total
                , 'comments.taker.totalask':comments_taker_totalask
                , 'comments.taker.comment':comments_taker_comment
                , 'comments.taker.ask':comments_taker_ask
                }
            }
        )

</t>
<t tx="zoomq.20110929090256.4437">prix = "saleout"
FAD.update({'sid':sid}, {"$set":{'prix':prix}})


</t>
<t tx="zoomq.20110929090256.4438">prix_agio = htm('.MSpriceArea').find('strong').text()
prix_vip = htm('.cuxiaoPrice').find('strong').text()
prix_vip += ","
prix_vip += ",".join([vip_rice.text_content() for vip_rice in htm('.vipPrice').find('span')[1:]])
FAD.update({'sid':sid}, {"$set":{'agio':prix_agio, 'vip':prix_vip}})
</t>
<t tx="zoomq.20110929090256.4439">bread_nav = []
for bread in htm('.breadNav').find('a'):
    bread_nav.append(bread.get('title'))


</t>
<t tx="zoomq.20110929090256.4440">attrs_wash = {}
for attricon in htm('.attricon'):
    icon = attricon.find('img')
    iconkey = icon.get('src').split("/")[-1].split(".")[0]
    attrs_wash[iconkey] = icon.get('alt')
</t>
<t tx="zoomq.20110929090256.4441">attrs_color_id = []
for color in htm('.selColor').find('li'):
    if color.get('name'):
        sid_color = color.get('name').split("&amp;")[0].split("=")[1]
        if sid == sid_color:
            pass
        else:
            attrs_color_id.append(sid_color) 
attrs_color = []
for relsid in attrs_color_id:
    cursor_item = FAD.find({'sid':relsid})
    if 0 &lt; cursor_item.count():
        # NULL relation collors
        attrs_color.append(cursor_item[0]["_id"])

</t>
<t tx="zoomq.20110929090256.4442">try:
    pingfen = htm('.pingfen').find('li').text().split()
    comments_unit = pingfen[:6]
    comments_noma = pingfen[6:-6]
    comments_bask = pingfen[-6:]
except:
    print "还没有人打分!\n\t", traceback.print_exc()
    comments_unit = ""
    comments_noma = ""
    comments_bask = ""
</t>
<t tx="zoomq.20110929090256.4443">comments_size = htm('.sizePingjia').find('li').text()
</t>
<t tx="zoomq.20110929090256.4444">comments_feel =  htm('.voteArea').find('p').text()

</t>
<t tx="zoomq.20110929090256.4445">for tabmenu in htm('.RsetTabMenu').find('li'):
    if "item-buyfeedback" == tabmenu.get('name'):
        comments_taker_total = tabmenu.text_content().split("(")[1][:-1]
    if "item-quiz" == tabmenu.get('name'):
        comments_taker_totalask = tabmenu.text_content().split("(")[1][:-1]

&lt;&lt;comments_taker_ask&gt;&gt;
&lt;&lt;comments_taker_comm&gt;&gt;


</t>
<t tx="zoomq.20110929090256.4446">comments_taker_comment = []
for urcomment in htm('#styleAssesseslist').find('div'):
    askuser = urcomment.find_class('area2Head')
    if len(askuser) &gt; 0:
        comments_taker_comment_name = askuser[0].find_class('area2HeadCenter')[0].text_content().strip()[3:]
        comments_taker_comment_title = askuser[0].find_class('area2HeadLeft')[0].text_content().strip()
        comments_taker_comment_date = askuser[0].find_class('area2HeadRight')[0].text_content().strip()
    askcnt = urcomment.find_class('area2ConP')
    if len(askcnt) &gt; 0:
        comments_taker_comment_cont = askcnt[0].text_content().strip()
    else:
        comments_taker_comment_cont = ''

    askhold = urcomment.find_class('selCS')
    if len(askhold) &gt; 0:
        userhold = "".join(askhold[0].text_content().replace('\r','').split("\n")[2:])
    else:
        userhold = ""

    comments_taker_comment.append({'data':comments_taker_comment_date
            , 'name':comments_taker_comment_name
            , 'title':comments_taker_comment_title
            , 'issue':comments_taker_comment_cont 
            , 'userhold':userhold
            }
        )
</t>
<t tx="zoomq.20110929090256.4447">comments_taker_ask = []
for question in htm('#stylequestionslist').find('.area3Con'):
    userq = question.findall('div')[:2]
    userqa = userq[0].text_content().replace('\r','').strip().split("\n")
    comments_taker_ask_name = userqa[0].strip()
    comments_taker_ask_title = userqa[1].strip()[2:]
    comments_taker_ask_date = userqa[-1].strip()
    comments_taker_ask_issue = userq[1].text_content().strip()
    comments_taker_ask_reply = question.find_class('adminAsk')[0].text_content().strip()
    comments_taker_ask.append({'data':comments_taker_ask_date
            , 'name':comments_taker_ask_name
            , 'title':comments_taker_ask_title
            , 'issue':comments_taker_ask_issue 
            , 'reply':comments_taker_ask_reply
            }
        )

</t>
<t tx="zoomq.20111008085807.2965">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
110901,5.50,1.25,4.00,4.75,1.00,6.00    5, 1, 2, 4
110902,4.50,3.75,0.50,5.25,1.00,6.50    5, 1, 2, 4
110905,6.00,2.50,0.75,2.50,3.00,7.50    5, 1, 2, 4
110906,0.00,7.50,0.75,3.50,4.00,8.25    5, 1, 2, 4
110907,0.00,5,75,1.00,6.75,2.50,6.50    5, 2, 1, 4
110908,1.00,4.50,6.00,4.00,1.50,7.50    5, 3, 1, 6
110910,5.75,1.50,1.50,2.75,4.50,9.00    5, 1, 2, 4
110913,0.50,0.75,0.75,6.00,4.35,9.35    5, 1, 3, 4
110914,2.00,1.50,2.25,3.75,5.00,8.00    5, 1, 3, 4
110915,0.00,0.75,4.00,5.25,7.75,7.00    5, 1, 2, 4
110916,0.00,2.00,1.50,7.50,5.50,6.00    5, 1, 2, 4
110919,0.00,2.30,1.75,4.85,1.25,6.00    5, 0, 3, 5
110920,1.00,2.75,0.75,7.00,3.50,8.50    5, 2, 1, 3
110921,2.00,5.50,1.50,5.50,1.50,7.00    5, 2, 1, 4
110922,0.25,3.50,3.75,5.00,3.75,7.00    5, 2, 1, 3
110923,0.00,2.00,2.00,8.50,5.00,7.00    5, 2, 3, 5
110926,0.00,4.00,3.80,4.25,4.50,7.00    5, 0, 4, 5
110927,3.00,4.50,0.75,7.75,1.50,7.00    5, 2, 2, 5
110928,0.00,4.25,2.00,6.25,4.50,6.00    5, 2, 1, 3
110929,4.00,4.00,2.50,5.00,2.00,6.00    5, 2, 1, 4
110930,2.25,3.25,1.00,6.00,5.00,6.00    5, 1, 2, 4


</t>
<t tx="zoomq.20111009085726.4432">= fadpop定期任务 =
== 依赖 ==
+ redis-py

== 设计 ==
分布式,任务池,多进程拉任务:
    + 基于 redis
流程:
    - 定期扫描 Mongo,将所有 uri 丢入指定 redis set 中
    - 分布式消费者进程,从 redis 中随机提取任务uri 进行系列处置:
        - 下载网页
        - 分析信息
        - 下载图片
        - 分析js 更新晒单

== 发布 ==
py.kingsoft.net:
    9079-&gt;pyk:6379


== 配置 ==
统一内存缓冲目录:

例 18-6. 用 mdconfig 创建新的内存盘设备

# mdconfig -a -t swap -s 5m -u 1
# newfs -U md1
/dev/md1: 5.0MB (10240 sectors) block size 16384, fragment size 2048
        using 4 cylinder groups of 1.27MB, 81 blks, 192 inodes.
        with soft updates
super-block backups (for fsck -b #) at:
 160, 2752, 5344, 7936
# mount /dev/md1 /mnt
# df /mnt
Filesystem 1K-blocks Used Avail Capacity  Mounted on
/dev/md1        4718    4  4338     0%    /mnt

例 18-7. 使用 mdmfs 来新建内存介质文件系统

# mdmfs -s 16m md2 /mnt/shm
# df /mnt
Filesystem 1K-blocks Used Avail Capacity  Mounted on
/dev/md2        4846    2  4458     0%    /mnt


== 运维 ==
@others

== Changelog ==
111009 init. 确认关键代码段
</t>
<t tx="zoomq.20111009085726.4438">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vancl-uri-flush.py v11.10.9"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vancl-uri-flush.py host port db
                 |                   |    |    +- db序号
                 |                   |    +- 端口
                 |                   +- 主机
                 +- 指向脚本自身
        """ % VERSION
    else:
        RHOST = sys.argv[1]
        RPORT = sys.argv[2]
        RDB = sys.argv[3]
        #CCFG.LOG.info("usage redis as:%s:%s db %s"% (RHOST, RPORT, RDB))
        loadalluri(RHOST, RPORT, RDB)

</t>
<t tx="zoomq.20111009085726.4439">'''vancl 's doc's uri as task flush into redis:
    - 单进单线,批量刷新所有独立产品uri 到redis 仓库中,形成任务队列
依赖:
    + redis-py
    + fadpop.common.fadutil
'''
</t>
<t tx="zoomq.20111009085726.4440">#import os
import sys
#import time
#import fnmatch
#from copy import deepcopy as copy
#import subprocess
#import traceback
#import logging
#import hashlib

#import Image
import redis

#import PyMongo
#from pymongo import Connection
#from pymongo import errors as ERR
#import gridfs
#from mongolog.handlers import MongoHandler

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG

</t>
<t tx="zoomq.20111009085726.4441">def loadalluri(rhost, rport, rdbid):
    rdb = redis.Redis(host=rhost, port=int(rport), db=int(rdbid))
    for goods in CCFG.FAD.find(fields={'_id':0, 'sid':1}):
        #print goods['uri']
        if rdb.sadd('vcsid', goods['sid']):
            #CCFG.LOG.info('uri SADD:%s'% goods['uri'])
            print 'sid SADD:%s'% goods['sid']
        else:
            #CCFG.LOG.info('HAD uri:%s'% goods['uri'])
            print 'HAD sid:%s'% goods['sid']
    print rdb.scard('vcsid')

    '''
r.set('uri','http://1.1.4')
In [52]: r.sadd('uri','http://1.1.4')
Out[52]: False
r.sismember('uri','http://1.1.4')
r.scard('uri')
r.spop('uri')
In [58]: r.srandmember('uri')
Out[58]: 'http://1.1.4'

    '''


</t>
<t tx="zoomq.20111009085726.4446">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vancl-up4info2karait.py v11.12.1"

&lt;&lt;imports&gt;&gt;
TPL4URI = "http://item.vancl.com/%s.html"
TPL4IMG = "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s"
GRASPJS = '/data/apps/fadpop/spider/graspage.js'
PHANTOMJS = "/usr/local/bin/phantomjs"

@others

if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vancl-uri-flush.py host port
                 |                   |    +- 端口
                 |                   +- 主机
                 +- 指向脚本自身
e.g:
$ python vancl-uri2karai.py proxy7f 9007
        """ % VERSION
    else:
        RHOST = sys.argv[1]
        RPORT = sys.argv[2]
        #RDB = sys.argv[3]
        #CCFG.LOG.info("usage redis as:%s:%s db %s"% (RHOST, RPORT, RDB))
        upgradbyuri(RHOST, RPORT)

</t>
<t tx="zoomq.20111009085726.4447">'''vancl 's doc's all info upgrade:
    - 单进单线,从MQ 中逐一获取URI 进行文档更新

依赖:
    + Karait
    + fadpop.common.fadutil
'''

</t>
<t tx="zoomq.20111009085726.4448">import os
import sys
import time
#import fnmatch
from copy import deepcopy as copy
#import subprocess
import traceback
#import logging
import hashlib
import urllib2
#import Image

from karait import Message, Queue

import redis

from pyquery import PyQuery as pq
# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, _up4img2gfs, __popen, timeout, Timeout, KillThread




</t>
<t tx="zoomq.20111009085726.4449">def upgradbyuri(rhost, rport):
    '''利用 Karait 的超时进行任务管理
    '''
    start = time.time()
    queue = Queue(
        host=rhost, # MongoDB host. Defaults to localhost.
        port=int(rport), # MongoDB port. Defaults to 27017.
    )
    #print message.to_dictionary()
    #loop = 0
    #while 2 &gt; loop:
    while 1:
        #loop += 1
        #sid = rdb.srandmember('vcsid')
        msg = queue.read(routing_key='for_vancl',visibility_timeout=266.6)[0]
        #print msg.to_dictionary()
        sid = msg.sid
        @others
        msg.delete()
        #print "msg.is_expired()", msg.is_expired()
        print "per_up_s ~= %s \n"% (time.time() - start)
        
    #print "Set:uri", rdb.scard('vcsid')
    #print "Set:working", rdb.zcard('working')
</t>
<t tx="zoomq.20111009085726.4450">print "up htm BASE: %s"% (TPL4URI%sid)
qhtm = pq(urllib2.urlopen(TPL4URI% sid).read(),parser='html')
_updateitem(qhtm, sid)
print "dl pic BASE: %s"% (TPL4IMG% sid)
qhtm = pq(urllib2.urlopen(TPL4IMG% sid).read(), parser='html')
pagepics = _anabigpicnames(qhtm, sid)
#   print hashlib.sha224(TPL4IMG% sid).hexdigest()
_loadpics(pagepics)

#   urllib2.urlopen(TPL4IMG% sid).read()
#print "up shine BASE: %s"% (TPL4URI%sid)
#SNAPJS = '%s %s %s'% (PHANTOMJS, GRASPJS, TPL4URI% sid)
#print SNAPJS
#liserr, strerr, lisout, strout = __popen(SNAPJS)
#   print strout
#_up_shining(strout, sid)






</t>
<t tx="zoomq.20111010171018.2978">def _anabigpicnames(pathml, sid):
    dirurl = "/".join(sid[:3])
    d = pathml
    ibgpics = {}
    ibgpics[sid] = []
    @others
    return ibgpics
    #output = open('110713_nvzhuang_all_bigpic.pkl', 'wb')
    #pickle.dump(ibgpics, output)
    #output.close

</t>
<t tx="zoomq.20111010171018.2979">foto = d('#large').find('img').attr('src').split("/")[-1]
print CCFG.TPL_VANCL_BFOTO % locals()
#print CCFG.TPL_VANCL_MFOTO % locals()
#print CCFG.TPL_VANCL_SFOTO % locals()
bfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_BFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"big"       # thumb|mid|big
        , "asmain":True    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(bfoto_big)
sfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_MFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"thumb"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(sfoto_big)
mfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_SFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"mid"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(mfoto_big)
</t>
<t tx="zoomq.20111010171018.2980">for foto in d('#thumbnail').find('img'):
    #print foto.get('src').split("/")[-1]   #.base_url()
    foto = foto.get('src').split("/")[-1]
    print CCFG.TPL_VANCL_BFOTO % locals()
    #print CCFG.TPL_VANCL_MFOTO % locals()
    #print CCFG.TPL_VANCL_SFOTO % locals()
    bfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_BFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"big"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(bfoto_big)
    sfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_MFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"thumb"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(sfoto_big)
    mfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_SFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"mid"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(mfoto_big)


</t>
<t tx="zoomq.20111011203627.4446">def _loadpics(pagepics):
    '''base dict info,download pic into. CCFG.SHM as tmp files and push into GridFS
    '''
    total = 0
    tmproot = CCFG.SHM
    for sid in pagepics.keys():
        try:
            for foto in pagepics[sid]:
                dirurl = "/".join(sid[:3])
                asize = CCFG.FOTO_SIZE[foto['showas']]  # 翻译TMD实际目录
                filename = foto['filename']
                imgtype = foto['imgtype']
                tmpname = hashlib.sha224(TPL4IMG% sid).hexdigest()
                realpic = "%(tmproot)s/%(tmpname)s.%(imgtype)s"% locals()
                #print sid, foto['uri'], realpic
                #open(realpic,'wb').write(urllib2.urlopen(foto['uri']).read())
                __download_img(realpic,foto['uri'])
                @others
                os.remove(realpic)
                total += 1
        except Timeout, e:
            #print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
            print "loadpics(pkl,pathpic) BROKENNN!\n\t", e
            #sys.exit(1)
            continue
        print "\n\t &gt;&gt;&gt; %s fotos loaded !&lt;&lt;&lt;\n"% total
</t>
<t tx="zoomq.20111011203627.4447">try:
    this_item = CCFG.FAD.find({'sid':sid})
    fotoid =  _up4img2gfs(realpic, foto)
    if fotoid:
        fotos = this_item[0]['attrs']['fotos']
        if fotoid in fotos:
            print fotoid, "\t atta.ed inthe sid::", sid
            pass
        else:
            fotos.append(fotoid)
            CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
    else:
        # wget is not completed!
        continue
except :
    print "_loadpics() BROKENNN!\n\t", traceback.print_exc()
    #sys.exit(1)
    continue


</t>
<t tx="zoomq.20111012085658.5918">def _up_shining(jsout, sid):
    fotoinfo = CCFG.DOC_FOTO.copy()
    tmproot = CCFG.SHM

    &lt;&lt;晒单更新&gt;&gt;

    &lt;&lt;详细图片&gt;&gt;




</t>
<t tx="zoomq.20111012085658.5919"># for shinning goods;
shinning = {}
shinning['bask'] = []

htm = pq(jsout, parser='html')

for bask in htm('.bask-div-left').find('a'):
    print 'http:%s'% bask.get('href')
    shinr = 'http:%s'% bask.get('href')
    basks = {}
    basks['uri'] = shinr
    ex = pq(url=shinr)
    basks['name'] = ex('.other_zhankai').text().split()[1]
    basks['title'] = ex('.show_title').attr('title')
    desc = ex('.dapei_xiangqing').find('p').text()
    if None == desc:
        desc = ""
    basks['cont'] = desc
    basks['foto'] = []
    for img in ex('.jcarousel-skin-slide').find('img'):
        small = img.get('src')
        fotoname = __urlopen_load_img(fotoinfo, 'thumb', small)
        if fotoname:
            basks['foto'].append(fotoname)

        norma = img.get('ref')
        fotoname = __urlopen_load_img(fotoinfo, 'mid', norma)
        if fotoname:
            basks['foto'].append(fotoname)

    #print basks
    shinning['bask'].append(basks)
shinning['total'] = len(shinning['bask'])
#print shinning
CCFG.FAD.update({'sid':sid}, {"$set":{'comments.shiner':shinning}})


</t>
<t tx="zoomq.20111012085658.5920"># for exp. goods foto load;
attrs_fotos = CCFG.FAD.find_one({'sid':sid}, {'_id':0, 'attrs.fotos':1})
attrs_fotos_uri = []
for foto in attrs_fotos['attrs']['fotos']:
    gfsuri = CCFG.FSFILE.find({'filename':foto}, {'_id':0, 'uri':1})[0]
    attrs_fotos_uri.append(gfsuri['uri'])

for img in htm.find('img'):
    expic = img.get('original')
    if None == expic:
        pass
    else:
        if expic in attrs_fotos_uri:
            pass
        else:
            print expic
            fotoname = __urlopen_load_img(fotoinfo, 'big', expic)
            if fotoname:
                attrs_fotos['attrs']['fotos'].append(fotoname)

CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':attrs_fotos['attrs']['fotos']}})


</t>
<t tx="zoomq.20111013085658.11318">def __urlopen_load_img(fotoinfo, showas, uri):
    fotoinfo['uri'] = uri
    fotoinfo['imgtype'] = uri.split('.')[-1]
    if "?t=" in fotoinfo['imgtype']:
        fotoinfo['imgtype'] = fotoinfo['imgtype'].split('?')[:1]
    fotoinfo['showas'] = showas

    tmproot = CCFG.SHM
    tmpname = hashlib.sha224(fotoinfo['uri']).hexdigest()
    imgtype = fotoinfo['imgtype']
    tmpic = "%(tmproot)s/%(tmpname)s.%(imgtype)s"% locals()
    try:
        #open(tmpic,'wb').write(urllib2.urlopen(fotoinfo['uri']).read())
        __download_img(tmpic,fotoinfo['uri'])
        print "%s&gt;&gt;\t"% showas, tmpic
        fotoname = _up4img2gfs(tmpic, fotoinfo)
        os.remove(tmpic)
        return fotoname
    except Timeout, e:
        print "__urlopen_load_img() BROKENNN!\n\t", e
        return None



</t>
<t tx="zoomq.20111103090127.3354">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
111008,2.20,4.85,1.25,3.50,4.00,7.00    5, 1, 2, 4
111009,1.25,3.50,2.25,5.50,5.00,7.00    5, 2, 1, 4
111010,1.00,4.00,2.00,4.25,5.50,6.00    5, 2, 0, 4
111011,0.50,3.25,3.50,6.00,4.00,7.00    5, 0, 2, 5
111012,3.00,3.50,1.50,5.50,4.00,7.00    5, 0, 2, 4
111013,1.50,7.00,4.75,4.75,1.00,6.00    5, 2, 2, 2
111014,1.50,7.50,2.25,0.75,4.50,6.00    5, 1, 3, 5
111017,0.00,4.00,0.50,7.00,4.00,7.00    5, 1, 3, 4
111018,1.75,3.50,0.00,5.50,4.50,7.00    5, 2, 1, 2
111019,1.00,3.50,5.00,3.00,1.00,7.00    5, 1, 2, 4
111020,0.00,4.50,6.00,4.00,1.00,7.00    6, 1, 2, 4
111021,0.00,3.75,2.50,5.00,4.00,7.00    6, 2, 3, 5
111024,0.00,5.50,0.50,7.25,4.00,7.00    6, 1, 4, 6
111025,0.00,7.00,3.00,3.00,4.00,7.00    6, 1, 4, 8
111026,1.00,3.25,2.50,5.00,4.50,6.50    5, 3, 1, 2
111027,1.25,5.50,3.75,4.50,1.50,7.00    5, 2, 2, 3
111028,0.50,7.00,0.50,4.00,6.00,7.00    5, 1, 3, 4
111031,1.75,5.50,0.75,4.00,4.50,7.00    5, 1, 3, 5


</t>
<t tx="zoomq.20111104224345.3355">珠三角技术沙龙相关...</t>
<t tx="zoomq.20111104224345.3356">jeff jeff@fallever.com
发件人当地时间:	 发送时间 22:30 (GMT+08:00)。发送地当前时间：下午10:45。 ✆
发送至:	 Zoom Quiet &lt;Zoom.Quiet@gmail.com&gt;
日期:	 2011年11月4日 下午10:30
主题:	 SA+SCM的工作来了

东京Linode主机己入手。得知您老喜欢折腾各种SA，SCM，协作过程等工作。好吧
现在有一台裸机（ubuntu 10.04LTS 
    root@106.187.45.65/Tp_110115
    交给你了，下面有一些事需要做，如果大妈有闲，就先干了，没闲我会一一消灭：



</t>
<t tx="zoomq.20111104224345.3357">帐号和安全
- 给机器起个有爱的名字
    Aoi Sora

各种环境，及Server
- nginx，最新稳定版
- uwsgi，跑python应用
http://projects.unbit.it/uwsgi/wiki/Install
    - pip 安装失败
    - agi build-essential python-dev libxml2-dev
    - 编译安装要 gcc 
The following extra packages will be installed:
  binutils gcc-4.4 libc-dev-bin libc6-dev libgomp1 linux-libc-dev manpages manpages-dev
Suggested packages:
  binutils-doc gcc-multilib autoconf automake1.9 libtool flex bison gdb gcc-doc gcc-4.4-multilib libmudflap0-4.4-dev
  gcc-4.4-doc gcc-4.4-locales libgcc1-dbg libgomp1-dbg libmudflap0-dbg libcloog-ppl0 libppl-c2 libppl7 glibc-doc
The following NEW packages will be installed:
  binutils gcc gcc-4.4 libc-dev-bin libc6-dev libgomp1 linux-libc-dev manpages manpages-dev
0 upgraded, 9 newly installed, 0 to remove and 3 not upgraded.

- phpfastcgi 
- mysql
    - apt install
    - root pass: 5t4r3e2w1q
- redis,mongoDB (好吧，备用的)

SCM
- gitosis,使用Git吧，自己Host代码
- redmine 或 trac？我推荐前者，但后者体验一下也无妨。嘿。


</t>
<t tx="zoomq.20111110211135.6344">帐号和安全
- 给机器起个有爱的名字
    Aoi Sora
    
- 创建两个常用管理员用户，zoomquiet,jeff，加入Sudoer列表。
root@li388-65:~# useradd -c "Jeff as SA" -G root,sudo --password 5t4r3e2w1q -s /bin/bash jeff
root@li388-65:~# useradd -c "Zoom.Quiet as SA" -G root,sudo --password P@55w02d -s /bin/bash zoomq
    
- 禁止Root登录，禁止密码登录，好了再问我要public_key。这是linode的潜规则，启用密码登录者总会被暴。
/etc/sudoers
%sudo ALL=(ALL) NOPASSWD:ALL
# mkdir -p /home/jeff/.ssh
# chown -R jeff:jeff /home/jeff
$ ssh-copy-id 106.187.45.65
/etc/ssh/sshd_config

Port 9022
PubkeyAuthentication yes    #运行使用公钥登录系统
PasswordAuthentication no   #禁止使用用户名和密码登录系统
PermitRootLogin no          #禁止使用root 用户登录

zoomq @ zq4wk1ubuntu in ~ 
$ ssh jeff@106.187.45.65
Permission denied (publickey).

zoomq @ zq4wk1ubuntu in ~ 
$ ssh root@106.187.45.65
Permission denied (publickey).


- 其他大妈能想到的。
apt-&gt;setuptools-&gt;pip-&gt;mercurial 失败
apt-&gt;mercurial;git;gitweb;

各种环境，及Server
- python2.6,VirtualEnv
- nginx，最新稳定版
- uwsgi，跑python应用
- phpfastcgi 
- mysql
- redis,mongoDB (好吧，备用的)

SCM
- gitosis,使用Git吧，自己Host代码
- redmine 或 trac？我推荐前者，但后者体验一下也无妨。嘿。


</t>
<t tx="zoomq.20111111090027.11954">列表
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

列表是Python中最接近数组的对象，但是它拥有一些技巧，是在C或是Pascal中的数组无法实现的.
列表是一个有序序列，任何元素可以包含或是被替换成不同的对象.
新元素添加到一个列表使用其append方法（还有一个 pop 方法，这意味着列表可以当成堆栈或是队列来用），
列表的内容可以就地被排序.
列表中的每个元素实际上是一个对象引用，就象一个数字数据变量名称是作为对一个对象的数字数据的引用.
事实上，列表可以包含任何有效的Python对象的引用. 考虑以下代码::

    &gt;&gt;&gt; import random
    &gt;&gt;&gt; alist = []
    &gt;&gt;&gt; alist.append(4)
    &gt;&gt;&gt; alist.append(55.89)
    &gt;&gt;&gt; alist.append('a short string')
    &gt;&gt;&gt; alist.append(random.random)


现在 alist 包含四个元素，一个整数，一个浮点数，一个字符串，一个Python的随机数模块的方法，
足够演示了，（我们将在import语句后更详细的讨论随机模块）.
现在我们可以检查 alist 的每个成员元素::

    &gt;&gt;&gt; alist[0]
    4
    &gt;&gt;&gt; alist[1]
    55.890000000000001
    &gt;&gt;&gt; alist[2]
    'a short string'
    &gt;&gt;&gt; alist[3]
    &lt;built-in method random of Random object at 0x00A29D28&gt;


如果我们想要一个随机数，仅需要调用alist[3](),即 random()::

    &gt;&gt;&gt; alist[3]()
    0.87358651337544713


我们可以对 alist 中的元素简单的进行赋值来变更::

    &gt;&gt;&gt; alist[2]
    'a short string'
    &gt;&gt;&gt; alist[2] = 'a better string'
    &gt;&gt;&gt; alist[2]
    'a better string'


插图  3.2, “列表对象的内部组织” 展示了在 alist 中发生了什么.

.. image:: ../_static/figs/rwip_0302.pdf.png

插图 3.2. “列表对象的内部组织”

我们可以用一个列表对象来体验Python的面向对象的基本性质,尝试在Python提示符中输入以下命令，并观察结果::

    &gt;&gt;&gt; list_name = []
    &gt;&gt;&gt; list_name.append(0)
    &gt;&gt;&gt; list_name.append(1)
    &gt;&gt;&gt; list_name
    [0, 1]
    &gt;&gt;&gt; var_one = list_name
    &gt;&gt;&gt; var_two = list_name
    &gt;&gt;&gt; var_one
    [0, 1]
    &gt;&gt;&gt; var_two
    [0, 1]
    &gt;&gt;&gt; list_name[0] = 9
    &gt;&gt;&gt; var_one
    [9, 1]
    &gt;&gt;&gt; var_two
    [9, 1]

由于名称 var_one和var_two 都指向最初列表对象,即绑定为名称 list_name的列表，
那么当list_name改变后，其内容变化其他变量名都是能“看到”的.

正如其它Python 中的对象,列表也有一系列方法.
除前述的索引方法外还有很多.列表可以依次头尾连接在一起像这样::

    &gt;&gt;&gt; alist1 = [1,2,3,4,5]
    &gt;&gt;&gt; alist2 = [6,7,8,9,10]
    &gt;&gt;&gt; alist1 + alist2
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


查找列表中指定偏移量的项，可以用 index() 方法::

    &gt;&gt;&gt; alist2.index(8)
    2


我们也可以反转列表::

    &gt;&gt;&gt; alist1.reverse()
    &gt;&gt;&gt; alist1
    [5, 4, 3, 2, 1]

同样能排序列表::

    &gt;&gt;&gt; slist = [8,22,0,5,16,99,14,-6,42,66]
    &gt;&gt;&gt; slist.sort()
    &gt;&gt;&gt; slist
    [-6, 0, 5, 8, 14, 16, 22, 42, 66, 99]


以上两个例子美妙之处在于是"就地"修订的.
一个新的对象不是创建出来的,而是列表本身直接反转或是排序了.
即,列表是可变的.
</t>
<t tx="zoomq.20111111090027.11955">字串
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

字符串是有序的字节值的字符序列.
字符串是不可改变的（不像在C或C++），意思是无法象对待数组一样使用索引来修订内容.
为了修改一个字符串，必须创建一个新的字符串对象.
不过类似列表，字符串的内容能够通过其索引引用.


这有几个字串的例子::

    &gt;&gt;&gt; astr1 = 'This is a short string.'
    &gt;&gt;&gt; astr2 = "This is another short string."
    &gt;&gt;&gt; astr3 = "This string has 'embedded' single-quote chracters."
    &gt;&gt;&gt; astr4 = """This is an example
    ... of a multi-line
    ... string.
    ... """
    &gt;&gt;&gt;

虽然不能使用一个索引值改变一个字符串的内容，
但是字串数据可以使用索引来读取，Python提供的能力来提取字符串中的特定部分
（或称为“切片“）.
其结果是一个新的字符串对象.
如下代码将读取字符串变量astr1前四个字符，从第零位到第四位(不包含第5个字符)::

    &gt;&gt;&gt; print astr1[0:4]
    This

我们也可以不写起始范围值0，Python会自动假定::

    &gt;&gt;&gt; print astr1[:4]
    This

这种形式告诉Python提取字符串从开始到第四位的所有字符.
我们还可以摄取从第四位到行尾::

    &gt;&gt;&gt; print astr1[4:]
    is a short string.


或是获取中间部分::
    &gt;&gt;&gt; print astr1[10:15]
    short


插图 3.3, “字串索引” 展示了Python 中索引怎么工作的

.. image:: ../_static/figs/rwip_0303.pdf.png

插图 3.3, “字串索引”

字串对象还包含了一系列方法，如大写,定心，统计等等,基本上都返回一个新的字符串对象.

类似列表,使用 + 运算符来连结::

    &gt;&gt;&gt; str_cat = astr1 + " " + astr2
    &gt;&gt;&gt; print str_cat
    This is a short string. This is another short string.


其结果正如所期望的现在得到一个新的字符串对象.
幸运的是，Python采用垃圾收集机制，当对象不再绑定到一个名字时，将悄悄地消失，
原先所用内存将返回到共享池以待再用.
这是一件好事，否则内存会迅速被废弃数据对象填满::

    &gt;&gt;&gt; the_string = "This is the string."
    &gt;&gt;&gt; the_string = the_string[0:4]
    &gt;&gt;&gt; the_string
    'This'

在这种情况下，最初的名称the_string绑定的对象，内容是：“This is the string.“
当一个字串对象的初始部分被拉出，一个新的对象被创建并这个名字重新分配给它.
原来的对象没有绑定后就回收.
然而，如果一个对象有两个或多个名称共享，只要还有名称在绑定,就不会被回收.
这样在程序生命期间对象总是可以使用.

字符串有方法允许你到左或右对齐字符串，替换字符串中的一个字，或转换为字符串中的字符的大小写.
下面是一些例子:

upper() 方法,转换所有字符为大写::

    &gt;&gt;&gt; print astr1.upper()
    THIS IS A SHORT STRING.


find() 返回第一次匹配搜索模式的字串索引::

    &gt;&gt;&gt; print astr1.find('string')
    16

replace() 方法根据搜索模式生成完成替换后的新字串::

    &gt;&gt;&gt; print astr1.replace('string', 'line')
    This is a short line.

rjust() 方法
（及其对应的，ljust（））将一个字串重整为指定宽度的新字串::

    &gt;&gt;&gt; print astr1.rjust(30)
    This is a short string.

默认的填充字符是空格,但是可以在第二参数中指定一个特殊字符作为填充::

    &gt;&gt;&gt; print astr1.rjust(30,'.')
    .......This is a short string.

在Python 指示符环境中,可以通过输入help(str)获知所有字串支持的操作
</t>
<t tx="zoomq.20111111090027.11956">元组 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
元组是一种有趣的数据对象.
类似列表它是一个有序集可以包含零个或多个项目，但它是不可改变的.
元组一旦创建就不能直接修改.
元组通常由所包含的项目数来提及.
例如，一个2元组，如您所料，包含两个数据对象.
一个对任何规模的元组都适用的速记法是“n元组”
Python 中"0元组"是允许的，虽然不怎么有趣和有用，但也许可以作为一个占位符.


Python中列表用方括号作分界符，元组使用括号::

    &gt;&gt;&gt; tuple2 = (1,2)
    &gt;&gt;&gt; tuple2
    (1, 2)

元组的内容可以通过索引读取,这点和列表和字串相同::

    &gt;&gt;&gt; tuple4 = (9, 22.5, 0x16, 0)
    &gt;&gt;&gt; tuple4
    (9, 22.5, 22, 0)
    &gt;&gt;&gt; tuple4[2]
    22
    &gt;&gt;&gt; tuple4[0]
    9


类似列表和字串,元组可以合并(通过创建了新元组)::

    &gt;&gt;&gt; tuple2
    (1, 2)
    &gt;&gt;&gt; tuple4
    (9, 22.5, 22, 0)
    &gt;&gt;&gt; tuple6 = tuple2 + tuple4
    &gt;&gt;&gt; tuple6
    (1, 2, 9, 22.5, 22, 0)

如上,可见我们创建了一个新元组.

一个元组不能进行排序，但它可以被统计在内。
想了解元组包含多少特定值对象时，我们可以使用count（）方法::

    &gt;&gt;&gt; tpl = (0, 0, 2, 2, 6, 0, 3, 2, 1, 0)
    &gt;&gt;&gt; tpl.count(0)
    4
    &gt;&gt;&gt; tpl.count(2)
    3
    &gt;&gt;&gt; tpl.count(6)
    1

因为元组的每个内容项实际上是对象的引用，所以元组可以包含任意组合的有效Python对象,这点和列表相同.


</t>
<t tx="zoomq.20111125085606.5232">----
Installed Go for linux/amd64 in /opt/_src/go.
Installed commands in /opt/_src/go/bin.
*** You need to add /opt/_src/go/bin to your $PATH. ***
The compiler is 6g.

</t>
<t tx="zoomq.20111130170058.3742">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vancl-uri2karait.py v11.11.30"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vancl-uri2karait.py host port 
                 |                   |    +- 端口
                 |                   +- 主机
                 +- 指向脚本自身
e.g:
$ python vancl-uri2karai.py proxy7f 9007
        """ % VERSION
    else:
        RHOST = sys.argv[1]
        RPORT = sys.argv[2]
        #CCFG.LOG.info("usage redis as:%s:%s db %s"% (RHOST, RPORT, RDB))
        loadalluri(RHOST, RPORT)

</t>
<t tx="zoomq.20111130170058.3743">'''vancl 's doc's uri as task flush into MQ:
    - 单进单线,批量刷新所有独立产品uri 到 Karait 创建的 Mongo 仓库中,形成任务队列
依赖:
    + Karait
    + fadpop.common.fadutil
'''
</t>
<t tx="zoomq.20111130170058.3744">#import os
import sys
import time
#import fnmatch
#from copy import deepcopy as copy
#import subprocess
import traceback
#import logging
#import hashlib

#import Image
#import redis
from karait import Message, Queue

#import PyMongo
#from pymongo import Connection
#from pymongo import errors as ERR
#import gridfs
#from mongolog.handlers import MongoHandler

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG

</t>
<t tx="zoomq.20111130170058.3745">def loadalluri(rhost, rport):
    queue = Queue(
        host=rhost, # MongoDB host. Defaults to localhost.
        port=int(rport), # MongoDB port. Defaults to 27017.
        database='karait', # Database that will store the karait queue. Defaults to karait.
        queue='messages', # The capped collection that karait writes to. Defaults to messages.
        average_message_size=1024, # How big do you expect the messages will be in bytes? Defaults to 8192.
        queue_size=102400 # How many messages should be allowed in the queue. Defaults to 4096.
    )
    msg_written = 1
    start = time.time()
    for goods in CCFG.FAD.find(fields={'_id':0, 'sid':1}):
        #print goods
        if 0 == CCFG.CONNFAD['karait']['messages'].find({'name':goods['sid']}).count():
            try:
                queue.write({'sid': goods['sid']
                    ,'sender': VERSION
                    ,'msg_written': msg_written
                    ,'msg_written_per_ms': "%.5f"% ((time.time() - start)*1000/msg_written)
        
                }, routing_key='for_vancl')
            except:
                print "loadalluri() BROKENNN!\n\t", traceback.print_exc()
                continue
            msg_written += 1
    
    print "karait.messages count=", CCFG.CONNFAD['karait']['messages'].count()
    


</t>
<t tx="zoomq.20111201085740.3772">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "vancl-up-info.py v11.10.13"

&lt;&lt;imports&gt;&gt;
TPL4URI = "http://item.vancl.com/%s.html"
TPL4IMG = "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s"
GRASPJS = '/data/apps/fadpop/spider/graspage.js'
PHANTOMJS = "/usr/local/bin/phantomjs"

@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python /path/2/vancl-uri-flush.py host port db
                 |                   |    |    +- db序号
                 |                   |    +- 端口
                 |                   +- 主机
                 +- 指向脚本自身
e.g:
$ python vancl-up-info.py py.kingsoft.net 9079 0
$ python vancl-up-info.py 127.0.0.1 6379 0
        """ % VERSION
    else:
        RHOST = sys.argv[1]
        RPORT = sys.argv[2]
        RDB = sys.argv[3]
        #CCFG.LOG.info("usage redis as:%s:%s db %s"% (RHOST, RPORT, RDB))
        upgradbyuri(RHOST, RPORT, RDB)

</t>
<t tx="zoomq.20111201085740.3773">'''vancl 's doc's all info upgrade:
    - 单进单线,从MQ 中逐一获取URI 进行文档更新

依赖:
    + Karait
    + fadpop.common.fadutil
'''

</t>
<t tx="zoomq.20111201085740.3774">import os
import sys
import time
#import fnmatch
from copy import deepcopy as copy
#import subprocess
import traceback
#import logging
import hashlib
import urllib2
#import Image
import redis

from pyquery import PyQuery as pq

# import fadpop as mod for common
sys.path.append('/data/apps/')
#print sys.path.__repr__()
from fadpop.common.fadutil import CCFG, _up4img2gfs, __popen




</t>
<t tx="zoomq.20111201085740.3775">def upgradbyuri(rhost, rport, rdbid):
    '''利用双 set 进行队列任务管理,逐一将有效产品uri 进行自动抓取和内容更新
    tstamp = ('%.3f'% time.time()).replace(".",'')
    rd.zadd('working',score=tstamp,value='0127358')
    rd.zremrangebyscore('working',0,'1318405618802')
    In [124]: if rd.zrank('working','0127349'): print 1
    .....: else: print 0
    rd.zremrangebyscore('working','-inf','1318406572643')
    '''
    rdb = redis.Redis(host=rhost, port=int(rport), db=int(rdbid))
    loop = 0
    #while 2 &gt; loop:
    while 1:
        #loop += 1
        sid = rdb.srandmember('vcsid')
        if sid:
            #if rdb.sismember('working', sid):
            if rdb.zrank('working', sid):
                # other processes working...
                print "other processes working %s"% sid
                continue
            else:
                #rdb.sadd('working', sid)
                tstamp = ('%.3f'% time.time()).replace(".",'')
                rdb.zadd('working', sid, tstamp)
                @others
                rdb.zrem('working', sid)
                rdb.srem('vcsid', sid)
        else:
            break
    print "Set:uri", rdb.scard('vcsid')
    print "Set:working", rdb.zcard('working')
    '''
r.set('uri','http://1.1.4')
In [52]: r.sadd('uri','http://1.1.4')
Out[52]: False
r.sismember('uri','http://1.1.4')
r.scard('uri')
r.spop('uri')
In [58]: r.srandmember('uri')
Out[58]: 'http://1.1.4'

    '''


</t>
<t tx="zoomq.20111201085740.3776">print "up htm BASE: %s"% (TPL4URI%sid)
qhtm = pq(urllib2.urlopen(TPL4URI% sid).read(),parser='html')
_updateitem(qhtm, sid)
print "dl pic BASE: %s"% (TPL4IMG% sid)
qhtm = pq(urllib2.urlopen(TPL4IMG% sid).read(), parser='html')
pagepics = _anabigpicnames(qhtm, sid)
#   print hashlib.sha224(TPL4IMG% sid).hexdigest()
_loadpics(pagepics)

#   urllib2.urlopen(TPL4IMG% sid).read()
#print "up shine BASE: %s"% (TPL4URI%sid)
#SNAPJS = '%s %s %s'% (PHANTOMJS, GRASPJS, TPL4URI% sid)
#print SNAPJS
#liserr, strerr, lisout, strout = __popen(SNAPJS)
#   print strout
#_up_shining(strout, sid)






</t>
<t tx="zoomq.20111201085740.3777">def _up_shining(jsout, sid):
    fotoinfo = CCFG.DOC_FOTO.copy()
    tmproot = CCFG.SHM

    &lt;&lt;晒单更新&gt;&gt;

    &lt;&lt;详细图片&gt;&gt;




</t>
<t tx="zoomq.20111201085740.3778"># for shinning goods;
shinning = {}
shinning['bask'] = []

htm = pq(jsout, parser='html')

for bask in htm('.bask-div-left').find('a'):
    print 'http:%s'% bask.get('href')
    shinr = 'http:%s'% bask.get('href')
    basks = {}
    basks['uri'] = shinr
    ex = pq(url=shinr)
    basks['name'] = ex('.other_zhankai').text().split()[1]
    basks['title'] = ex('.show_title').attr('title')
    desc = ex('.dapei_xiangqing').find('p').text()
    if None == desc:
        desc = ""
    basks['cont'] = desc
    basks['foto'] = []
    for img in ex('.jcarousel-skin-slide').find('img'):
        small = img.get('src')
        fotoname = __urlopen_load_img(fotoinfo, 'thumb', small)
        if fotoname:
            basks['foto'].append(fotoname)

        norma = img.get('ref')
        fotoname = __urlopen_load_img(fotoinfo, 'mid', norma)
        if fotoname:
            basks['foto'].append(fotoname)

    #print basks
    shinning['bask'].append(basks)
shinning['total'] = len(shinning['bask'])
#print shinning
CCFG.FAD.update({'sid':sid}, {"$set":{'comments.shiner':shinning}})


</t>
<t tx="zoomq.20111201085740.3779"># for exp. goods foto load;
attrs_fotos = CCFG.FAD.find_one({'sid':sid}, {'_id':0, 'attrs.fotos':1})
attrs_fotos_uri = []
for foto in attrs_fotos['attrs']['fotos']:
    gfsuri = CCFG.FSFILE.find({'filename':foto}, {'_id':0, 'uri':1})[0]
    attrs_fotos_uri.append(gfsuri['uri'])

for img in htm.find('img'):
    expic = img.get('original')
    if None == expic:
        pass
    else:
        if expic in attrs_fotos_uri:
            pass
        else:
            print expic
            fotoname = __urlopen_load_img(fotoinfo, 'big', expic)
            if fotoname:
                attrs_fotos['attrs']['fotos'].append(fotoname)

CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':attrs_fotos['attrs']['fotos']}})


</t>
<t tx="zoomq.20111201085740.3780">def __urlopen_load_img(fotoinfo, showas, uri):
    fotoinfo['uri'] = uri
    fotoinfo['imgtype'] = uri.split('.')[-1]
    if "?t=" in fotoinfo['imgtype']:
        fotoinfo['imgtype'] = fotoinfo['imgtype'].split('?')[:1]
    fotoinfo['showas'] = showas

    tmproot = CCFG.SHM
    tmpname = hashlib.sha224(fotoinfo['uri']).hexdigest()
    imgtype = fotoinfo['imgtype']
    tmpic = "%(tmproot)s/%(tmpname)s.%(imgtype)s"% locals()
    try:
        open(tmpic,'wb').write(urllib2.urlopen(fotoinfo['uri']).read())
        print "%s&gt;&gt;\t"% showas, tmpic

        fotoname = _up4img2gfs(tmpic, fotoinfo)
        os.remove(tmpic)

        return fotoname
    except:
        print "__urlopen_load_img() BROKENNN!\n\t", traceback.print_exc()
        return None



</t>
<t tx="zoomq.20111201085740.3781">def _loadpics(pagepics):
    '''base dict info,download pic into. CCFG.SHM as tmp files and push into GridFS
    '''
    total = 0
    tmproot = CCFG.SHM
    for sid in pagepics.keys():
        try:
            for foto in pagepics[sid]:
                dirurl = "/".join(sid[:3])
                asize = CCFG.FOTO_SIZE[foto['showas']]  # 翻译TMD实际目录
                filename = foto['filename']
                imgtype = foto['imgtype']
                tmpname = hashlib.sha224(TPL4IMG% sid).hexdigest()
                realpic = "%(tmproot)s/%(tmpname)s.%(imgtype)s"% locals()
                #print sid, foto['uri'], realpic
                open(realpic,'wb').write(urllib2.urlopen(foto['uri']).read())
                @others
                os.remove(realpic)
                total += 1
        except :
            print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
            #sys.exit(1)
            continue
        print "\n\t &gt;&gt;&gt; %s fotos loaded !&lt;&lt;&lt;\n"% total
</t>
<t tx="zoomq.20111201085740.3782">try:
    this_item = CCFG.FAD.find({'sid':sid})
    fotoid =  _up4img2gfs(realpic, foto)
    if fotoid:
        fotos = this_item[0]['attrs']['fotos']
        if fotoid in fotos:
            print fotoid, "\t atta.ed inthe sid::", sid
            pass
        else:
            fotos.append(fotoid)
            CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
    else:
        # wget is not completed!
        continue
except :
    print "_loadpics() BROKENNN!\n\t", traceback.print_exc()
    #sys.exit(1)
    continue


</t>
<t tx="zoomq.20111201085740.3783">def _updateitem(htm, sid):
    if htm('#saleout').attr('href'):
        # 已售罄
        &lt;&lt;放空价格&gt;&gt;
    else:
        &lt;&lt;价格抓取&gt;&gt;

    &lt;&lt;bread_nav&gt;&gt;
    &lt;&lt;attrs_wash&gt;&gt;
    &lt;&lt;attrs_color&gt;&gt;
    &lt;&lt;comments_unit&gt;&gt;
    &lt;&lt;comments_size&gt;&gt;
    &lt;&lt;comments_feel&gt;&gt;
    &lt;&lt;comments_taker_comment&gt;&gt;

    CCFG.FAD.update({'sid':sid}, {"$set":{'attrs.class':bread_nav
                , 'attrs.wash':attrs_wash
                , 'attrs.color':attrs_color
                , 'comments.unit':comments_unit
                , 'comments.noma':comments_noma
                , 'comments.bask':comments_bask
                , 'comments.size':comments_size
                , 'comments.feel':comments_feel
                , 'comments.taker.total':comments_taker_total
                , 'comments.taker.totalask':comments_taker_totalask
                , 'comments.taker.comment':comments_taker_comment
                , 'comments.taker.ask':comments_taker_ask
                }
            }
        )

</t>
<t tx="zoomq.20111201085740.3784">prix = "saleout"
CCFG.FAD.update({'sid':sid}, {"$set":{'prix':prix}})


</t>
<t tx="zoomq.20111201085740.3785">prix_agio = htm('.MSpriceArea').find('strong').text()
prix_vip = htm('.cuxiaoPrice').find('strong').text()
prix_vip += ","
prix_vip += ",".join([vip_rice.text_content() for vip_rice in htm('.vipPrice').find('span')[1:]])
CCFG.FAD.update({'sid':sid}, {"$set":{'agio':prix_agio, 'vip':prix_vip}})
</t>
<t tx="zoomq.20111201085740.3786">bread_nav = []
for bread in htm('.breadNav').find('a'):
    bread_nav.append(bread.get('title'))


</t>
<t tx="zoomq.20111201085740.3787">attrs_wash = {}
for attricon in htm('.attricon'):
    icon = attricon.find('img')
    iconkey = icon.get('src').split("/")[-1].split(".")[0]
    attrs_wash[iconkey] = icon.get('alt')
</t>
<t tx="zoomq.20111201085740.3788">attrs_color_id = []
for color in htm('.selColor').find('li'):
    if color.get('name'):
        sid_color = color.get('name').split("&amp;")[0].split("=")[1]
        if sid == sid_color:
            pass
        else:
            attrs_color_id.append(sid_color) 
attrs_color = []
for relsid in attrs_color_id:
    cursor_item = CCFG.FAD.find({'sid':relsid})
    if 0 &lt; cursor_item.count():
        # NULL relation collors
        attrs_color.append(cursor_item[0]["_id"])

</t>
<t tx="zoomq.20111201085740.3789">try:
    pingfen = htm('.pingfen').find('li').text().split()
    comments_unit = pingfen[:6]
    comments_noma = pingfen[6:-6]
    comments_bask = pingfen[-6:]
except:
    print "还没有人打分!\n\t", traceback.print_exc()
    comments_unit = ""
    comments_noma = ""
    comments_bask = ""
</t>
<t tx="zoomq.20111201085740.3790">comments_size = htm('.sizePingjia').find('li').text()
</t>
<t tx="zoomq.20111201085740.3791">comments_feel =  htm('.voteArea').find('p').text()

</t>
<t tx="zoomq.20111201085740.3792">for tabmenu in htm('.RsetTabMenu').find('li'):
    if "item-buyfeedback" == tabmenu.get('name'):
        comments_taker_total = tabmenu.text_content().split("(")[1][:-1]
    if "item-quiz" == tabmenu.get('name'):
        comments_taker_totalask = tabmenu.text_content().split("(")[1][:-1]

&lt;&lt;comments_taker_ask&gt;&gt;
&lt;&lt;comments_taker_comm&gt;&gt;


</t>
<t tx="zoomq.20111201085740.3793">comments_taker_comment = []
for urcomment in htm('#styleAssesseslist').find('div'):
    askuser = urcomment.find_class('area2Head')
    if len(askuser) &gt; 0:
        comments_taker_comment_name = askuser[0].find_class('area2HeadCenter')[0].text_content().strip()[3:]
        comments_taker_comment_title = askuser[0].find_class('area2HeadLeft')[0].text_content().strip()
        comments_taker_comment_date = askuser[0].find_class('area2HeadRight')[0].text_content().strip()
    askcnt = urcomment.find_class('area2ConP')
    if len(askcnt) &gt; 0:
        comments_taker_comment_cont = askcnt[0].text_content().strip()
    else:
        comments_taker_comment_cont = ''

    askhold = urcomment.find_class('selCS')
    if len(askhold) &gt; 0:
        userhold = "".join(askhold[0].text_content().replace('\r','').split("\n")[2:])
    else:
        userhold = ""

    comments_taker_comment.append({'data':comments_taker_comment_date
            , 'name':comments_taker_comment_name
            , 'title':comments_taker_comment_title
            , 'issue':comments_taker_comment_cont 
            , 'userhold':userhold
            }
        )
</t>
<t tx="zoomq.20111201085740.3794">comments_taker_ask = []
for question in htm('#stylequestionslist').find('.area3Con'):
    userq = question.findall('div')[:2]
    userqa = userq[0].text_content().replace('\r','').strip().split("\n")
    comments_taker_ask_name = userqa[0].strip()
    comments_taker_ask_title = userqa[1].strip()[2:]
    comments_taker_ask_date = userqa[-1].strip()
    comments_taker_ask_issue = userq[1].text_content().strip()
    comments_taker_ask_reply = question.find_class('adminAsk')[0].text_content().strip()
    comments_taker_ask.append({'data':comments_taker_ask_date
            , 'name':comments_taker_ask_name
            , 'title':comments_taker_ask_title
            , 'issue':comments_taker_ask_issue 
            , 'reply':comments_taker_ask_reply
            }
        )

</t>
<t tx="zoomq.20111201085740.3795">def _anabigpicnames(pathml, sid):
    dirurl = "/".join(sid[:3])
    d = pathml
    ibgpics = {}
    ibgpics[sid] = []
    @others
    return ibgpics
    #output = open('110713_nvzhuang_all_bigpic.pkl', 'wb')
    #pickle.dump(ibgpics, output)
    #output.close

</t>
<t tx="zoomq.20111201085740.3796">foto = d('#large').find('img').attr('src').split("/")[-1]
print CCFG.TPL_VANCL_BFOTO % locals()
#print CCFG.TPL_VANCL_MFOTO % locals()
#print CCFG.TPL_VANCL_SFOTO % locals()
bfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_BFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"big"       # thumb|mid|big
        , "asmain":True    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(bfoto_big)
sfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_MFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"thumb"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(sfoto_big)
mfoto_big = {                # 图片
        "uri":CCFG.TPL_VANCL_SFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"mid"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(mfoto_big)
</t>
<t tx="zoomq.20111201085740.3797">for foto in d('#thumbnail').find('img'):
    #print foto.get('src').split("/")[-1]   #.base_url()
    foto = foto.get('src').split("/")[-1]
    print CCFG.TPL_VANCL_BFOTO % locals()
    #print CCFG.TPL_VANCL_MFOTO % locals()
    #print CCFG.TPL_VANCL_SFOTO % locals()
    bfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_BFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"big"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(bfoto_big)
    sfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_MFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"thumb"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(sfoto_big)
    mfoto_big = {                # 图片
            "uri":CCFG.TPL_VANCL_SFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"mid"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(mfoto_big)


</t>
<t tx="zoomq.20111201085740.5303">class KillThread(threading.Thread):
    """A subclass of threading.Thread, with a kill()method.
    Come from:  Kill a thread in Python: 
    http://mail.python.org/pipermail/python-list/2004-May/260937.html
    """
    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        self.killed = False

    def start(self):
        """Start the thread."""
        self.__run_backup = self.run
        self.run = self.__run      # Force the Thread to install our trace.
        threading.Thread.start(self)

    def __run(self):
        """Hacked run function, which installs the
        trace."""
        sys.settrace(self.globaltrace)
        self.__run_backup()
        self.run = self.__run_backup

    def globaltrace(self, frame, why, arg):
        if why == 'call':
          return self.localtrace
        else:
          return None

    def localtrace(self, frame, why, arg):
        if self.killed:
          if why == 'line':
            raise SystemExit()
        return self.localtrace

    def kill(self):
        self.killed = True</t>
<t tx="zoomq.20111201085740.5304">class Timeout(Exception):
    """function run timeout"""
    
def timeout(seconds):
    """超时装饰器，指定超时时间
    若被装饰的方法在指定的时间内未返回，则抛出Timeout异常
    base: http://www.cnblogs.com/fengmk2/archive/2008/08/30/python_tips_timeout_decorator.html
    """
    def timeout_decorator(func):
        """真正的装饰器"""
        
        def _new_func(oldfunc, result, oldfunc_args, oldfunc_kwargs):
            result.append(oldfunc(*oldfunc_args, **oldfunc_kwargs))
        
        def _(*args, **kwargs):
            result = []
            # create new args for _new_func, because we want to get the func return val to result list
            new_kwargs = { 
                'oldfunc': func,
                'result': result,
                'oldfunc_args': args,
                'oldfunc_kwargs': kwargs
            }
            thd = KillThread(target=_new_func, args=(), kwargs=new_kwargs)
            thd.start()
            thd.join(seconds)
            alive = thd.isAlive()
            thd.kill() # kill the child thread
            if alive:
                raise Timeout(u'function run too long, timeout %d seconds.' % seconds)
            else:
                return result[0]
        _.__name__ = func.__name__
        _.__doc__ = func.__doc__
        return _
    return timeout_decorator</t>
<t tx="zoomq.20111201085740.5306">@timeout(13)
def __download_img(tempic,uri):
    open(tempic,'wb').write(urllib2.urlopen(uri).read())
    #print "%s&gt;&gt;\t"% tempic
    return None


</t>
<t tx="zoomq.20111207090549.3805">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
111101,4.50,1.75,0.50,7.00,4.50,7.00    5, 1, 4, 5
111102,5.75,2.00,1.00,1.50,4.00,6.00    5, 1, 3, 5
111103,1.00,3.75,7.25,4.00,1.00,7.00    5, 1, 3, 6
111104,1.50,4.25,2.00,7.00,6.00,7.00    5, 1, 3, 5
111107,0.00,3.00,1.50,6.50,5.00,6.00    5, 2, 2, 6
111108,2.50,4.00,2.00,4.00,4.00,7.00    5, 1, 3, 6
111110,3.50,4.00,0.75,5.00,4.50,7.00    5, 3, 2, 3
111111,1.25,4.75,0.50,6.00,4.75,6.50    6, 3, 2, 3
111114,1.50,4.25,0.00,5.25,4.00,6.00    6, 1, 3, 6
111115,3.75,2.75,1.50,5.00,5.00,7.00    6, 1, 4, 8
111116,1.75,1.00,0.50,7.50,4.00,7.00    6, 2, 2, 4
111117,0.00,1.50,6.50,7.50,1.00,7.50    6, 2, 2, 4
111118,0.00,2.75,1.00,4.50,5.00,7.00    6, 3, 1, 4
111121,1.00,2.50,0.00,9.75,4.50,7.00    6, 3, 1, 4
111122,1.00,2.75,0.00,9.00,4.00,7.00    6, 4, 0, 3
111123,0.00,5.75,0.00,7.50,4.50,6.00    6, 4, 0, 3
111124,0.00,3.50,2.50,8.00,1.50,6.50    6, 3, 1, 4
111125,0.00,4.00,1.50,6.00,4.00,7.00    6, 3, 1, 4
111128,0.00,4.50,1.50,6.50,5.00,7.00    6, 3, 1, 3
111129,1.00,3.00,1.00,5.00,6.50,7.00    6, 3, 1, 3
111130,1.50,3.00,0.00,7.25,5.00,6.50    6, 4, 0, 3



</t>
<t tx="zoomq.20111207090549.5311">移动技术专场:
    正点，罗志城 Symbain开发体验
    金山, ZQ PyCon2011China 回顾
    金山, 白银祖 移动测试
    罗新良 redis 在移动开发
    
[TechParty]111218珠海场移动专题沙龙召集

zjbok2001@163.com,descusr@163.com,iamyugj@sina.com,ben.upsilon@gmail.com,yahier@163.com,guoqing.kong@gmail.com,iron826@gmail.com,michael2008s@gmail.com,wangsenyo@gmail.com,lzsoft.ch@gmail.com,cnliusheng@gmail.com,wujiaxin0@126.com,3369688@QQ.COM,luozhicheng@zdworks.com,taoshaoning@zdworks.com,dior168@hotmail.com,xiaoyaoygs@yahoo.com.cn,yuejian_luo@zhwyd.com,bugsnotes@gmail.com,zcnet4@gmail.com,csilc@qq.com,luyunfei@ijinshan.com ,eddy.lin.dev@gmail.com,zhanglu1@kingsoft.com,wencong@seasungame.com,gz.anson@gmail.com,liaoquanhui@kingsoft.com,303964410@qq.com,zoomquiet+salon@gmail.com

金山网络.珠三角技术沙龙珠海场111023移动专题小结 已经发布:
    http://techparty.org/2011/10/25/111023-zh-mobile-record/
这次沙龙在潘达咖啡的欢乐举办是所有参与者共同努力的成果,
特此通告大家来审阅,ZQ 的无责任记要是否有问题:
    - 内容有任何不实,不合理的,请及时反馈,俺立即修订 
    - 内容有任何想增补的,也请及时反馈,俺立即增订,特别是照片/感想什么的
    zoomquiet+techparty@gmail.com
    
并提醒大家现场倡议的作業哈:
    你愿意来分享什么?!

表扬"新良"同学,已经预订了下个月来发布COOL 作品哈!

本期沙龙,提出了:"生活的移动互联" 命题,那未,增高生活品味的各种主题,将在
珠三角技术沙龙珠海场 确立为常设主题,也请大家推荐相关领域达人来给程序猿们展示生活的魅力!

再次感谢大家的参与,请继续积极参加11月的 珠三角技术沙龙珠海场 (^.^)

PS:
进一步的交流,推荐订阅: 珠三角技术沙龙（http://techparty.org）列表
　　要向此列表发言,请先订阅:发送空白邮件到 guangzhou-tech-party+subscribe@googlegroups.com
　　要取消订阅此列表的订阅: 发送空白邮件到 guangzhou-tech-party+unsubscribe@googlegroups.com
　　若有更多问题，请访问 http://techparty.org/about/

</t>
<t tx="zoomq.20111216202429.3806">#   111216 MACAU 15708 MOP 入手!

111218 +1 XCode 4 安装完成

Zq s MBP:            
    for livin:
        - BXM+香草
        - Chrome/Firefox/OOo
            - FEBE
            - 恢复备份
            - ScrapBook
        - mocp
        - mplayer
        - picasa / Simple Comic
        - #pidgin ! 恢复聊天记录...
    for working:
        - 工作数据
        - SSH/tumx
        - macports
        - geditor/...
        - gnome-commander/MuCommander
        - VBox
        - 版本管理:
            + svn
            + hg
            + git
        - 开发环境:
            + py
            + pip
            + leo
            + ...

</t>
<t tx="zoomq.20111220092312.3808">香草己死!
https://github.com/ZoomQuiet/ZqBXM

自定词组?
</t>
<t tx="zoomq.20111220092312.5316">http://themainframe.ca/2011/06/29/install-htop-on-mac-os-x/

    curl -O http://themainframe.ca/wp-content/uploads/2011/06/htop.zip
    unzip htop.zip
    sudo mv htop /bin
    rm htop.zip </t>
<t tx="zoomq.20111222084842.3812">真心回想一下现在舒爽的工作环境是怎么样的,才好迁移到 MAC 中来:
    - 输入是 HHKB+WACOM BAMBOO
    - bash 进行高度定制:
        + hg 自动提示
        + 颜色
        + 分行
        + hosts 
        + 各种常用工具命令化
    - FireFox+Scrapbook 进行收集/整理/查阅
    - Zim 随手记要日志和各种信息片段 组织成维基
    - Leo 进行开发组织
    - Py + 各种 Unix 工具进行输出:
        - Graphviz 进行图谱制作
        - Sphinx 进行图书编辑
        - iPython 进行代码实验
        - PyBlosxom 进行日志撰写
        ...
    - Pidgin 进行 MSN+Gtalk
    - MOC 进行 terminal music
    - mplayer 播放所有视频
    - GNOME Commander 进行文件管理:
        - 双窗口
        - 有指令条,可以随时 cd ~
        - Ctrl+P 获取当前路径
        - Shift+Ctrl+Enter 获取指定文件的绝对路径
        - F5 从来源窗口复制到目标窗口
        - F6 从来源窗口移动到目标窗口
        ...
    </t>
<t tx="zoomq.20111226091956.3810">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) bookID(e.g 002) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://251.99770.com:9977/ok-comic06/c/cyjd_771/%03d/%03d.jpg\n"
        bookName = sys.argv[1]
        bookId = sys.argv[2]
        maxPage = sys.argv[3]
        genUrlist(urlmark,bookName,bookId,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20111226091956.3813">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://tulaoya.cn/photo/x1/%03d.jpg\n"
        bookName = sys.argv[1]
        maxPage = sys.argv[2]
        genUrlist(urlmark,bookName,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20111227090820.3814">
==&gt; Caveats
Run `cabal update` to initialize the package list.

If you are replacing a previous version of haskell-platform, you may want
to unregister packages belonging to the old version. You can find broken
packages using:
  ghc-pkg check --simple-output
You can uninstall them using:
  ghc-pkg check --simple-output | xargs -n 1 ghc-pkg unregister --force
==&gt; Summary
/usr/local/Cellar/haskell-platform/2011.4.0.0: 1967 files, 146M, built in 26.0 minutes</t>
<t tx="zoomq.20111227095408.9246">re cfg:
    - cp leo/config/leoSettings.leo -&gt; ~/.leo/myLeoSettings.leo
    - font and color
    /Users/zoomq/.leo/myLeoSettings.leo#Candidates for settings in myLeoSettings.leo--&gt;Appearance--&gt;@data qt-gui-plugin-style-sheet
    fc-list choise fonts
    
    
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Window--&gt;@string initial_split_orientation = vertical -&gt; horizontal
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Window--&gt;Options for new windows--&gt;@strings[vertical,horizontal] initial_splitter_orientation = vertical -&gt; horizontal
    
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings
    clone-node                  = Ctrl-'    #Ctrl-`
    
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings--&gt;@shortcuts File commands
        close-window                = Ctrl-w #Alt-F4
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings--&gt;@shortcuts Cursor Moves
        extend-to-word                      =  Alt-W #Ctrl-W #
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings--&gt;@shortcuts Menu commands
        #propagate-key-event = Alt-W
    
    
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings--&gt;@shortcuts Outline operations
        edit-headline               = Ctrl-Alt-h    #Ctrl-h
    
    
    /Users/zoomq/.leo/myLeoSettings.leo#@settings--&gt;Keyboard shortcuts--&gt;@keys EKR bindings--&gt;@shortcuts Find commands
    
    #toggle-find-mark-changes-option     = Alt-Ctrl-c
    #toggle-find-regex-option            = Alt-Ctrl-x
    
    </t>
<t tx="zoomq.20111227150925.3818">
Mac OS X already provides this program and installing another version in
parallel can cause all kinds of trouble.

A few software packages require this newer version of libiconv.
Please use this dependency very sparingly.

Generally there are no consequences of this for you.
If you build your own software and it requires this formula, you'll need
to add its lib &amp; include paths to your build variables:

    LDFLAGS  -L/usr/local/Cellar/libiconv/1.14/lib
    CPPFLAGS -I/usr/local/Cellar/libiconv/1.14/include
==&gt; Summary
/usr/local/Cellar/libiconv/1.14: 25 files, 1.4M, built in 32 seconds


</t>
<t tx="zoomq.20111230163611.3820">as got git:

git config --global user.name "Zoom.Quiet"
git config --global user.email "zoomquiet+git@gmail.com"

sudo git config --system alias.ci commit
sudo git config --system alias.co checkout
sudo git config --system alias.st status
sudo git config --system alias.br branch
sudo git config --system alias.pl pull
sudo git config --system alias.pu push
sudo git config --system alias.cfg config</t>
<t tx="zoomq.20111231140207.5336">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
111201,0.00,6.00,0.75,5.25,5.00,7.00    6, 1, 3, 8
111207,1.00,3.25,1.00,5.75,5.50,6.00    6, 0, 4, 6
111208,1.50,3.00,1.75,5.00,6.50,6.00    5, 0, 4, 5
111209,1.50,0.00,1.00,5.00,9.00,7.00    5, 0, 4, 5
111212,3.00,5.25,0.00,6.25,4.00,7.00    5, 0, 4, 5
111213,0.00,2.50,1.00,8.00,7.50,7.50    6, 1, 4, 5
111214,0.00,0.00,0.00,13.5,4.50,6.00    6, 1, 4, 5
111215,3.50,3.25,4.25,6.75,5.00,6.00    6, 2, 3, 4
111219,4.75,3.50,1.50,2.50,4.50,6.00    6, 0, 5, 6
111220,1.00,4.75,5.00,3.00,5.50,5.50    6, 0, 5, 6
111221,3.00,4.00,1.00,5.00,4.50,5.00    6, 1, 4, 0
111222,4.50,0.00,4.00,5.00,1.00,7.00    6, 1, 3, 3
111223,1.00,5.75,1.00,5.50,5.50,7.00    6, 2, 2, 6
111226,1.25,1.75,2.00,3.50,8.00,6.00    6, 0, 5, 6
111227,2.50,2.00,1.25,6.00,1.50,4.00    6, 1, 4, 10
111228,2.50,3.50,0.00,6.50,4.00,8.00    6, 1, 4, 8
111229,1.00,4.25,3.00,6.75,1.00,7.00    6, 1, 4, 9
111230,3.00,2.50,0.50,6.00,3.50,7.00    6, 1, 3, 5
111231,6.50,0.00,0.50,5.00,5.00,7.00    6, 2, 2, 7


</t>
<t tx="zoomq.20120203163410.3818">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120104,0.00,2.50,0.00,8.50,5.00,7.00    6, 2, 2, 4
120105,2.00,2.50,0.00,5.00,6.50,7.00    6, 3, 1, 4
120106,2.25,1.00,1.50,5.75,6.00,7.00    6, 2, 2, 4
120109,0.00,3.25,0.75,2.50,5.00,7.00    6, 2, 2, 4
120110,2.25,4.00,0.00,6.75,5.00,6.00    6, 3, 1, 8
120111,2.00,2.50,1.25,7.00,4.00,6.00    6, 3, 1, 2
120112,0.75,1.75,2.00,11.75,1.00,7.0    6, 0, 4, 6
120113,0.00,1.00,3.00,11.5,1.00,7.00    6, 0, 4, 6
120116,2.00,1.00,6.00,7.00,1.00,7.00    6, 0, 3, 6
120117,0.50,4.00,0.00,7.00,5.00,7.00    6, 2, 1, 3
120118,0.00,3.25,7.00,3.75,1.00,7.00    6, 2, 1, 7
120119,2.00 4.25,0.00,5.75,4.50,7.00    6, 1, 2, 8
120130,1.00,3.00,3.75,3.00,5.75,7.00    6, 0, 4, 6
120131,0.50,2.50,3.00,4.50,5.00,9.00    6, 2, 2, 3
</t>
<t tx="zoomq.20120305142323.3820">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120201,0.00,3.50,1.25,7.75,5.00,5.50    6, 0, 4, 6
120202,1.50,3.75,5.75,5.50,1.00,6.50    6, 2, 2, 3
120203,1.00,0.50,3.75,6.50,5.50,6.00    6, 1, 4, 5
120206,0.00,4.75,1.75,4.00,5.50,7.00    6, 1, 3, 4
120207,1.50,2.00,4.00,6.00,4.50,6.50    6, 0, 4, 6
120208,0.00,3.75,1.50,6.75,4.50,6.00    6, 2, ,2 7
120209,1.50,2.75,6.00,3.50,1.25,7.00    6, 2, 2, 3
120210,0.00,3.50,0.50,5.00,4.50,6.00    6, 2, 2, 5
120213,2.00,8.75,2.50,1.00,4.50,6.00    6, 0, 4, 6
120214,1.25,3.00,1.75,6.50,4.50,5.00    6, 1, 1, 6
120215,4.00,4.00,1.75,1.00,5.50,6.00    6, 1, 3, 4
120216,3.50,4.25,3.00,5.75,1.00,6.00    6, 1, 2, 4
120217,1.25,1.50,3.00,6.00,4.50,6.00    6, 0, 0, 6
120220,3.50,2.50,0.50,6.00,5.50,6.00    6, 1, 2, 7
120221,3.25,1.00,1.00,7.75,4.50,6.00    6, 0, 3, 6
120222,2.25,3.25,0.00,5.50,4.50,6.00    6, 1, 2, 4
120223,0.00,5.75,2.75,6.75,1.00,6.00    6, 1, 2, 4
120224,5.75,0.00,0.00,7.25,4.50,6.00    6, 0, 3, 6
120227,0.75,3.50,1.25,7.00,4.50,7.00    6, 1, 2, 4
120228,0.50,7.25,0.00,4.00,4.50,7.00    6, 0, 3, 6
120229,3.25,4.75,1.00,4.00,4.00,6.00    6, 0, 3, 6



</t>
<t tx="zoomq.20120305142323.3821"></t>
<t tx="zoomq.20120305142323.3822">120301开始正式使用 Emacs
- IAT 通过脚本 exec open -a 接入成功!
</t>
<t tx="zoomq.20120305142323.3823">期望进行最小配置后,得以一个基础编辑习惯可以继承的最小配置 emacs 环境!

习惯编辑环境:
    + dark theme
    + 高亮当前行
    + 高亮选区
    + tab 行为:
        + 4空格替代 tab
        + 智能缩进:
            跟随前一缩进
            每次 del 都是一个tab 的宽度
    + 选择的自然操作:
        + shift + 方向,进行选择
        + shift + end 选择到行尾
        + 有选择区时,emter 等于删除
        + 有选择区时, tab 是整体缩进, shift+tab 是整体反缩进
        + 有选择区时, cmd/ctrl+c 是复制所有选择内容
    
    
</t>
<t tx="zoomq.20120410091323.3828">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
130301,0.00,4.25,2.00,3.75,6.00,7.00    6, 1, 1, 6
130304,0.00,4.75,0.00,4.75,7.50,7.00    6, 1, 1, 4
130305,0.00,1.00,1.75,0.75,9.50,7.00    6, 1, 1, 4
130306,2.00,2.25,0.00,3.75,11.25,7.0    6, 1, 1, 4
130307,0.00,5.75,1.00,1.00,10.25,6.0    6, 2, 0, 4
130310,0.00,2.75,7.00,0.00,5.75,7.00    6, 1, 1, 4
130311,0.00,0.00,2.75,2.50,7.00,7.00    6, 1, 1, 2
130312,2.25,0.00,3.00,1.75,5.50,7.00    6, 1, 1, 7
130314,0.00,1.00,7.50,1.50,6.00,6.00    6, 1, 1, 5
130315,0.00,7.00,1.50,2.50,6.50,7.00    6, 1, 1, 6
130318,0.00,1.50,0.00,2.00,9.50,7.00    8, 1, 1, 4
130319,3.00,6.00,0.50,0.00,6.00,7.00    6, 1, 1, 3
130320,1.25,6.00,2.75,2.50,3.50,6.00    6, 1, 1, 11
130321,2.00,3.00,6.00,0.50,5.25,6.00    6, 1, 1, 10
130322,0.00,2.25,7.50,3.50,5.75,6.00    6, 1, 1, 6
130225,3.50,2.00,2.00,2.00,8.00,5.50    6, 1, 1, 4
130326,1.00,6.00,3.50,3.00,6.50,5.50    6, 1, 1, 5
130327,4.50,3.25,1.25,1.50,5.00,5.50    6, 1, 1, 6
130327,1.75,5.50,1.00,3.50,5.75,5.50    6, 0, 2, 6

</t>
<t tx="zoomq.20120423093831.20558">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120401,1.75,0.00,4.50,5.00,7.75,4.00    4, 1, 1, 4
120405,2.25,3.75,0.00,4.25,5.55,7.00    6, 1, 1, 6
120406,6.50,0.00,0.00,7.00,6.00,7.00    6, 0, 2, 6
120409,1.50,1.50,1.50,5.00,7.50,7.00    4, 1, 0, 1
120410,1.25,3.00,2.00,4.50,6.75,6.00    6, 1, 1, 3
120411,0.75,3.25,2.25,6.25,5.00,6.00    6, 0, 2, 5
120412,1.50,5.50,3.00,2.50,1.00,6.00    6, 0, 2, 6
120413,2.50,1.00,1.50,8.00,5.00,6.00    6, 0, 3, 6
120416,6.25,3.00,0.00,4.00,4.00,6.00    6, 0, 2, 3
120417,1.75,2.50,3.00,5.50.4.00,6.00    6, 1, 1, 4
120418,1.00,0.75,2.00,6.25,7.25,6.00    6, 0, 2, 6
120419,2.00,5.25,3.75,4.00,1.00,6.00    6, 1, 1, 6
120420,0.00,4.50,3.00,6.00,4.50,7.00    6, 1, 1, 5
120423,1.50,2.25,2.50,3.75,5.00,6.00    6, 1, 1, 4
120424,4.50,4.00,1.00,4.50,3.00,7.00    6, 0, 2, 6
120425,0.00,7.25,1.00,4.00,4.50,6.00    6, 1, 1, 4
120426,4.75,3.50,2.50,4.00,3.00,6.00    6, 1, 1, 7
120427,1.00,8.00,0.75,4.50,4.50,6.00    6, 1, 1, 11
</t>
<t tx="zoomq.20120603183019.7743">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120502,2.00,3.00,1.25,7.25,3.75,6.00    6, 0, 2, 6
120503,0.00,8.00,1.50,5.50,1.50,5.00    6, 0, 2, 6
120504,0.00,6.00,0.00,3.50,5.00,6.00    6, 1, 1, 8
120407,0.00,6.75,0.00,3.75,6.00,6.00    6, 0, 2, 6
120508,0.00,5.75,0.00,4.50,6.00,6.00    6, 1, 0, 4
120509,0.00,4.00,0.50,5.00,6.00,7.00    8, 1, 1, 6
120510,1.00,3.00,1.50,8.50,3.00,7.00    6, 0, 1, 4
120514,0.00,0.00,3.00,13.5,1.00,7.00    0, 0, 0, 0
120515,0.00,2.75,4.00,6.75,4.00,7.00    6, 0, 2, 6
120516,5.50,1.00,3.50,5.00,1.00,7.00    6, 0, 2, 6
120517,2.25,0.00,5.00,7.50,1.00,6.00    6, 0, 2, 6
120518,2.00,0.00,6.50,2.25,5.25,7.00    6, 0, 0, 6
120519,1.50,4.00,0.50,7.00,5.75,6.00    6, 1, 1, 8
120520,0.00,3.75,2.50,5.00,3.50,6.00    6, 2, 0, 3
120521,2.00,7.00,2.00,4.50,4.50,6.00    6, 2, 0, 5
120522,1.50,6.00,4.00,4.25,5.00,6.00    6, 2, 0, 4
120524,5.00,0.75,1.00,2.25,6.00,6.00    0, 0, 0, 0
120527,0.00,4.50,0.75,4.00,5.25,6.00    4, 2, 0, 2
120528,0.00,6.50,1.50,7.50,1.00,6.00    6, 1, 1, 7
120529,1.25,4.75,3.50,4.00,2.50,7.00    6, 1, 1, 4
120530,0.50,5.50,2.50,2.50,1.00,6.50    6, 1, 1, 3
120531,0.00,6.75,2.00,5.00,7.50,7.00    6, 1, 1, 13
</t>
<t tx="zoomq.20120705104153.3834">date,tI,tO,tC,tM,tF,tS                              Pt,Pd,Pl,Po
120601,1.00,10.0,6.50,4.50,1.00,6.00    6, 1, 1, 4
120604,1.00,4.50,1.00,3.50,3.75,7.00    6, 2, 0, 7
120605,6.50,2.75,2.50,3.00,1.00,7.00    6, 1, 1, 7
120606,2.25,3.50,6.25,2.00,3.00,7.00    6, 2, 0, 4
120607,3.00,2.75,0.50,5.25,5.00,5.50    6, 2, 0, 1
120608,1.25,2.50,0.75,6.00,6.00,6.00    6, 1, 1, 8
120611,1.00,3.75,0.75,2.50,5.50,6.00    6, 2, 0, 2
120612,2.75,5.25,3.00,1.50,3.75,7.00    6, 2, 0, 9
120613,2.00,2.00,4.75,6.00,3.50,7.00    6, 1, 1, 3
120614,1.00,4.00,3.00,4.75,3.00,6.00    6, 2, 0, 3
120615,1.25,5.00,0.00,5.50,6.00,7.00    6, 1, 1, 5
120618,1.00,4.50,1.50,5.50,4.50,6.00    6, 2, 0, 3
120619,1.00,3.00,2.00,5.00,4.50,5.00    6, 2, 0, 2
120620,0.00,4.25,3.75,5.75,4.50,8.00    6, 1, 1, 9
120625,1.50,1.50,1.50,6.00,4.75,5.50    6, 2, 0, 1
120626,3.00,3.25,0.50,6.25,4.50,6.00    6, 2, 0, 3
120627,1.00,5.50,1.00,4.00,5.00,7.00    6, 2, 1, 8
120628,1.00,3.00,2.00,5.50,2.50,8.00    6, 3, 0, 1
120629,1.00,3.25,2.75,3.50,2.00,8.00    6, 1, 2, 6

</t>
<t tx="zoomq.20120727213305.14755">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
120702,2.00,3.50,1.75,5.25,4.00,8.00    4, 1, 1, 4
120703,2.50,3.25,4.00,2.50,4.75,7.00    6, 0, 2, 6
120704,3.75,4.50,1.00,3.00,3.75,7.00    6, 1, 1, 5
120705,2.50,3.75,2.50,4.25,4.00,7.00    4, 1, 1, 3
120706,4.50,2.75,2.25,2.75,4.00,7.00    4, 1, 1, 3
120709,2.00,1.50,3.50,4.25,3.50,7.00    4, 1, 1, 2
120710,2.75,3.00,4.00,1.75,3.00,7.00    4, 1, 1, 3
120711,3.50,3.50,2.00,2.00,4.00,7.00    4, 0, 0, 4
120712,3.00,1.25,6.75,1.00,4.00,7.00    4, 1, 1, 2
120713,1.00,6.75,4.50,2.00,1.00,7.00    4, 1, 1, 3
120716,3.25,3.50,2.50,3.50,3.50,7.00    4, 1, 1, 2
120717,1.25,5.25,0.75,5.00,5.00,7.00    6, 2, 1, 8
120718,2.00,6.00,1.00,3.00,4.50,7.00    6, 3, 0, 5
120719,1.75,2.00,3.25,3.00,6.75,7.00    6, 1, 2, 4
120720,1.50,4.00,1.25,5.25,4.75,8.00    6, 2, 0 ,1
120723,1.00,4.50,3.00,3.50,3.75,7.00    4, 1, 1, 3
120724,0.00,2.00,1.00,2.50,11.25,7.00  4, 2, 0, 3
120725,1.75,2.00,1.00,0.50,11.75,7.00  6, 2, 1, 3
120726,0.00,3.75,4.00,1.00,9.00,7.00    6, 3, 0, 3
120727,2.50,2.75,1.00,5.00,5.25,7.00    6, 2, 1, 5
120730,1.00,6.25,1.25,2.00,3.50,7.00    6, 2, 1, 4
120731,1.00,5.75,1.75,2.50,3.50,7.00    6, 3, 0, 4
</t>
<t tx="zoomq.20120901151004.6026">Grissiom chaos.proton@gmail.com
    谷瑞
    身份证号：130602198712210315
    手机：15901033820
    收益归社区～

Atommann &lt;atommann@gmail.com&gt; / 13590240120
    我那份收益给我。
    在翻译过程中本来很多时间是应该陪孩子的，但都被我用来搞翻译了，我希望有一些钱可以给孩子买点东西，同时也能有钱给自己买几块 MCU开发板/电子零件回来学习。
    
    我的帐号如下：
    开户行：上海浦东发展银行深圳市分行南山支行
    卡号：6225211105487218
    户名：龙黎
</t>
<t tx="zoomq.20120901151004.6027"> # Grissiom &lt;chaos.proton@gmail.com&gt; / 15901033820
  * *bitbucket ID:* `grissiom`
  * http://grissiom.blogspot.com (life), http://blog.csdn.net/grissiom (tech)
  * 北京海淀区知春路大运村 1 号楼 1305 邮编 100191
  * 现在研一，大二的时候自学的 python，以后只要能用 python 的地方就用 python。C 语言也会，写过 51 的程序。 本科毕设做的是 pyqt+pyserial 的拉伸机测控系统。实验室做一些小的材料测控仪器。上个学期学过一点控制论。 我看目录里也有控制系统的内容。英语水平是 CET-6，平时常在英文网站上瞎逛。技术书籍有原版不读译本。
  *  2011 年的课程应该不紧。基本应该是在实验室做项目吧。估计每周应该有四个晚上可以掺和，呵呵
  * 对于未来的版权收益有什么特殊要求?
   * 以前只给 KDE 翻译过几个 po，第一次参与这种翻译，不知道行规怎么样的。图学习，不图收益，呵呵
 
 # 小马xiaoma &lt;cnxiaoma@gmail.com&gt; / 13311664600
  * 自用Blog    在建中...
  * 15年开发经验，其中:5年MIS开发(VB, PB, Sybase)/5年Web开发(PHP,Mysql,ASP,Java)/5年嵌入式（RFID）开发(C)/对数据库，互联网,嵌入式有一定了解。
  * 2011 很忙，但是仍然能抽出一定的时间。目前正在翻译《REST in Practice》 其中6,7,8章（150多页），4人合译，计划3月完稿，6月可以出版。4月份后可以抽出时间，平均一天一页应该没问题。
    * http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829
  * 对于未来的版权收益有什么特殊要求?只要求有署名权，其他有最好，没有也无所谓，就当是为社区做贡献。
 
 # kermit.mei@gmail.com / 13428780315
  * *bitbucket ID:* `kermitmei`
  * http://www.zeuux.org/home/kermit.mei/
  * 邮寄地址
  * 目前从事嵌入式Linux下C/C++软件开发，主要是以Qt为主的嵌入式Linux应用开发，2年工作经验;以前做过智能遥控器，多款数码电子产品；现在工作内容是开发一个基于嵌入式的精简Web引擎，包括html解析和界面生成等功能。对C/C++ 以及Qt架构灰常熟悉，目前靠这个吃饭；熟悉Linux操作系统;熟悉Python/Perl/Bash等脚本语言(主要用于测试和辅助编程)；对计算机硬件有一定了解，并有浓厚兴趣。
  * 换工作了，从不加班，所以不算忙，至少保证：
   * 1.每天能够查收并处理邮件；
   * 2.每周至少贡献一天(周六或者周日)来完成社区任务；
  * 所有收益均愿意贡献给Zeuux。当然，如果能在扉页中属个名字最好，以帮助我以后找工作时吹吹牛；若无则也罢。
  * 参与目的：
   # 这个工作量不算大，按照一年的计划完成C部分翻译和语法润色应该没有问题。
   # 希望为社区力所能及地贡献一点儿力量。
   # 最重要的是，我本身也希望阅读此书，并进一步学习社区中的“协同作战“。
   # 另外，除了C部分的翻译(因为这部分内容确实很少)，如果时间确实是1年，那我觉得我还有时间担任其他章节的校验工作。
 
 # 孙伟 / sagasw@gmail.com / 13840885742
  * http://sunxiunan.com
  * 目前主要从事Windows桌面下Visual C++开发，爱好Python和Lua。8年工作经验。
  * 报名参加C相关章节翻译。每周可保证至少有6个小时。
 
 # Atommann &lt;atommann@gmail.com&gt; / 13590240120
  * *bitbucket ID:* `atommann`
  * http://www.atommann.com
  * 深圳市南山区南光村龙泰轩A501 邮编：518054
  * 在一家生产工业过程控制器的厂家做文档员。业余时间爱好开源硬件。
  * 每天至少 1 个小时用于翻译。
  * 对于未来的版权收益有什么特殊要求?
   * 学习，有收益更好

</t>
<t tx="zoomq.20120901151004.6029">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
120801,2.00,8.50,1.50,2.75,2.00,7.00    6, 1, 2, 8
120802,2.00,7.00,2.50,3.25,2.00,6.00    6, 1, 0, 2
120803,0.75,4.75,2.75,2.00,0.75,6.00    6, 1, 0, 4
120806,0.00,7.75,2.25,4.75,2.50,8.00    6, 3, 0, 6
120807,0.50,7.50,2.00,3.50,2.75,7.00    3, 3, 0, 4
120808,1.00,5.50,3.00,3.00,3.25,7.00    6, 3, 0, 7
120809,0.00,7.25,2.00,1.75,3.25,7.00    6, 2, 1, 13
120810,0.00,6.50,0.50,1.00,5.00,7.00    6, 1, 1, 5
120813,0.00,8.00,0.50,3.25,3.75,6.50    6, 1, 2, 7
120814,0.00,7.25,0.00,2.75,2.50,7.00    6, 1, 2, 6
120815,3.25,6.50,0.00,2.00,3.75,7.00    6, 1, 0, 8
120816,2.00,6.50,1.25,3.00,4.00,7.00    6, 1, 2, 8
120817,2.50,6.25,1.00,2.50,5.00,7.00    6, 1, 1, 3
120817,0.75,10.75,0.0,4.00,1.00,7.00    6, 1, 2, 5
120821,3.00,4.00,1.75,3.00,3.50,7.00    6, 2, 1, 7
120822,0.00,7.75,1.50,3.00,3.00,7.00    6, 2, 1, 12
120823,0.00,8.25,4.00,2.00,1.50,7.00    6, 1, 2, 11
120829,2.00,4.50,3.25,2.00,2.75,7.00    6, 1, 1, 9
120830,1.00,4.25,5.00,3.75,1.00,7.00    6, 1, 1, 3
120831,1.00,4.00,9.00,0.00,3.25,7.00    6, 1, 1, 4
</t>
<t tx="zoomq.20120913101417.6044">collection all kinds of Liebao UI dev.
</t>
<t tx="zoomq.20120913101417.6045">支持 bookmark 的调试, 把src_import\chrome\browser\resources\bookmark_manager\ 放到 {app}\resources\bookmark_manager\去调试 

</t>
<t tx="zoomq.20120913101417.6046">在 uber

zoomq @ ZQ111216MBP in /Volumes/workspace/ks_b6_chrome21_120808/src_import/chrome/browser/resources 
$ ack "iframe-container" 
uber/uber.css
34:.iframe-container {
46:.iframe-container.selected {
54:.iframe-container.expanded {

uber/uber.html
23:&lt;div class="iframe-container"
26:&lt;div class="iframe-container"
29:&lt;div class="iframe-container"
32:&lt;div class="iframe-container"

uber/uber.js
108:    return document.querySelector('.iframe-container.selected');
187:    var query = '.iframe-container &gt; iframe[src^="' + origin + '/"]';
250:    var lastSelected = document.querySelector('.iframe-container.selected');

uber/uber_frame.js
130:    return document.querySelector('.iframe-container.selected');
</t>
<t tx="zoomq.20121019112704.16225">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
120903,0.00,11.25,0.0,1.25,3.00,7.00    6, 1, 2, 16
120904,3.00,4.50,1.00,4.50,4.00,7.00    6, 2, 1, 5
120905,3.25,6.00,1.25,1.25,6.00,7.00    6, 2, 1, 11
120906,2.00,4.75,5.00,1.00,3.75,7.00    0, 0, 0, 0
120907,3.00,3.75,5.00,2.00,1.00,7.00    0, 0, 0, 0
120910,3.00,0.000,6.50,2.50,5.00,7.00   0, 0, 0, 0
120911,0.00,3.75,2.25,5.75,2.50,7.00    6, 1, 1, 9
120912,1.00,6.75,4.50,2.00,2.00,7.00    6, 2, 0, 7
120913,0.00,4.00,1.00,3.50,3.50,7.00    6, 1, 1, 11
120914,0.00,4.00,6.00,2.00,3.50,7.00    0, 0, 0, 0
120917,0.00,5.50,2.00,5.00,3.50,7.00    6, 2, 0, 7
120918,1.25,1.75,0.00,7.25,3.00,7.00    6, 1, 1, 6
120919,1.00,5.00,5.50,2.25,5.00,7.00    6, 1, 1, 8
120920,4.00,7.25,0.00,2.00,2.75,5.00    6, 0, 2, 6
120921,3.50,3.25,2.00,3.75,3.00,7.00    6, 1, 1, 6
120924,2.00,6.25,2.50,2.50,4.50,7.00    6, 1, 1, 8
120925,4.25,5.75,0.00,1.75,3.25,7.00    6, 1, 2, 12
120926,2.50,4.00,0.75,5.25,5.00,7.00    6, 1, 1, 11
120927,0.00,4.00,1.00,5.00,3.50,7.00    6, 1, 2, 10
120928,0.00,4.25,1.50,3.25,6.50,7.00    6, 1, 1, 9</t>
<t tx="zoomq.20121101145510.7852">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
121010,0.00,2.25,4.00,4.75,4.25,7.00    6, 2, 0, 4
121011,0.00,2.50,2.50,2.75,7.75,7.00    6, 1, 1, 6
121012,0.00,2.50,6.00,3.00,4.00,7.00    6, 2, 0, 6
121015,0.00,6.00,1.75,4.50,4.00,7.00    6, 2, 1, 6
121016,0.00,4.50,0.75,4.00,6.00,5.00    6, 2, 1, 7
121017,0.00,3.25,1.75,6.00,5.00,6.00    6, 2, 0, 6
121018,0.00,5.50,4.50,3.00,4.50,6.00    0, 0, 0, 0
121019,0.00,2.50,4.50,2.50,4.50,6.00    6, 1, 1, 5
121022,0.75,4.50,4.00,2.50,4.00,7.00    6, 2, 0, 6
121023,1.00,5.00,2.50,2.00,6.00,8.00    6, 1, 0 ,0
121024,0.00,7.00,0.00,5.00,4.00,7.00    6, 2, 0, 8
121025,2.00,5.00,0.00,1.00,6.00,7.00    6, 2, 1, 9
121029,0.00,5.50,2.00,4.00,4.00,8.00    6, 2, 0, 7
121030,0.00,4.50,5.00,2.50,4.00,8.00    6, 1, 1, 7
121031,1.00,6.50,0.00,2.50,5.00,7.00    6, 1, 1, 7
</t>
<t tx="zoomq.20121116154311.3848">非常自我介绍一下看怎么团队一下(不聚餐无团队;-)

Zoom.Quiet （周琦）
- Python 中文社区创始人 / 管理员，热心于python社区的公益事业，大家熟知的社区"大妈"；OBP及蟒营工程设计者
/主持人；参与并主持各种线上 / 线下活动，主持编撰了《可爱的Python》；坚持用 Pythonic 感化国人进入 FLOSS世界进行学习
/ 分享 / 创造！目前就职于金山软件。

李力(Ada Li)  
    IT从业十多年，做过高校教师，曾服务于AIG, CA, Sun Microsystems, Oracle等公司, 任软件工程师，系统分析员, Java社区经理，开发者项目高级经理等职务。现于中国最大IT社区公司任社区总监。信仰开放平等自由，追求更好的世界和更好的自己。博客：www.adalili.com

huiyi.csdn.net 可以帮助社区发布社区活动，不过这个系统的权限管理没有做那么细，单个活动的发布人可以查看和修改其它活动的信息，因此目前只能授权给CSDN员工，要发布活动的话，提供信息，可以交给
#   @Adela可爱多 （邮件 xiangzheng@csdn.net 

张羽 (Rachel Zhang)
    曾就职于 Sun Microsystems 和 IBM，任软件工程师，前北京OpenSolaris成员，热衷于开源事业，参与成都OpenSolaris用户组的创建与运营。目前就职于谋智网络(Mozilla Online)，担任火狐社区经理。信奉 Mozilla 宣言，崇尚开放，自由与创新。

杜玉杰 (ben)
    曾就职于中标软件，负责开源社区部，希望做名称职的社区经理，热衷于开源事业。参与China OpenStack User Group的创建与运营，目前是刚刚成立的OpenStack基金会董事，希望通过参与学习国外的开源基金会的运作，更好地为国内的开源项目和社区服务。有幸能和大家一起参与翻译本书，边享受过程，边学习提高，请多多指教。微博：ben_杜玉杰


--侠少（张春雨）
   -电子工业出版社博文视点策划，主要负责外版和高端技术原创图书，在大妈组织的OBP Group通力合作下，《真实世界的Python仪器监控： 数据采集与控制系统自动化》一书即将问世。这是第二次以OBP模式协作翻译，而且人选规格较高，希望有一个成功而愉快的过程和结果！
</t>
<t tx="zoomq.20121122115015.6168"># -*- coding: utf-8 -*-
#!/usr/bin/env python
'''提取 http://www.ranwen.net/ 图书,以便 eCub 生成 EPUB文档
'''
import sys
#import sh
import codecs
from path import path
from pyquery import PyQuery as pq

def u(s, encoding):
    if isinstance(s, unicode):
        #print "isinstance?!"
        return s
    else:
        return unicode(s, encoding)

def scrap2txt(p4hml,p2txt):
    '''
    '''
    htmls = path(p4hml)
    #print dir(htmls)
    for h in htmls.files():
        #print dir(h)
        d = pq(codecs.open(h,'r', 'gbk').read())
        uHTML = u(d('#content').html(),'gb2312').encode('utf-8')
        #utxt = u(d('#content').text(),'gb2312').encode('utf-8')
        utxt = uHTML.replace("&lt;br/&gt;","\n").replace("&amp;#13;","")
        #print utxt[:110]
        open("%s/%s.txt"% (p2txt,h.namebase),'w').write(utxt[110:])
        print "grasped&gt;&gt;\t",h.namebase
        #print dir(d)
        #break

if __name__ == '__main__':
    if 3 != len(sys.argv) :
        print '''Usage:
        scrap2txt4html.py /path/2/html /path/2/txt
        '''
    else:
        p4hml = sys.argv[1]
        p2txt = sys.argv[2]
        scrap2txt(p4hml,p2txt)
        #htmls = path(p4hml)
        #print htmls.files()</t>
<t tx="zoomq.20121122115015.6169"># -*- coding: utf-8 -*-
#!/usr/bin/env python
'''快速将指定图片生成 CSS 可用的 data:image/png;base64,
'''
import sys

if __name__ == '__main__':
    if 3 != len(sys.argv) :
        print '''Usage:
            data_uri.py /path/2/imgfile exp.base64
        '''
    else:
        imgf = sys.argv[1]
        expf = sys.argv[2]
        data_uri = open(imgf, "rb").read().encode("base64").replace("\n", "")
        img_tag = 'data:image/png;base64,{0}'.format(data_uri)
        open(expf,"w").write(img_tag)
        #print img_tag
</t>
<t tx="zoomq.20121206102042.3855">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
121101,2.00,1.75,4.75,6.25,4.00,5.00    6, 1, 1, 5
121102,0.75,5.50,3.75,1.00,4.00,7.00    6, 2, 0, 3
121105,0.00,7.00,3.25,2.50,4.00,7.00    6, 2, 0, 8
121106,0.00,7.25,0.00,4.50,3.00,5.00    6, 2, 0, 9
121107,0.00,5.50,1.75,1.00,6.00,7.00    6, 1, 1, 7
121115,3.50,4.00,2.00,3.50,5.00,7.00    6, 1, 1, 4
121116,0.00,4.00,2.25,4.00,3.50,6.00    6, 1, 2, 9
121119,1.00,4.25,1.00,3.25,7.75,8.00    6, 1, 1, 6
121120,0.00,1.25,2.50,2.00,10.0,7.00    6, 1, 1, 4
121121,1.75,2.00,2.75,2.75,7.00,8.00    6, 1, 1, 4
121122,0.00,6.75,0.00,3.50,5.25,7.00    6, 2, 0, 4
121123,0.00,1.75,3.00,2.25,6.00,7.00    6, 1, 1, 3
121126,0.00,1.50,4.75,2.25,8.50,7.00    6, 2, 1, 5
121127,0.00,4.00,1.50,2.00,6.75,7.00    6, 2, 1, 3
121128,2.25,0.50,0.00,3.50,10.75,7.0    6, 1, 1, 7
121129,0.00,3.75,1.00,4.25,7.50,7.00    6, 2, 0, 3
121130,0.00,0.50,0.00,3.00,13.0,8.00    4, 1, 1, 3
</t>
<t tx="zoomq.20121207162246.5571">在 2012年9月21日 上午9:09，王娇 &lt;jiao.wang@3gland.com&gt;写道：
&gt; 美国虚拟机已开通，具体配置如下：
&gt; CPU：2核Xeon 2.26GHz，内存1G，硬盘100GB，系统ubuntu 12.04，中美专线：2M
&gt;
&gt; 服务器ip地址：208.74.73.251
&gt;
&gt; 用户名：pycon，密码：sanjitech.com
&gt;

#   121207 
- 口令:
    root/5t..1q
    zoomq/1q..5t
    lxneng/1q..5t
    </t>
<t tx="zoomq.20121207162246.5572">&gt; mysql
&gt; 数据库 密码
&gt; py4tcn12
&gt;
&gt; 用户root
&gt;
&gt;
&gt; 安装了 python-mysql
&gt;</t>
<t tx="zoomq.20121217095458.5577">    </t>
<t tx="zoomq.20121217095458.5578">$ brew doctor
Warning: Unbrewed dylibs were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected dylibs:
    /usr/local/lib/libavcodec.53.7.0.dylib    /usr/local/lib/libavdevice.53.1.1.dylib    /usr/local/lib/libavfilter.2.23.0.dylib    /usr/local/lib/libavformat.53.4.0.dylib    /usr/local/lib/libavutil.51.9.1.dylib    /usr/local/lib/libfaac.0.0.0.dylib    /usr/local/lib/libmp3lame.0.dylib    /usr/local/lib/libogg.0.dylib    /usr/local/lib/libpostproc.51.2.0.dylib    /usr/local/lib/libswscale.2.0.0.dylib    /usr/local/lib/libtheora.0.dylib    /usr/local/lib/libtheoradec.1.dylib    /usr/local/lib/libtheoraenc.1.dylib    /usr/local/lib/libusb-0.1.4.4.4.dylib    /usr/local/lib/libusbpp-0.1.4.4.4.dylib    /usr/local/lib/libx264.128.dylib    /usr/local/lib/libxvidcore.4.dylib
Warning: Unbrewed .la files were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected .la files:
    /usr/local/lib/libfaac.la    /usr/local/lib/libmp3lame.la    /usr/local/lib/libogg.la    /usr/local/lib/libtheora.la    /usr/local/lib/libtheoradec.la    /usr/local/lib/libtheoraenc.la    /usr/local/lib/libvorbis.la    /usr/local/lib/libvorbisenc.la    /usr/local/lib/libvorbisfile.la
Warning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected .pc files:
    /usr/local/lib/pkgconfig/libavcodec.pc    /usr/local/lib/pkgconfig/libavdevice.pc    /usr/local/lib/pkgconfig/libavfilter.pc    /usr/local/lib/pkgconfig/libavformat.pc    /usr/local/lib/pkgconfig/libavutil.pc    /usr/local/lib/pkgconfig/libpostproc.pc    /usr/local/lib/pkgconfig/libswscale.pc    /usr/local/lib/pkgconfig/ogg.pc    /usr/local/lib/pkgconfig/theora.pc    /usr/local/lib/pkgconfig/theoradec.pc    /usr/local/lib/pkgconfig/theoraenc.pc    /usr/local/lib/pkgconfig/vorbis.pc    /usr/local/lib/pkgconfig/vorbisenc.pc    /usr/local/lib/pkgconfig/vorbisfile.pc    /usr/local/lib/pkgconfig/vpx.pc
Warning: Unbrewed static libraries were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected static libraries:
    /usr/local/lib/libavcodec.a    /usr/local/lib/libavdevice.a    /usr/local/lib/libavfilter.a    /usr/local/lib/libavformat.a    /usr/local/lib/libavutil.a    /usr/local/lib/libfaac.a    /usr/local/lib/libmp3lame.a    /usr/local/lib/libogg.a    /usr/local/lib/libpostproc.a    /usr/local/lib/libswscale.a    /usr/local/lib/libtheora.a    /usr/local/lib/libtheoradec.a    /usr/local/lib/libtheoraenc.a    /usr/local/lib/libvorbis.a    /usr/local/lib/libvorbisenc.a    /usr/local/lib/libvorbisfile.a    /usr/local/lib/libxvidcore.a    /usr/local/lib/libyasm.a</t>
<t tx="zoomq.20121217170241.3864">for cmus:
    - 怀疑 FFMpeg 没有安装引发 op 没有</t>
<t tx="zoomq.20121217170241.3865">@language bash
@tabwidth -4
FFMpeg 1.0 install ERROR in 10.7.5 · Issue #16616 · mxcl/homebrew
	https://github.com/mxcl/homebrew/issues/16616
    brew install ffmpeg --env=std
    is WORKing!

$ brew link --overwrite ffmpeg
Linking /usr/local/Cellar/ffmpeg/1.0... 79 symlinks created

$ brew uninstall --force `brew deps ffmpeg`
Uninstalling faac...
Uninstalling lame...
Uninstalling pkg-config...
Uninstalling x264...
Uninstalling xvid...
Uninstalling yasm...

base FFMpeg 官方文档,编译后:
MacOSXCompilationGuide – FFmpeg
	http://ffmpeg.org/trac/ffmpeg/wiki/MacOSXCompilationGuide
$ brew doctor
Warning: Unbrewed dylibs were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected dylibs:
    /usr/local/lib/libaacplus.2.dylib
Warning: Unbrewed .la files were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected .la files:
    /usr/local/lib/libaacplus.la
Warning: Unbrewed .pc files were found in /usr/local/lib/pkgconfig.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected .pc files:
    /usr/local/lib/pkgconfig/aacplus.pc
Warning: Unbrewed static libraries were found in /usr/local/lib.
If you didn't put them there on purpose they could cause problems when
building Homebrew formulae, and may need to be deleted.

Unexpected static libraries:
    /usr/local/lib/libaacplus.a
</t>
<t tx="zoomq.20121217173705.3868">$ brew install mpd
==&gt; Installing mpd dependency: ffmpeg
!!!

</t>
<t tx="zoomq.20121218093706.3870">@language bash
@tabwidth -4

$ brew upgrade -v ffmpeg --env=std

Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/bin/ffserver
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/bin/ffprobe
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/bin/ffplay
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/bin/ffmpeg
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libswscale.2.1.101.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libswresample.0.15.100.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libpostproc.52.0.100.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libavutil.51.73.101.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libavformat.54.29.104.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libavfilter.3.17.100.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libavdevice.54.2.101.dylib
Warning: Could not fix install names for /usr/local/Cellar/ffmpeg/1.0.1/lib/libavcodec.54.59.100.dylib
==&gt; Summary
/usr/local/Cellar/ffmpeg/1.0.1: 121 files, 82M, built in 2.3 minutes
</t>
<t tx="zoomq.20121218093706.3871">121218 Tracd:
$ trac-admin /opt/www/trac initenv
---------------------------------------------------------------------
Project environment for 'lb-core' created.

You may now configure the environment by editing the file:

  /opt/www/trac/conf/trac.ini

If you'd like to take this new project environment for a test drive,
try running the Trac standalone web server `tracd`:

  tracd --port 8000 /opt/www/trac

Then point your browser to http://localhost:8000/trac.
There you can also browse the documentation for your installed
version of Trac, including information on further setup (such as
deploying Trac to a real web server).

The latest documentation can also always be found on the project
website:

  http://trac.edgewall.org/

Congratulations!</t>
<t tx="zoomq.20121218093706.3872">svn:
[users]
zoomq = 1q2w3e4r
demo = 4r3e2w1q

#同:
    /opt/www/trac/conf/users.htdigest
# tracd:
tracd --port 8000 --auth="trac,/opt/www/trac/conf/users.htdigest,lb-core" /opt/www/trac/

#`~/Works/chromium2kn/9trac/demo 
$ svn list svn+ssh://lbwiki/opt/repo/demo
README.md
branches/
tags/
trunk/</t>
<t tx="zoomq.20121219094347.5593">#   121219 测试其它用户
zhouqi/Zq@gitcafe

#mysysgit
bash-3.1$  ssh-keygen
Your identification has been saved in /c/Documents and Settings/Administrator/.s
sh/id_rsa.
Your public key has been saved in /c/Documents and Settings/Administrator/.ssh/i
d_rsa.pub.
The key fingerprint is:
cf:1b:90:1b:25:0a:12:61:ff:ad:71:d0:ec:cd:5f:55 zhouqi@ijinshan.com


bash-3.1$ git clone git@gitcafe.com:Liebao/Liebao.git blog
Cloning into 'blog'...
The authenticity of host 'gitcafe.com (50.116.2.223)' can't be established.
RSA key fingerprint is 84:9e:c9:8e:7f:36:28:08:7e:13:bf:43:12:74:11:4e.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'gitcafe.com,50.116.2.223' (RSA) to the list of known
 hosts.
remote: Counting objects: 127, done.
remote: Compressing objects: 100% (122/122), done.
remote: Total 127 (delta 47), reused 0 (delta 0)
Receiving objects: 100% (127/127), 458.50 KiB | 377 KiB/s, done.
Resolving deltas: 100% (47/47), done.


bash-3.1$ git checkout -b gitcafe-pages remotes/origin/gitcafe-pages
error: Not tracking: ambiguous information for ref refs/remotes/origin/gitcafe-p
ages
Switched to a new branch 'gitcafe-pages'

bash-3.1$ git config --global user.name "zhouqi"
bash-3.1$ git config --global user.email "zhouqi@ijinshan.com"
C:\Documents and Settings\Administrator&gt;git config --list
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
pack.packsizelimit=2g
help.format=html
http.sslcainfo=/mingw/bin/curl-ca-bundle.crt
sendemail.smtpserver=/mingw/bin/msmtp.exe
diff.astextplain.textconv=astextplain
rebase.autosquash=true
user.name=zhouqi
user.email=zhouqi@ijinshan.com


bash-3.1$ git status
# On branch gitcafe-pages
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#       modified:   _posts/2012-12-10-git-note.md
#
no changes added to commit (use "git add" and/or "git commit -a")

bash-3.1$ git commit -m "zhouqi throught XP + mysysgit"
[gitcafe-pages 6f50b04] zhouqi throught XP + mysysgit
 1 file changed, 4 insertions(+)
 
 
bash-3.1$ git push cafe
warning: push.default is unset; its implicit value is changing in
Git 2.0 from 'matching' to 'simple'. To squelch this message
and maintain the current behavior after the default changes, use:

  git config --global push.default matching

To squelch this message and adopt the new behavior now, use:

  git config --global push.default simple

See 'git help config' and search for 'push.default' for further information.
(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
'current' instead of 'simple' if you sometimes use older versions of Git)

Counting objects: 7, done.git
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 426 bytes, done.
Total 4 (delta 3), reused 0 (delta 0)
To git@gitcafe.com:Liebao/Liebao.git
   89db4d6..6f50b04  gitcafe-pages -&gt; gitcafe-pages
   
   
   

</t>
<t tx="zoomq.20121222152911.5596"></t>
<t tx="zoomq.20130104101214.3880">#   130104
[zoomq@wiki] /usr/ports/net/mosh&gt; 
...
=====================================================================
Please note that mosh requires UTF-8 character set.  To set this on a
per-user basis, you should add the following to ~/.login_conf:
me:\
        :charset=UTF-8:\
        :lang=en_US.UTF-8:\
        :setenv=LC_COLLATE=C:

This only needs to be completed on the client.
=====================================================================
===&gt;   Compressing manual pages for mosh-1.2.2
===&gt;   Registering installation for mosh-1.2.2
===&gt; SECURITY REPORT: 
      This port has installed the following files which may act as network
      servers and may therefore pose a remote security risk to the system.
/usr/local/bin/mosh-server
/usr/local/bin/mosh-client

      If there are vulnerabilities in these programs there may be a security
      risk to the system. FreeBSD makes no guarantee about the security of
      ports included in the Ports Collection. Please type 'make deinstall'
      to deinstall the port if this is a concern.

      For more information, and contact details about the security
      status of this software, see the following webpage: 
http://mosh.mit.edu/
===&gt;  Cleaning for protobuf-2.4.1
===&gt;  Cleaning for p5-IO-Tty-1.10
===&gt;  Cleaning for mosh-1.2.2
</t>
<t tx="zoomq.20130104101214.3882">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
121205,0.00,3.50,1.25,2.00,9.25,7.00    6, 1, 1, 4
121206,0.00,3.50,2.00,3.75,8.00,7.00    6, 1, 1, 4
121207,0.00,2.50,1.00,2.50,11.5,7.00    6, 1, 1, 3
121210,1.00,3.50,2.00,1.00,7.00,7.00    6, 0, 2, 6
121211,0.00,7.00,5.00,2.00,2.50,8.00    6, 1, 0, 8
121212,1.00,2.75,0.00,1.50,12.25,7.0    6, 1, 1, 6
121213,1.00,2.50,1.00,2.25,8.75,8.00    6, 1, 1, 5
121214,2.75,4.00,0.00,6.35,1.00,7.00    6, 1, 1, 11
121217,3.50,0.00,0.00,3.00,8.50,7.00    6, 1, 1, 2
121218,3.00,4.00,0.75,3.00,6.50,7.00    6, 1, 1, 6
121219,0.00,10.0,0.00,0.00,5.75,7.00    6, 1, 1, 14
121220,0.00,4.25,1.00,1.50,9.50,7.00    6, 1, 1, 11
121225,0.00,2.00,0.00,1.00,11.0,7.00    4, 1, 0, 0
121226,0.00,5.75,0.00,1.25,8.00,7.00    6, 1, 1, 5
121227,0.00,5.75,1.00,0.00,8.50,7.00    6, 1, 1, 9
121228,2.00,6.00,0.00,0.00,7.75,7.00    6, 1, 1, 6
121229,1.00,5.75,0.00,0.00,10.0,7.00    6, 1, 0, 4
</t>
<t tx="zoomq.20130219101905.3885">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
130105,0.00,0.75,1.00,5.75,7.00,7.00    6, 1, 1, 4
130114,3.75,0.50,4.75,1.25,6.75,7.00    6, 1, 1, 3
130115,0.00,2.25,2.25,3.00,9.75,7.00    6, 1, 1, 3
130116,1.00,4.50,0.00,3.25,5.00,7.00    6, 1, 1, 3
130118,0.00,4.00,2.00,3.50,7.25,7.00    6, 1, 1, 3
130121,0.00,2.00,1.25,2.75,9.25,7.00    6, 1, 1, 4
130122,0.00,0.00,4.50,2.75,8.75,7.00    6, 1, 1, 8
130123,8.00,1.50,1.00,0.00,5.75,7.00    6, 1, 1, 3
130124,0.00,5.75,1.25,1.25,8.25,7.00    6, 2, 0, 3
130125,0.00,2.75,3.25,1.25,2.25,7.00    6, 2, 0, 0
130129,1.00,0.00,5.00,4.00,6.00,7.00    0, 0, 0, 0
130130,2.50,3.00,4.75,2.00,4.25,7.00    6, 1, 1, 4
130131,0.00,1.50,3.75,1.75,0.75,6.00    6, 1, 1 ,8
</t>
<t tx="zoomq.20130301103428.5639">正月十五都过去了,长徦综合症必须不存在了! 产业观察周报 汇集产业潜在高价值事件.

为确保观察周报的排版效果,我们决定只使用pdf附件的形式来发布,请点击附件查阅;-)
    有任何建议或是问题,请随时回复邮件或是电联我们指正!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
我们是 DRM~开发者关系管理(Developer Relation Management)团队:
- 提供技术活动咨询服务:收集/整理/通报近期各种相关技术大会信息,并联系各种优惠/免费门票
- 并根据各团队技术兴趣,针对性邀请领域专家来访,进行分享/讲演/培训
- 识别并推举内部专家进入相关技术大家演讲,并给予讲演技巧培训支持
- 收集编撰产业观察周报,推荐创投项目,商业模式,共同思考互联网发展

若有需要,即时联系:
    北京 范路: 分机-6694 手机/18601670949 QQ/1055789515
    珠海 周琦: 分机-2310 手机/13702314441 GTalk/zoomquiet@gmail.com
    </t>
<t tx="zoomq.20130302114851.3888">ComputerName:   MBP111216ZQ
# ifconfig en1 | grep ether | awk '{print $2}' | sed 's/://g'
en0 MAC:    3c07542c6175
en1 MAC:    b88d122947aa

sudo hdiutil create -size 320g -type SPARSEBUNDLE -nospotlight -volname "Backup of &lt;computer_name&gt;" -fs "Case-sensitive Journaled HFS+" -verbose ~/Desktop/&lt;computer_name&gt;_&lt;mac address&gt;.sparsebundle

sudo hdiutil create -size 320g -type SPARSEBUNDLE -nospotlight -volname "Backup of &lt;computer_name&gt;" \
    -fs "Case-sensitive Journaled HFS+" -verbose ~/Desktop/&lt;computer_name&gt;_&lt;mac address&gt;.sparsebundle

</t>
<t tx="zoomq.20130307104209.5651"> 在sora 配置了管理认证:
    仓库 https://bitbucket.org/ZoomQuiet/the-art-of-community-zh
    克隆: /home/zoomq/zoomquiet.org/repos/taocn
    发布: http://zoomquiet.org/res/d/taocn/

    配置: /opt/srv/nginx/conf/zoomquiet.conf
    密码: /opt/srv/nginx/conf/passwd4obp
        taoc
        1q2w3e4r
    定期: /opt/cron/obpbooks.sh
    日志: /opt/log/cron/*-obp-building.log
</t>
<t tx="zoomq.20130313104056.3892">/Users/zoomq/Library/Application Support/Google/Chrome/Default/
</t>
<t tx="zoomq.20130321103420.5682">date,tI,tO,tC,tM,tF,tS                  Pt,Pd,Pl,Po
130201,4.00,2.00,5.50,2.00,1.00,1.00    6, 1, 1, 4
130202,0.00,4.00,2.00,4.00,3.00,9.00    0, 0, 0, 0
130204,5.75,4.25,4.25,2.25,1.00,7.00    6, 1, 1, 4
130218,0.00,3.00,1.50,0.50,8.00,8.00    6, 1, 1, 1
130219,0.00,2.75,2.00,1.25,10.25,7.0    6, 1, 1, 7
130220,0.00,3.75,3.00,0.00,9.50,7.00    6, 1, 1, 6
130221,3.25,1.50,3.75,1.00,7.00,7.00    6, 1, 1, 4
130222,4.25,0.75,0.00,4.75,6.75,7.00    6, 1, 1, 4
130225,0.00,6.75,0.75,2.00,6.50,7.00    6, 1, 1, 6
130226,0.00,2.00,2.25,3.75,7.50,9.00    6, 1, 1, 6
130227,2.00,4.25,0.00,2.00,7.50,6.00    6, 1, 1, 3
130228,1.50,4.50,3.00,1.00,6.00,7.00    6, 0, 2, 6

</t>
<t tx="zoomq.20130326094120.5692">oomq @ MBP111216ZQ in ~/Library/Rime
$ ./rime_dict_manager
options:
	-l|--list
	-b|--backup dict_name
	-r|--restore xxx.userdb.kct.snapshot
	-e|--export dict_name export.txt
	-i|--import dict_name import.txt

zoomq @ MBP111216ZQ in ~/Library/Rime
$ ./rime_dict_manager -i bxm4zq2mac ~/Library/Rime/bxm4zq2mac.dict.txt
imported 60106 entries.

zoomq @ MBP111216ZQ in ~/Library/Rime
$ ls
alternative.yaml                    installation.yaml                   luna_pinyin_simp.schema.custom.yaml
bxm4zq2mac.custom.yaml              luna_pinyin.prism.bin               luna_pinyin_simp.schema.yaml
bxm4zq2mac.dict.txt                 luna_pinyin.reverse.bin             rime.log
bxm4zq2mac.schema.yaml              luna_pinyin.schema.yaml             rime_dict_manager
bxm4zq2mac.userdb.kct               luna_pinyin.table.bin               squirrel.custom.yaml
cangjie5.prism.bin                  luna_pinyin.userdb.kct              squirrel.yaml
cangjie5.reverse.bin                luna_pinyin.userdb.kct.wal          symbols.yaml
cangjie5.schema.yaml                luna_pinyin_fluency.prism.bin       sync
cangjie5.table.bin                  luna_pinyin_fluency.schema.yaml     user.yaml
default.yaml                        luna_pinyin_simp.prism.bin
</t>
<t tx="zoomq.20130326094120.5693">
I0326 12:29:39.559567 1957665120 dictionary.cc:265] loading dictionary 'bxm4zq2mac'.
I0326 12:29:39.559574 1957665120 table.cc:196] loading table file: /Users/zoomq/Library/Rime/bxm4zq2mac.table.bin
I0326 12:29:39.559612 1957665120 prism.cc:72] loading prism file: /Users/zoomq/Library/Rime/bxm4zq2mac.prism.bin
I0326 12:29:39.559631 1957665120 prism.cc:102] found double array image of size 96256.
E0326 12:29:39.559955 1957665120 algebra.cc:72] Error loading spelling algebra definition #1: 'xlit|abcdefghijklmnopqrstuvwxyz;'|好是区为出中小一这的并也来用哪即国大我于和人了在上子・|'.</t>
</tnodes>
</leo_file>
