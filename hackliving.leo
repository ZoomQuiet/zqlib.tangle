<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_stylesheet?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20091008173724.1"><vh>@chapters</vh></v>
<v t="zoomq.20100903210229.3838" a="E"><vh>Hacking Life</vh>
<v t="zoomq.20100903210229.3896"><vh>KM思绪</vh>
<v t="zoomq.20100903210229.3897"><vh>@nosent dont-use-wiki.txt</vh></v>
</v>
<v t="zoomq.20100903210229.3839" a="E"><vh>巨坑分析:</vh>
<v t="zoomq.20101103153946.3839"><vh>code.ijinshan</vh></v>
<v t="zoomq.20100903210229.3840" a="E"><vh>zoomquiet.org</vh>
<v t="zoomq.20101109214756.6989" a="E"><vh>zoomquiet.org发布规划</vh>
<v t="zoomq.20101109214756.6990"><vh>目录</vh></v>
<v t="zoomq.20101109214756.6991"><vh>域名</vh></v>
<v t="zoomq.20101109214756.6992"><vh>scrapbook</vh></v>
</v>
<v t="zoomq.20100925155257.2580"><vh>PyBlosxom</vh></v>
<v t="zoomq.20100903210229.3841"><vh>OBP</vh></v>
<v t="zoomq.20100903210229.3842"><vh>WeKnow</vh>
<v t="zoomq.20101105113140.2587"><vh>SaaCL</vh></v>
<v t="zoomq.20101104113205.5096"><vh>DouPy</vh></v>
</v>
</v>
<v t="zoomq.20100908091715.2579"><vh>PythoniCamp</vh>
<v t="zoomq.20100927113242.2581"><vh>Hg demo</vh></v>
<v t="zoomq.20101015095808.2582"><vh>Hg 配置</vh>
<v t="zoomq.20101029104710.3831"><vh>hgrc</vh></v>
<v t="zoomq.20101019093735.5077"><vh>diff</vh></v>
<v t="zoomq.20101019093735.5078"><vh>keywords</vh></v>
</v>
</v>
<v t="zoomq.20101019093735.5079"><vh>Geek</vh>
<v t="zoomq.20101103153946.5095"><vh>CLI</vh></v>
</v>
</v>
<v t="zoomq.20101030170919.2579"><vh>newHeadline</vh>
<v t="zoomq.20101030170919.2580"><vh>coffeghost-q-in-py.py</vh>
<v t="zoomq.20101030170919.2581"><vh>coffeghost-q-in-py declarations</vh></v>
<v t="zoomq.20101030170919.2582"><vh>main</vh></v>
<v t="zoomq.20101030170919.2583"><vh>foo</vh></v>
</v>
</v>
<v t="zoomq.20100831135717.3642"><vh>WeKnow</vh>
<v t="zoomq.20100831135717.3643"><vh>可视化</vh>
<v t="zoomq.20100831135717.4174"><vh>webSequenceDiagram</vh>
<v t="zoomq.20100831135717.4171"><vh>@nosent getSequenceDiagram.py</vh>
<v t="zoomq.20100831135717.4172"><vh>declarations</vh></v>
<v t="zoomq.20100831135717.4173"><vh>getSequenceDiagram()</vh></v>
</v>
<v t="zoomq.20100831135717.4195"><vh>demo</vh>
<v t="zoomq.20100831135717.4178"><vh>@nosent demo0.txt</vh></v>
<v t="zoomq.20100831135717.4184"><vh>@nosent demo1-activate.txt</vh></v>
<v t="zoomq.20100831135717.4188"><vh>@nosent demo2-alt.txt</vh></v>
<v t="zoomq.20100831135717.4190"><vh>@nosent demo3-opt.txt</vh></v>
<v t="zoomq.20100831135717.4192"><vh>@nosent demo4-note.txt</vh></v>
<v t="zoomq.20100831135717.4194"><vh>@nosent demo5-participants.txt</vh></v>
<v t="zoomq.20100831135717.4197"><vh>@nosent demo6-grouping.txt</vh></v>
<v t="zoomq.20100831135717.4199"><vh>@nosent demo7-lifeline.txt</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3876"><vh>4lifeHacking</vh>
<v t="zoomq.20101026092125.2576"><vh>TiLogs</vh>
<v t="zoomq.20101026092125.2577"><vh>@nosent zq-tilog-1010.txt</vh></v>
</v>
<v t="zoomq.20100903210229.3843"><vh>misc</vh>
<v t="zoomq.20100903210229.3844" a="M"><vh>_stuff</vh>
<v t="zoomq.20100903210229.3845"><vh>dict sort</vh></v>
<v t="zoomq.20100903210229.3846"><vh>dislin-0.py</vh>
<v t="zoomq.20100903210229.3847"><vh>dislin-0 declarations</vh></v>
</v>
<v t="zoomq.20100903210229.3878"><vh>@nosent try0.txt</vh>
<v t="zoomq.20100903210229.3879"><vh>&lt;&lt;my sub node&gt;&gt;</vh>
<v t="zoomq.20100903210229.3880"><vh>&lt;&lt;我的&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3851"><vh>@nosent try1.txt</vh>
<v t="zoomq.20100903210229.3879"></v>
</v>
<v t="zoomq.20100903210229.3854"><vh>@nosent plotry.py</vh></v>
<v t="zoomq.20100903210229.3855"><vh>@nosent plotry1.py</vh></v>
<v t="zoomq.20100903210229.3856"><vh>@nosent dictsort.py</vh></v>
<v t="zoomq.20100903210229.3857"><vh>@nosent plotry2.py</vh></v>
</v>
<v t="zoomq.20100903210229.3858"><vh>unitest</vh>
<v t="zoomq.20100903210229.3859"><vh>@nosent test0.py</vh></v>
</v>
<v t="zoomq.20100903210229.3860"><vh>_cron</vh>
<v t="zoomq.20100903210229.3861"><vh>inter.131</vh></v>
<v t="zoomq.20100903210229.3862"><vh>intra.59</vh>
<v t="zoomq.20100903210229.3863"><vh>@nosent doykseoAM.sh</vh></v>
<v t="zoomq.20100903210229.3864"><vh>@nosent doykseoPM.sh</vh></v>
<v t="zoomq.20100903210229.3865"><vh>@nosent mldledSyncAll.sh</vh>
<v t="zoomq.20100903210229.3866"><vh>&lt;&lt; init &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3867"><vh>&lt;&lt; sync p2ped &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3868"><vh>&lt;&lt; sync runlog &gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3869"><vh>intra.61</vh></v>
<v t="zoomq.20100903210229.3870"><vh>intra.101</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3877"><vh>tpl</vh>
<v t="zoomq.20100903210229.3878"></v>
</v>
<v t="zoomq.20100903210229.3881"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20100903210229.3882"><vh>@nosent tilog_chart.py</vh>
<v t="zoomq.20100903210229.3883"><vh>&lt;&lt; tilog_chart declarations &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3884"><vh>tilogchart()</vh></v>
<v t="zoomq.20100903210229.3885"><vh>radar4month</vh>
<v t="zoomq.20100903210229.3886"><vh>formatotmr()</vh></v>
<v t="zoomq.20100903210229.3887"><vh>monthradar()</vh></v>
</v>
<v t="zoomq.20100903210229.3888"><vh>pie4month</vh>
<v t="zoomq.20100903210229.3889"><vh>formatotm()</vh></v>
<v t="zoomq.20100903210229.3890"><vh>monthpie()</vh></v>
</v>
<v t="zoomq.20100903210229.3891"><vh>line4day</vh>
<v t="zoomq.20100903210229.3892"><vh>formatlog()</vh></v>
<v t="zoomq.20100903210229.3893"><vh>dayline()</vh></v>
</v>
<v t="zoomq.20100903210229.3894"><vh>expchart()</vh></v>
<v t="zoomq.20100903210229.3895"><vh>expplot()</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3872"><vh>rc.local</vh>
<v t="zoomq.20100903210229.3873"><vh>@shadow xinput4bamboo.py</vh></v>
</v>
<v t="zoomq.20100412163057.2814"><vh>Misc任务</vh>
<v t="zoomq.20100412163057.2815"><vh>病毒样本对比</vh>
<v t="zoomq.20100902112115.7756"><vh>@nosent virusampls-ratio.py</vh>
<v t="zoomq.20100902112115.7757"><vh>declarations</vh></v>
<v t="zoomq.20100902112115.7758"><vh>processLogKV</vh></v>
<v t="zoomq.20100902112115.7759"><vh>processLogRX</vh></v>
<v t="zoomq.20100902112115.7760"><vh>ratioYQ</vh></v>
<v t="zoomq.20100902112115.7761"><vh>finalExport</vh></v>
</v>
</v>
<v t="zoomq.20100122092723.2783"><vh>GrasPic</vh>
<v t="zoomq.20100122092723.2784"><vh>ellytran.com</vh>
<v t="zoomq.20100122092723.2797"><vh>@shadow pic-ellytran.py</vh></v>
</v>
<v t="zoomq.20100827095209.8300"><vh>@file /home/zoomq/media/manga/manga.py</vh>
<v t="zoomq.20100827095209.8301"><vh>manga declarations</vh></v>
<v t="zoomq.20100827095209.8302"><vh>genUrlist</vh></v>
</v>
<v t="zoomq.20100827095209.8303"><vh>@file /home/zoomq/media/manga/manga-zipang12~1.sh</vh></v>
<v t="zoomq.20100827095209.8304"><vh>@file /home/zoomq/media/manga/wgetli.py</vh>
<v t="zoomq.20100827095209.8305"><vh>wgetli declarations</vh></v>
<v t="zoomq.20100827095209.8306"><vh>genUrlist</vh></v>
</v>
</v>
<v t="zoomq.20100827095209.8299"><vh>清除字幕字体聲明</vh>
<v t="zoomq.20100827095209.8310"><vh>@nosent clfontd4.py</vh>
<v t="zoomq.20100827095209.8311"><vh>declarations</vh></v>
<v t="zoomq.20100827095209.8312"><vh>cleaner()</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20091008173724.1">'/home/zoomq/workspace/3hg/zqlib-hg/tangle/hackliving.leo'</t>
<t tx="zoomq.20100122092723.2783">@path media/manga</t>
<t tx="zoomq.20100122092723.2784">@path 2graspic/ellytran.com/wp-content/gallery
#/home/zoomq/9media/comics/2graspic/ellytran.com/wp-content/gallery</t>
<t tx="zoomq.20100412163057.2814">@path /home/zoomq/</t>
<t tx="zoomq.20100412163057.2815">@path ssp-zoom.quiet/virusampls-ratio
#/home/zoomq/Desktop/KiS/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/vbox2win/0day/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/data/0day-vbox/zoom.quiet/100412-virus-sample-selector
</t>
<t tx="zoomq.20100827095209.8299">@path _stuff/_mov
网络字幕，有的::
    
1
00:00:09,240 --&gt; 00:00:15,940
{\fn微软雅黑\fs12\fscx130\fscy130\3c&amp;HFF8000&amp;}本字幕仅出于业余兴趣而制，如有鄙陋，还望指正。{\r}
{\fn微软雅黑\fs12}{\r}

2
00:00:16,240 --&gt; 00:00:29,940
{\fn微软雅黑\fs15\3c&amp;HFF8000&amp;}感谢 COPSY心理学的支持
{\fntahoma\fs12\3c&amp;H1717FF&amp;}www.COPSY.org{\r}

不认识字体聲明，需要快速清除，
sed/awk 都不能直接识别出 {.+} 这种模式，特别是在 utf-8 环境中处理 gb2312 编码文本...

cat 06-Justice_Michael.Sandel-HARVARD.srt | cut --delimiter="}" -f2 | cut --delimiter="{" -f1 &gt; 06-Justice_Michael.Sandel-HARVARD.srt.srt
</t>
<t tx="zoomq.20100827095209.8300">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) bookID(e.g 002) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://251.99770.com:9977/ok-comic06/c/cyjd_771/%03d/%03d.jpg\n"
        bookName = sys.argv[1]
        bookId = sys.argv[2]
        maxPage = sys.argv[3]
        genUrlist(urlmark,bookName,bookId,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8301"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "manga.py v0.8-070921"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8302">def genUrlist(urlmark,bookName,bookId,maxPage):
    expF = "manga-%s-%s.txt"%(bookName,bookId)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % (int(bookId),p)
        print urlmark % (int(bookId),p)
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8303">@ignore
@language shell
#!/bin/sh

wget -nv -t 3 -P 012 -i manga-zipang-012.txt &amp;
wget -nv -t 3 -P 011 -i manga-zipang-011.txt &amp;
wget -nv -t 3 -P 010 -i manga-zipang-010.txt &amp;
wget -nv -t 3 -P 009 -i manga-zipang-009.txt &amp;
wget -nv -t 3 -P 008 -i manga-zipang-008.txt &amp;
wget -nv -t 3 -P 007 -i manga-zipang-007.txt &amp;
wget -nv -t 3 -P 006 -i manga-zipang-006.txt &amp;
wget -nv -t 3 -P 005 -i manga-zipang-005.txt &amp;
wget -nv -t 3 -P 004 -i manga-zipang-004.txt &amp;
wget -nv -t 3 -P 003 -i manga-zipang-003.txt &amp;
wget -nv -t 3 -P 002 -i manga-zipang-002.txt &amp;
wget -nv -t 3 -P 001 -i manga-zipang-001.txt &amp;

</t>
<t tx="zoomq.20100827095209.8304">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://tulaoya.cn/photo/x1/%03d.jpg\n"
        bookName = sys.argv[1]
        maxPage = sys.argv[2]
        genUrlist(urlmark,bookName,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8305"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "wgetli.py v0.5-080409"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8306">def genUrlist(urlmark,bookName,maxPage):
    expF = "wgetli-%s-%s.txt"%(bookName,maxPage)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % p
        print urlmark % p
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8310">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
"""
Name    : clfontd4.py
Desc    : clean font define words in subtitle files
Author  : Zoom.Quiet
Usage   : 1: make srt file-&gt;utf8; 2: python cleaner.py path/2/***.str 
    we can get cleanning .srt
"""
VERSION = "clfontd4.py v10.8.27"
@others
if __name__ == "__main__":
    sys.exit(cleaner(sys.argv))
</t>
<t tx="zoomq.20100827095209.8311">import os,sys,re

</t>
<t tx="zoomq.20100827095209.8312">def cleaner(arg):
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python cleaner.py path/2/***.str
        """ % VERSION
    else:
        exp = ""
        print arg[1]
        for l in open(arg[1]).readlines():
            #print "&gt;&gt;",l
            if "{" in l:
                exp += "%s\n"%l.split("}")[1].split("{")[0]
                #print exp
            else:
                exp += l
        open("%s"%arg[1],"w").write(exp)


</t>
<t tx="zoomq.20100831135717.3642">收集所有 WeKnow 相关的代码片段
</t>
<t tx="zoomq.20100831135717.3643">收集数据可视化支持工具</t>
<t tx="zoomq.20100831135717.4171">@language python
@tabwidth -4
#!/usr/bin/python 
# -*- coding: utf-8 -*-
'''base http://www.websequencediagrams.com/ gen SequenceDiagram
You can set wsd_style to any of these styles:
    * default
    * earth
    * modern-blue
    * mscgen
    * omegapple
    * qsd
    * rose
    * roundgreen
    * napkin 
'''
VERSION="getSequenceDiagram.py v10.8.31"
@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python getSequenceDiagram.py DiagremStyle DiagramName 定义文件.txt
        """ % VERSION
    else:
        style = sys.argv[1] #"napkin"
        sqdname = sys.argv[2]
        sqdefin = sys.argv[3]
        pngFile = "%s_wsd-%s.png"%(sqdname,style)
        text = open(sqdefin).read()
        getSequenceDiagram( text, pngFile, style ) 

</t>
<t tx="zoomq.20100831135717.4172">#!/usr/bin/python 
# -*- coding: utf-8 -*-
import sys
import urllib
import re

</t>
<t tx="zoomq.20100831135717.4173">def getSequenceDiagram( text, outputFile, style = 'default' ):
    request = {}
    request["message"] = text
    request["style"] = style

    url = urllib.urlencode(request)

    f = urllib.urlopen("http://www.websequencediagrams.com/", url)
    line = f.readline()
    f.close()

    expr = re.compile("(\?img=[a-zA-Z0-9]+)")
    m = expr.search(line)

    if m == None:
        print "Invalid response from server."
        return False

    urllib.urlretrieve("http://www.websequencediagrams.com/" + m.group(0),
            outputFile )
    return True

</t>
<t tx="zoomq.20100831135717.4174">@path webSequenceDiagram/


http://www.websequencediagrams.com/embedding.html</t>
<t tx="zoomq.20100831135717.4178">alice-&gt;bob: 认证 request
bob--&gt;alice: response
</t>
<t tx="zoomq.20100831135717.4184">A-&gt;B: text
activate B
B--&gt;A: json
deactivate B
</t>
<t tx="zoomq.20100831135717.4188">alt text1
    A-&gt;B: text
else text2
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4190">opt text
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4192">note over A,B: 是也乎
note left of A: 可能
note right of A
    多行
    文本
    multiline
    text
end note
</t>
<t tx="zoomq.20100831135717.4194">participant "客户端" as C
participant "服务端" as S
participant "可以很长名\n的后台服务" as L

C-&gt;S: Authentication Request
S-&gt;C: Authentication Response
S--&gt;L: Log transaction

</t>
<t tx="zoomq.20100831135717.4195">@path demo
</t>
<t tx="zoomq.20100831135717.4197">Alice-&gt;Bob: Authentication Request
alt successful case
    Bob-&gt;Alice: Authentication Accepted
else some kind of failure
    Bob-&gt;Alice: Authentication Failure
    opt
        loop 1000 times
            Alice-&gt;Bob: DNS Attack
        end
    end
else Another type of failure
    Bob-&gt;Alice: Please repeat
end

</t>
<t tx="zoomq.20100831135717.4199">User-&gt;A: DoWork
activate A
A-&gt;B: &lt;createRequest&gt;
activate B
B-&gt;C: DoWork
activate C
C--&gt;B: WorkDone
destroy C
B--&gt;A: RequestCreated
deactivate B
A-&gt;User: Done
</t>
<t tx="zoomq.20100902112115.7756">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION="virusampls-ratio v10.4.12"

@others

if __name__ == '__main__':      # this way the module can be
    begin = time.time()
    usage = "usage: %prog [option0] arg0 [arg1]"
    parser = OptionParser(usage,version=VERSION)
    parser.add_option("-r","--ratio",dest="ratio",nargs=2,
                      type="string",metavar="*.dump some-hot-virus-list.txt",
                      help="YiQing comparison,uasge --lrx|lkv processed .dump file "
                        "e.g KV-RESULT.dump some-hot-virus-list.txt")
    parser.add_option("--lrx",dest="lrx",
                      type="string",
                      help="process RX checking log")
    parser.add_option("--lkv",dest="lkv",
                      type="string",
                      help="process KV checking log")
    parser.add_option("-e","--export",dest="export",nargs=2,
                      type="string",metavar="*.txt path/2/export ",
                      help="export total hotest virus list into dir             " 
                        "e.g -e virus-hotest-in-my-pc.tx tmp")
    (options, args) = parser.parse_args()
    if 1 == len(sys.argv):
        parser.print_help()
    if options.ratio :
        print "comparison checked list and YiQing list\n\n"
        ratioYQ(options.ratio)
    else:
        if options.lrx:
            print "\n\nreFormat RX checking list\n\n"
            processLogRX(options.lrx)
        if options.lkv:
            print "\n\nreFormat KV checking list\n\n"
            processLogKV(options.lkv)
        if options.export:
            print "\n\nexport total hotest virus list in to\n\n"
            finalExport(options.export)
    if (options.lrx and options.ratio) or (options.lkv and options.ratio):
        print "\n\nATTENTION!\n\t -r and --lrx|lkx can not usage in same time!\n\n"
        parser.error("incorrect number of arguments! \nATTENTION!\n"
            "\ne.g.\n \tpython %s -lrx something.txt "
            "\nor\n\tpython %s -r sonething.dump top500-from-RX.TXT"%(parser.get_prog_name()
                ,parser.get_prog_name())
                )
        parser.print_help()

</t>
<t tx="zoomq.20100902112115.7757">import os,sys,time,pickle,shutil
from optparse import OptionParser
from operator import itemgetter

</t>
<t tx="zoomq.20100902112115.7758">def processLogKV(fname):
    "简单处理KV查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if " 中发现 " in line:
            tags = line.split()
            print tags[3],tags[1]
            viru = tags[3]
            path = tags[1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))
</t>
<t tx="zoomq.20100902112115.7759">def processLogRX(fname):
    "简单处理RX查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if "手动查杀" in line:
            tags = line.split(";")
            print tags[2][1:-1],tags[6][1:-1]
            viru = tags[2][1:-1]
            path = tags[6][1:-1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))

</t>
<t tx="zoomq.20100902112115.7760">def ratioYQ(args):
    """将查杀日志和厂商疫情进行对比,按照排名积累分数,最终得到综合热度:
        前500排名的话,第一名为500分;
    MiscItems/2008-07-01 - Woodpecker Wiki for CPUG
http://wiki.woodpecker.org.cn/moin/MiscItems/2008-07-01
    Python中最快的字典排序方法 | Windstorm
http://www.kunli.info/2009/05/07/sorting-dictionaries-by-value-in-python/
    """
    dumpf = args[0]
    yqfile = args[1]
    tophotf = "%s-hot4-%s.txt"%(dumpf.split(".")[0],yqfile.split(".")[0])
    ratio = pickle.load(open(dumpf, 'rb'))
    flines = open(yqfile).readlines()
    for i in range(len(flines)):
        hvname = flines[i].upper().replace(".","").replace("/","")
        for v in ratio.keys():
            vname = v.upper().replace(".","").replace("/","")
            if vname in hvname:
                ratio[v][0]+=i
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    try:
        unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    except:
        unitRD = {}
    td = sorted(ratio.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        if 0!=t[1][0]:
            print t
            hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
            if t[0] in unitRD.keys():
                unitRD[t[0]][0] +=t[1][0]
            else:
                unitRD[t[0]] =[t[1][0],t[1][1]]

    open(tophotf,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus base %s...\n\t\t export as:%s"%(VERSION
        ,len(hotvli)
        ,yqfile
        ,tophotf
        )
    pickle.dump(unitRD, open(unitRatioDictFile, 'wb'))
</t>
<t tx="zoomq.20100902112115.7761">def finalExport(args):
    "将最终交叉对比出来的列表输出到指定目录/文件,同时(尝试将隔离区文件也复制到指定目录)"
    expfn = "%s/%s"%(args[1],args[0])
    expdir = args[1]
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    td = sorted(unitRD.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        print t
        hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
        #shutil.copy(t[1][1],expdir)
    open(expfn,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus in my pc \n\t\t export list file::%s"%(VERSION
        ,len(td)
        ,expfn
        )


</t>
<t tx="zoomq.20100903210229.3838">@path /home/zoomq/workspace/3hg/zqlib-tangle/
@language python
@tabwidth -4

人生hacking...

</t>
<t tx="zoomq.20100903210229.3839">当前工作外长期拖延的意义任务...




</t>
<t tx="zoomq.20100903210229.3840">+-- zoomquiet.org 发布改版:
    +-- SEO:
        +-- sitemapping
    +-- dot mapping:
        +-- jQuery 拒绝IE
        +-- #通用含热区html输出:
            +-- '固化运营脚本的代码结构...:'
                +-- '参数'
                +-- "日志/调试"
            +-- 'Data-URI 集约化所有到一个HTML'
            +-- docTTD
    +-- ScrapBook:
        +-- 索引优化:
            +-- 分层简化
            +-- 嵌入原始URL
            +-- 分年度保存data 
</t>
<t tx="zoomq.20100903210229.3841">+-- OBP:
    +-- Sphnix 自动化编译Hg hooks
        +-- #Sphinx 官网翻译
        +-- Sphinx实用手册
            +-- 'rst2s5 使用'
            http://blog.zoomquiet.org/pyblosxom/utility/py4str/StructuredText/rst2s5-usage-2010-09-18-23-23.html
    +-- 图书:
        +-- 大妈书:
            +-- 牛妞成长史
            +-- 私人编年史:
                +-- #周氏家谱....
                +-- 不可失败的菜谱
        +-- TPiP
            +-- Leo doc
            +-- Code_Like_Pythonic-Idiomatic_Python
            +-- Hidden features of Python
        +-- Py标准文档:
            +-- 库
            +-- 教程
        +-- web2py
        +-- TheArt-of-Community-1ed_jonobacon
        +-- Thinking_in_Erlang.pdf


</t>
<t tx="zoomq.20100903210229.3842">+-- WeKnow:
    +-- ScrapBook 社会化分享
        +-- 云存储中心
        +-- GAE 界面
        +-- 桌面界面
        +-- SNS 机制
    +-- CPyUG 列表综合活跃分析~ codeworm
    +-- 时间帐单自动分析统计:
        +-- #手工记录
        +-- Workrave 
            +-- http://wakoopa.com/ZoomQuiet
        +-- Gmail 时间点对应
</t>
<t tx="zoomq.20100903210229.3843">支持片段代码收集...</t>
<t tx="zoomq.20100903210229.3844">

</t>
<t tx="zoomq.20100903210229.3845">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff

sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20100903210229.3846">@language python
@tabwidth -4
@others
</t>
<t tx="zoomq.20100903210229.3847">#! /usr/bin/env python
import math
import dislin

n = 101
f = 3.1415926 / 180.
x = range (n)
y1 = range (n)
y2 = range (n)
for i in range (0,n):
  x[i] = i * 3.6
  v = i * 3.6 * f
  y1[i] = math.sin (v)
  y2[i] = math.cos (v)

dislin.metafl ('xwin')
dislin.disini ()
dislin.complx ()
dislin.pagera ()

dislin.axspos (450, 1800)
dislin.axslen (2200, 1200)

dislin.name   ('X-axis', 'X')
dislin.name   ('Y-axis', 'Y')

dislin.labdig (-1, 'X')
dislin.ticks  (9, 'X')
dislin.ticks  (10, 'Y')

dislin.titlin ('Demonstration of CURVE', 1)
dislin.titlin ('SIN (X), COS (X)', 3)

ic = dislin.intrgb (0.95, 0.95, 0.95)
dislin.axsbgd (ic)
 
dislin.graf   (0., 360., 0., 90., -1., 1., -1., 0.5)
dislin.setrgb (0.7, 0.7, 0.7)
dislin.grid   (1,1)

dislin.color  ('fore')
dislin.height (50)
dislin.title  ()

dislin.color  ('red')
dislin.curve  (x, y1, n)
dislin.color  ('green')
dislin.curve  (x, y2, n)
dislin.disfin ()

</t>
<t tx="zoomq.20100903210229.3851">def try():
    """
    """
    &lt;&lt;my sub node&gt;&gt;
    pass
    &lt;&lt;my sub node&gt;&gt;

</t>
<t tx="zoomq.20100903210229.3854">#!/usr/bin/env python
import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)

g('unset multiplot')
raw_input('Please press return to continue...\n') 
</t>
<t tx="zoomq.20100903210229.3855">#!/usr/bin/env python

import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g.plot([(0,2),(1,2),(2,2)])
g('set multiplot')
g('set size 0.5,0.5')

</t>
<t tx="zoomq.20100903210229.3856">@path olink_ad_point

from operator import itemgetter

myDict={
    "www":[112,177,888]
    ,"blog":[777,66,12]
    ,"chat":[13,5464,442]
    ,"yue":[5634,1232,177]
    }

print myDict
print "\n\n"

#sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(myDict.items()
    , key=lambda x: x[1][1]
    ,reverse=True):
    print k,v 

print myDict

</t>
<t tx="zoomq.20100903210229.3857">import os,sys
import random, Gnuplot

title = sys.argv[1]
g = Gnuplot.Gnuplot(persist=1)
DEFONT="/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
g('set term png font "%s" ' %DEFONT)
g('set output "gnuplot-%s.png" ' %title)
g('set title "easy-account chart %s" ' %title)

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]

g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)</t>
<t tx="zoomq.20100903210229.3858"></t>
<t tx="zoomq.20100903210229.3859"># -*- coding: utf-8 -*-
from foo import add2

import unittest

class DemoTest(unittest.TestCase):
    def testFoo(self):
        self.assertEqual(1, 0)

    def testAdd(self):
        sefl.assertEqual(2, add2(1, 1))




</t>
<t tx="zoomq.20100903210229.3860">

#collection cron script abt SEO
</t>
<t tx="zoomq.20100903210229.3861">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# auto sync p2p dled out intra. usage wget
2 2 * * * /data0/p2p4mu/chkmldonkey.sh
3 3 * * * /data0/p2p4mu/cleanMLDed.sh

### zoomq::070524 add for auto analyzed YK running log for adPoint monitoring
6 6 * * * /data0/mupopro/logs/yseo6_do_adpanalyzer.sh

### zoomq::070615 add for auto analyzed YK searched key words
7 7 * * * /data1/ykrunning/mupopro/logs/searchKeyAnalyzer/statsSearchKey.sh
</t>
<t tx="zoomq.20100903210229.3862">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
## zoomq::070615 cancel sync log into 59;usage 61 NFS export runlogs analzye
#7 7 * * * /home/zoomq/4p2p/mldledSyncAll.sh
</t>
<t tx="zoomq.20100903210229.3863">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"


cd $runykseo6

echo "$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday"
$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday

echo "$version done statistics 4 yseo0 @ " `$cmdDate +"%Y/%m/%d %H:%M:%S"` 

echo
exit  0


</t>
<t tx="zoomq.20100903210229.3864">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"

echo "$version auto running for YKSEO @ " `$cmdDatedate +"%Y/%m/%d %H:%M:%S"` 

cd $runykseo0

echo "$cmdPython dailySECoveRate.py $defaultFont"
$cmdPython dailySECoveRate.py $defaultFont


echo
exit  0


</t>
<t tx="zoomq.20100903210229.3865">#!/bin/bash

&lt;&lt; init &gt;&gt;

LOGROOT="/var/log/sync"
LOGFILE="/var/log/sync/$today-synced.log"
RESROOT="/data3/p2pmldonkey"

PUTPATH="$RESROOT/done/$today"
PUTYEST="$RESROOT/done/$yesterday"
ULRTOD="http://60.28.2.131:81/done/$today/"
ULRYES="http://60.28.2.131:81/done/$yesterday/"
doWget="$cmdWget -c -nv -N -r -np -nd -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ "

SYNCPAS="/usr/local/etc/sync.key"
dosync="$cmdRsync -vztu --bwlimit=1024 --password-file=$SYNCPAS sdper@60.28.2.131::p2pmldonkey/done/$today"
#echo $dosync

&lt;&lt; sync p2ped &gt;&gt;

RUNLOGROOT="/data3/run_yueku_logs"
RUNLOGanalyzed="$RUNLOGROOT/analyzed"
PATHanalyzed="$RUNLOGanalyzed/runYueKuLogs/analyzed"
&lt;&lt; sync runlog &gt;&gt;

echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


echo
exit  0

</t>
<t tx="zoomq.20100903210229.3866">###!/bin/sh
#===========================================
#====== Change log =========================
# zoomq::070603 add zip running log shell,after download all pre. analyz in TJ131
# zoomq::070517 clean yestday sync.;and dl YueKu runing daily logs all into /data3/run_yueku_logs/
# zoomq::070515 add for sync all YueKu runing log into /data3/run_yueku_logs/
# zoomq::070427 for auto sync MLDonkey downloaded dir and .lsRL
#===========================================
#today="`date +"%y%m%d"`"
version="'mldledSyncAll v0.9.1 070517"

offset="+0"
nowday="`date -d "$offset day" "+%Y%m%d"`"
#nowday="`date +"%d"`"
#offset=0
#((yday=nowday - offset))
today=$nowday
#"`date +"%Y%m"`$yday"
#((yday=nowday - offset -1 ))
offset="-1"
yesterday="`date -d "$offset day" "+%Y%m%d"`"
yesterlog="`date -d "$offset day" "+%y%m%d"`"
#yesterday="`date +"%Y%m"`$yday"
#echo "try $yesterday"

#echocmd=$( which echo)
cmdWget=$( which wget)
cmdRsync=$( which rsync)
#cmdLs=$( which ls)
cmdMkdir=$( which mkdir)
cmdMv=$( which mv)
cmdRm=$( which rm)
</t>
<t tx="zoomq.20100903210229.3867">echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
echo "auto SYNC mldonkey p2p downloaded files..."
echo "chk dir :: $PUTPATH"
if [ -d $PUTPATH ]
then
    cd $PUTPATH
    $cmdLs -la &gt; $LOGFILE
else
    echo "$PUTPATH not exist! creat now.."
    echo "$PUTPATH not exist! creat now.." &gt;&gt; $LOGFILE
	echo "$cmdMkdir -p $PUTPATH" &gt;&gt; $LOGFILE
	$cmdMkdir -p $PUTPATH
    
    cd $PUTPATH
    ls -la  &gt;&gt; $LOGFILE
fi

ls -la
#echo "$dosync/* $PUTPATH/"
#$dosync/* $PUTPATH/
echo "$doWget $ULRTOD $PUTPATH/" &gt;&gt; $LOGFILE
echo "$doWget $ULRTOD ./"
$doWget $ULRTOD ./

echo 
echo "try sync yesterday dled files again..."
echo "try sync yesterday dled files again..." &gt;&gt; $LOGFILE
ls -la
ls -la  &gt;&gt; $LOGFILE

cd $PUTYEST
echo "$doWget $ULRYES $PUTYEST/" &gt;&gt; $LOGFILE
echo "$doWget $ULRYES ./"
#$doWget $ULRYES ./
</t>
<t tx="zoomq.20100903210229.3868">echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` 
echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


cd $RUNLOGROOT
$cmdWget -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/$yesterlog/

echo "###start dl for analyzed .log @ " `date +"%Y/%m/%d %H:%M:%S"` 

cd $RUNLOGanalyzed
$cmdWget -A.log -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/analyzed/

echo "cd $PATHanalyzed"
cd $PATHanalyzed
echo "./zipadplog.sh adPoint$yesterlog.log"
./zipadplog.sh adPoint$yesterlog.log

</t>
<t tx="zoomq.20100903210229.3869">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
#3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
8 8 * * * /home/zoomq/4p2p/syncYKrunlogs.sh

</t>
<t tx="zoomq.20100903210229.3870"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32 2002/11/22 16:13:39 tom Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

HOME=/var/log
#
#minute hour    mday    month   wday    who     command
#
*/5     *       *       *       *       root    /usr/libexec/atrun
#
# Save some entropy so that /dev/random can re-seed on boot.
*/11    *       *       *       *       operator /usr/libexec/save-entropy
#
# Rotate log files every hour, if necessary.
0       *       *       *       *       root    newsyslog
#
# Perform daily/weekly/monthly maintenance.
1       3       *       *       *       root    periodic daily
15      4       *       *       6       root    periodic weekly
30      5       1       *       *       root    periodic monthly
#
# Adjust the time zone if the CMOS clock keeps local time, as opposed to
# UTC time.  See adjkerntz(8) for details.
1,31    0-5     *       *       *       root    adjkerntz -a

MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
# auto do all matter for YKSEO1.0
9 9 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoAM.sh &gt; /var/log/YKSEO/ykseo.log
8 18 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoPM.sh &gt; /var/log/YKSEO/ykseo.log

</t>
<t tx="zoomq.20100903210229.3872">@path /home/zoomq/.zoomq/rc.local</t>
<t tx="zoomq.20100903210229.3876">@path /home/zoomq/2matter4peg/tangle/zoom.quiet/4lifeHacking
时间帐单处置辅助</t>
<t tx="zoomq.20100903210229.3877">@path tpl</t>
<t tx="zoomq.20100903210229.3878">dsfadsf
dasfa
dsf
&lt;&lt;my sub node&gt;&gt;
adsf
adsf
ds
&lt;&lt;my sub node&gt;&gt;

sdfdsf
</t>
<t tx="zoomq.20100903210229.3879">[i,i+1 for i in range(10)&lt;&lt;我的&gt;&gt;]
</t>
<t tx="zoomq.20100903210229.3880">dgdfg
dsfgdfsg
sdfdfgsg
dfsg
</t>
<t tx="zoomq.20100903210229.3881">## try leo
TILOG={'DEFONT':"/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
    ,'TITLE':"TiLog"
    ,'PATH':{'root':"/home/zoomq/2matter4peg/tangle/zoomquiet/4lifeHacking"
        ,'log':"_log"
        ,'exp':"exp"
        ,'data':"data"
        ,'tpl':"tpl"
        }
    ,'FILTER':{'log':"zq-tilog-*.txt"
        }
    ,'TPL':{'log':"zq-tilog-%s.txt"
        }
    ,'DICT':{'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    ,'tLebel':['tLost','tInput','tOutput','tCommunicate','tMyself','tSleep']
    }
INIDICT={'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}</t>
<t tx="zoomq.20100903210229.3882">&lt;&lt; tilog_chart declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python tilog_chart.py MonthPoint [like 0812]
        """ % VERSION
    else:
        zmonth = sys.argv[1]                 #[-10:-4]    print tonow
        tilogchart(zmonth)

    print "Mnnnn export all that report! \n by %s"%VERSION


</t>
<t tx="zoomq.20100903210229.3883"># -*- coding: utf-8 -*-
import os,sys
#import time,datetime,pickle
#from operator import itemgetter
from fnmatch import *
from cfg import *

#from pychartdir import *
#from ChartDirector import pychartdir as pcd

VERSION = "tilog_chart v0.8-090304@Zoom.Quiet"
#print dir()

''''tilog_chart.py'
    v0.7 090205 init. to simple chart handwrited TiLog
'''



</t>
<t tx="zoomq.20100903210229.3884">def tilogchart(month):
    '''main func
    '''
    #print TILOG['PATH']
    #flog = filter(os.listdir(TILOG['PATH']['data'])
    #    ,TILOG['FILTER']['log'])
    flog = "%s/%s"%(
        TILOG['PATH']['data']
        ,TILOG['TPL']['log']%month
        )
    #dictchart = {'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    for li in open(flog):
        formatlog(li)
        #pass
    dayline(month)
    TILOG['DICT']=INIDICT
    for li in open(flog):
        formatotm(li)
        #pass
    monthpie(month)
    TILOG['DICT']=INIDICT
    '''
    for li in open(flog):
        formatotmr(li)
        pass
    '''
    monthradar(month)
    TILOG['DICT']=INIDICT





</t>
<t tx="zoomq.20100903210229.3885">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3886">def formatotmr(line):
    '''format log data into dict for tot time month in radar
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3887">def monthradar(month):
    '''usage ChartDirector exp chart in radar
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]
    # The data for the chart
    #data = [6,7,3,8,7,9,7,4,10]


    # Create a PolarChart object of size 450 x 350 pixels
    c = pcd.PolarChart(350, 300)
    c.setRoundedFrame()
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    #c.addTitle("角色雷达图谱:", defaultfont, 14, 0xffffff).setBackground(0x008000)
    #c.addTitle2(TopLeft, "&lt;*underline=2*&gt;角色雷达图谱:", defaultfont, 14)

    # Set center of plot area at (225, 185) with radius 150 pixels
    #c.setPlotArea(225, 185, 150)
    c.setPlotArea(180, 160, 100)
    #c.setGridColor(0xc0000000L, 1, 0xc0000000L, 1)

    # Add an area layer to the polar chart
    c.addAreaLayer(data, 0x9999ff)
    c.addLineLayer(data, 0x6666cc).setLineWidth(3)

    c.setPlotAreaBg(0xdddddd, 0xeeeeee)
    c.setGridStyle(0)

    layer0 = c.addLineLayer(data, 0x0000ff, "Close Loop Line")
    #layer0.setAngles(data)

    # Set the line width to 2 pixels
    layer0.setLineWidth(2)

    # Use 11 pixel triangle symbols for the data points
    layer0.setDataSymbol(pcd.CircleShape, 11, 0xffff00)

    #layer0.setDataLabelStyle().setBackground(0x9999ff, pychartdir.Transparent, 1)

    # Enable data label and set its format
    #layer0.setDataLabelFormat("{value}分")


    # Set the labels to the angular axis as spokes
    c.angularAxis().setLabels(labels).setFontStyle(TILOG['DEFONT'])

    # output the chart
    c.makeChart("zq-ti-month-radar-%s.png"%month)
    print "EXPed: zq-ti-month-radar-%s.png"%month

</t>
<t tx="zoomq.20100903210229.3888">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3889">def formatotm(line):
    '''format log data into dict for tot time month
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3890">def monthpie(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]

    # creat chart
    c = pcd.PieChart(440, 200,pcd.metalColor(0xccccff, 0), 0x000000, 1)
    c.setRoundedFrame()
    c.setPieSize(215, 110, 80)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    c.set3D(-1,60)
    c.setData(data, labels)
    c.setExplode(0)
    #c.setStartAngle(135)
    c.setStartAngle(90, 0   )

    c.setLabelLayout(pcd.SideLayout)
    c.setLabelFormat("{label}&lt;*br*&gt;{value}h ({percent}%)")

    t = c.setLabelStyle()
    t.setBackground(pcd.SameAsMainColor, pcd.Transparent, pcd.glassEffect())
    t.setRoundedCorners(5)
    c.setLineColor(pcd.SameAsMainColor, 0x334433)

    # output the chart
    c.makeChart("zq-ti-month-pie-%s.png"%month)
    print "EXPed: zq-ti-month-pie-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3891">#line fot time usaged in day</t>
<t tx="zoomq.20100903210229.3892">def formatlog(line):
    '''format log data into dict
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI'].append(float(dli[1]))
        ddict['tO'].append(float(dli[2]))
        ddict['tC'].append(float(dli[3]))
        ddict['tM'].append(float(dli[4]))
        ddict['tS'].append(float(dli[5]))




</t>
<t tx="zoomq.20100903210229.3893">def dayline(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['DICT']['date']
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']

    c = pcd.XYChart(800, 300, 0xeeeeff, 0x000000, 1)
    c.setRoundedFrame()
    c.setPlotArea(55, 58, 720, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)
    c.addLegend(50, 30, 0, TILOG['DEFONT'], 9).setBackground(pcd.Transparent)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())

    c.yAxis().setTitle("hour")
    c.xAxis().setLabels(labels).setFontAngle(45)

    #c.xAxis().setLabelStep(3)
    c.xAxis().setTitle("date")

    # Add a line layer to the chart
    layer = c.addLineLayer2()

    layer.setLineWidth(2)

    layer.addDataSet(tI, 0xff0000, "tI")
    layer.addDataSet(tO, 0x008800, "tO")
    layer.addDataSet(tC, c.dashLineColor(0x3333ff, pcd.DashLine), "tC")
    layer.addDataSet(tM, 0xff8800, "tM")
    layer.addDataSet(tS, 0x334433, "tS")

    # output the chart
    c.makeChart("zq-ti-line-day-%s.png"%month)
    print "EXPed: zq-ti-line-day-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3894">def expchart(month):
    '''usage ChartDirector exp charts
    '''
    lineday(month)

</t>
<t tx="zoomq.20100903210229.3895">def expplot():
    '''usage Gnuplot exp png chart
    '''
    print TILOG['DICT']['date']
    i = 0
    d=[]
    for j in TILOG['DICT']['tI']:
        d.append([i,j])
        i+=1
    print d
    import Gnuplot
    g = Gnuplot.Gnuplot(persist=1)
    g('set term png font "%s" ' %TILOG['DEFONT'])
    g('set output "gnuplot-%s.png" ' %TILOG['TITLE'])
    g('set title "Zoomq`s chart %s" ' %TILOG['TITLE'])

    g('set xlabel "日期" ')
    g('set ylabel "时耗" ')

    g.plot([[0, 1.0], [1, 2.0], [2, 0.0], [3, 4.5], [4, 2.5], [5, 3.0], [6, 1.0], [7, 0.0], [8, 0.0], [9, 0.0], [10, 2.5], [11, 0.0], [12, 0.0], [13, 2.0], [14, 0.0], [15, 0.0], [16, 1.0], [17, 2.5], [18, 2.5], [19, 1.5]])
    #d = Gnuplot.Data(TILOG['DICT']['date'],TILOG['DICT']['tI'])
    #g.plot(str(d))



</t>
<t tx="zoomq.20100903210229.3896">@path ../zoomquiet-tangle/txt/KMthinking/
#zoomquiet.leo/txt/KMthinking
</t>
<t tx="zoomq.20100903210229.3897">wiki 不是任何人都可以用的！
??

- 任何的理由都是理由:
 - word 经验是即得的不用学习
 - wiki 无法快速使用表格
 - wiki 难以排版不好看

...
以往的努力都使错方向了:

维基的本质是相互服务，文章共用
而所有不习惯维基的人，都不是维基用户
只是文章消费者，本质期望是:
- 有人为他们准备好 清晰/明了/排版漂亮 的索引页面
- 他们随时可以查阅想查阅的!

MLBD !怪不得维基不能用!
没有分享的冲动,没有知识的结构,还想有专人为您服务?!
- 对分享人不公平!
 - 屈从你的格式你的分类?!
- 对其它查阅者也不公平!
 - 屈从你的格式你的分类?!


&gt;
&gt; 哦，那我觉得最核心的问题是：wiki一定要定位明确
是也乎，是也乎，
所以，俺推广维基时，首先都是尝试说明什么是维基，而不是怎么使用...
但是，真的是在 Office 淫威之下的人们，大多数无法想象 Word 不方便之处(也可能是拒绝想象)
但是，维基也的确是可以当成各种平台来用:
- 有公司用维基作工单系统
- 配合插件，可以作个人/团队blog
- 共同写作平台
- FAQ
- ...
维基是真正作到本身简单到极致,使用正式自由到充分的信息管理平台了,
就象 Scrunm 成功实施的团队一样,人最重要!
使用维基成功,必须是:
- 团队有知识积累的冲动
- 所有人有知识分享的冲动
- 所有人有时间记录知识片段
- 所有人愿意配合其它人整理知识体系

&gt; 是作为随手分享的知识经验库还是作为正式的文档资料库，一定要搞清楚
&gt; 如果定位是后者，那要想保证wiki文档的权威性，就不能把其他分享掺合进来，就一定全是正式文档。这里如何组织文档是非常重要的问题。MoinMoin的url太灵活了，这虽然方便，但其实对使用者有了比较高的要求。别说非技术人员，就是技术人员在“我的文档该放在哪儿”这个问题上也是有些纠结的，这一点是推广wiki作为正式文档库的核心障碍，如果就这一点多下些功夫，制定方便的规范和流程并且给出培训，就好了。
&gt; 这时，wiki可以基本取代非流转性的(无需流转到客户手中)word文档，如果需要流转，导出就行了。但电子表格和幻灯是完全没法的。但这两种文档一般也没有相互链接，自由索引／复用，统一搜索等需求。
&gt; 建议电子表格类文档不要往wiki里整合了，如果统一存在svn中，引用时给出url，或者直接上传复件，如果要显示局部数据，给出截图。

</t>
<t tx="zoomq.20100908091715.2579">蟒营:
    +-- 文档:
        +-- #Hg使用:
            +-- code.google 協同
                '+-- 权限'
                '+-- 初始化'
            +-- 本地使用:
                '+-- M$工具'
                '+-- 仓库理解'
                '+-- 提交'
                '+-- 合并'
                #+-- 分支
            +-- 团队協同
                '+-- 局部交换'
        +-- Py 环境
        +-- #工程协同
            +-- 维基贡献?
            +-- 仓库使用流程...
    +-- 环境:
        +-- Trac:Bitten TDD 配置
        +-- Hg Hooks...
    +-- 教案:
        +-- Py
        +-- Web
        +-- DB
        +-- ...</t>
<t tx="zoomq.20100925155257.2580">+-- PyBlosxom:
    +-- 部署:
        +-- ~Hg hook
        +-- crontab 备份?
    +-- 评注:
        +-- 外部JS 评注服务
        +-- WeKnow GAE服务
            +-- Cloudant 使用
    +-- 增进:
        +-- '文章页 title 插入'
            ~/zq.pyblosxom/pybshare/jquery-pybactions.js
        +-- ...
    +-- 优化:
        +-- 图片合并css 配合
        +-- JS 合并压缩
        +-- CSS 合并压缩
    +-- #Leo配合:
        +-- 自动事务按钮:
            +-- t2t编译
            +-- 静态化发布

</t>
<t tx="zoomq.20100927113242.2581">
foo-main    :8000 主仓库
    $ hg serve -p 8000 -a 127.0.0.1 -n "HgDemo main REPO."
    hg serve -p 8000 -a 10.20.208.13 -n "HgDemo main REPO."
foo-zq      :9001 用户克隆
    $ hg serve -p 9001 -a 127.0.0.1 -n "HgDemo: ZQ'srv. clone" --style gitweb
foo-bar     :9002
    $ hg serve -p 9002 -a 127.0.0.1 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.34 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.13 -n "HgDemo: BAR'srv. clone" --style coal

foo-loc     本地仓库
bar-loc

[extensions]
hgext.extdiff =

[extdiff]
;tortoisemerge =
beyondcompare3.args=$local $other $base $output /ro /lefttitle=local /centertitle=base /righttitle=other /automerge /reviewconflicts /solo
beyondcompare3.regkey=Software\Scooter Software\Beyond Compare 3
beyondcompare3.regname=ExePath
beyondcompare3.gui=True
beyondcompare3.priority=-2
beyondcompare3.diffargs=/lro /lefttitle='$plabel1' /righttitle='$clabel' /solo /expandall $parent $child

[merge-tools]
tortoisemerge.args=/base:$base /mine:$local /theirs:$other /merged:$output
tortoisemerge.regkey=Software\TortoiseSVN
tortoisemerge.checkchanged=True
tortoisemerge.gui=True
tortoisemerge.priority=-4
tortoisemerge.diffargs=/base:$parent /mine:$child /basename:'$plabel1' /minename:'$clabel'
</t>
<t tx="zoomq.20101015095808.2582">.hgrc 中的常用配置...

</t>
<t tx="zoomq.20101019093735.5077">[extensions]
hgext.extdiff =

[extdiff]
cmd.diffuse = 
;cmd.kdiff3 =

[merge-tools]
;kdiff3.args = $base $local $other -o $output

diffuse.priority=-3
diffuse.args=$local $base $other
diffuse.gui=True
diffuse.diffargs=$parent $child


[extensions]
hgext.extdiff =

[extdiff]
cmd.kdiff3 =

[merge-tools]
kdiff3.args = $base $local $other -o $output
</t>
<t tx="zoomq.20101019093735.5078">[extensions]
hgext.keyword=

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}
</t>
<t tx="zoomq.20101019093735.5079">+-- http://xkcd.com/ 中文翻译
    +-- 下载脚本 '/home/zoomq/media/manga/2graspic/xkcd.com/' grasp-xkcd.sh;filter-xkcd.py
    +-- blogger.com 发布?</t>
<t tx="zoomq.20101026092125.2576">@data</t>
<t tx="zoomq.20101026092125.2577">@nocolor
date,tI,tO,tC,tM,tF,tS
101008,1.5,3.0,0.5,5.5,5.5,7.0
101009,0.0,3.0,0.5,5.5,6.5,7.0

101011,3.0,3.0,0.0,5.0,5.0,6.5
101012,0.5,1.5,2.0,6.0,5.0,6.0
101013,1.0,5.0,1.5,5.0,5.0,7.0
101014,6.0,0.0,0.0,6.0,5.0,7.0
101015,0.0,6.0,0.0,6.0,5.0,7.0

101018,0.0,3.25,1.2,8.25,5.0,7.0
101019,0.0,6.0,3.75,3.75,3.25,6.0
101020,1.0,4.0,0.5,9.0,5.0,6.5
</t>
<t tx="zoomq.20101029104710.3831">[ui]
username = Zoom.Quiet &lt;zoomquiet+hg@gmail.com&gt;

[extensions]
hgext.keyword=
graphlog =

[defaults] 
glog = --style compact

[alias] 
ll = glog --style compact

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =
**.xml =
**.yaml =
**.html =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}

</t>
<t tx="zoomq.20101030170919.2579"></t>
<t tx="zoomq.20101030170919.2580">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i
def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
if __name__=='__main__':
    main()
</t>
<t tx="zoomq.20101030170919.2581"># -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
</t>
<t tx="zoomq.20101030170919.2582">def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i

</t>
<t tx="zoomq.20101030170919.2583">def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
</t>
<t tx="zoomq.20101103153946.3839">邮件来自 Google Groups:"ks-deve"金山开源社区技术邮件列表
讨论: ks-deve@googlegroups.com
退订,请邮件至: ks-deve+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com


邮件来自 Google Groups:"ks-user"金山开源社区用户邮件列表
讨论: ks-user@googlegroups.com
退订,请邮件至: ks-user+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-user
技术列表: http://groups.google.com/group/ks-deve
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com

邮件来自 Google Groups:"ks-ann"金山开源社区通告邮件列表
讨论: ks-ann@googlegroups.com
退订,请邮件至: ks-ann+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-ann
技术列表: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
社区官网: http://code.ijinshan.com</t>
<t tx="zoomq.20101103153946.5095">+-- 常好CLI 技巧:
    +-- history
    +-- 文件更动...
+-- Vim
+-- rxvt
    +-- tmux
    +-- Muut+Gmail
</t>
<t tx="zoomq.20101104113205.5096">邮件来自 Google Groups "DouPy"列表!
讨论: DouPy@googlegroups.com | 退订: DouPy+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/DouPy
工程: http://code.google.com/p/unbeans/
维基: http://code.google.com/p/unbeans/wiki/DouPy

+-- doupy ~ 豆瓣综合使用:
    #你的豆瓣 API key:
0cd1817bb03732fc2674847310a598f4
API key 的详细信息   · · · · · · 
* 私钥：d241f9b2e06544fc -请保护好你的私钥
* 应用名称：Zoom.Quiet
* 创建时间: 2010-10-29
* 应用说明:
  个人试用各种豆瓣API, 通过Py 结合 Shell 进行Ubuntu 中的一键式操作, 在寻找到合理的快感后,将另外申请 Key 进行服务化 ;-)
</t>
<t tx="zoomq.20101105113140.2587">#服务即命令行
+-- GooglCL
+-- Cloudant 永久存储 ~ CouchDB
+-- DouPy ~ dubanAPI

</t>
<t tx="zoomq.20101109214756.6989">@language python
@tabwidth -4

整体规划 zoomquiet.org 相关网站发布及小工具任务

最终:
    zoomquiet.org
        http://zoomquiet.org/obp    图书工程发布    
    blog.zoomquiet.org
    jump&gt;&gt;&gt; http://blog.zoomquiet.org/pyblosxom
    
    floss.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqFLOSS/tree/
    skm.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqSKM/tree/

  &lt;head&gt;
  &lt;meta http-equiv="refresh" content="0;URL=gldt1009.svg"&gt;
  &lt;/head&gt;
    </t>
<t tx="zoomq.20101109214756.6990">zeus:~/zoomquiet.org&gt; tree -L 4
.
|-- README.txt
+-- _cfgs
+-- _cron
+-- _docs
+-- _logs
+-- _stuff
+-- blog    ~ PyBlosxom
|   +-- _static     ~ 发布为 /pyblosxom
|   +-- _images     ~ 发布为 /pybimage
|   +-- entries     ~ 发布为 /pybnodes
|   +-- flavours    ~ 发布为 /pybstyle
|   +-- pybshare    ~ 发布为 /pybshare
|   +-- plugins  
|   |-- blog.ini
|   |-- comment
|   |-- config.py
|   |-- index.html
|   |-- not-doc-2006-05-31-12-00.t2t
|   `-- ...
+-- repos
|   `-- zqlib-hg
`-- www
    |-- index.html -&gt; map/index.html
    |-- leo_doc_zh -&gt; obp/leo_doc_zh/doc/html/_build/html
    +-- logs -&gt; ../_logs
    +-- map
    +-- obp
    +-- res
    |   +-- HYRY-scipydoc
    |   +-- d   ~ 文档
    |   +-- f   ~ foto
    |   +-- j   ~ Js
    |   +-- m   ~ 多媒体
    |   |   |-- r   ~ 录音
    |   |   `-- v   ~ 录像
    |   +-- s5 -&gt; ../../repos/zqlib-hg/tangle/zoomquiet.leo/s5/
    |   `+- scrapbook 
    |-- pyblosxom_zh -&gt; obp/pyblosxom_zh/build/html/
    |-- pywdwpy -&gt; obp/PyWDWPy/build/html/
    |-- tpipy_zh -&gt; obp/TPiPy/build/html/
    `-- w2py_manual_zh -&gt; obp/web2py_manual_zh/build/html
</t>
<t tx="zoomq.20101109214756.6991">#Type:	Source:	Destination:	Actions:
# 准备好后,取消!
A Record	www.zoomquiet.org	202.108.44.62	Edit | Delete
A Record	obp.zoomquiet.org	119.88.56.193	Edit | Delete

# 核心域名
A Record	zoomquiet.org	119.88.56.193	Edit | Delete

A Record	blog.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	skm.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	floss.zoomquiet.org	119.88.56.193	Edit | Delete

# 预留,指向 gae
A Record	weknow.zoomquiet.org	202.108.44.62	Edit | Delete

CNAME Record	*.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	googlee445fdb76e058b0a.zoomquiet.org	google.com	Edit | Delete
CNAME Record	mail.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	zqlib.zoomquiet.org	ghs.google.com	Edit | Delete</t>
<t tx="zoomq.20101109214756.6992">对根页面进行精简:
    + 所有目录只显示前子目录和前5页面索引
        + 2级索引同上
        + 3级索引不限制
    + 默认说明页面 readme.html
    + 所有页面,增补原始URL旁注!</t>
</tnodes>
</leo_file>
