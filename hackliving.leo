<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_stylesheet?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20091008173724.1"><vh>@chapters</vh></v>
<v t="zoomq.20110709131924.2700" a="E"><vh>Yuike</vh>
<v t="zoomq.20110714090951.4108"><vh>logging</vh>
<v t="zoomq.20110711214730.4102"><vh>Kanban</vh></v>
<v t="zoomq.20110709131924.2703"><vh>工作设施</vh>
<v t="zoomq.20110711090727.6884"><vh>VPS</vh></v>
<v t="zoomq.20110711090727.6882"><vh>Apple</vh></v>
<v t="zoomq.20110714090951.6916"><vh>Air</vh></v>
<v t="zoomq.20110711090727.6883"><vh>Dell</vh></v>
</v>
</v>
<v t="zoomq.20110713090346.2709" a="E"><vh>fadpop</vh>
<v t="zoomq.20110720091129.2763"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110718091518.2725"><vh>test</vh>
<v t="zoomq.20110720091129.2771"><vh>@nosent readme.txt</vh></v>
</v>
<v t="zoomq.20110718091518.2723"><vh>queue</vh>
<v t="zoomq.20110720091129.2769"><vh>@nosent readme.txt</vh></v>
</v>
<v t="zoomq.20110718091518.2722"><vh>analyzer</vh>
<v t="zoomq.20110720091129.2765"><vh>@nosent readme.txt</vh></v>
</v>
<v t="zoomq.20110718091518.2721" a="E"><vh>CrawlSpider</vh>
<v t="zoomq.20110720091129.2767"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110709131924.2702"><vh>wget</vh>
<v t="zoomq.20110727201525.2842"><vh>整站</vh>
<v t="zoomq.20110711214730.2707"><vh>结果</vh></v>
</v>
</v>
<v t="zoomq.20110801085156.2824" a="E"><vh>vancl</vh>
<v t="zoomq.20110719082515.2733"><vh>@nosent cvsvancl.py</vh>
<v t="zoomq.20110719082515.4236"><vh>&lt;&lt;changelog&gt;&gt;</vh></v>
<v t="zoomq.20110721084347.2775"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110719082515.4237"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110719082515.4238"><vh>&lt;&lt;configures&gt;&gt;</vh>
<v t="zoomq.20110727085946.4409"><vh>LOG</vh></v>
<v t="zoomq.20110720193936.2773"><vh>TPL</vh></v>
<v t="zoomq.20110720193936.2774"><vh>&lt;&lt;doc_item&gt;&gt;</vh></v>
<v t="zoomq.20110720193936.2775"><vh>&lt;&lt;doc_foto&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20110720091129.2775"><vh>_popen</vh></v>
<v t="zoomq.20110719082515.4239"><vh>loadall(cvs)</vh>
<v t="zoomq.20110721084347.2777"><vh>&lt;&lt;整理入collection&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110721084347.2779"><vh>_put_img_gfs(info)</vh>
<v t="zoomq.20110725090916.4180"><vh>&lt;&lt;可能的其它图片格式&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110721084347.2781"><vh>_pick_by_w3m(htm)</vh></v>
<v t="zoomq.20110720193936.2772"><vh>_pick_table_data(txt)</vh></v>
</v>
<v t="zoomq.20110727085946.4416" a="E"><vh>@nosent loadpics.py</vh>
<v t="zoomq.20110727085946.4417"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110801085156.2866"><vh>&lt;&lt;define&gt;&gt;</vh>
<v t="zoomq.20110801085156.2867"><vh>&lt;&lt;configures&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110729105657.4271"><vh>loadpics(pkl,pathpic)</vh>
<v t="zoomq.20110801085156.2872"><vh>upall</vh></v>
</v>
<v t="zoomq.20110801085156.2858"><vh>_put_img_gfs(crtfoto,realpic)</vh></v>
</v>
<v t="zoomq.20110801085156.2873"><vh>ERROR</vh></v>
<v t="zoomq.20110801085156.2851" a="E"><vh>@nosent anapichtm.py</vh>
<v t="zoomq.20110801085156.2852"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110801085156.2853"><vh>anabigpicnames(pathml)</vh>
<v t="zoomq.20110801085156.2854"><vh>main</vh></v>
<v t="zoomq.20110801085156.2855"><vh>others</vh></v>
</v>
</v>
<v t="zoomq.20110728084936.4223"><vh>@nosent expuri.py</vh>
<v t="zoomq.20110728084936.4224"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="zoomq.20110801085156.2825"><vh>common</vh>
<v t="zoomq.20110801085156.2827"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110727085946.4412"><vh>@nosent fadutil.py</vh>
<v t="zoomq.20110727085946.4413"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110719082515.4240"><vh>run_time(func)</vh></v>
</v>
<v t="zoomq.20110801085156.2831"><vh>@nosent __init__.py</vh></v>
</v>
<v t="zoomq.20110718091518.2724"><vh>stuff</vh>
<v t="zoomq.20110720091129.2773"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110729105657.4269"><vh>@nosent imgurlistr.py</vh>
<v t="zoomq.20110729105657.4270"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110726202222.2796"><vh>@nosent mongoltry.py</vh>
<v t="zoomq.20110726202222.2798"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
<v t="zoomq.20110726202222.2804"><vh>logit()</vh></v>
</v>
<v t="zoomq.20110726202222.2815"><vh>@nosent mongolisten.py</vh>
<v t="zoomq.20110726202222.2816"><vh>&lt;&lt;imports&gt;&gt;</vh></v>
</v>
<v t="zoomq.20110709131924.2701"><vh>MongoDB</vh>
<v t="zoomq.20110718091518.2727"><vh>cvs4vancl</vh>
<v t="zoomq.20110719082515.2728"><vh>w3m</vh></v>
</v>
<v t="zoomq.20110718091518.2726"><vh>安装</vh>
<v t="zoomq.20110719082515.2729"><vh>gridFS</vh></v>
<v t="zoomq.20110721084347.2776"><vh>404自动处理</vh></v>
</v>
<v t="zoomq.20110714090951.6917"><vh>Mongo工具</vh></v>
</v>
</v>
<v t="zoomq.20110714001632.2710"><vh>API</vh>
<v t="zoomq.20110720091129.2777"><vh>@nosent readme.txt</vh></v>
<v t="zoomq.20110714090951.5509"><vh>vancl</vh>
<v t="zoomq.20110714090951.5514"><vh>图片</vh></v>
<v t="zoomq.20110714090951.5511"><vh>网店专用</vh>
<v t="zoomq.20110714090951.5510"><vh>代客下单</vh></v>
</v>
<v t="zoomq.20110714090951.5512"><vh>网站专用</vh></v>
</v>
<v t="zoomq.20110714090951.5508"><vh>moonbasa</vh>
<v t="zoomq.20110714090951.5513"><vh>图片</vh></v>
</v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3876"><vh>4lifeHacking</vh>
<v t="zoomq.20101026092125.2576"><vh>TiLogs</vh>
<v t="zoomq.20110504084047.2679"><vh>@nosent zq-tilog-1108.txt</vh></v>
<v t="zoomq.20110802085156.2837"><vh>@nosent zq-tilog-1107.txt</vh></v>
<v t="zoomq.20110705091223.2700"><vh>@nosent zq-tilog-1106.txt</vh></v>
<v t="zoomq.20110601083753.2699"><vh>@nosent zq-tilog-1105.txt</vh></v>
<v t="zoomq.20110209102527.2595"><vh>@nosent zq-tilog-1104.txt</vh></v>
<v t="zoomq.20110402090250.2620"><vh>@nosent zq-tilog-1103.txt</vh></v>
<v t="zoomq.20110301085102.3912"><vh>@nosent zq-tilog-1102.txt</vh></v>
<v t="zoomq.20110104095502.2596"><vh>@nosent zq-tilog-1101.txt</vh></v>
<v t="zoomq.20101228111644.2596"><vh>@nosent zq-tilog-1012.txt</vh></v>
<v t="zoomq.20101228111644.2594"><vh>@nosent zq-tilog-1011.txt</vh></v>
<v t="zoomq.20101026092125.2577"><vh>@nosent zq-tilog-1010.txt</vh></v>
</v>
<v t="zoomq.20100903210229.3843"><vh>misc</vh>
<v t="zoomq.20100903210229.3844" a="M"><vh>_stuff</vh>
<v t="zoomq.20100903210229.3845"><vh>dict sort</vh></v>
<v t="zoomq.20100903210229.3846"><vh>dislin-0.py</vh>
<v t="zoomq.20100903210229.3847"><vh>dislin-0 declarations</vh></v>
</v>
<v t="zoomq.20100903210229.3878"><vh>@nosent try0.txt</vh>
<v t="zoomq.20100903210229.3879"><vh>&lt;&lt;my sub node&gt;&gt;</vh>
<v t="zoomq.20100903210229.3880"><vh>&lt;&lt;我的&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3851"><vh>@nosent try1.txt</vh>
<v t="zoomq.20100903210229.3879"></v>
</v>
<v t="zoomq.20100903210229.3854"><vh>@nosent plotry.py</vh></v>
<v t="zoomq.20100903210229.3855"><vh>@nosent plotry1.py</vh></v>
<v t="zoomq.20100903210229.3856"><vh>@nosent dictsort.py</vh></v>
<v t="zoomq.20100903210229.3857"><vh>@nosent plotry2.py</vh></v>
</v>
<v t="zoomq.20100903210229.3858"><vh>unitest</vh>
<v t="zoomq.20100903210229.3859"><vh>@nosent test0.py</vh></v>
</v>
<v t="zoomq.20100903210229.3860"><vh>_cron</vh>
<v t="zoomq.20100903210229.3861"><vh>inter.131</vh></v>
<v t="zoomq.20100903210229.3862"><vh>intra.59</vh>
<v t="zoomq.20100903210229.3863"><vh>@nosent doykseoAM.sh</vh></v>
<v t="zoomq.20100903210229.3864"><vh>@nosent doykseoPM.sh</vh></v>
<v t="zoomq.20100903210229.3865"><vh>@nosent mldledSyncAll.sh</vh>
<v t="zoomq.20100903210229.3866"><vh>&lt;&lt; init &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3867"><vh>&lt;&lt; sync p2ped &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3868"><vh>&lt;&lt; sync runlog &gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3869"><vh>intra.61</vh></v>
<v t="zoomq.20100903210229.3870"><vh>intra.101</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3877"><vh>tpl</vh>
<v t="zoomq.20100903210229.3878"></v>
</v>
<v t="zoomq.20100903210229.3881"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20100903210229.3882"><vh>@nosent tilog_chart.py</vh>
<v t="zoomq.20100903210229.3883"><vh>&lt;&lt; tilog_chart declarations &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3884"><vh>tilogchart()</vh></v>
<v t="zoomq.20100903210229.3885"><vh>radar4month</vh>
<v t="zoomq.20100903210229.3886"><vh>formatotmr()</vh></v>
<v t="zoomq.20100903210229.3887"><vh>monthradar()</vh></v>
</v>
<v t="zoomq.20100903210229.3888"><vh>pie4month</vh>
<v t="zoomq.20100903210229.3889"><vh>formatotm()</vh></v>
<v t="zoomq.20100903210229.3890"><vh>monthpie()</vh></v>
</v>
<v t="zoomq.20100903210229.3891"><vh>line4day</vh>
<v t="zoomq.20100903210229.3892"><vh>formatlog()</vh></v>
<v t="zoomq.20100903210229.3893"><vh>dayline()</vh></v>
</v>
<v t="zoomq.20100903210229.3894"><vh>expchart()</vh></v>
<v t="zoomq.20100903210229.3895"><vh>expplot()</vh></v>
</v>
</v>
<v t="zoomq.20110218220319.3903"><vh>RWIwPyZh</vh>
<v t="zoomq.20110322090028.3918" a="E"><vh>翻译</vh>
<v t="zoomq.20110322090028.9761"><vh>@shadow LINKS.rst</vh></v>
<v t="zoomq.20110518221155.2680"><vh>ch00</vh>
<v t="zoomq.20110518221155.2681"><vh>@nosent intro.rst</vh></v>
<v t="zoomq.20110518221155.2683"><vh>@nosent preface.rst</vh>
<v t="zoomq.20110518221155.2684"><vh>谁该看这书</vh></v>
<v t="zoomq.20110518221155.2686"><vh>编程</vh></v>
<v t="zoomq.20110518221155.2688"><vh>为嘛Python</vh></v>
<v t="zoomq.20110518221155.2690"><vh>系统</vh></v>
<v t="zoomq.20110518221155.2692"><vh>方法论</vh></v>
<v t="zoomq.20110518221155.2694"><vh>书的组织</vh></v>
<v t="zoomq.20110518221155.2696"><vh>图书规约</vh></v>
<v t="zoomq.20110518221155.2698"><vh>示例使用</vh></v>
<v t="zoomq.20110518221155.2699"><vh>Safari® Books Online</vh></v>
<v t="zoomq.20110518221155.2701"><vh>联系我们</vh></v>
<v t="zoomq.20110518221155.2703"><vh>感谢</vh></v>
</v>
</v>
<v t="zoomq.20110322090028.3919"><vh>ch03</vh>
<v t="zoomq.20110322090028.3920"><vh>@nosent index.rst</vh></v>
<v t="zoomq.20110322090028.3921"><vh>@nosent 0_intro.rst</vh></v>
<v t="zoomq.20110322090028.3922"><vh>@nosent 1_install_py.rst</vh></v>
<v t="zoomq.20110322090028.3923"><vh>@nosent 2_py_programming_language.rst</vh>
<v t="zoomq.20110407085430.2620"><vh>Python的命令行</vh></v>
<v t="zoomq.20110407085430.2621"><vh>命令行</vh></v>
<v t="zoomq.20110407085430.2622"><vh>Python中的对象</vh></v>
<v t="zoomq.20110407085430.2623"><vh>数据类型</vh>
<v t="zoomq.20110419090531.8816"><vh>数字数据对象</vh></v>
<v t="zoomq.20110419090531.8817"><vh>序列对象</vh></v>
<v t="zoomq.20110419090531.8818"><vh>字典</vh></v>
</v>
<v t="zoomq.20110407085430.2624"><vh>表达式</vh></v>
<v t="zoomq.20110407085430.2625"><vh>运算符</vh>
<v t="zoomq.20110425090758.3984"><vh>算术运算符</vh></v>
<v t="zoomq.20110428091054.3987"><vh>逻辑运算符</vh></v>
<v t="zoomq.20110428091054.3988"><vh>比较运算</vh></v>
<v t="zoomq.20110428091054.3989"><vh>位运算符</vh></v>
<v t="zoomq.20110428091054.3990"><vh>赋值运算符</vh></v>
<v t="zoomq.20110428091054.3991"><vh>成员操作符</vh></v>
<v t="zoomq.20110428091054.3992"><vh>身份测试</vh></v>
<v t="zoomq.20110428091054.3993"><vh>运算优先级</vh></v>
</v>
<v t="zoomq.20110407085430.2626"><vh>语句</vh>
<v t="zoomq.20110428091054.3994"><vh>缩进</vh></v>
<v t="zoomq.20110428091054.3995"><vh>注释</vh></v>
<v t="zoomq.20110428091054.3996"><vh>关键字</vh></v>
<v t="zoomq.20110428091054.3997"><vh>简单语句</vh></v>
</v>
<v t="zoomq.20110407085430.2627"><vh>复合语句</vh>
<v t="zoomq.20110428091054.4000"><vh>if语句</vh></v>
<v t="zoomq.20110428091054.4001"><vh>while语句</vh></v>
<v t="zoomq.20110428091054.4002"><vh>for 语句</vh></v>
<v t="zoomq.20110428091054.4003"><vh>try语句</vh></v>
</v>
<v t="zoomq.20110428091054.3998"><vh>字串</vh>
<v t="zoomq.20110428091054.4004"><vh>字串引用</vh></v>
<v t="zoomq.20110428091054.4005"><vh>字串方法</vh></v>
<v t="zoomq.20110428091054.4006"><vh>格式化字串</vh></v>
</v>
<v t="zoomq.20110407085430.2628"><vh>程序组织</vh>
<v t="zoomq.20110428091054.4007"><vh>作用域</vh>
<v t="zoomq.20110428091054.4008"><vh>本地作用域</vh></v>
<v t="zoomq.20110428091054.4009"><vh>全局作用域</vh></v>
<v t="zoomq.20110428091054.4010"><vh>内建作用域</vh></v>
</v>
<v t="zoomq.20110428091054.4011"><vh>模块和包</vh></v>
<v t="zoomq.20110428091054.4012"><vh>函式，类和方法</vh></v>
<v t="zoomq.20110428091054.4013"><vh>文档字串</vh></v>
</v>
<v t="zoomq.20110407085430.2629"><vh>模块导入</vh>
<v t="zoomq.20110428091054.4014"><vh>导入方法</vh></v>
<v t="zoomq.20110428091054.4015"><vh>导入处理</vh></v>
<v t="zoomq.20110428091054.4016"><vh>循环导入</vh></v>
</v>
<v t="zoomq.20110407085430.2630"><vh>加载并运行Python 程序</vh></v>
<v t="zoomq.20110407085430.2631"><vh>基础输入输出</vh>
<v t="zoomq.20110428091054.4017"><vh>用户输入</vh></v>
<v t="zoomq.20110428091054.4018"><vh>命令行参数</vh></v>
<v t="zoomq.20110428091054.4019"><vh>文件</vh></v>
<v t="zoomq.20110429085924.2674"><vh>控制台的打印输出</vh></v>
<v t="zoomq.20110429085924.2675"><vh>重定向打印</vh></v>
</v>
<v t="zoomq.20110407085430.2632"><vh>提示和技巧</vh></v>
</v>
<v t="zoomq.20110322090028.3924"><vh>@nosent 3_py_evelopment_tools.rst</vh>
<v t="zoomq.20110429085924.2677"><vh>编辑器</vh></v>
<v t="zoomq.20110429085924.2678"><vh>IDE</vh></v>
<v t="zoomq.20110429085924.2679"><vh>调试</vh></v>
</v>
<v t="zoomq.20110322090028.3925"><vh>@nosent 4_summary.rst</vh></v>
<v t="zoomq.20110322090028.3926"><vh>@nosent 5_suggested_reading.rst</vh></v>
</v>
<v t="zoomq.20110727085946.4249"><vh>ch08</vh>
<v t="zoomq.20110727085946.4250"><vh>@nosent index.rst</vh></v>
<v t="zoomq.20110727085946.4251"><vh>@nosent 0_intro.rst</vh></v>
<v t="zoomq.20110727085946.4252" a="E"><vh>@nosent 1_defining_project.rst</vh>
<v t="zoomq.20110727085946.4317"><vh>需求驱动的设计</vh></v>
<v t="zoomq.20110727085946.4319"><vh>从需要开始</vh></v>
<v t="zoomq.20110727085946.4321"><vh>Project Objectives</vh></v>
</v>
<v t="zoomq.20110727085946.4253"><vh>@nosent 2_requirements.rst</vh>
<v t="zoomq.20110727085946.4323"><vh>Why Requirements Matter</vh></v>
<v t="zoomq.20110727085946.4325"><vh>Well-Formed Requirements</vh></v>
<v t="zoomq.20110727085946.4327"><vh>The Big Picture</vh></v>
<v t="zoomq.20110727085946.4329"><vh>Requirement Types</vh></v>
<v t="zoomq.20110727085946.4331"><vh>Use Cases</vh></v>
<v t="zoomq.20110727085946.4333"><vh>Traceability</vh></v>
<v t="zoomq.20110727085946.4335"><vh>Capturing Requirements</vh></v>
</v>
<v t="zoomq.20110727085946.4305"><vh>@nosent 3_designing_software.rst</vh>
<v t="zoomq.20110727085946.4306"><vh>The Software Design Description</vh></v>
<v t="zoomq.20110727085946.4337"><vh>Graphics in the SDD</vh>
<v t="zoomq.20110727085946.4339"><vh>Block diagrams</vh></v>
<v t="zoomq.20110727085946.4341"><vh>Flowcharts</vh></v>
<v t="zoomq.20110727085946.4343"><vh>State diagrams</vh></v>
<v t="zoomq.20110727085946.4345"><vh>Message sequence charts</vh></v>
<v t="zoomq.20110727085946.4347"><vh>Block diagrams</vh></v>
</v>
<v t="zoomq.20110727085946.4349"><vh>Pseudocode</vh></v>
<v t="zoomq.20110727085946.4351"><vh>Divide and Conquer</vh></v>
<v t="zoomq.20110727085946.4353"><vh>Handling Errors and Faults</vh>
<v t="zoomq.20110727085946.4355"><vh>Identifying potential failures</vh></v>
<v t="zoomq.20110727085946.4357"><vh>Failure responses</vh></v>
</v>
</v>
<v t="zoomq.20110727085946.4309"><vh>@nosent 4_functional_testing.rst</vh>
<v t="zoomq.20110727085946.4359"><vh>Testing to the Requirements</vh></v>
<v t="zoomq.20110727085946.4361"><vh>Test Cases</vh></v>
<v t="zoomq.20110727085946.4363"><vh>Testing Error Handling</vh></v>
<v t="zoomq.20110727085946.4365"><vh>Regression Testing</vh></v>
<v t="zoomq.20110727085946.4367"><vh>Tracking Progress</vh></v>
</v>
<v t="zoomq.20110727085946.4312"><vh>@nosent 5_implementation.rst</vh>
<v t="zoomq.20110727085946.4369"><vh>Coding Styles</vh>
<v t="zoomq.20110727085946.4378"><vh>Why coding style is important</vh></v>
<v t="zoomq.20110727085946.4380"><vh>Adopting existing coding style guidelines</vh></v>
</v>
<v t="zoomq.20110727085946.4371"><vh>Organizing Your Code</vh></v>
<v t="zoomq.20110727085946.4373"><vh>Code Reviews</vh></v>
<v t="zoomq.20110727085946.4375"><vh>Unit Testing</vh>
<v t="zoomq.20110727085946.4388"><vh>Why coding style is important</vh></v>
<v t="zoomq.20110727085946.4392"><vh>Implementing unit tests</vh></v>
<v t="zoomq.20110727085946.4394"><vh>assert versus assertEqual() and friends</vh></v>
<v t="zoomq.20110727085946.4396"><vh>Code coverage</vh></v>
</v>
<v t="zoomq.20110727085946.4377"><vh>Connecting to the Hardware</vh></v>
<v t="zoomq.20110727085946.4398"><vh>Documenting Your Software</vh></v>
<v t="zoomq.20110727085946.4400"><vh>Version Control</vh></v>
<v t="zoomq.20110727085946.4402"><vh>Defect Tracking</vh></v>
<v t="zoomq.20110727085946.4408"><vh>User Documentation</vh></v>
</v>
<v t="zoomq.20110727085946.4316"><vh>@nosent 6_summary.rst</vh></v>
<v t="zoomq.20110727085946.4310"><vh>@nosent 7_suggested_reading.rst</vh></v>
</v>
</v>
<v t="zoomq.20110224000107.3905"><vh>配置</vh>
<v t="zoomq.20110309092312.11334"><vh>Nginx</vh></v>
</v>
<v t="zoomq.20110221225054.2597"><vh>报名</vh></v>
</v>
<v t="zoomq.20100903210229.3838"><vh>Hacking Life</vh>
<v t="zoomq.20100903210229.3839"><vh>巨坑分析:</vh>
<v t="zoomq.20100908091715.2579"><vh>PythoniCamp</vh>
<v t="zoomq.20110411104732.5352"><vh>zhbit</vh>
<v t="zoomq.20110411194006.3964"><vh>user</vh></v>
</v>
<v t="zoomq.20100927113242.2581"><vh>Hg demo</vh></v>
<v t="zoomq.20101015095808.2582"><vh>Hg 配置</vh>
<v t="zoomq.20101029104710.3831"><vh>hgrc</vh></v>
<v t="zoomq.20101019093735.5077"><vh>diff</vh></v>
<v t="zoomq.20101019093735.5078"><vh>keywords</vh></v>
</v>
</v>
<v t="zoomq.20110325220944.2613"><vh>CPyUG社区</vh></v>
<v t="zoomq.20110523143238.2694"><vh>py.kingsoft.net</vh>
<v t="zoomq.20110523143238.2695"><vh>@trac2</vh>
<v t="zoomq.20110523143238.2696"><vh>110523-升級u+nginx</vh></v>
<v t="zoomq.20110523143238.2697"><vh>发布u+zqrgen</vh></v>
</v>
</v>
<v t="zoomq.20101103153946.3839"><vh>code.ijinshan</vh>
<v t="zoomq.20110414091122.2636"><vh>BBS</vh></v>
<v t="zoomq.20101227205438.2592"><vh>ml</vh></v>
<v t="zoomq.20110412144015.3968"><vh>YY</vh></v>
</v>
<v t="zoomq.20100903210229.3840"><vh>zoomquiet.org</vh>
<v t="zoomq.20101109214756.6989"><vh>zoomquiet.org发布规划</vh>
<v t="zoomq.20101109214756.6990"><vh>目录</vh></v>
<v t="zoomq.20101109214756.6991"><vh>域名</vh></v>
</v>
<v t="zoomq.20101109214756.6992"><vh>scrapbook</vh></v>
<v t="zoomq.20100925155257.2580"><vh>PyBlosxom</vh></v>
<v t="zoomq.20100903210229.3842"><vh>WeKnow</vh>
<v t="zoomq.20101104113205.5096"><vh>DouPy</vh></v>
<v t="zoomq.20101105113140.2587"><vh>SaaCL</vh></v>
</v>
</v>
<v t="zoomq.20101019093735.5079"><vh>Geek</vh>
<v t="zoomq.20110329090742.2614"><vh>沈崴-wileishn语录</vh>
<v t="zoomq.20110329090742.2615"><vh>110329书</vh>
<v t="zoomq.20110329090742.2618"><vh>军规:</vh></v>
<v t="zoomq.20110329090742.2616"><vh>影响力</vh></v>
<v t="zoomq.20110329090742.2617"><vh>大杀器</vh></v>
</v>
</v>
<v t="zoomq.20101103153946.5095"><vh>CLI</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3841"><vh>OBP</vh>
<v t="zoomq.20110218220319.2595"><vh>2Hg</vh></v>
<v t="zoomq.20110218220319.3903"></v>
</v>
<v t="zoomq.20100831135717.3642"><vh>WeKnow</vh>
<v t="zoomq.20100831135717.3643"><vh>可视化</vh>
<v t="zoomq.20100831135717.4174"><vh>webSequenceDiagram</vh>
<v t="zoomq.20100831135717.4171"><vh>@nosent getSequenceDiagram.py</vh>
<v t="zoomq.20100831135717.4172"><vh>declarations</vh></v>
<v t="zoomq.20100831135717.4173"><vh>getSequenceDiagram()</vh></v>
</v>
<v t="zoomq.20100831135717.4195"><vh>demo</vh>
<v t="zoomq.20100831135717.4178"><vh>@nosent demo0.txt</vh></v>
<v t="zoomq.20100831135717.4184"><vh>@nosent demo1-activate.txt</vh></v>
<v t="zoomq.20100831135717.4188"><vh>@nosent demo2-alt.txt</vh></v>
<v t="zoomq.20100831135717.4190"><vh>@nosent demo3-opt.txt</vh></v>
<v t="zoomq.20100831135717.4192"><vh>@nosent demo4-note.txt</vh></v>
<v t="zoomq.20100831135717.4194"><vh>@nosent demo5-participants.txt</vh></v>
<v t="zoomq.20100831135717.4197"><vh>@nosent demo6-grouping.txt</vh></v>
<v t="zoomq.20100831135717.4199"><vh>@nosent demo7-lifeline.txt</vh></v>
</v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3896"><vh>KM思绪</vh>
<v t="zoomq.20100903210229.3897"><vh>@nosent dont-use-wiki.txt</vh>
<v t="zoomq.20110420091053.2640"><vh>陈德志</vh></v>
</v>
</v>
<v t="zoomq.20101030170919.2579"><vh>newHeadline</vh>
<v t="zoomq.20101030170919.2580"><vh>coffeghost-q-in-py.py</vh>
<v t="zoomq.20101030170919.2581"><vh>coffeghost-q-in-py declarations</vh></v>
<v t="zoomq.20101030170919.2582"><vh>main</vh></v>
<v t="zoomq.20101030170919.2583"><vh>foo</vh></v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3872"><vh>rc.local</vh>
<v t="zoomq.20100903210229.3873"><vh>@shadow xinput4bamboo.py</vh></v>
</v>
<v t="zoomq.20100412163057.2814"><vh>Misc任务</vh>
<v t="zoomq.20100412163057.2815"><vh>病毒样本对比</vh>
<v t="zoomq.20100902112115.7756"><vh>@nosent virusampls-ratio.py</vh>
<v t="zoomq.20100902112115.7757"><vh>declarations</vh></v>
<v t="zoomq.20100902112115.7758"><vh>processLogKV</vh></v>
<v t="zoomq.20100902112115.7759"><vh>processLogRX</vh></v>
<v t="zoomq.20100902112115.7760"><vh>ratioYQ</vh></v>
<v t="zoomq.20100902112115.7761"><vh>finalExport</vh></v>
</v>
</v>
<v t="zoomq.20100122092723.2783"><vh>GrasPic</vh>
<v t="zoomq.20100827095209.8300"><vh>@file manga.py</vh>
<v t="zoomq.20100827095209.8301"><vh>manga declarations</vh></v>
<v t="zoomq.20100827095209.8302"><vh>genUrlist</vh></v>
</v>
<v t="zoomq.20100827095209.8303"><vh>@file manga-zipang12~1.sh</vh></v>
<v t="zoomq.20100827095209.8304"><vh>@file wgetli.py</vh>
<v t="zoomq.20100827095209.8305"><vh>wgetli declarations</vh></v>
<v t="zoomq.20100827095209.8306"><vh>genUrlist</vh></v>
</v>
</v>
<v t="zoomq.20100827095209.8299"><vh>清除字幕字体聲明</vh>
<v t="zoomq.20100827095209.8310"><vh>@nosent clfontd4.py</vh>
<v t="zoomq.20100827095209.8311"><vh>declarations</vh></v>
<v t="zoomq.20100827095209.8312"><vh>cleaner()</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20091008173724.1">'/home/zoomq/workspace/3hg/zqlib-hg/tangle/hackliving.leo'</t>
<t tx="zoomq.20100122092723.2783">@path _stuff/manga
#media/manga</t>
<t tx="zoomq.20100412163057.2814">@path /home/zoomq/</t>
<t tx="zoomq.20100412163057.2815">@path ssp-zoom.quiet/virusampls-ratio
#/home/zoomq/Desktop/KiS/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/vbox2win/0day/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/data/0day-vbox/zoom.quiet/100412-virus-sample-selector
</t>
<t tx="zoomq.20100827095209.8299">@path _stuff/_mov
网络字幕，有的::
    
1
00:00:09,240 --&gt; 00:00:15,940
{\fn微软雅黑\fs12\fscx130\fscy130\3c&amp;HFF8000&amp;}本字幕仅出于业余兴趣而制，如有鄙陋，还望指正。{\r}
{\fn微软雅黑\fs12}{\r}

2
00:00:16,240 --&gt; 00:00:29,940
{\fn微软雅黑\fs15\3c&amp;HFF8000&amp;}感谢 COPSY心理学的支持
{\fntahoma\fs12\3c&amp;H1717FF&amp;}www.COPSY.org{\r}

不认识字体聲明，需要快速清除，
sed/awk 都不能直接识别出 {.+} 这种模式，特别是在 utf-8 环境中处理 gb2312 编码文本...

cat 06-Justice_Michael.Sandel-HARVARD.srt | cut --delimiter="}" -f2 | cut --delimiter="{" -f1 &gt; 06-Justice_Michael.Sandel-HARVARD.srt.srt
</t>
<t tx="zoomq.20100827095209.8300">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) bookID(e.g 002) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://251.99770.com:9977/ok-comic06/c/cyjd_771/%03d/%03d.jpg\n"
        bookName = sys.argv[1]
        bookId = sys.argv[2]
        maxPage = sys.argv[3]
        genUrlist(urlmark,bookName,bookId,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8301"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "manga.py v0.8-070921"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8302">def genUrlist(urlmark,bookName,bookId,maxPage):
    expF = "manga-%s-%s.txt"%(bookName,bookId)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % (int(bookId),p)
        print urlmark % (int(bookId),p)
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8303">@ignore
@language shell
#!/bin/sh

wget -nv -t 3 -P 012 -i manga-zipang-012.txt &amp;
wget -nv -t 3 -P 011 -i manga-zipang-011.txt &amp;
wget -nv -t 3 -P 010 -i manga-zipang-010.txt &amp;
wget -nv -t 3 -P 009 -i manga-zipang-009.txt &amp;
wget -nv -t 3 -P 008 -i manga-zipang-008.txt &amp;
wget -nv -t 3 -P 007 -i manga-zipang-007.txt &amp;
wget -nv -t 3 -P 006 -i manga-zipang-006.txt &amp;
wget -nv -t 3 -P 005 -i manga-zipang-005.txt &amp;
wget -nv -t 3 -P 004 -i manga-zipang-004.txt &amp;
wget -nv -t 3 -P 003 -i manga-zipang-003.txt &amp;
wget -nv -t 3 -P 002 -i manga-zipang-002.txt &amp;
wget -nv -t 3 -P 001 -i manga-zipang-001.txt &amp;

</t>
<t tx="zoomq.20100827095209.8304">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://tulaoya.cn/photo/x1/%03d.jpg\n"
        bookName = sys.argv[1]
        maxPage = sys.argv[2]
        genUrlist(urlmark,bookName,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8305"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "wgetli.py v0.5-080409"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8306">def genUrlist(urlmark,bookName,maxPage):
    expF = "wgetli-%s-%s.txt"%(bookName,maxPage)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % p
        print urlmark % p
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8310">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
"""
Name    : clfontd4.py
Desc    : clean font define words in subtitle files
Author  : Zoom.Quiet
Usage   : 1: make srt file-&gt;utf8; 2: python cleaner.py path/2/***.str 
    we can get cleanning .srt
"""
VERSION = "clfontd4.py v10.8.27"
@others
if __name__ == "__main__":
    sys.exit(cleaner(sys.argv))
</t>
<t tx="zoomq.20100827095209.8311">import os,sys,re

</t>
<t tx="zoomq.20100827095209.8312">def cleaner(arg):
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python cleaner.py path/2/***.str
        """ % VERSION
    else:
        exp = ""
        print arg[1]
        for l in open(arg[1]).readlines():
            #print "&gt;&gt;",l
            if "{" in l:
                exp += "%s\n"%l.split("}")[1].split("{")[0]
                #print exp
            else:
                exp += l
        open("%s"%arg[1],"w").write(exp)


</t>
<t tx="zoomq.20100831135717.3642">收集所有 WeKnow 相关的代码片段
</t>
<t tx="zoomq.20100831135717.3643">收集数据可视化支持工具</t>
<t tx="zoomq.20100831135717.4171">@language python
@tabwidth -4
#!/usr/bin/python 
# -*- coding: utf-8 -*-
'''base http://www.websequencediagrams.com/ gen SequenceDiagram
You can set wsd_style to any of these styles:
    * default
    * earth
    * modern-blue
    * mscgen
    * omegapple
    * qsd
    * rose
    * roundgreen
    * napkin 
'''
VERSION="getSequenceDiagram.py v10.8.31"
@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python getSequenceDiagram.py DiagremStyle DiagramName 定义文件.txt
        """ % VERSION
    else:
        style = sys.argv[1] #"napkin"
        sqdname = sys.argv[2]
        sqdefin = sys.argv[3]
        pngFile = "%s_wsd-%s.png"%(sqdname,style)
        text = open(sqdefin).read()
        getSequenceDiagram( text, pngFile, style ) 

</t>
<t tx="zoomq.20100831135717.4172">#!/usr/bin/python 
# -*- coding: utf-8 -*-
import sys
import urllib
import re

</t>
<t tx="zoomq.20100831135717.4173">def getSequenceDiagram( text, outputFile, style = 'default' ):
    request = {}
    request["message"] = text
    request["style"] = style

    url = urllib.urlencode(request)

    f = urllib.urlopen("http://www.websequencediagrams.com/", url)
    line = f.readline()
    f.close()

    expr = re.compile("(\?img=[a-zA-Z0-9]+)")
    m = expr.search(line)

    if m == None:
        print "Invalid response from server."
        return False

    urllib.urlretrieve("http://www.websequencediagrams.com/" + m.group(0),
            outputFile )
    return True

</t>
<t tx="zoomq.20100831135717.4174">@path webSequenceDiagram/


http://www.websequencediagrams.com/embedding.html</t>
<t tx="zoomq.20100831135717.4178">alice-&gt;bob: 认证 request
bob--&gt;alice: response
</t>
<t tx="zoomq.20100831135717.4184">A-&gt;B: text
activate B
B--&gt;A: json
deactivate B
</t>
<t tx="zoomq.20100831135717.4188">alt text1
    A-&gt;B: text
else text2
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4190">opt text
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4192">note over A,B: 是也乎
note left of A: 可能
note right of A
    多行
    文本
    multiline
    text
end note
</t>
<t tx="zoomq.20100831135717.4194">participant "客户端" as C
participant "服务端" as S
participant "可以很长名\n的后台服务" as L

C-&gt;S: Authentication Request
S-&gt;C: Authentication Response
S--&gt;L: Log transaction

</t>
<t tx="zoomq.20100831135717.4195">@path demo
</t>
<t tx="zoomq.20100831135717.4197">Alice-&gt;Bob: Authentication Request
alt successful case
    Bob-&gt;Alice: Authentication Accepted
else some kind of failure
    Bob-&gt;Alice: Authentication Failure
    opt
        loop 1000 times
            Alice-&gt;Bob: DNS Attack
        end
    end
else Another type of failure
    Bob-&gt;Alice: Please repeat
end

</t>
<t tx="zoomq.20100831135717.4199">User-&gt;A: DoWork
activate A
A-&gt;B: &lt;createRequest&gt;
activate B
B-&gt;C: DoWork
activate C
C--&gt;B: WorkDone
destroy C
B--&gt;A: RequestCreated
deactivate B
A-&gt;User: Done
</t>
<t tx="zoomq.20100902112115.7756">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION="virusampls-ratio v10.4.12"

@others

if __name__ == '__main__':      # this way the module can be
    begin = time.time()
    usage = "usage: %prog [option0] arg0 [arg1]"
    parser = OptionParser(usage,version=VERSION)
    parser.add_option("-r","--ratio",dest="ratio",nargs=2,
                      type="string",metavar="*.dump some-hot-virus-list.txt",
                      help="YiQing comparison,uasge --lrx|lkv processed .dump file "
                        "e.g KV-RESULT.dump some-hot-virus-list.txt")
    parser.add_option("--lrx",dest="lrx",
                      type="string",
                      help="process RX checking log")
    parser.add_option("--lkv",dest="lkv",
                      type="string",
                      help="process KV checking log")
    parser.add_option("-e","--export",dest="export",nargs=2,
                      type="string",metavar="*.txt path/2/export ",
                      help="export total hotest virus list into dir             " 
                        "e.g -e virus-hotest-in-my-pc.tx tmp")
    (options, args) = parser.parse_args()
    if 1 == len(sys.argv):
        parser.print_help()
    if options.ratio :
        print "comparison checked list and YiQing list\n\n"
        ratioYQ(options.ratio)
    else:
        if options.lrx:
            print "\n\nreFormat RX checking list\n\n"
            processLogRX(options.lrx)
        if options.lkv:
            print "\n\nreFormat KV checking list\n\n"
            processLogKV(options.lkv)
        if options.export:
            print "\n\nexport total hotest virus list in to\n\n"
            finalExport(options.export)
    if (options.lrx and options.ratio) or (options.lkv and options.ratio):
        print "\n\nATTENTION!\n\t -r and --lrx|lkx can not usage in same time!\n\n"
        parser.error("incorrect number of arguments! \nATTENTION!\n"
            "\ne.g.\n \tpython %s -lrx something.txt "
            "\nor\n\tpython %s -r sonething.dump top500-from-RX.TXT"%(parser.get_prog_name()
                ,parser.get_prog_name())
                )
        parser.print_help()

</t>
<t tx="zoomq.20100902112115.7757">import os,sys,time,pickle,shutil
from optparse import OptionParser
from operator import itemgetter

</t>
<t tx="zoomq.20100902112115.7758">def processLogKV(fname):
    "简单处理KV查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if " 中发现 " in line:
            tags = line.split()
            print tags[3],tags[1]
            viru = tags[3]
            path = tags[1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))
</t>
<t tx="zoomq.20100902112115.7759">def processLogRX(fname):
    "简单处理RX查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if "手动查杀" in line:
            tags = line.split(";")
            print tags[2][1:-1],tags[6][1:-1]
            viru = tags[2][1:-1]
            path = tags[6][1:-1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))

</t>
<t tx="zoomq.20100902112115.7760">def ratioYQ(args):
    """将查杀日志和厂商疫情进行对比,按照排名积累分数,最终得到综合热度:
        前500排名的话,第一名为500分;
    MiscItems/2008-07-01 - Woodpecker Wiki for CPUG
http://wiki.woodpecker.org.cn/moin/MiscItems/2008-07-01
    Python中最快的字典排序方法 | Windstorm
http://www.kunli.info/2009/05/07/sorting-dictionaries-by-value-in-python/
    """
    dumpf = args[0]
    yqfile = args[1]
    tophotf = "%s-hot4-%s.txt"%(dumpf.split(".")[0],yqfile.split(".")[0])
    ratio = pickle.load(open(dumpf, 'rb'))
    flines = open(yqfile).readlines()
    for i in range(len(flines)):
        hvname = flines[i].upper().replace(".","").replace("/","")
        for v in ratio.keys():
            vname = v.upper().replace(".","").replace("/","")
            if vname in hvname:
                ratio[v][0]+=i
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    try:
        unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    except:
        unitRD = {}
    td = sorted(ratio.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        if 0!=t[1][0]:
            print t
            hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
            if t[0] in unitRD.keys():
                unitRD[t[0]][0] +=t[1][0]
            else:
                unitRD[t[0]] =[t[1][0],t[1][1]]

    open(tophotf,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus base %s...\n\t\t export as:%s"%(VERSION
        ,len(hotvli)
        ,yqfile
        ,tophotf
        )
    pickle.dump(unitRD, open(unitRatioDictFile, 'wb'))
</t>
<t tx="zoomq.20100902112115.7761">def finalExport(args):
    "将最终交叉对比出来的列表输出到指定目录/文件,同时(尝试将隔离区文件也复制到指定目录)"
    expfn = "%s/%s"%(args[1],args[0])
    expdir = args[1]
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    td = sorted(unitRD.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        print t
        hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
        #shutil.copy(t[1][1],expdir)
    open(expfn,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus in my pc \n\t\t export list file::%s"%(VERSION
        ,len(td)
        ,expfn
        )


</t>
<t tx="zoomq.20100903210229.3838">@path workspace/3hg/zqlib-tangle/
@language python
@tabwidth -4

人生hacking...

</t>
<t tx="zoomq.20100903210229.3839">当前工作外长期拖延的意义任务...

</t>
<t tx="zoomq.20100903210229.3840">+-- zoomquiet.org 发布改版:
    +-- SEO:
        +-- sitemapping
    +-- dot mapping:
        +-- jQuery 拒绝IE
        +-- #通用含热区html输出:
            +-- '固化运营脚本的代码结构...:'
                +-- '参数'
                +-- "日志/调试"
            +-- 'Data-URI 集约化所有到一个HTML'
            +-- docTTD
    +-- ScrapBook:
        +-- 索引优化:
            +-- 分层简化
            +-- 嵌入原始URL
            +-- 分年度保存data 
</t>
<t tx="zoomq.20100903210229.3841">+-- OBP:
    +-- Sphnix 自动化编译Hg hooks
        +-- #Sphinx 官网翻译
        +-- Sphinx实用手册
            +-- 'rst2s5 使用'
            http://blog.zoomquiet.org/pyblosxom/utility/py4str/StructuredText/rst2s5-usage-2010-09-18-23-23.html
    +-- Hg 手册/Tip
    +-- 图书:
        +-- #SFSF 校对...
        +-- xkcd.com 漫画翻译...
        +-- 大妈书:
            +-- #牛妞成长史
            +-- 私人编年史:
                +-- #周氏家谱....
                +-- 不可失败的菜谱
        +-- TPiP
            +-- Leo doc
            +-- Code_Like_Pythonic-Idiomatic_Python
            +-- Hidden features of Python
        +-- Py标准文档:
            +-- 库
            +-- 教程
        +-- web2py
        +-- TheArt-of-Community-1ed_jonobacon
        +-- Thinking_in_Erlang.pdf


</t>
<t tx="zoomq.20100903210229.3842">+-- WeKnow:
    +-- ScrapBook 社会化分享
        +-- 云存储中心
        +-- GAE 界面
        +-- 桌面界面
        +-- SNS 机制
    +-- CPyUG 列表综合活跃分析~ codeworm
    +-- 时间帐单自动分析统计:
        +-- #手工记录
        +-- Workrave 
            +-- http://wakoopa.com/ZoomQuiet
        +-- Gmail 时间点对应
</t>
<t tx="zoomq.20100903210229.3843">支持片段代码收集...</t>
<t tx="zoomq.20100903210229.3844">

</t>
<t tx="zoomq.20100903210229.3845">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff

sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20100903210229.3846">@language python
@tabwidth -4
@others
</t>
<t tx="zoomq.20100903210229.3847">#! /usr/bin/env python
import math
import dislin

n = 101
f = 3.1415926 / 180.
x = range (n)
y1 = range (n)
y2 = range (n)
for i in range (0,n):
  x[i] = i * 3.6
  v = i * 3.6 * f
  y1[i] = math.sin (v)
  y2[i] = math.cos (v)

dislin.metafl ('xwin')
dislin.disini ()
dislin.complx ()
dislin.pagera ()

dislin.axspos (450, 1800)
dislin.axslen (2200, 1200)

dislin.name   ('X-axis', 'X')
dislin.name   ('Y-axis', 'Y')

dislin.labdig (-1, 'X')
dislin.ticks  (9, 'X')
dislin.ticks  (10, 'Y')

dislin.titlin ('Demonstration of CURVE', 1)
dislin.titlin ('SIN (X), COS (X)', 3)

ic = dislin.intrgb (0.95, 0.95, 0.95)
dislin.axsbgd (ic)
 
dislin.graf   (0., 360., 0., 90., -1., 1., -1., 0.5)
dislin.setrgb (0.7, 0.7, 0.7)
dislin.grid   (1,1)

dislin.color  ('fore')
dislin.height (50)
dislin.title  ()

dislin.color  ('red')
dislin.curve  (x, y1, n)
dislin.color  ('green')
dislin.curve  (x, y2, n)
dislin.disfin ()

</t>
<t tx="zoomq.20100903210229.3851">def try():
    """
    """
    &lt;&lt;my sub node&gt;&gt;
    pass
    &lt;&lt;my sub node&gt;&gt;

</t>
<t tx="zoomq.20100903210229.3854">#!/usr/bin/env python
import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)

g('unset multiplot')
raw_input('Please press return to continue...\n') 
</t>
<t tx="zoomq.20100903210229.3855">#!/usr/bin/env python

import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g.plot([(0,2),(1,2),(2,2)])
g('set multiplot')
g('set size 0.5,0.5')

</t>
<t tx="zoomq.20100903210229.3856">@path olink_ad_point

from operator import itemgetter

myDict={
    "www":[112,177,888]
    ,"blog":[777,66,12]
    ,"chat":[13,5464,442]
    ,"yue":[5634,1232,177]
    }

print myDict
print "\n\n"

#sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(myDict.items()
    , key=lambda x: x[1][1]
    ,reverse=True):
    print k,v 

print myDict

</t>
<t tx="zoomq.20100903210229.3857">import os,sys
import random, Gnuplot

title = sys.argv[1]
g = Gnuplot.Gnuplot(persist=1)
DEFONT="/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
g('set term png font "%s" ' %DEFONT)
g('set output "gnuplot-%s.png" ' %title)
g('set title "easy-account chart %s" ' %title)

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]

g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)</t>
<t tx="zoomq.20100903210229.3858"></t>
<t tx="zoomq.20100903210229.3859"># -*- coding: utf-8 -*-
from foo import add2

import unittest

class DemoTest(unittest.TestCase):
    def testFoo(self):
        self.assertEqual(1, 0)

    def testAdd(self):
        sefl.assertEqual(2, add2(1, 1))




</t>
<t tx="zoomq.20100903210229.3860">

#collection cron script abt SEO
</t>
<t tx="zoomq.20100903210229.3861">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# auto sync p2p dled out intra. usage wget
2 2 * * * /data0/p2p4mu/chkmldonkey.sh
3 3 * * * /data0/p2p4mu/cleanMLDed.sh

### zoomq::070524 add for auto analyzed YK running log for adPoint monitoring
6 6 * * * /data0/mupopro/logs/yseo6_do_adpanalyzer.sh

### zoomq::070615 add for auto analyzed YK searched key words
7 7 * * * /data1/ykrunning/mupopro/logs/searchKeyAnalyzer/statsSearchKey.sh
</t>
<t tx="zoomq.20100903210229.3862">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
## zoomq::070615 cancel sync log into 59;usage 61 NFS export runlogs analzye
#7 7 * * * /home/zoomq/4p2p/mldledSyncAll.sh
</t>
<t tx="zoomq.20100903210229.3863">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"


cd $runykseo6

echo "$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday"
$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday

echo "$version done statistics 4 yseo0 @ " `$cmdDate +"%Y/%m/%d %H:%M:%S"` 

echo
exit  0


</t>
<t tx="zoomq.20100903210229.3864">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"

echo "$version auto running for YKSEO @ " `$cmdDatedate +"%Y/%m/%d %H:%M:%S"` 

cd $runykseo0

echo "$cmdPython dailySECoveRate.py $defaultFont"
$cmdPython dailySECoveRate.py $defaultFont


echo
exit  0


</t>
<t tx="zoomq.20100903210229.3865">#!/bin/bash

&lt;&lt; init &gt;&gt;

LOGROOT="/var/log/sync"
LOGFILE="/var/log/sync/$today-synced.log"
RESROOT="/data3/p2pmldonkey"

PUTPATH="$RESROOT/done/$today"
PUTYEST="$RESROOT/done/$yesterday"
ULRTOD="http://60.28.2.131:81/done/$today/"
ULRYES="http://60.28.2.131:81/done/$yesterday/"
doWget="$cmdWget -c -nv -N -r -np -nd -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ "

SYNCPAS="/usr/local/etc/sync.key"
dosync="$cmdRsync -vztu --bwlimit=1024 --password-file=$SYNCPAS sdper@60.28.2.131::p2pmldonkey/done/$today"
#echo $dosync

&lt;&lt; sync p2ped &gt;&gt;

RUNLOGROOT="/data3/run_yueku_logs"
RUNLOGanalyzed="$RUNLOGROOT/analyzed"
PATHanalyzed="$RUNLOGanalyzed/runYueKuLogs/analyzed"
&lt;&lt; sync runlog &gt;&gt;

echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


echo
exit  0

</t>
<t tx="zoomq.20100903210229.3866">###!/bin/sh
#===========================================
#====== Change log =========================
# zoomq::070603 add zip running log shell,after download all pre. analyz in TJ131
# zoomq::070517 clean yestday sync.;and dl YueKu runing daily logs all into /data3/run_yueku_logs/
# zoomq::070515 add for sync all YueKu runing log into /data3/run_yueku_logs/
# zoomq::070427 for auto sync MLDonkey downloaded dir and .lsRL
#===========================================
#today="`date +"%y%m%d"`"
version="'mldledSyncAll v0.9.1 070517"

offset="+0"
nowday="`date -d "$offset day" "+%Y%m%d"`"
#nowday="`date +"%d"`"
#offset=0
#((yday=nowday - offset))
today=$nowday
#"`date +"%Y%m"`$yday"
#((yday=nowday - offset -1 ))
offset="-1"
yesterday="`date -d "$offset day" "+%Y%m%d"`"
yesterlog="`date -d "$offset day" "+%y%m%d"`"
#yesterday="`date +"%Y%m"`$yday"
#echo "try $yesterday"

#echocmd=$( which echo)
cmdWget=$( which wget)
cmdRsync=$( which rsync)
#cmdLs=$( which ls)
cmdMkdir=$( which mkdir)
cmdMv=$( which mv)
cmdRm=$( which rm)
</t>
<t tx="zoomq.20100903210229.3867">echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
echo "auto SYNC mldonkey p2p downloaded files..."
echo "chk dir :: $PUTPATH"
if [ -d $PUTPATH ]
then
    cd $PUTPATH
    $cmdLs -la &gt; $LOGFILE
else
    echo "$PUTPATH not exist! creat now.."
    echo "$PUTPATH not exist! creat now.." &gt;&gt; $LOGFILE
	echo "$cmdMkdir -p $PUTPATH" &gt;&gt; $LOGFILE
	$cmdMkdir -p $PUTPATH
    
    cd $PUTPATH
    ls -la  &gt;&gt; $LOGFILE
fi

ls -la
#echo "$dosync/* $PUTPATH/"
#$dosync/* $PUTPATH/
echo "$doWget $ULRTOD $PUTPATH/" &gt;&gt; $LOGFILE
echo "$doWget $ULRTOD ./"
$doWget $ULRTOD ./

echo 
echo "try sync yesterday dled files again..."
echo "try sync yesterday dled files again..." &gt;&gt; $LOGFILE
ls -la
ls -la  &gt;&gt; $LOGFILE

cd $PUTYEST
echo "$doWget $ULRYES $PUTYEST/" &gt;&gt; $LOGFILE
echo "$doWget $ULRYES ./"
#$doWget $ULRYES ./
</t>
<t tx="zoomq.20100903210229.3868">echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` 
echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


cd $RUNLOGROOT
$cmdWget -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/$yesterlog/

echo "###start dl for analyzed .log @ " `date +"%Y/%m/%d %H:%M:%S"` 

cd $RUNLOGanalyzed
$cmdWget -A.log -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/analyzed/

echo "cd $PATHanalyzed"
cd $PATHanalyzed
echo "./zipadplog.sh adPoint$yesterlog.log"
./zipadplog.sh adPoint$yesterlog.log

</t>
<t tx="zoomq.20100903210229.3869">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
#3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
8 8 * * * /home/zoomq/4p2p/syncYKrunlogs.sh

</t>
<t tx="zoomq.20100903210229.3870"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32 2002/11/22 16:13:39 tom Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

HOME=/var/log
#
#minute hour    mday    month   wday    who     command
#
*/5     *       *       *       *       root    /usr/libexec/atrun
#
# Save some entropy so that /dev/random can re-seed on boot.
*/11    *       *       *       *       operator /usr/libexec/save-entropy
#
# Rotate log files every hour, if necessary.
0       *       *       *       *       root    newsyslog
#
# Perform daily/weekly/monthly maintenance.
1       3       *       *       *       root    periodic daily
15      4       *       *       6       root    periodic weekly
30      5       1       *       *       root    periodic monthly
#
# Adjust the time zone if the CMOS clock keeps local time, as opposed to
# UTC time.  See adjkerntz(8) for details.
1,31    0-5     *       *       *       root    adjkerntz -a

MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
# auto do all matter for YKSEO1.0
9 9 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoAM.sh &gt; /var/log/YKSEO/ykseo.log
8 18 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoPM.sh &gt; /var/log/YKSEO/ykseo.log

</t>
<t tx="zoomq.20100903210229.3872">@path /home/zoomq/.zoomq/rc.local</t>
<t tx="zoomq.20100903210229.3876">@path ~/2matter4peg/tangle/zoom.quiet/4lifeHacking
时间帐单处置辅助

黄瓯: 手机号：13823008842  邮箱：huangou@gmail.com</t>
<t tx="zoomq.20100903210229.3877">@path tpl</t>
<t tx="zoomq.20100903210229.3878">dsfadsf
dasfa
dsf
&lt;&lt;my sub node&gt;&gt;
adsf
adsf
ds
&lt;&lt;my sub node&gt;&gt;

sdfdsf
</t>
<t tx="zoomq.20100903210229.3879">[i,i+1 for i in range(10)&lt;&lt;我的&gt;&gt;]
</t>
<t tx="zoomq.20100903210229.3880">dgdfg
dsfgdfsg
sdfdfgsg
dfsg
</t>
<t tx="zoomq.20100903210229.3881">## try leo
TILOG={'DEFONT':"/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
    ,'TITLE':"TiLog"
    ,'PATH':{'root':"/home/zoomq/2matter4peg/tangle/zoomquiet/4lifeHacking"
        ,'log':"_log"
        ,'exp':"exp"
        ,'data':"data"
        ,'tpl':"tpl"
        }
    ,'FILTER':{'log':"zq-tilog-*.txt"
        }
    ,'TPL':{'log':"zq-tilog-%s.txt"
        }
    ,'DICT':{'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    ,'tLebel':['tLost','tInput','tOutput','tCommunicate','tMyself','tSleep']
    }
INIDICT={'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}</t>
<t tx="zoomq.20100903210229.3882">&lt;&lt; tilog_chart declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python tilog_chart.py MonthPoint [like 0812]
        """ % VERSION
    else:
        zmonth = sys.argv[1]                 #[-10:-4]    print tonow
        tilogchart(zmonth)

    print "Mnnnn export all that report! \n by %s"%VERSION


</t>
<t tx="zoomq.20100903210229.3883"># -*- coding: utf-8 -*-
import os,sys
#import time,datetime,pickle
#from operator import itemgetter
from fnmatch import *
from cfg import *

#from pychartdir import *
#from ChartDirector import pychartdir as pcd

VERSION = "tilog_chart v0.8-090304@Zoom.Quiet"
#print dir()

''''tilog_chart.py'
    v0.7 090205 init. to simple chart handwrited TiLog
'''



</t>
<t tx="zoomq.20100903210229.3884">def tilogchart(month):
    '''main func
    '''
    #print TILOG['PATH']
    #flog = filter(os.listdir(TILOG['PATH']['data'])
    #    ,TILOG['FILTER']['log'])
    flog = "%s/%s"%(
        TILOG['PATH']['data']
        ,TILOG['TPL']['log']%month
        )
    #dictchart = {'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    for li in open(flog):
        formatlog(li)
        #pass
    dayline(month)
    TILOG['DICT']=INIDICT
    for li in open(flog):
        formatotm(li)
        #pass
    monthpie(month)
    TILOG['DICT']=INIDICT
    '''
    for li in open(flog):
        formatotmr(li)
        pass
    '''
    monthradar(month)
    TILOG['DICT']=INIDICT





</t>
<t tx="zoomq.20100903210229.3885">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3886">def formatotmr(line):
    '''format log data into dict for tot time month in radar
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3887">def monthradar(month):
    '''usage ChartDirector exp chart in radar
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]
    # The data for the chart
    #data = [6,7,3,8,7,9,7,4,10]


    # Create a PolarChart object of size 450 x 350 pixels
    c = pcd.PolarChart(350, 300)
    c.setRoundedFrame()
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    #c.addTitle("角色雷达图谱:", defaultfont, 14, 0xffffff).setBackground(0x008000)
    #c.addTitle2(TopLeft, "&lt;*underline=2*&gt;角色雷达图谱:", defaultfont, 14)

    # Set center of plot area at (225, 185) with radius 150 pixels
    #c.setPlotArea(225, 185, 150)
    c.setPlotArea(180, 160, 100)
    #c.setGridColor(0xc0000000L, 1, 0xc0000000L, 1)

    # Add an area layer to the polar chart
    c.addAreaLayer(data, 0x9999ff)
    c.addLineLayer(data, 0x6666cc).setLineWidth(3)

    c.setPlotAreaBg(0xdddddd, 0xeeeeee)
    c.setGridStyle(0)

    layer0 = c.addLineLayer(data, 0x0000ff, "Close Loop Line")
    #layer0.setAngles(data)

    # Set the line width to 2 pixels
    layer0.setLineWidth(2)

    # Use 11 pixel triangle symbols for the data points
    layer0.setDataSymbol(pcd.CircleShape, 11, 0xffff00)

    #layer0.setDataLabelStyle().setBackground(0x9999ff, pychartdir.Transparent, 1)

    # Enable data label and set its format
    #layer0.setDataLabelFormat("{value}分")


    # Set the labels to the angular axis as spokes
    c.angularAxis().setLabels(labels).setFontStyle(TILOG['DEFONT'])

    # output the chart
    c.makeChart("zq-ti-month-radar-%s.png"%month)
    print "EXPed: zq-ti-month-radar-%s.png"%month

</t>
<t tx="zoomq.20100903210229.3888">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3889">def formatotm(line):
    '''format log data into dict for tot time month
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3890">def monthpie(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]

    # creat chart
    c = pcd.PieChart(440, 200,pcd.metalColor(0xccccff, 0), 0x000000, 1)
    c.setRoundedFrame()
    c.setPieSize(215, 110, 80)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    c.set3D(-1,60)
    c.setData(data, labels)
    c.setExplode(0)
    #c.setStartAngle(135)
    c.setStartAngle(90, 0   )

    c.setLabelLayout(pcd.SideLayout)
    c.setLabelFormat("{label}&lt;*br*&gt;{value}h ({percent}%)")

    t = c.setLabelStyle()
    t.setBackground(pcd.SameAsMainColor, pcd.Transparent, pcd.glassEffect())
    t.setRoundedCorners(5)
    c.setLineColor(pcd.SameAsMainColor, 0x334433)

    # output the chart
    c.makeChart("zq-ti-month-pie-%s.png"%month)
    print "EXPed: zq-ti-month-pie-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3891">#line fot time usaged in day</t>
<t tx="zoomq.20100903210229.3892">def formatlog(line):
    '''format log data into dict
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI'].append(float(dli[1]))
        ddict['tO'].append(float(dli[2]))
        ddict['tC'].append(float(dli[3]))
        ddict['tM'].append(float(dli[4]))
        ddict['tS'].append(float(dli[5]))




</t>
<t tx="zoomq.20100903210229.3893">def dayline(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['DICT']['date']
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']

    c = pcd.XYChart(800, 300, 0xeeeeff, 0x000000, 1)
    c.setRoundedFrame()
    c.setPlotArea(55, 58, 720, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)
    c.addLegend(50, 30, 0, TILOG['DEFONT'], 9).setBackground(pcd.Transparent)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())

    c.yAxis().setTitle("hour")
    c.xAxis().setLabels(labels).setFontAngle(45)

    #c.xAxis().setLabelStep(3)
    c.xAxis().setTitle("date")

    # Add a line layer to the chart
    layer = c.addLineLayer2()

    layer.setLineWidth(2)

    layer.addDataSet(tI, 0xff0000, "tI")
    layer.addDataSet(tO, 0x008800, "tO")
    layer.addDataSet(tC, c.dashLineColor(0x3333ff, pcd.DashLine), "tC")
    layer.addDataSet(tM, 0xff8800, "tM")
    layer.addDataSet(tS, 0x334433, "tS")

    # output the chart
    c.makeChart("zq-ti-line-day-%s.png"%month)
    print "EXPed: zq-ti-line-day-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3894">def expchart(month):
    '''usage ChartDirector exp charts
    '''
    lineday(month)

</t>
<t tx="zoomq.20100903210229.3895">def expplot():
    '''usage Gnuplot exp png chart
    '''
    print TILOG['DICT']['date']
    i = 0
    d=[]
    for j in TILOG['DICT']['tI']:
        d.append([i,j])
        i+=1
    print d
    import Gnuplot
    g = Gnuplot.Gnuplot(persist=1)
    g('set term png font "%s" ' %TILOG['DEFONT'])
    g('set output "gnuplot-%s.png" ' %TILOG['TITLE'])
    g('set title "Zoomq`s chart %s" ' %TILOG['TITLE'])

    g('set xlabel "日期" ')
    g('set ylabel "时耗" ')

    g.plot([[0, 1.0], [1, 2.0], [2, 0.0], [3, 4.5], [4, 2.5], [5, 3.0], [6, 1.0], [7, 0.0], [8, 0.0], [9, 0.0], [10, 2.5], [11, 0.0], [12, 0.0], [13, 2.0], [14, 0.0], [15, 0.0], [16, 1.0], [17, 2.5], [18, 2.5], [19, 1.5]])
    #d = Gnuplot.Data(TILOG['DICT']['date'],TILOG['DICT']['tI'])
    #g.plot(str(d))



</t>
<t tx="zoomq.20100903210229.3896">@path ../zoomquiet-tangle/txt/KMthinking/
#zoomquiet.leo/txt/KMthinking
</t>
<t tx="zoomq.20100903210229.3897">wiki 不是任何人都可以用的！
??

- 任何的理由都是理由:
 - word 经验是即得的不用学习
 - wiki 无法快速使用表格
 - wiki 难以排版不好看

...
以往的努力都使错方向了:

维基的本质是相互服务，文章共用
而所有不习惯维基的人，都不是维基用户
只是文章消费者，本质期望是:
- 有人为他们准备好 清晰/明了/排版漂亮 的索引页面
- 他们随时可以查阅想查阅的!

MLBD !怪不得维基不能用!
没有分享的冲动,没有知识的结构,还想有专人为您服务?!
- 对分享人不公平!
 - 屈从你的格式你的分类?!
- 对其它查阅者也不公平!
 - 屈从你的格式你的分类?!


&gt;
&gt; 哦，那我觉得最核心的问题是：wiki一定要定位明确
是也乎，是也乎，
所以，俺推广维基时，首先都是尝试说明什么是维基，而不是怎么使用...
但是，真的是在 Office 淫威之下的人们，大多数无法想象 Word 不方便之处(也可能是拒绝想象)
但是，维基也的确是可以当成各种平台来用:
- 有公司用维基作工单系统
- 配合插件，可以作个人/团队blog
- 共同写作平台
- FAQ
- ...
维基是真正作到本身简单到极致,使用正式自由到充分的信息管理平台了,
就象 Scrunm 成功实施的团队一样,人最重要!
使用维基成功,必须是:
- 团队有知识积累的冲动
- 所有人有知识分享的冲动
- 所有人有时间记录知识片段
- 所有人愿意配合其它人整理知识体系

&gt; 是作为随手分享的知识经验库还是作为正式的文档资料库，一定要搞清楚
&gt; 如果定位是后者，那要想保证wiki文档的权威性，就不能把其他分享掺合进来，就一定全是正式文档。这里如何组织文档是非常重要的问题。MoinMoin的url太灵活了，这虽然方便，但其实对使用者有了比较高的要求。别说非技术人员，就是技术人员在“我的文档该放在哪儿”这个问题上也是有些纠结的，这一点是推广wiki作为正式文档库的核心障碍，如果就这一点多下些功夫，制定方便的规范和流程并且给出培训，就好了。
&gt; 这时，wiki可以基本取代非流转性的(无需流转到客户手中)word文档，如果需要流转，导出就行了。但电子表格和幻灯是完全没法的。但这两种文档一般也没有相互链接，自由索引／复用，统一搜索等需求。
&gt; 建议电子表格类文档不要往wiki里整合了，如果统一存在svn中，引用时给出url，或者直接上传复件，如果要显示局部数据，给出截图。

</t>
<t tx="zoomq.20100908091715.2579">蟒营:
    +-- 文档:
        +-- #Hg使用:
            +-- code.google 協同
                '+-- 权限'
                '+-- 初始化'
            +-- 本地使用:
                '+-- M$工具'
                '+-- 仓库理解'
                '+-- 提交'
                '+-- 合并'
                #+-- 分支
            +-- 团队協同
                '+-- 局部交换'
        +-- Py 环境
        +-- #工程协同
            +-- 维基贡献?
            +-- 仓库使用流程...
    +-- 环境:
        +-- Trac:Bitten TDD 配置
        +-- Hg Hooks...
            +-- #mail diff into googlegroups
            zoomquiet+pycamp4bb@gmail.com
    +-- 教案:
        +-- Py
        +-- Web
        +-- DB
        +-- ...</t>
<t tx="zoomq.20100925155257.2580">+-- PyBlosxom:
    +-- 部署:
        +-- ~Hg hook
        +-- crontab 备份?
    +-- 评注:
        +-- 外部JS 评注服务
        +-- WeKnow GAE服务
            +-- Cloudant 使用
    +-- 增进:
        +-- '文章页 title 插入'
            ~/zq.pyblosxom/pybshare/jquery-pybactions.js
        +-- ...
    +-- 优化:
        +-- 图片合并css 配合
        +-- JS 合并压缩
        +-- CSS 合并压缩
    +-- #Leo配合:
        +-- 自动事务按钮:
            +-- t2t编译
            +-- 静态化发布

</t>
<t tx="zoomq.20100927113242.2581">


foo-main    :8000 主仓库
    $ hg serve -p 8000 -a 127.0.0.1 -n "HgDemo main REPO."
    hg serve -p 8000 -a 10.20.208.13 -n "HgDemo main REPO."
foo-zq      :9001 用户克隆
    $ hg serve -p 9001 -a 127.0.0.1 -n "HgDemo: ZQ'srv. clone" --style gitweb
foo-bar     :9002
    $ hg serve -p 9002 -a 127.0.0.1 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.34 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.13 -n "HgDemo: BAR'srv. clone" --style coal

foo-loc     本地仓库
bar-loc

[extensions]
hgext.extdiff =

[extdiff]
;tortoisemerge =
beyondcompare3.args=$local $other $base $output /ro /lefttitle=local /centertitle=base /righttitle=other /automerge /reviewconflicts /solo
beyondcompare3.regkey=Software\Scooter Software\Beyond Compare 3
beyondcompare3.regname=ExePath
beyondcompare3.gui=True
beyondcompare3.priority=-2
beyondcompare3.diffargs=/lro /lefttitle='$plabel1' /righttitle='$clabel' /solo /expandall $parent $child

[merge-tools]
tortoisemerge.args=/base:$base /mine:$local /theirs:$other /merged:$output
tortoisemerge.regkey=Software\TortoiseSVN
tortoisemerge.checkchanged=True
tortoisemerge.gui=True
tortoisemerge.priority=-4
tortoisemerge.diffargs=/base:$parent /mine:$child /basename:'$plabel1' /minename:'$clabel'
</t>
<t tx="zoomq.20101015095808.2582">.hgrc 中的常用配置...

</t>
<t tx="zoomq.20101019093735.5077">[extensions]
hgext.extdiff =

[extdiff]
cmd.diffuse = 
;cmd.kdiff3 =

[merge-tools]
;kdiff3.args = $base $local $other -o $output

diffuse.priority=-3
diffuse.args=$local $base $other
diffuse.gui=True
diffuse.diffargs=$parent $child


[extensions]
hgext.extdiff =

[extdiff]
cmd.kdiff3 =

[merge-tools]
kdiff3.args = $base $local $other -o $output
</t>
<t tx="zoomq.20101019093735.5078">[extensions]
hgext.keyword=

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}
</t>
<t tx="zoomq.20101019093735.5079">+-- http://xkcd.com/ 中文翻译
    +-- 下载脚本 '/home/zoomq/media/manga/2graspic/xkcd.com/' 
        grasp-xkcd.sh   ;   filter-xkcd.py
    +-- blogger.com 发布?
</t>
<t tx="zoomq.20101026092125.2576">@path data
date 收集

</t>
<t tx="zoomq.20101026092125.2577">date,tI,tO,tC,tM,tF,tS
101008,1.5,3.0,0.5,5.5,5.5,7.0
101009,0.0,3.0,0.5,5.5,6.5,7.0
101011,3.0,3.0,0.0,5.0,5.0,6.5
101012,0.5,1.5,2.0,6.0,5.0,6.0
101013,1.0,5.0,1.5,5.0,5.0,7.0
101014,6.0,0.0,0.0,6.0,5.0,7.0
101015,0.0,6.0,0.0,6.0,5.0,7.0
101018,0.0,3.25,1.2,8.25,5.0,7.0
101019,0.0,6.0,3.75,3.75,3.25,6.0
101020,1.0,4.0,0.5,9.0,5.0,6.5
101021,0.5,3.0,4.25,7.75,2.0,6.5
101022,0.0,4.25,1.0,6.5,3.75,6.5
101024,1.5,2.75,3.25,4.0,5.0,6.0
101025,0.0,7.5,2.5,6.0,2.0,6.0
101026,2.75,2.3,0.0,6.85,2.0,6.5
101027,0.5,4.0,6.75,4.25,2.0,6.0
101028,0.0,1.0,1.0,4.5,2.0,5.5
101029,0.0,10.5,0.0,5.25,2.0,7.0
101030,1.5,8.5,2.0,1.5,2.0,6.00</t>
<t tx="zoomq.20101029104710.3831">[ui]
username = Zoom.Quiet &lt;zoomquiet+hg@gmail.com&gt;

[extensions]
hgext.keyword=
graphlog =

[defaults] 
glog = --style compact

[alias] 
ll = glog --style compact

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =
**.xml =
**.yaml =
**.html =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}

</t>
<t tx="zoomq.20101030170919.2579"></t>
<t tx="zoomq.20101030170919.2580">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i
def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
if __name__=='__main__':
    main()
</t>
<t tx="zoomq.20101030170919.2581"># -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
</t>
<t tx="zoomq.20101030170919.2582">def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i

</t>
<t tx="zoomq.20101030170919.2583">def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
</t>
<t tx="zoomq.20101103153946.3839">卫士开源的定制设想...
+-- #迁移高配主机
+-- 维基增补:
    +-- '列表注册'
    +-- Hg 使用
+-- 代码自动化流程
    +-- 对内部 hadson
    +-- 对pyk的 Bitten ~ #先得恢复 pyk!
+-- py.k 配合宣传
</t>
<t tx="zoomq.20101103153946.5095">+-- #OhLife CLI
+-- 常好CLI 技巧:
    +-- history
    +-- 文件更动...
+-- Vim
+-- rxvt
    +-- tmux
    +-- Muut+Gmail
</t>
<t tx="zoomq.20101104113205.5096">邮件来自 Google Groups "DouPy"列表!
讨论: DouPy@googlegroups.com | 退订: DouPy+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/DouPy
工程: http://code.google.com/p/unbeans/
维基: http://code.google.com/p/unbeans/wiki/DouPy

+-- doupy ~ 豆瓣综合使用:
    #你的豆瓣 API key:
0cd1817bb03732fc2674847310a598f4
API key 的详细信息   · · · · · · 
* 私钥：d241f9b2e06544fc -请保护好你的私钥
* 应用名称：Zoom.Quiet
* 创建时间: 2010-10-29
* 应用说明:
  个人试用各种豆瓣API, 通过Py 结合 Shell 进行Ubuntu 中的一键式操作, 在寻找到合理的快感后,将另外申请 Key 进行服务化 ;-)
</t>
<t tx="zoomq.20101105113140.2587">#服务即命令行
+-- GooglCL
+-- Cloudant 永久存储 ~ CouchDB
+-- DouPy ~ dubanAPI

</t>
<t tx="zoomq.20101109214756.6989">@language python
@tabwidth -4

整体规划 zoomquiet.org 相关网站发布及小工具任务

最终:
    zoomquiet.org
        http://zoomquiet.org/obp    图书工程发布    
    blog.zoomquiet.org
    jump&gt;&gt;&gt; http://blog.zoomquiet.org/pyblosxom
    
    floss.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqFLOSS/tree/
    skm.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqSKM/tree/

  &lt;head&gt;
  &lt;meta http-equiv="refresh" content="0;URL=gldt1009.svg"&gt;
  &lt;/head&gt;
    </t>
<t tx="zoomq.20101109214756.6990">zeus:~/zoomquiet.org&gt; tree -L 4
.
|-- README.txt
+-- _cfgs
+-- _cron
+-- _docs
+-- _logs
+-- _stuff
+-- blog    ~ PyBlosxom
|   +-- _static     ~ 发布为 /pyblosxom
|   +-- _images     ~ 发布为 /pybimage
|   +-- entries     ~ 发布为 /pybnodes
|   +-- flavours    ~ 发布为 /pybstyle
|   +-- pybshare    ~ 发布为 /pybshare
|   +-- plugins  
|   |-- blog.ini
|   |-- comment
|   |-- config.py
|   |-- index.html
|   |-- not-doc-2006-05-31-12-00.t2t
|   `-- ...
+-- repos
|   `-- zqlib-hg
`-- www
    |-- index.html -&gt; map/index.html
    |-- leo_doc_zh -&gt; obp/leo_doc_zh/doc/html/_build/html
    +-- logs -&gt; ../_logs
    +-- map
    +-- obp
    +-- res
    |   +-- HYRY-scipydoc
    |   +-- d   ~ 文档
    |   +-- f   ~ foto
    |   +-- j   ~ Js
    |   +-- m   ~ 多媒体
    |   |   |-- r   ~ 录音
    |   |   `-- v   ~ 录像
    |   +-- s5 -&gt; ../../repos/zqlib-hg/tangle/zoomquiet.leo/s5/
    |   `+- scrapbook 
    |-- pyblosxom_zh -&gt; obp/pyblosxom_zh/build/html/
    |-- pywdwpy -&gt; obp/PyWDWPy/build/html/
    |-- tpipy_zh -&gt; obp/TPiPy/build/html/
    `-- w2py_manual_zh -&gt; obp/web2py_manual_zh/build/html
</t>
<t tx="zoomq.20101109214756.6991">#Type:	Source:	Destination:	Actions:
# 准备好后,取消!
A Record	www.zoomquiet.org	202.108.44.62	Edit | Delete
A Record	obp.zoomquiet.org	119.88.56.193	Edit | Delete

# 核心域名
A Record	zoomquiet.org	119.88.56.193	Edit | Delete

A Record	blog.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	skm.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	floss.zoomquiet.org	119.88.56.193	Edit | Delete

# 预留,指向 gae
A Record	weknow.zoomquiet.org	202.108.44.62	Edit | Delete

CNAME Record	*.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	googlee445fdb76e058b0a.zoomquiet.org	google.com	Edit | Delete
CNAME Record	mail.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	zqlib.zoomquiet.org	ghs.google.com	Edit | Delete</t>
<t tx="zoomq.20101109214756.6992">对根页面进行精简:
    + 所有目录只显示前子目录和前5页面索引
        + 2级索引同上
        + 3级索引不限制
    + 默认说明页面 readme.html
    + 所有页面,增补原始URL旁注!
    </t>
<t tx="zoomq.20101227205438.2592">邮件来自 Google Groups:"ks-deve"金山开源社区技术邮件列表
讨论: ks-deve@googlegroups.com
退订,请邮件至: ks-deve+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com


邮件来自 Google Groups:"ks-user"金山开源社区用户邮件列表
讨论: ks-user@googlegroups.com
退订,请邮件至: ks-user+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-user
技术列表: http://groups.google.com/group/ks-deve
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com

邮件来自 Google Groups:"ks-ann"金山开源社区通告邮件列表
讨论: ks-ann@googlegroups.com
退订,请邮件至: ks-ann+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-ann
技术列表: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
社区官网: http://code.ijinshan.com</t>
<t tx="zoomq.20101228111644.2594">date,tI,tO,tC,tM,tF,tS
101102,1.75,4.25,0.75,6.75,5.0,6.0
101103,0.0,2.0,3.0,5.0,5.0,6.0
101104,0.0,6.35,2.75,4.0,6.5,6.0
101105,2.25,1.0,1.0,6.25,4.75,5.0
101106,0.0,5.5,1.5,4.0,4.0,7.0
101108,0.0,6.5,2.75,3.25,5.0,6.5
101109,0.0,6.5,2.75,2.0,5.0,7.0
101110,2.5,5.0,1.5,4.0,5.0,6.0
101111,0.0,7.75,4.5,3.25,2.0,6.0
101112,0.0,2.5,0.75,4.75,2.0,6.0
101115,0.0,4.5,4.0,5.0,5.0,7.0
101116,0.0,4.5,2.5,3.0,5.0,6.0
101117,0.0,2.5,2.5,7.5,5.5,6.0
101118,0.0,7.5,2.0,2.0,2.5,6.0
101119,1.75,3.5,1.25,5.0,5.0,6.0
101129,0.0,2.25,5.5,7.5,2.0,6.0
101130,0.5,9.0,2.5,5.5,2.0,5.0

</t>
<t tx="zoomq.20101228111644.2596">date,tI,tO,tC,tM,tF,tS
101201,0.0,8.75,4.25,4.0,2.0,5.5
101202,1.0,6.25,1.5,2.0,2.0,4.5
101203,0.0,8.0,1.0,4.5,2.0,7.5
101206,1.0,5.0,5.75,3.75,2.5,7.0
101207,0.0,7.0,2.75,6.0,2.0,5.5
101208,0.0,10.5,2.75,2.5,2.0,7.0
101209,0.0,11.0,2.0,4.0,2.0,5.0
101210,0.0,5.5,2.75,2.5,2.0,5.0
101213,0.0,6.5,0.75,6.25,2.0,7.0
101214,0.0,3.5,2.75,6.25,5.0,7.0
101215,0.0,5.25,2.25,6.5,5.0,7.5
101216,3.5,5.5,0.5,5.5,2.0,6.0
101217,0.0,0.0,2.75,12.5,2.0,6.0
101220,0.0,2.75,4.0,4.0,5.0,7.0
101221,0.0,4.25,1.5,5.75,5.0,6.0
101222,0.0,5.5,1.0,4.5,2.0,7.0
101223,0.5,1.5,1.0,10.5,5.0,5.5,6.5
101227,0.0,1.75,3.25,8.0,5.0,6.0
101228,1.75,2.25,1.75,8.5,5.0,5.5
101229,4.5,4.5,1.75,2.75,4.5,5.5
101230,0.0,2.75,2.75,6.5,5.5,5.0
101231,0.0,2.0,1.5,6.5,7.0,7.5

</t>
<t tx="zoomq.20110104095502.2596">date,tI,tO,tC,tM,tF,tS
110104,0.00,6.50,0.00,5.50,5.00,7.00
110105,1.00,4.50,0.50,5.00,6.00,7.00
110106,2.15,4.75,0.50,6.50,4.50,7.00
110107,0.50,5.75,2.25,6.50,4.00,6.50
110110,1.00,3.00,4.50,1.50,5.00,7.00
110111,1.50,3.50,1.50,7.00,3.00,5.50
110112,2.00,3.00,1.00,6.50,5.00,7.00
110113,6.00,1.75,0.25,6.00,1.50,7.00
110117,0.00,5.25,2.25,5.50,4.00,7.00
110118,0.00,2.50,4.50,5.00,4.00,7.00
110119,1.00.1/50,1.50,5.00,7.00,7.50
110120,3.00,5.00,1.00,3.00,4.00,6.00
110121,2.00,5.25,1.25,3.50,4.00,7.50
110124,1.00,5.50,0.50,5.50,4.00,7.00
110125,0.00,5.50,1.00,6.00,4.50,7.50
110126,1.50,8.75,2.75,2.00,1.00,7.00
110127,2.50,7.50,0.00,3.00,3.50,7.50
110128,0.50,8.00,0.00,3.00,5.50,7.00
110129,2.00,4.50,4.50,3.00,4.00,7.00
</t>
<t tx="zoomq.20110209102527.2595">date,tI,tO,tC,tM,tF,tS
110401,0.00,1.00,3.75,7.75,4.25,6.50
110406,0.00,3.00,3.25,6.50,4.25,7.00
110407,3.25,3.25,2.50,10.0,1.50,7.00
110408,4.00,4.00,0.00,8.00,1.50,5.50
110409,0.00,6.25,0.00,6.75,4.00,7.00
110411,0.00,5.00,6.00,4.50,1.00,7.00
110412,1.00,6.50,1.50,7.00,1.50,6.50
110413,1.25,3.75,0.00,7.50,4.00,7.50
110414,2.75,4.00,2.00,6.75,1.00,7.00
110415,2.75,2.00,0.00,7.50,4.25,7.50
110418,0.00,3.75,2.25,7.75,4.00,7.00
110419,4.75,4.00,1.25,5.75,1.50,7.00
110420,0.00,4.50,2.00,6.25,1.00,7.00
110421,1.50,4.00,2.00,4.00,1.00,6.00
110422,1.00,6.25,0.00,8.75,1.00,7.00
110423,4.00,0.00,1.00,6.00,4.00,7.00
110425,0.00,2.75,2.00,5.25,4.50,6.50
110426,0.00,2.00,0.00,6.25,7.00,7.00
110427,2.00,4.50,0.00,4.50,7.00,7.00
110428,1.50,5.50,4.00,2.50,1.00,7.00
110429,1.50,3.50,0.00,6.50,4.00,7.00



</t>
<t tx="zoomq.20110218220319.2595">Command-line access

If you plan to make changes, use this command to check out the code as yourself using HTTPS:
# Project members authenticate over HTTPS to allow committing changes.
svn checkout https://openbookproject.googlecode.com/svn/trunk/ openbookproject --username Zoom.Quiet

When prompted, enter your generated googlecode.com password.

Use this command to anonymously check out the latest project source code:
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://openbookproject.googlecode.com/svn/trunk/ openbookproject-read-only 
</t>
<t tx="zoomq.20110218220319.3903">Table of Contents
Chapter 1 Introduction to Instrumentation
    Data Acquisition
    Control Output
    Applications Overview
    Summary
Chapter 2 Essential Electronics
    Electrical Charge
    Electric Current
    Basic Circuit Theory
    Circuit Schematics
    DC Circuit Characteristics
    AC Circuits
    Interfaces
    Summary
    Suggested Reading
Chapter 3 The Python Programming Language
    Installing Python
    The Python Programming Language
    Python Development Tools
    Summary
    Suggested Reading
Chapter 4 The C Programming Language
    Installing C
    Developing Software in C
    C Development Tools
    Summary
    Suggested Reading
Chapter 5 Python Extensions
    Creating Python Extensions in C
    Python’s C Extension API
    Using the Python C Extension API
    Python’s ctypes Foreign Function Library
    Summary
    Suggested Reading
Chapter 6 Hardware: Tools and Supplies
    The Essentials
    Advanced Tools
    Supplies
    New Versus Used
    Summary
    Suggested Reading
Chapter 7 Physical Interfaces
    Connectors
    Serial Interfaces
    GPIB/IEEE-488
    PC Bus Interface Hardware
    Old Doesn’t Mean Bad
    Summary
    Suggested Reading
Chapter 8 Getting Started
    Defining the Project
    Requirements
    Designing the Software
    Functional Testing
    Implementation
    User Documentation
    Summary
    Suggested Reading
Chapter 9 Control System Concepts
    Basic Control Systems Theory
    Control System Types
    Implementing Control Systems in Python
    Summary
    Suggested Reading
Chapter 10 Building and Using Simulators
    What Is Simulation?
    Using Python to Create a Simulator
    Serial Terminal Emulators
    Displaying Simulation Data
    Creating Your Own Simulators
    Summary
    Suggested Reading
Chapter 11 Instrumentation Data I/O
    Data I/O Interface Software
    Data I/O: Acquiring and Writing Data
    Summary
    Suggested Reading
Chapter 12 Reading and Writing Data Files
    ASCII Data Files
    Binary Data Files
    Summary
    Suggested Reading
Chapter 13 User Interfaces
    Text-Based Interfaces
    Graphical User Interfaces
    Summary
    Suggested Reading
Chapter 14 Real World Examples
    Serial Interfaces
    USB Example: The LabJack U3
    Summary
    Suggested Reading
Appendix Free and Open Source Software Resources
Appendix Instrument Sources
    Manufacturers
    Used Test Equipment Sources
    Manuals
Colophon</t>
<t tx="zoomq.20110221225054.2597">=== 报名: ===
 # 高增琦 &lt;pgf00a@gmail.com&gt; / 13522167037
  * 自用Blog:暂无，校内用的多...
  * 邮寄前联系（租的房子快到期了）
  * 2010年新鲜毕业的研究生，作XML查询引擎，JAVA 工作是数据库开发，C 有一定的C语言基础，有并行程序的经验硬件接触的少（也就是上学时）有一定的英文阅读能力，曾经翻译过英文论文（XML流处理相关）对开源、开发有激情
  * 每天1-2个小时？也许周末能多点儿,要是能在手机上弄，也许更多一些吧
  * 对于未来的版权收益有什么特殊要求? 这个不懂，求指教... 
 # Grissiom &lt;chaos.proton@gmail.com&gt; / 15901033820
  * *bitbucket ID:* `grissiom`
  * http://grissiom.blogspot.com (life), http://blog.csdn.net/grissiom (tech)
  * 北京海淀区知春路大运村 1 号楼 1305 邮编 100191
  * 现在研一，大二的时候自学的 python，以后只要能用 python 的地方就用 python。C 语言也会，写过 51 的程序。 本科毕设做的是 pyqt+pyserial 的拉伸机测控系统。实验室做一些小的材料测控仪器。上个学期学过一点控制论。 我看目录里也有控制系统的内容。英语水平是 CET-6，平时常在英文网站上瞎逛。技术书籍有原版不读译本。
  *  2011 年的课程应该不紧。基本应该是在实验室做项目吧。估计每周应该有四个晚上可以掺和，呵呵
  * 对于未来的版权收益有什么特殊要求?
   * 以前只给 KDE 翻译过几个 po，第一次参与这种翻译，不知道行规怎么样的。图学习，不图收益，呵呵
 # 小马xiaoma &lt;cnxiaoma@gmail.com&gt; / 13311664600
  * 自用Blog    在建中...
  * 15年开发经验，其中:5年MIS开发(VB, PB, Sybase)/5年Web开发(PHP,Mysql,ASP,Java)/5年嵌入式（RFID）开发(C)/对数据库，互联网,嵌入式有一定了解。
  * 2011 很忙，但是仍然能抽出一定的时间。目前正在翻译《REST in Practice》 其中6,7,8章（150多页），4人合译，计划3月完稿，6月可以出版。4月份后可以抽出时间，平均一天一页应该没问题。
    * http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829
  * 对于未来的版权收益有什么特殊要求?只要求有署名权，其他有最好，没有也无所谓，就当是为社区做贡献。
 # kermit.mei@gmail.com / 13428780315
  * *bitbucket ID:* `kermitmei`
  * http://www.zeuux.org/home/kermit.mei/
  * 邮寄地址
  * 目前从事嵌入式Linux下C/C++软件开发，主要是以Qt为主的嵌入式Linux应用开发，2年工作经验;以前做过智能遥控器，多款数码电子产品；现在工作内容是开发一个基于嵌入式的精简Web引擎，包括html解析和界面生成等功能。对C/C++ 以及Qt架构灰常熟悉，目前靠这个吃饭；熟悉Linux操作系统;熟悉Python/Perl/Bash等脚本语言(主要用于测试和辅助编程)；对计算机硬件有一定了解，并有浓厚兴趣。
  * 换工作了，从不加班，所以不算忙，至少保证：
   * 1.每天能够查收并处理邮件；
   * 2.每周至少贡献一天(周六或者周日)来完成社区任务；
  * 所有收益均愿意贡献给Zeuux。当然，如果能在扉页中属个名字最好，以帮助我以后找工作时吹吹牛；若无则也罢。
  * 参与目的：
   # 这个工作量不算大，按照一年的计划完成C部分翻译和语法润色应该没有问题。
   # 希望为社区力所能及地贡献一点儿力量。
   # 最重要的是，我本身也希望阅读此书，并进一步学习社区中的“协同作战“。
   # 另外，除了C部分的翻译(因为这部分内容确实很少)，如果时间确实是1年，那我觉得我还有时间担任其他章节的校验工作。
 # 孙伟 / sagasw@gmail.com / 13840885742
  * http://sunxiunan.com
  * 目前主要从事Windows桌面下Visual C++开发，爱好Python和Lua。8年工作经验。
  * 报名参加C相关章节翻译。每周可保证至少有6个小时。
 # Alan Zheng &lt;machinecat1666@gmail.com&gt; / 13764183786
  * *bitbucket ID:* `AlanZheng`
  * http://blog.microsuncn.com
  * 上海市长宁路1018号龙之梦大厦14楼，Siemens工业软件（上海）有限公司
  * 3D图形，Linux(Fedora) C/C++, MIPS embedded system, Python, RHCEr, etc.
  * 周六周日基本都有时间
  * 对于未来的版权收益有什么特殊要求? ：方便介绍一下通常是怎么处理的吗？
 # jl y &lt;newpublic01@gmail.com&gt; /  13764860916
  * *bitbucket ID:* `newpublic01`
  * 邮寄地址:  租房, 到时候联系, OK?!
  * 技术积累:  c, python (自我感觉还需要大幅度提高)
  * 2011 是否忙,每周可以挤出多少时间掺合:  忙也得挤时间啊(目前比较空闲)
  * 对于未来的版权收益有什么特殊要求:    我觉得, 既然是 linux 环境下的, 就应该支持一下 GPL, 但不是说主张盗版啥的, 只是说能让更多的人读到就好. 况且, 说句不太中听的话, 要想拿这个收益改变生活水平啥的, 我觉得八成不靠谱, 还不如支持一下开源, 呵呵
 # hu peter &lt;hulwyx@gmail.com&gt;/ 13929554974
  * 自用Blog：无
  * 广州市前进路161号
  * 技术积累：？？？？ 本人专业是工程类的，不过对外语比较感兴趣，有兴趣参加。目前就职中交第四航道勘察设计院，08年就被派驻一个援外港口建设项目（安哥拉），外语还行，我想试试看，能否帮上你的忙！
  * 工作比较空闲，时间较多。
  * 对于未来的版权收益有什么特殊要求?           ：没有特殊要求。
 # Atommann &lt;atommann@gmail.com&gt; / 13590240120
  * *bitbucket ID:* `atommann`
  * http://www.atommann.com
  * 深圳市南山区南光村龙泰轩A501 邮编：518054
  * 在一家生产工业过程控制器的厂家做文档员。业余时间爱好开源硬件。
  * 每天至少 1 个小时用于翻译。
  * 对于未来的版权收益有什么特殊要求?
   * 学习，有收益更好
   </t>
<t tx="zoomq.20110224000107.3905">*HI*UI**+ '可以链式clone传递'
+ '事务邮件通告:'
    commits-noreply@bitbucket.org&gt;
    发送至	zoomquiet+rwiwpy@gmail.com （是的，这就是您。） 了解详情
+ '自动编译 hook 部署'
    trac2:
        /ata/_cron/
+ https 认证部署!
    /data/py.kingsoft.net/ssl/server.key
    pass phrase for server.key: P@55w02d
    
    Signature ok
subject=/C=CN/ST=GuangDong/L=ZhuHai/O=zoomquiet.org/OU=obp/CN=Zoom.Quiet/emailAddress=zoomquiet+obp@gmail.com
Getting Private key
    #Yahoo! obp.zoomquiet.org -&gt; py.kingsoft.net
    https://py.kingsoft.net:8080/rwiwpyzh
    使用 Nginx 发布
+ 'Issue 评注...'
    H* 点击到:
    https://bitbucket.org/ZoomQuiet/obp.rwiwpyzh/issues/new
    zoomq   1q2w3e4r
    zsprain obp@pyk
    billxu
    atommann
    pgf00a
    grissiom
    xiaoma
    kermitmei
    sagasw
    AlanZheng
    newpublic01
    hulwyx
</t>
<t tx="zoomq.20110301085102.3912">date,tI,tO,tC,tM,tF,tS
110209,2.00,4.00,1.00,7.00,5.00,6.00
110210,0.00,1.50,1.50,10.5,4.50,5.50
110212,0.00,2.50,1.00,8.00,4.00,7.00
110214,2.50,2.75,1.25,4.00,5.00,7.00
110215,0.00,6.00,0.50,6.50,4.00,7.50
110216,0.00,3.00,1.50,7.00,4.00,7.50
110217,0.00,1.00,2.00,8.50,4.50,7.00
110218,2.00,3.00,0.00,7.00,4.00,7.00
110221,0.00,3.50,3.00,4.50,4.00,7.50
110222,0.50,3.50,1.00,8.00,4.50,8.00
110223,1.00,4.50,1.00,5.00,4.50,7.00
110224,3.00,5.00,0.00,3.50,3.50,7.50
110225,2.00,0.75,7.75,2.00,4.00,6.50
110228,0.00,4.00,0.00,6.00,6.00,6.50
</t>
<t tx="zoomq.20110309092312.11334"> http://nginx.org/download/nginx-0.9.5.tar.gz
http://www.openssl.org/source/openssl-1.0.0d.tar.gz
系统是 OpenSSL 0.9.8k 25 Mar 2009

./configure \
    --prefix=/usr/local/nginx \
    --user=www \
    --group=www \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --pid-path=/usr/local/nginx/run/nginx.pid  \
    --lock-path=/usr/local/nginx/lock/nginx.lock \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --with-openssl=../openssl-1.0.0d \ 
    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 


Configuration summary
  + using system PCRE library
  + using OpenSSL library: ../openssl-1.0.0d
  + md5: using OpenSSL library
  + sha1 library is not used
  + using system zlib library

  nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/run/nginx.pid"
  nginx error log file: "/usr/local/nginx/log/error.log"
  nginx http access log file: "/usr/local/nginx/log/access.log"
  nginx http client request body temporary files: "/usr/local/nginx/tmp/client_body"
  nginx http proxy temporary files: "/usr/local/nginx/tmp/proxy"
  nginx http fastcgi temporary files: "/usr/local/nginx/tmp/fastcgi"
  nginx http uwsgi temporary files: "/usr/local/nginx/tmp/uwsgi_temp"
  nginx http scgi temporary files: "/usr/local/nginx/tmp/scgi_temp"
</t>
<t tx="zoomq.20110322090028.3918">@path ~/workspace/OBP.b/RWIwPy/source/

$ hg log -M --template "{author}\n" | sort | uniq -c | sort -nr 
     52 Grissiom &lt;chaos.proton@gmail.com&gt;
     45 ZoomQuiet &lt;zoomquiet+obp@gmail.com&gt;
     34 kermit.mei@gmail.com
     31 atommann &lt;atommann@gmail.com&gt;
      2 sagasw &lt;sagasw@gmail.com&gt;
      2 Atommann &lt;atommann@gmail.com&gt;
      1 ZoomQuiet &lt;zoomquiet+hg@gmail.com&gt;

</t>
<t tx="zoomq.20110322090028.3919">@path ch03</t>
<t tx="zoomq.20110322090028.3920">@language rest
Python编程语言
============================================


.. include:: 0_intro.rst


.. toctree::
    :maxdepth: 2

    1_install_py.rst
    2_py_programming_language.rst
    3_py_evelopment_tools.rst
    4_summary.rst
    5_suggested_reading.rst


.. |rwip_0101| image:: ../_static/figs/rwip_0101.pdf.png
   :alt: rwip_0101
   :target: #
</t>
<t tx="zoomq.20110322090028.3921">@language rest
.. include:: ../LINKS.rst

本章节是面向非Py 程序员的,一个精简语言简介...

.. epigraph::

    I just want to go on the record as being completely opposed to computer languages. Let
    them have their own language and soon they’ll be off in the corner plotting with each other!

    我认为就算完全禁止研发计算机语言,他们依然会各自拥有自个儿的开发语言,并立即悄鸟儿的退到各自角落中自娱自乐去了.

    —Dr. Steven D. Majewski


.. sidebar:: Steven D. Majewski

    早在1992年就为 Python 摇旗呐喊过的牛人:
    `WHY PYTHON? &lt;http://www.python.org/search/hypermail/python-1992/0274.html&gt;`__ 作者,
    `PyObjC 项目 &lt;http://sourceforge.net/projects/pyobjc/&gt;`__ 主持人 




自动化设备一个重要的需求是能够和电脑或是其它控制设备连接运行.
说到这儿,术语"编程"会立即在一些读者头脑中浮现,
实际上作到这一点有很多方法,有些甚至于不涉及编程语言(至少不是传统意义上的).
不过,本书中,我们选择了 Python和少量的C 来创造软件给自动设备用.


本章的目的是给出 Python 的基础介绍.
以便在下一章节,来引入C语言,来为Python 程序使用廠方提供的硬件驱动,或是创造计算密集型的模块.
本章不打算成为Python 的深入教程或是手册;
已经有太多优秀的图书可以承担这一角色了(具体参考本意的推荐阅读部分).
同时可以在 `Python官网`_ 找到从入门教材到高级话题的各种文档!


Python 作为本书的主力开发语言,出于以下原因:

- 足够简单易学
- 没有编译过程,可以直接加载执行(或是直接输入,如果够胆的话)
- 足够强大


同时 Python 也是种多范式语言,支持多种编程模型: 面向过程,面向对象,和函数式编程!
首先我们将进行通常的编程,然后将尝试追加图形界面(GUI)并用C来写擴展;
进一步的,我们将遇到需要抛开通常的程序设计,完全使用我们自行创建的嵌入式对象.


而且,正如我们将见证的, Python 是天生的面向对象的,甚至于变量本质上也是对象;
即使我们没有被迫进行OOP编程,实际上每时每刻我们都在使用对象.
如果还不清楚什么是 "面向对象"的含义,参阅边注所述.



.. topic:: 面向对象的编程

    一般说程序是认为一种命令式编程,
    核心概念是一组顺序排列的指令形成程序(类似食谱).

    - 扩展程序包含在模块中,模块则由一组函式组成.
     - 每个函式执行特定活动(算法),并可以包含其私有数据.
     - 函式可以在其所在的模块中使用 "全局" 数据.
     - 函式可以调用其它函式
     - 函式可以返回数据
    - 模块可以从其它模块引用函式或是数据
     - 这种设计可以令程序用模块的层次结构组织起来 (即,结构化设计)

    标准C程序就是一个通常的面向过程的例子.
    注意,这里我们使用 "函式"作为"功能"的同义词,不过,在其它一些语言中,他们被区别对待了.
    在 Python 和 C 中,就只有函式!

    面向对象的编程,用类(及其数据)来描述对象的特性概念以及可以在其上执行的操作(对象的方法)来
    扩展了同类事务的功能;

    - 一个对象,可以说是一类说明和模板,而这种描述本身是不可执行的.只有基于对象创建的实例才可执行.
     - 可以想象为,一个类就是个饼干压模,而用这压模作出的饼干有的可能含有坚果,有的又有巧克力,但是他们都称作"饼干"
     - 必要的话,我们可以从指定的类创建很多可执行对象,每个对象除了从其父类继承的数据和方法之外,又都有各自特殊的.
     - 对象的数据,一般称为:"属性",而操作数据的类函式称为:"方法".
    - 对象,经常用来声明组件间的 "有一个.." 以及 "是一个.." 的关系:
     - 例如: 一个摇椅 "是一个" 被称作椅子的类的实行; 它 "有一个" 座位,和两个摇杆(属性); 人们可以坐在它上面摇摆 (方法)


</t>
<t tx="zoomq.20110322090028.3922">@language rest
.. include:: ../LINKS.rst

安装Python
===============================================================================

首先需要安装Python.
本书使用 2.6(不是3.x),对于 Windows 环境, ActiveState发行版比较友好

- http://www.activestate.com/activepython/

当然从 python.org 获取的官方版本也很好.
都包含有针对Windows 定制的帮助和手册.
如果运行在 Linux 直接使用软件包管理器安装即可(synaptic, apt-get, rpm, 等等)


如果想从源代码编译安装,参考: http://docs.python.org/using/unix.html#getting-and-installing-the-latest-version-of-python



</t>
<t tx="zoomq.20110322090028.3923">@language rest
.. include:: ../LINKS.rst

Python编程
===============================================================================

现在至少已安装好了 Python,我们可以通过一个快速导览来体验这语言的主要特性.

Python 是种解释型语言.精确的说,是种编译为字节码的解释型语言.
这意味着,Python 在执行脚本前会将脚本编译为一种二进制的可行程序.其实这就是"解释型"的含义.

Python在其虚拟机中将形式文本解释为字节码来运行,
虚拟机内部的指令集是经过优化的,虽然无法和通常的编译成机器码的编译型语言执行效率相比,
但对于大多数应用程序来说,字节码的运行速度很够力了.
尤其是考虑到时下PC上的处理器(CPU或叫中央处理器)都是在1~3G赫兹.
而以前运行 30兆赫兹已经算好的时候,程序本身的执行速度才是大事儿.

不论是否Python 新手,Mark Lutz 写的 `Python口袋手册 &lt;http://oreilly.com/catalog/9780596158095/&gt;`__ 
强烈推荐. 这书提供了一个简洁/组织良好/易读体积小巧的 Python 语言核心功能/模块的速查手册,
可以随身携带,需要时就查.

其它相关好书在推荐阅读部分分享.

@others

</t>
<t tx="zoomq.20110322090028.3924">@language rest
Python开发工具
===============================================================================


成功和之间的差异可能就是一个良好的发展环境!
开发环境至少必须提供方式来支持，创建和编辑标准ASCII文本格式的Python源代码.
其他配套工具，如调试器，自动文档生成和版本控制，都是很好的，不是绝对必要的.
幸运的是，有太多可选择的，优秀的开放源码软件(自由和开放源码软件）或是廉价的很好的商业工具.

本节我们将以自由和开源软件为重点来简要介绍哪些是可用.
真正的问题不是你用的什么工具，毕竟大多数人都(在过度的开发时间里)有自己的喜好和工作习惯.
重要的是在多种选择中，决择简洁够用的工具组合来完成任务.



编辑器和 IDEs
-------------------------------------------------------------------------------

最低限度,需要一个文本编辑器或集成开发环境(IDE)来输入和编辑Python 脚本.
同时还需要编辑C代码来完成扩展(第5章我们将深入如何创建Python扩展)，
因此选择一种语言无关,或是能够识别不同语言并有语法高亮的环境.

编辑器和IDE之间的主要区别在于从工具本身可以完成多少操作.
通常编辑器，只允许你做一件事：编辑.
而一个IDE，可以让你从编辑，到编译，调试，甚至度量和版本控制等各种事务.
IDE的目的是开发人员在整个开发过程中不必离开环境.


有些编辑器，也有从内启动另一个程序的能力,然后捕捉和显示程序的输出，
但是这通常是一个附加的能力，本质上不是编辑工具的一部分，
有些编辑器这种支持能力比别人更好很多(是的说的是谁,大家都知道!)
一个全功能的IDE则是以某种形式集成所有这些功能，
虽然有些IDE也需要来自外部工具的功能和应用.
换句话说，能高度扩展功能的编辑器和IDE有时是很难区分的.

对于Python可能IDE不是必要的(虽然市面上有少数选择),
因为它不是编译语言，大部分使用Python的情况是在命令行或在包含Python应用的图形用户界面.

@others




</t>
<t tx="zoomq.20110322090028.3925">@language rest
小结
===============================================================================

对Python的简要游览就这样结束了.
现你应该对Python看起来是什么样儿的有个一般性的感觉了,
我故意掩盖了语言的许多方面，因为，毕竟这本书不是Python教程.
正如一开始就说过的,有关Python 语言本身有许多优秀的书籍，可以提供丰富的细节，
而且在Python官方网站有关语言的一切,都有权威人士可供答疑.
接下来,随着讨论的继续,我们会遇到Python的其他功能，若有必要,就地研究.



</t>
<t tx="zoomq.20110322090028.3926">@language rest
推荐阅读
===============================================================================

如果你想进入更深的Python编程境界，从以下书籍开始吧:


Python in a Nutshell, 2nd ed. 
    [http://oreilly.com/catalog/9780596100469/] Alex Martelli, O’Reilly Media, 2006.

    辞行常备案头的紧凑参考.精心组织成方便查阅的形式,
    当你工作时,想快速寻找一个可用的思路时,这是个万用工具袋.

Programming Python, 3rd ed. 
    [http://oreilly.com/catalog/9780596009250] Mark Lutz, O’Reilly Media, 2006.

    1600页的巨型手册,全面涵盖Python中从字符串到GUI的一切,
    是Python工作必备图书.


除了已在本章引用过的URL，网络中还有许多在线资源可用于Python :

http://diveintopython3.org
    发布了 Mark Pilgrim 所撰图书: "深入Python" 的完整文本
    还提供了PDF下载.
    书中提供了以练带学的方式,并使用无数的例子来说明关键概念和技巧.

.. note:: (~_~)

    - 也有人指出,这书研究Python 的方式有些太学术化了,根本不实用


http://effbot.org 
    Fredrik Lundh的博客.在这里，可以找到数百篇有关Python的文章,下载和公开的图书,
    以及各种开发研究和尝试.
    行文有趣并有用,而且都是非常有见地并实用的.

.. seealso:: (^.^)

    - `ElementTree &lt;http://effbot.org/zone/element-index.htm&gt;`_  的作者! Python 世界里最好的 XML 解析模块!

</t>
<t tx="zoomq.20110325220944.2613">Cpython-cn   群組建立以來
8901	limo...@gmail.com
5767	zoom.qu...@gmail.com
4997	jhuangjiahua@gmail.com
2778	askfor@gmail.com
2260	python.leojay@gmail.com
2056	march.liu@gmail.com
1262	
1183	hanzhupeng@gmail.com
1178	zsp007@gmail.com
1071	yi.codeplayer@gmail.com


CPyUG 列表 717...</t>
<t tx="zoomq.20110329090742.2614">与 沈崴-wileishn 在 2011年03月29日 星期二 09时20分19秒 的会话
...

...
(2011-03-29 09:37:03) 沈崴-wileishn: 
很多不解风情的家伙说不爽 python 的缩进，所以有了杯具的 ruby
(2011-03-29 09:37:22) 沈崴-wileishn: 
一开始 ruby 这个轮子就是为了一个 end 而已，从历史上讲



</t>
<t tx="zoomq.20110329090742.2615">(2011-03-29 09:27:06) 沈崴-wileishn: 
虽然我一直想写一本关于 python 的黑客的书，就是人比较懒，有点事就一直没弄
(2011-03-29 09:32:24) 沈崴-wileishn: 
我们公司是不用这些技巧的，我们的 hack 技术是把最简单的东西用到极致，危害可读性、稳定、安全的东西都是不用的，用最简单的语法写出华丽的程序。
(2011-03-29 09:32:51) Zoomq: 
咔咔咔!那个顶! 就象你提倡的用复制不用类的方式来加速运行

(2011-03-29 09:33:02) 沈崴-wileishn: 
打个比方，我们公司里面有两条“军规”，
1、我们公司员工 code review 的速度很快，基本扫一眼文件就知道有没有 bug 和设计问题
2、更简单，当无法起出一个漂漂的变量名时，已经有设计问题了。
(2011-03-29 09:40:39) 沈崴-wileishn: 
一开始他们问我，怎样才知道什么时候合并两个模块，什么时候拆分一个模块成两个文件？我说，等起不出美观的变量名时，你就知道了。
</t>
<t tx="zoomq.20110329090742.2616">...
(2011-03-29 09:46:32) 沈崴-wileishn: 
以前在网易我经常这么说，比如我常对赖勇浩说，要影响而不是说服别人。
(2011-03-29 09:49:24) 沈崴-wileishn: 
赖勇浩经常让项目组从 c++ 转用 python 的，有时候会有人反弹。我说，其实这时说服是没有用的，有时候对自己也没什么好处，人家凭什么把用了几年的 c++ 换掉来用不熟悉的 python。

这个工作靠平时潜移默化地影响人家，用行动和赖勇浩超凡的个人魅力，就很容易达到，到时候跟不不用说服人家，大家喜洋洋地切换到 python 模式了。哈哈哈。开源也一样。
(2011-03-29 09:50:58) Zoomq: 
"个人魅力" ~ 其实就是自个儿用Py 挣得你用 C++ 搞不到的身家,开跑车,泡美女,状态潇洒，人家当然相信了，就这么简单 ;-)
(2011-03-29 09:52:12) 沈崴-wileishn: 
就是。
...
</t>
<t tx="zoomq.20110329090742.2617">(2011-03-29 09:53:48) 沈崴-wileishn: 
eurasia 目前有 python 和 c 两个版本。python 版每秒处理 1.5w 以上个 http 请求，c 版是 2.5w 个以上，目前都还没有测试出上线，应为测试工具性能达不到暂时。

python 版每秒 1.5w 个请求和 fapws、tornado、gevent 这些不是一个概念。因为 eurasia 每个请求都是长连接，可以在一个请求中处理多个 http 请求，而且每个请求都有细粒度超时控制和入侵检测，所以实际性能要高得多。
(2011-03-29 09:54:57) Zoomq: 
嗯嗯嗯,这个很早就说过,不过,用长连接的情景很少,大家也长年没有用过 S/C 结构来开发广域网应用了,多是不相信,,,咔咔咔
(2011-03-29 09:55:58) 沈崴-wileishn: 
eurasia 现在利用 pypy 技术发展的版本，速度比 纯python 和 c 版本的都要快。我们一般不用在具体项目中，一般项目用 c 版足够了。我只有在咨询服务中，对性能要求非常极端的情况下才会用到最后一个技术栈。
(2011-03-29 09:56:28) Zoomq: 
一直没有确认,你公司的业务,主要还是游戏开发的支持?!
(2011-03-29 09:56:48) 沈崴-wileishn: 
因为浏览器都支持 http 1.1 keep-alive，所以 eurasia 3.1 实际上要快得多。
(2011-03-29 09:57:13) Zoomq: 
不需要特别的客户端JS 支持库的?!
(2011-03-29 09:57:19) 沈崴-wileishn: 
不需要。
(2011-03-29 09:57:30) Zoomq: 
在长连接中进行多次交互?
(2011-03-29 09:57:34) 沈崴-wileishn: 
是的。
(2011-03-29 09:57:40) 沈崴-wileishn: 
一次请求，多个页面。
(2011-03-29 09:57:56) 沈崴-wileishn: 
目前只有 eurasia 3.1 做到的。

(2011-03-29 10:02:11) 沈崴-wileishn: 
再下一代的 eurasia ，因为我们公司已经完全消化了 pypy 的技术，所以已经达到 c 级别的 stackless 协程了。
...
(2011-03-29 10:04:16) 沈崴-wileishn: 
剪掉财务营销之类的，湖州搞核心研发的三个人，加我四个人。杭州分布四到五个人，不过是产品研发。
..
(2011-03-29 10:07:43) 沈崴-wileishn: 
我这里搞核心研发的人，都培训了黑客技术（甚至能做入侵大网站的事情，做到使用各类溢出从传输层入侵，用来改进我们自己产品的安全）、能从 linux kernel 建立整个操作系统，编写图形界面基础、有的能做编译器和数据库。
(2011-03-29 10:08:22) 沈崴-wileishn: 
写个 python web 框架那是第一天就要会搞定的。

(2011-03-29 10:10:53) 沈崴-wileishn: 
应该说，我现在已经不大关心 eurasia 这一级的东西了，我可以抽出来弄更好玩的大杀器了，呵呵
...
(2011-03-29 10:15:30) 沈崴-wileishn: 
我们现在项目里可以用 python 写应用，然后编译成 .so .dll 然后给 c 、php、perl 之类的去用。你知道用了 pypy 的编译期优化技术其实比 c 写的模块跑得还快。
(2011-03-29 10:17:39) 沈崴-wileishn: 
文件系统的话，我们现在的 web 框架，可以把远程的 web 服务器直接映射到本地磁盘，在本地修改远程服务器的程序，然后文件系统通知服务器自动更新已经修改的程序。都不用重启了。
(2011-03-29 10:18:01) 沈崴-wileishn: 
还有加密盘之类的，都要用到这项技术。
...
(2011-03-29 10:19:10) 沈崴-wileishn: 
说到加密，我用 python 实现了一个 rsa 只用了 12 行代码，python 的开发效率真牛叉啊。
(2011-03-29 10:20:24) 沈崴-wileishn: 
我们的数据库引擎技术有这个，我们在数据库引擎层做集群、负载分流、热备，然后可以在引擎上架 mysql、zodb ，就直接支持这些了。不过我们的数据库产品还在研发中。

</t>
<t tx="zoomq.20110329090742.2618">Pythonic 军规:
1、code review 的必须很快,代码排版到能够扫一眼文件就知道有没有 bug 和设计问题
2、当无法起出一个漂漂的变量名时，已经有设计问题了
</t>
<t tx="zoomq.20110402090250.2620">date,tI,tO,tC,tM,tF,tS
110301,0.00,2.50,2.50,4.00,2.50,7.50
110302,3.25,0.75,5.25,7.50,5.75,5.50
110303,0.00,4.50,0.50,5.50,5.00,7.00
110304,3.00,4.50,0.50,4.00,4.50,7.00
110307,0.00,5.00,5.00,2.00,4.00,7.00
110308,0.00,7.50,2.50,3.00,5.00,7.00
110309,0.00,7.00,1.00,6.50,1.00,6.00
110310,0.00,3.00,4.50,4.00,2.50,7.00
110311,1.00,12.5,0.00,3.00,1.50,7.00
110312,1.00,6.50,1.00,5.50,1.50,5.00
110314,0.00,5.75,3.50,2.50,1.75,7.00
110315,5.00,1.50,1.75,7.25,1.00,7.50
110316,3.00,5.00,1.00,5.00,2.00,6.50
110317,0.00,4.50,0.00,7.50,1.50,6.50
110321,1.75,2.25,0.00,10.0,1.00,7.00
110322,0.00,4.75,3.25,5.50,3.00,7.00
110323,0.00,8.50,2.00,2.00,2.00,6.50
110324,2.75,5.25,0.00,6.25,1.50,7.00
110325,0.75,5.00,2.50,6.25,2.00,6.00
110326,2.25,1.00,0.00,7.50,3.75,6.50
110328,2.60,2.75,0.40,6.00,2.00,7.00
110329,4.75,4.50,2.50,3.50,1.00,5.00
110330,0.00,6.75,1.50,4.75,3.50,6.50
110331,0.00,10.0,2.50,3.50,1.00,6.50</t>
<t tx="zoomq.20110407085430.2620">Python的命令行
-------------------------------------------------------------------------------

在所使用的操作系统中,如何开展Python 的交互式运行?
对 Windows 而言,通常是首先开始一个命令提示符窗口
(有时被误称作"DOS窗口",但是人家早已没有真正的"DOS"很久了).
在提示符(可能看起来有点不同,视你所在的默认目录吧)中输入以下命令::

C:\&gt; python


应该立即看到以下的提示
(前提是安装过 ActiveState 的发行版,不过标准的 Pytohn 发行版的提示几乎完全一样)::

    ActivePython 2.6.4.8 (ActiveState Software Inc.) based on
    Python 2.6.4 (r264:75706, Nov 3 2009, 13:23:17) [MSC v.1500 32 bit
    (Intel)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    &gt;&gt;&gt;

这一过程完全类似Linux(或是BSD/Solaris) 系统中打开一个 shell 窗口
(不论是那种shell 环境,csh/ksh/bash 或是其它)
只要安装有 Python, 键入 python 就可以看到交互环境的启动信息.


&gt;&gt;&gt; 是 Python 的命令提示符,表示在等待输入点什么来运行.
在 Wondows机器中 使用 Ctrl-Z 来退出，
在 Linux 系统中使用 Ctrl-D 来退出,键入 "quiet" 不起作用.


Python 命令行是个尝试和体验的好环境.
我们可以通过内建的帮助函式机制来探查所有.仅需要输入 help(),如果没有任何参数，应该类似显示::

    &gt;&gt;&gt; help()

    Welcome to Python 2.6! This is the online help utility.
    If this is your first time using Python, you should definitely check out
    the tutorial on the Internet at http://docs.python.org/tutorial/.
    Enter the name of any module, keyword, or topic to get help on writing

    Python programs and using Python modules. To quit this help utility and
    return to the interpreter, just type "quit".
    To get a list of available modules, keywords, or topics, type "modules",
    "keywords", or "topics". Each module also comes with a one-line summary
    of what it does; to list the modules whose summaries contain a given word
    such as "spam", type "modules spam".

    help&gt;


正如内置帮助显示的, 在官方网站的教程资料是可切实认识和使用Python的开始.
本章由一些不同以往的路径来展示Python.
首先向读者展示数据类型，接着是运算和语句，
我认为面向对象的基础语言性质很重要,因为用 Python 来构建应用,总会遇到相同的情景,能使用内嵌的数据对象很便捷.

多年来，我观察到的材料好象在忽视或淡化Python面向对象的根本性质，
常常是一带而过,比如说:“哦，对了...“或是”也类似这样，但这里不必担心在...“
我们广博為优先理解这点,这种对内部机制的足够理解,有助于快速理解系统如何可以正常工作.
以及为什么又不工作了.
如果你是名Python 新人,那么通读本章,以及在线教程很有用.

</t>
<t tx="zoomq.20110407085430.2621">命令行参数和环境
-------------------------------------------------------------------------------

Python的联机帮助页（手册页）内容非常丰富，但不幸的如果你只有Windows 环境则很难体会到其中的方便.
在Linux 系统中,只需在shell 提示符中键入 ``man python``
（实际上，如果Python安装正确，就应该能在所有 Unix兼容系统中工作）

在 Windows 你可以通过键入命令来获得帮助::

    C:\&gt; python -h
    若要重来输入应该类似:
    用法: python [option] ... [-c cmd | -m mod | file | -] [arg] ...
    选项​​和参数（和相应的环境变量）:
    -B : 输入时不写 .py[co] 文件; 同 PYTHONDONTWRITEBYTECODE=x
    -c cmd : 将字串作为教程处理(关闭参数列表处理)
    -d : 输出处理器调试信息; 同 PYTHONDEBUG=x
    -E : 忽略 PYTHON* 开头的环境变量 (同 PYTHONPATH)
    -h : 打印当前帮助信息并退出 (同 --help)
    -i : 脚本运行后就地进入交互环境，保留现场环境以便调试; 同 PYTHONINSPECT=x
    -m mod : 将一库当成脚本运行(关闭参数列表处理)
    -O : 优化生成的字节码; 同 PYTHONOPTIMIZE=x
    -OO : -O 参数可追加的清除文档字串操作
    -Q 参数 :  选项分离: -Qold (默认), -Qwarn, -Qwarnall, -Qnew
    -s : 不将用户目录追加到 to sys.path; 同 PYTHONNOUSERSITE
    -S : 初始化时不包含 'import site'
    -t : 缩进有误时发送警告 (-tt: 发送错误)
    -u : 不缓冲二进制输出和错误; 同 PYTHONUNBUFFERED=x
        参考 man 页面有关 '-u' 的内部缓冲说明
    -v : 详细 (跟踪导入语句); 同 PYTHONVERBOSE=x
        支持多次叠加以增加细节
    -V : 打印当前Python 版本并退出 (同 --version)
    -W 参数 : 警告控制,参数作为活动 :message:category:module:lineno
    -x : 忽略源码第一行,允许用户从非 Uninx 兼容系统中略过 #!cmd 聲明
    -3 : 提醒有关Python 3.x 的兼容问题, 2to3 转换脚本无法完成的修复,方案可以从:
        file : 文件读入
        -  : 从标准输入读入 (默认值,若从tty 就是交互模式 )
        arg ...: 以系统参数 sys.argv[1:] 传入


    其他环境变量：

    PYTHONSTARTUP : 文件执行交互式启动（无默认值）
    的PYTHONPATH：';'分隔的目录列表前缀的
            默认模块搜索路径。其结果存储在sys.path
    PYTHONHOME：备用&lt;前缀&gt;目录（或&lt;前缀&gt;; &lt;exec_prefix&gt;）。
            默认的模块搜索路径基于 &lt;前缀&gt;\lib
    PYTHONCASEOK：忽略'导入'语句（仅Windows环境视窗）
    PYTHONIOENCODING：编码[：错误]用于标准输入/标准输出/标准错误

你可能没有太多机会需要选择这些开关参数，但偶尔他们派上用场（特别是使用- i，- tt，和- v开关）。
环境变量，特别是PYTHONHOME，是重要的，
应根据初始化的安装设定来明确Python的分布与您的应用配合.


.. topic:: 译注

    在Windows 中,常常必须手工确认 电脑-&gt;属性-&gt;高级-&gt;系统目录 中 path 列表中是否包含本地 Python 的安装路径;否则无法在 cmd 中正常调用得到 Python.




</t>
<t tx="zoomq.20110407085430.2622">Python中的对象
-------------------------------------------------------------------------------

一般来说，在Python中万物皆对象，包括数据的变量。
一个赋值相当于创建一个新的对象，因此本质上是函数的定义。
如果你不熟悉面向对象的概念，不要太担心
（详细参考“面向对象编程概述”一节）。
期望随着我们的叙述，可以不断清晰起来.
现在，我们只是人们可以在Python 中期待表明什么类型的对象可以找到，
我们先展示一下，以便日后使用。

表3.1，“对象类型“列出了Python 中各种常见对象类型.
Type类的可以随时通过内置的 type() 来查询到,如果涉及类型不匹配将有错误抛出.


.. list-table:: 表3.1. 对象类型
   :widths: 10 10 40
   :header-rows: 1

   * - 对象类型
     - 类型的类名
     - 描述
   * - Character
     - chr
     - 单字节字符,在字串中使用
   * - Integer
     - int
     - 32位整数
   * - Float
     - float
     - 双精度(64位)浮点数
   * - Long integer
     - long
     - 任意大的整数
   * - Complex
     - complex
     - 复数
   * - Character string
     - str
     - 有序（数组）字符集
   * - Dictionary
     - dict
     - 键/值对字典
   * - Tuple 
     - tuple
     - 不可变列表
   * - Function
     - function
     - Python函式对象
   * - Object instance
     - instance
     - 类实例对象
   * - Object method
     - instance method
     - 对象方法
   * - Class object
     - instance method
     - 类对象
   * - File
     - file
     - 磁盘文件对象



本书结束前我们也不会涉及以上所有对象:
我们从数字数据开始,逐步运用列表,元组,字典.



</t>
<t tx="zoomq.20110407085430.2623">Python的数据类型
-------------------------------------------------------------------------------

如果你已做过任何类似Pascal或C的语言编程，你可能熟悉变量的概念~本质上是一个二进制值，指向特定的内存位置中保存的信息。
但是，在Python是完全不同的,所以也就变得有趣了。
Python也提供一般的数字数据类型，如整数，浮点数，等等。
它也支持复杂的数学类型，它封装了一个复数的实部和虚部。
关键Python是如何实现变量.


@others








</t>
<t tx="zoomq.20110407085430.2624">表达式
-------------------------------------------------------------------------------

本书中，我们将使用一种数学表达式.
也就是说，表达式是种良构的由变量或逻辑和数学符号组成的不包含等号（赋值）的序列.
而声明（短期内）代表一项任务或是其他一些行动，也可能表达式.


表达式完成各种值运算,如加/减/比较等等. 表达式可以很简单，如::

    a+b

或是包含其它表达式,如::

    ((a + b) * c) ** z


括号是用来标识运算的顺序.在前例中，乘法运算符（*）比加法（+）有较高的优先级，
指数（**）则比乘法有更高的优先级，如果没有括号表达式会是这样理解::

    a + b * c**z

如果我们用括号将隐含的优先级表示出来::

    a + (b * (c**z))


这当然不是表达式的原意.
表达式还可能包含其它算子.
例如，假设有一个函数 epow() 返回 E 的高阶指数或其它表达式的结果.
表达式就可以包含此函数的调用来创建新值::

    n + epow(x - (2 * y))

这相当于在标准数学中写作:    n + e \ :sup:`(x − 2y)`







</t>
<t tx="zoomq.20110407085430.2625">运算符
-------------------------------------------------------------------------------

我们已经看过了Python支持的数据类型以及表达式，
现在，我们来看看可以用运算符来对他们做什么事儿.
Python提供一套算术/逻辑和比较运算符.
也包括位运算/成员测试/身份测试，并提供各种赋值操作符.

@others
</t>
<t tx="zoomq.20110407085430.2626">语句
-------------------------------------------------------------------------------


典型的程序是由语句，注释，和空白（空白行，空格，制表符等）组成.
语句是由关键字和可选的表达式组成一个确切的动作.
一个语句可能是一个简单的任务::

    &gt;&gt;&gt; some_var = 5


或者，也可以是控制语句的集合，比如一个if-else结构::

    &gt;&gt;&gt; if some_var &lt; 10:
    ...     print "Yes"
    ...     print "Indeed"
    ... else:
    ...     print "Sorry"
    ...     print "Nope"
    ...
    Yes
    Indeed


Python也对自个儿不要什么很有有兴趣.
比如,有其他开发语言经验的人可能注意到Python没有“switch“或“case“的语句.
Python中的If-elif-else结构通常是足以满足同类需求.
还有C语言中的数据结构,Python本身的字典和列表类型也足以模拟为一个结构来用,但通常没必要这么来用.
Python也没有“do”，比如说:``do-until``或是``do-while``.
综上,Python 的语句不会按照一个C程序员所期望的那样来工作(而是以更加简洁明了的方式来完成工作).


@others



</t>
<t tx="zoomq.20110407085430.2627">复合语句
-------------------------------------------------------------------------------

复合语句是一组由控制语言关联的语句构成.
我们将探讨 if,while,for 和 try 语句,将忽略 with 语句,并把def 和 class 语句保留到下一章节介绍.


.. list-table:: 表3.14，复合语句
   :widths: 10 40
   :header-rows: 1

   * - 关键字 
     - 描述
   * - if
     - 可选或终结条件测试
   * - while
     - 初始条件为 True 执行循环
   * - for
     - 迭代一个可迭代对象（例如，列表，字符串，或元组）元素
   * - try
     - 对一组语句声明异常处理
   * - with
     - 启用上下文管理
   * - def
     - 声明一个用户定义的函数或方法
   * - class
     - 声明一个用户定义的类


@others





</t>
<t tx="zoomq.20110407085430.2628">程序组织
-------------------------------------------------------------------------------

到目前为止，我们一直在Python的命令提示符里做事.
现在，我们来看如何通过函数，类和方法创建程序模块.


@others

</t>
<t tx="zoomq.20110407085430.2629">模块导入
-------------------------------------------------------------------------------

Python的模块通过导入语句,即可使用其他模块的功能.
当一个模块导入Python会首先检查是否已经导入过,
若有,将会指当前的命名空间中同名对象,
否则,会加载指定的模块，扫描它，并把所有名称添加到当前的命名空间.
请注意，“当前的命名空间” 可能指本地空间中的函数，类或方法，
或者,也可能是全局命名空间中的一个模块.

在Python模块中的语句,函数或方法在没有加载前不会运行.
这意味着模块的导入语句，赋值语句，函式和类定义语句,加载时会执行.
但是函式或是方法内部的语句只有在调用时,才会执行,
当然,函式和类定义语句执行时,相应对象也将创建.

@others

</t>
<t tx="zoomq.20110407085430.2630">moc加载并运行Python 程序
-------------------------------------------------------------------------------

下面的例子是一个完整的Python程序,
其中不包含函数或类定义，也就是通常所说的“脚本”.
它将产生一个包含随机数据的PGM格式的图像文件.
结果看起来像旧式的电视调到一个空频道时满屏“雪花”的样子，
这里的要点是来看一下,真实小Python程序的样子.
任何图像浏览器能够处理PGM文件并加载和显示出图像.
(ImageJ，一个免费的工具，从http://rsbweb.nih.gov/ij/，
活儿相当不错，对于这一点，可参阅，http://netpbm.sourceforge.net
获得更多的有关PGM图像格式的信息）

运行这一程序,不用启动Python 交互环境,
只顾需要在命令行中在脚本文件名前加上 python::

    C:\samples\&gt; python pgmrand.py

在Linux 中类似::

    /home/jmh/samples/% python pgmrand.py

在你的系统中,具体提示可能有所不同,
(除非你也将脚本保存在 "samples" 目录)

若你在使用Linux,可能需要在脚本第一行加入以下声明::

    #! /usr/bin/python

在其它系统,你可能要修订路径以指向Python 真实的安装目录,
比如说: ``/usr/local/bin/python``

这儿是源代码::

    """ Generates an 8 bpp "image" of random pixel values.
    The sequence of operations used to create the PGM output file is as follows:
        1. Create the PGM header, consisting of:
            ID string (P5)
            Image width
            Image height
            Image data size (in bits/pixel)
        2. Generate height x width bytes of random values
        3. Write the header and data to an output file
    """
    import random as rnd # use import alias for convenience
    rnd.seed()
    # seed the random number generator

    # image parameters are hardcoded in this example
    width = 256
    height = 256
    pxsize = 255    # specify an 8 bpp image

    # create the PGM header
    hdrstr = "P5\n%d\n%d\n%d\n" % (width, height, pxsize)
    # create a list of random values from 0 to 255
    pixels = []
    for i in range(0,width):
        for j in range(0,height):
            # generate random values of powers of 2
            pixval = 2**rnd.randint(0,8)
            # some values will be 256, so fix them
            if pixval &gt; pxsize:
                pixval = pxsize
            pixels.append(pixval)

    # convert array to character values
    outpix = "".join(map(chr,pixels))   #(1)
    # append the "image" to the header
    outstr = hdrstr + outpix
    # and write it out to the disk
    FILE = open("pgmtest.pgm","w")
    FILE.write(outstr)
    FILE.close()



(1)

    字串的 join() 方法和 map() 函式在此用以创建输出字串并写入图片文件


这是个非常值得回味的程序.
其中唯一"棘手"的部分就是使用 join() 和 map()方法来输出字串.
因为Python 没有天然的 byte类型,只有一个 chr 类型来处理字串.
所以,想要使用byte 数组,就是自制一个字串扫描实现,针对每个字符进行转换,
并串接到一个空字串中("".join(map(chr,pixels)) 语句就是完成这一转换).
注意,所有可以输出的参数是硬编码在脚本中的.
</t>
<t tx="zoomq.20110407085430.2631">基础输入输出
-------------------------------------------------------------------------------

程序必须使用一些手段来输入数据和输出结果以便完成通常的任务.
Python提供了几种方法来实现这两个目标:
使用控制台，命令行和文件对象.
稍后，我们将研究类似串行端口，USB，网络插座，和数据采集等硬件.
但现在让我们来看看开箱状态下的Python可以做什么.


@others



</t>
<t tx="zoomq.20110407085430.2632">提示和技巧
-------------------------------------------------------------------------------


这里有个可能对你有用的意见收集.

模块全局变量
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在模块文件头部先初始化一些全局变量,这通常是一个好主意.
检查一个全局变量是否不存在将导致一个异常，
使用前先确保存在,将避免后续的一些恶化.



潜在缺陷
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

将模块被导入时,其中的内部语句除了 def 语句其它并不被立即执行,
bug 最可能潜伏其中,做到被真正调用,才显化.
这时 try 语句是强大的盟友,但它并不是包治百病.
良好的单元测试才是检测和消除这种缺陷的关键. 


延期导入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


有时候，你可能会遇到代码原作者试图用延期导入的方式解决循环导入问题,
有问题的模块导入被放置在函式或是方法中,而不是在模块文件的顶部.
虽然这在Python语法中是允许的，但被认为是很挫的形式，
遭遇到它的明确表现就是有人坐在键盘前对这种脑残的设计骂个不停.
然而，当处理遗留代码（或只是写得不好的代码）时,很可能无法避免使用这一招.
强烈建议只有当你真正必须用并进行彻底测试后才谨慎使用.


字典作为函数参数
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

虽然Python允许任何数据对象可用作函数或方法的参数，
但除非你有足以令人信服的理由,否则不要使用字典对象来作为参数使用.
如果将字典对象用作参数，就必须详细记述含义,尽力避免结构变动,
即便这样,依然会因为可动态改变结构以及各种字典对象的共享,导致无法理解和噩梦般调试.
它甚至可视为是种无意被理解的混淆形式.
基于同样的理由也不建议把列表作为参数使用.


函式返回值 Function return values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

元组是一个方便的形式,可以从函数返回多个值.
例如，可用2元组的形式,一次性返回状态代码和数据值对.
使用时,通过审查状态码确认函数是否成功，如果是 OK,余下就是得到的数据值.


思考模块作为对象 Think of modules as objects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Of course, in Python a module actually is an object (everything is, as you may recall), but
the tendency seems to be to treat a module as something akin to a source code module
in C or C++. One can achieve some neat and tidy data encapsulation using just a module
with nothing in it but assignment statements to associate names with values. Here is part
of a module that contains nothing but event ID values for use with a wxPython GUI, which
we will get to in a later chapter

在Python 中模块当然也是个对象(记得嘛,在Python 世界一切都是对象),
但是在C或是C++ 倾向将模块视作源代码块,
除了比较整洁的组织一些数据封装没有其它作用.
下面是 wxPython GUI的一个模块(进一步的事件ID含义将在以后章节讨论)::

    # ResourceIDs.py
    import wx
    # File
    idFileSave          = wx.NewId()
    idFileSaveAs        = wx.NewId()
    idFileNew           = wx.NewId()
    idFileOpen          = wx.NewId()
    idFileOpenGroup     = wx.NewId()
    idFileClose         = wx.NewId()
    idFileCloseAll      = wx.NewId()
    idFilePrint         = wx.NewId()
    idFilePrintPreview  = wx.NewId()
    idFilePrintSetup    = wx.NewId()



wxPython包含有 NewID() 的函数，用以在每次调用时自动分配新的ID号.
当ResourceIDs完成导入时,相关语句和变量就完成对应数据对象的分配.
使用其中输入的一个模块如下(也可使用一个别名)::

    import ResourceIDs as rID
    event_id = rID.idFileSave


这在大项目中很方便，尤其是那些GUI框架需要大量的事件ID时.
从任意其它模块也可以安心导入纯数据模块,不会引发循环导入，
因为其本身并没有导入其他任何模块(也许除了系统级模块).
如果纯数据模块中的属性名称是全程唯一的(每个名称使用一个特殊的前缀),那也可以被安全地用通配符风格进行导入.


使用文档化注释
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

曾几何时，有位物理学教授告诉我：
“如果明天你失忆了,那么文档就是你实验室中一切意义的所在.“
可以肯定这是明智的建议.
但很多人就是不愿意花费必要的时间在代码中进行注释.
这是愚蠢的，因为没有人可以预料什么东西重要,或是半年后什么东西将产生作用
(还有人认为至多两个月一切都将改变)
而且,注释应该包含作者对软件的感觉,以帮助后来者有效理解和修订代码.


代码风格
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

“`PEP-8`_”文档(参阅 http://www.python.org）包含了一些
编码风格的指导方针.
你可以不同意这一切，但你至少应该查阅并熟悉它.
那里包含了太多很好的经验.
任何情况下，你都应该为您的代码保持某种类型的一贯风格，
没有任何理由比维护代码的可读性，会令事情变得容易,
特别是你必须重温旧代码时.

</t>
<t tx="zoomq.20110411104732.5352">
林宗良 &lt;funlamzliang@gmail.com&gt;
发件人当地时间	发送时间 11:04 (GMT+08:00)。发送地当前时间：下午2:34。 ✆
    止本日11时，三个团队上交名单，其余17时前附上。ps：昨晚网络断几次；

蟒营zhbit11.1期作品:

项目名称：我知（Iknow）；
https://bitbucket.org/ZoomQuiet/pycamp.ikonw
http://code.google.com/p/kcpycamp/wiki/PyiKnow
    lvchi xia &lt;xia.callofduty@gmail.com&gt;
    发件人当地时间	发送时间 12:28 (GMT+08:00)。发送地当前时间：下午2:28。 ✆
    #bitbucket账号：xialvchi 
    组长：  夏吕池；xia.callofduty@gmail.com
    组员：1.林宗良：funlamzliang@gmail.com
           2.林良飘：403416987.lin@Gmail.com
           3.胡映：jackie.hu1990@gmail.com
项目名称：365 schoollife helper
https://bitbucket.org/ZoomQuiet/pycamp.365helper
http://code.google.com/p/kcpycamp/wiki/SchoolifeHelper
    组长：高骏腾 gjt314@gmail.com
    #    +bitbucket帐号：spawnner
    组员：1.盛贵镔,邮箱：shengguibin@gmail.com
           2.林妙璇，邮箱：lmiaoxuan@gmail.com
           3.伍明慧，邮箱：taiduwu@gmail.com
    
项目名称：Fly3g(飞行三国游戏)
https://bitbucket.org/ZoomQuiet/pycamp.fly3g
http://code.google.com/p/kcpycamp/wiki/Fly3Guo
    #我们的bitbucket 帐号：acreater
    组长：   于晓渊：acreaterjy@gmail.com
    组员：    1.梁展昭：p86021702@gmail.com
               2.林擎宇：shylqy@gmail.com
               3.王旭晋：biliburu@gmail.com

项目名称：一键更新 
英文名：openew
https://bitbucket.org/ZoomQuiet/pycamp.openew
http://code.google.com/p/kcpycamp/wiki/OpeNew
    组长：卓秋生    邮箱：showmezqs@gmail.com
    组员：杨金峰    邮箱：kid154378643@gmail.com
           陈培勇    邮箱：yonggehao1@gmail.com
           陆子健    邮箱：woshixiaom@gmail.com
    
项目名称：谁动了我电脑    do My PC
https://bitbucket.org/ZoomQuiet/pycamp.domypc
http://code.google.com/p/kcpycamp/wiki/DoMyPc
    组长：  陈锦霖   邮箱 lv101201@gmail.com
    组员：1.李斯特 邮箱listerliszt@gmail.com
           2.林海雄 邮箱hxiong1020@gmail.com
    
项目名称：《File Home》
https://bitbucket.org/ZoomQuiet/pycamp.filehome
http://code.google.com/p/kcpycamp/wiki/FileHome
    组长： 肖力玮:  Xliwei18@gmail.com
        组员1：张文杰：chilhood1@gmail.com
        组员2：廖国彬：binVjun@gmail.com
        组员3：孔健成：jiancheng.key@gmail.com
        组员4：刘康波：wjslkb@gmail.com
            
蟒营zhbit11.1期作品:

    can.go@163.com&gt;
    #日期	2011年4月11日 下午11:05
    项目名称：桌面工具集 Desktop Tools Set；
https://bitbucket.org/ZoomQuiet/pycamp.DesktopToolSet
http://code.google.com/p/kcpycamp/wiki/DesktopToolSet

    #bitbucket 帐号：runtimeexception ljstring
    组长：李秉钧：ljstring@gmail.com；
    组员：许俊彬：pppeerxu@gmail.com；
          吕旭林：lvxulin@gmail.com；
          雷宇：leiyuss209@gmail.com；
          廖斌：guyehanchou@gmail.com；
    
</t>
<t tx="zoomq.20110411194006.3964">xia.callofduty@gmail.com
funlamzliang@gmail.com
403416987.lin@Gmail.com
jackie.hu1990@gmail.com
showmezqs@gmail.com
kid154378643@gmail.com
yonggehao1@gmail.com
woshixiaom@gmail.com
lv101201@gmail.com
listerliszt@gmail.com
hxiong1020@gmail.com
Xliwei18@gmail.com
chilhood1@gmail.com
binVjun@gmail.com
jiancheng.key@gmail.com
wjslkb@gmail.com
gjt314@gmail.com
shengguibin@gmail.com
lmiaoxuan@gmail.com
taiduwu@gmail.com
acreaterjy@gmail.com
p86021702@gmail.com
shylqy@gmail.com
biliburu@gmail.com


</t>
<t tx="zoomq.20110412144015.3968">Hg 教程:
    +-- 克隆
    +-- 检入
    +-- 上推
    +-- 本地協同
    +-- 远程協同
    </t>
<t tx="zoomq.20110414091122.2636">为加强开源卫士BBS 的服务，请各个版主，及时回复消息，说明：
＋ 常用邮件
＋ 手机
Zoom.Quiet

同事版主:
    zhaofang (UID: 309):
        zhaofang1@kingsoft.com

版主们:
    masefee (UID: 34):
        http://blog.csdn.net/masefee
        13438938123 masefee@163.com
        QQ:34610747
        
    lanlamer (UID: 142):
        http://www.xanyong.com/ 湘勇网络医生
        开发者版主：lanlamer 常用邮箱：858804752@qq.com
        手机：13951889256
        
    zapline (UID: 84):
        278998871@qq.com
        15575983223
        http://hi.baidu.com/zapline

    李曜  (UID: 403):
        http://www.yvlu.tk/     雨露实验室
        liyao@yvlu.tk
        
    beston  (UID: 173):
        beston@yeah.net
        13407318696
        
    wjkhui  (UID: 404):
        wjk790127@163.com
    
        

    
</t>
<t tx="zoomq.20110419090531.8816">数字数据对象
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python中,当一个变量被赋值，实际上是创建了一个对象,值分配给这一对象（它成为对象的属性），同时“绑定“了一个名字。
对象通常有一个特殊的构造方法,来处理创建（实例化）一个新的对象在内存中初始化的细节.
对应的，一个对象可能有一个析构方法，当程序运行结束时将对象从从内存中删除。
在Python中，一个对象的清除，通常直接由过程自动调用垃圾收集来完成。

这有个Python 创建数据对象的例子::

    &gt;&gt;&gt; some_var = 5

首先生成int类属性值为5的新实例化对象，然后用some_var绑定为名字（一会儿我们将看名字绑定是如何工作的）.
人们还可以键入以下命令，得到相同的结果::

    &gt;&gt;&gt; some_var = int(5)

本例中，我们通过实例化的（整数）int类对象明确地告诉Python 调用该对象的类型，来处理新对象的构造.
重要的是要注意，这不是在C或C++中的一个“转换“，它是实例化对象，它封装一个int整型值5.

种形式可能看起来有点怪异，一但习惯应用起来相当快.
另外，大多数时间你可以放心地忽略一个事实，即变量实际上都是对象，
只把它们视作你在C或C++中习惯的变量::

    &gt;&gt;&gt; var_one = 5
    &gt;&gt;&gt; var_two = 10
    &gt;&gt;&gt; var_one + var_two
    15


你可以随时查询一个对象的类型::

    &gt;&gt;&gt; type(some_var)
    &lt;type 'int'&gt;


虽然说过 int() 不是 cast,但是可以行使类似的职能,将一个数据对象转换成另外类型的::

    &gt;&gt;&gt; float_var = 5.5
    &gt;&gt;&gt; int_var = int(float_var)
    &gt;&gt;&gt; print int_var
    5


请注意，float_var小数部分作为转换后消失了。
八进制和十六进制整数表示法也支持，同C中的效果::

    八进制整数   使用前导0 如 0157.
    十六进制整数   使用前导0x 如 in 0x3FE.


八进制和十六进制值没有自己的类型类。这是因为当在这两种格式写入值分配给一个Python变量，它会转换为对应的整数相当于::

    &gt;&gt;&gt; foo_hex = 0x2A7
    &gt;&gt;&gt; print foo_hex
    679


等同于::

    &gt;&gt;&gt; foo_hex = int("2A7",16)
    &gt;&gt;&gt; print foo_hex
    679


那么究竟什么是“数据对象”? 在Python中，变量名是由命名空间掌管的,
而命名空间分成几种层次,从函式所在的局部命名空间到Py解释器执行所在的全局命名空间.
当前,我们不用深究,仅使用本地命名空间的概念.

变量名没有任何价值，除了字符串作为其间名称.
他们更像是句柄或标签，我们可以将任何东西绑定到名称上,即对象.

图表3.1中，“数值数据对象”显示了这一过程.
通常对象有内部函式，封装了对数据进行的操作.
Python的数据对象也不例外.
如果我们创建了一个整数对象,就可以使用 help() 来查询Py 可以进行哪些操作::

    &gt;&gt;&gt; int_var = 5
    &gt;&gt;&gt; help(5)


int整型数对象的帮助内容 ::

    class int(object)
    | int(x[, base]) -&gt; integer
    |
    | Convert a string or number to an integer, if possible. A floating point
    | argument will be truncated towards zero (this does not include a string
    | representation of a floating point number!) When converting a string, use
    | the optional base. It is an error to supply a base when converting a
    | non-string. If base is zero, the proper base is guessed based on the
    | string content. If the argument is outside the integer range a
    | long object will be returned instead.
    |
    | Methods defined here:
    |
    | __abs__(...)
    |
    x.__abs__() &lt;==&gt; abs(x)
    |
    | __add__(...)
    |
    x.__add__(y) &lt;==&gt; x+y
    |
    | __and__(...)
    |
    x.__and__(y) &lt;==&gt; x&amp;y
    |
    | __cmp__(...)
    |
    x.__cmp__(y) &lt;==&gt; cmp(x,y)
    |
    | __coerce__(...)
    |
    x.__coerce__(y) &lt;==&gt; coerce(x, y)
    |
    | __div__(...)
    |
    x.__div__(y) &lt;==&gt; x/y
    |
    | __divmod__(...)
    |
    x.__divmod__(y) &lt;==&gt; divmod(x, y)
    |
    | __float__(...)
    |
    x.__float__() &lt;==&gt; float(x)
    |
    | __floordiv__(...)
    |
    x.__floordiv__(y) &lt;==&gt; x//y
    |
    | __format__(...)
    |
    | __getattribute__(...)
    |
    x.__getattribute__('name') &lt;==&gt; x.name
    |
    | __getnewargs__(...)
    |
    -- More --



还有更多的内部方法，如果有兴致的话你可以仔细阅读他们
（只需按 空格键 来读下一屏，或 q 返回到提示符）
但主要的一点是，在Python中，数据对象“知道”如何用内置的特定类方法处理内部数据.
换句话说，Python解释器负责转换处理这样的语句的详细信息::

    5+5


变成等价的中间代码::

    int(5).__add__(int(5))

然后执行之.


.. image:: ../_static/figs/rwip_0301.pdf.png


插图 3.1. 数字数据类型


要适应Python中变量皆对象这一事实的确得花点儿时间.
但这却正是Python强大特性之一，而且因为你可以选择性的忽略这一特性，所以，
在一切皆对象的Python中，依然可以创建出过程语言风格的程序.


</t>
<t tx="zoomq.20110419090531.8817">序列对象
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python提供三种有序集合的数据对象类型: 列表（数组）字符串和元组（列表样对象）.
这些也被称为``序列对象``.
“序列“的每一部分事实上都可以包含零个或由其他数据的组成的一个有序的对象序列.
除了字符串其它序列对象都允许其成员要素可以是任何有效的Python对象.
序列对象都有对应方法来操纵它们的数据，有些方法能作用与所有序列对象，有些针对的特定类型.
表3.2“序列对象“列出了三个序列类型和一些属性。


.. list-table:: 表3.2. 序列对象
   :widths: 10 10 40
   :header-rows: 1

   * - 对象类型
     - 可变?
     - 定界符
   * - 列表
     - 是
     - []
   * - 字符串
     - 非
     - '' 或 ""
   * - 元组
     - 非
     - ()


Python的序列对象分可变或不变.
例如，列表对象是可变的，因为其数据可以被修改.
另一方面字符串，是不能改变的.
一个字符串是无法取代，删除或直接插入字符的.
所以一个字符串对象是不可变的字符值的集合，被视为由字节数据组成的只读数组对象.


.. note:: (~_~)

    事实上,这种说法仅适用于8位的UTF- 8字符编码，其他字符
    集（如Unicode）的字串可能需要为每个字节的不只是单一个字符.不过本书中，我们将只使用了UTF- 8字符编码
    （见第12章，读，写ASCII和UTF-8等更多编码标准的数据文件）


为了使改变一个字符串，就必须创建合并了变化的新字符串.
原始字符串将对象保持不变，即使是给新的字符串对象重复使用相同的变量名
（原始字符串对象的"取消绑定",往往通过垃圾收集过程自动蒸发.但这是一个底层细节我们并不需要担心）




列表
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

列表是Python中最接近数组的对象，但是它拥有一些技巧，是在C或是Pascal中的数组无法实现的.
列表是一个有序序列，任何元素可以包含或是被替换成不同的对象.
新元素添加到一个列表使用其append方法（还有一个 pop 方法，这意味着列表可以当成堆栈或是队列来用），
列表的内容可以就地被排序.
列表中的每个元素实际上是一个对象引用，就象一个数字数据变量名称是作为对一个对象的数字数据的引用.
事实上，列表可以包含任何有效的Python对象的引用. 考虑以下代码::

    &gt;&gt;&gt; import random
    &gt;&gt;&gt; alist = []
    &gt;&gt;&gt; alist.append(4)
    &gt;&gt;&gt; alist.append(55.89)
    &gt;&gt;&gt; alist.append('a short string')
    &gt;&gt;&gt; alist.append(random.random)


现在 alist 包含四个元素，一个整数，一个浮点数，一个字符串，一个Python的随机数模块的方法，
足够演示了，（我们将在import语句后更详细的讨论随机模块）.
现在我们可以检查 alist 的每个成员元素::

    &gt;&gt;&gt; alist[0]
    4
    &gt;&gt;&gt; alist[1]
    55.890000000000001
    &gt;&gt;&gt; alist[2]
    'a short string'
    &gt;&gt;&gt; alist[3]
    &lt;built-in method random of Random object at 0x00A29D28&gt;


如果我们想要一个随机数，仅需要调用alist[3](),即 random()::

    &gt;&gt;&gt; alist[3]()
    0.87358651337544713


我们可以对 alist 中的元素简单的进行赋值来变更::

    &gt;&gt;&gt; alist[2]
    'a short string'
    &gt;&gt;&gt; alist[2] = 'a better string'
    &gt;&gt;&gt; alist[2]
    'a better string'


插图  3.2, “列表对象的内部组织” 展示了在 alist 中发生了什么.

.. image:: ../_static/figs/rwip_0302.pdf.png

插图 3.2. “列表对象的内部组织”

我们可以用一个列表对象来体验Python的面向对象的基本性质,尝试在Python提示符中输入以下命令，并观察结果::

    &gt;&gt;&gt; list_name = []
    &gt;&gt;&gt; list_name.append(0)
    &gt;&gt;&gt; list_name.append(1)
    &gt;&gt;&gt; list_name
    [0, 1]
    &gt;&gt;&gt; var_one = list_name
    &gt;&gt;&gt; var_two = list_name
    &gt;&gt;&gt; var_one
    [0, 1]
    &gt;&gt;&gt; var_two
    [0, 1]
    &gt;&gt;&gt; list_name[0] = 9
    &gt;&gt;&gt; var_one
    [9, 1]
    &gt;&gt;&gt; var_two
    [9, 1]

由于名称 var_one和var_two 都指向最初列表对象,即绑定为名称 list_name的列表，
那么当list_name改变后，其内容变化其他变量名都是能“看到”的.

正如其它Python 中的对象,列表也有一系列方法.
除前述的索引方法外还有很多.列表可以依次头尾连接在一起像这样::

    &gt;&gt;&gt; alist1 = [1,2,3,4,5]
    &gt;&gt;&gt; alist2 = [6,7,8,9,10]
    &gt;&gt;&gt; alist1 + alist2
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


查找列表中指定偏移量的项，可以用 index() 方法::

    &gt;&gt;&gt; alist2.index(8)
    2


我们也可以反转列表::

    &gt;&gt;&gt; alist1.reverse()
    &gt;&gt;&gt; alist1
    [5, 4, 3, 2, 1]

同样能排序列表::

    &gt;&gt;&gt; slist = [8,22,0,5,16,99,14,-6,42,66]
    &gt;&gt;&gt; slist.sort()
    &gt;&gt;&gt; slist
    [-6, 0, 5, 8, 14, 16, 22, 42, 66, 99]


以上两个例子美妙之处在于是"就地"修订的.
一个新的对象不是创建出来的,而是列表本身直接反转或是排序了.
即,列表是可变的.


字串
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

字符串是有序的字节值的字符序列.
字符串是不可改变的（不像在C或C++），意思是无法象对待数组一样使用索引来修订内容.
为了修改一个字符串，必须创建一个新的字符串对象.
不过类似列表，字符串的内容能够通过其索引引用.


这有几个字串的例子::

    &gt;&gt;&gt; astr1 = 'This is a short string.'
    &gt;&gt;&gt; astr2 = "This is another short string."
    &gt;&gt;&gt; astr3 = "This string has 'embedded' single-quote chracters."
    &gt;&gt;&gt; astr4 = """This is an example
    ... of a multi-line
    ... string.
    ... """
    &gt;&gt;&gt;

虽然不能使用一个索引值改变一个字符串的内容，
但是字串数据可以使用索引来读取，Python提供的能力来提取字符串中的特定部分
（或称为“切片“）.
其结果是一个新的字符串对象.
如下代码将读取字符串变量astr1前四个字符，从第零位到第四位(不包含第5个字符)::

    &gt;&gt;&gt; print astr1[0:4]
    This

我们也可以不写起始范围值0，Python会自动假定::

    &gt;&gt;&gt; print astr1[:4]
    This

这种形式告诉Python提取字符串从开始到第四位的所有字符.
我们还可以摄取从第四位到行尾::

    &gt;&gt;&gt; print astr1[4:]
    is a short string.


或是获取中间部分::
    &gt;&gt;&gt; print astr1[10:15]
    short


插图 3.3, “字串索引” 展示了Python 中索引怎么工作的

.. image:: ../_static/figs/rwip_0303.pdf.png

插图 3.3, “字串索引”

字串对象还包含了一系列方法，如大写,定心，统计等等,基本上都返回一个新的字符串对象.

类似列表,使用 + 运算符来连结::

    &gt;&gt;&gt; str_cat = astr1 + " " + astr2
    &gt;&gt;&gt; print str_cat
    This is a short string. This is another short string.


其结果正如所期望的现在得到一个新的字符串对象.
幸运的是，Python采用垃圾收集机制，当对象不再绑定到一个名字时，将悄悄地消失，
原先所用内存将返回到共享池以待再用.
这是一件好事，否则内存会迅速被废弃数据对象填满::

    &gt;&gt;&gt; the_string = "This is the string."
    &gt;&gt;&gt; the_string = the_string[0:4]
    &gt;&gt;&gt; the_string
    'This'

在这种情况下，最初的名称the_string绑定的对象，内容是：“This is the string.“
当一个字串对象的初始部分被拉出，一个新的对象被创建并这个名字重新分配给它.
原来的对象没有绑定后就回收.
然而，如果一个对象有两个或多个名称共享，只要还有名称在绑定,就不会被回收.
这样在程序生命期间对象总是可以使用.

字符串有方法允许你到左或右对齐字符串，替换字符串中的一个字，或转换为字符串中的字符的大小写.
下面是一些例子:

upper() 方法,转换所有字符为大写::

    &gt;&gt;&gt; print astr1.upper()
    THIS IS A SHORT STRING.


find() 返回第一次匹配搜索模式的字串索引::

    &gt;&gt;&gt; print astr1.find('string')
    16

replace() 方法根据搜索模式生成完成替换后的新字串::

    &gt;&gt;&gt; print astr1.replace('string', 'line')
    This is a short line.

rjust() 方法
（及其对应的，ljust（））将一个字串重整为指定宽度的新字串::

    &gt;&gt;&gt; print astr1.rjust(30)
    This is a short string.

默认的填充字符是空格,但是可以在第二参数中指定一个特殊字符作为填充::

    &gt;&gt;&gt; print astr1.rjust(30,'.')
    .......This is a short string.

在Python 指示符环境中,可以通过输入help(str)获知所有字串支持的操作




元组 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
元组是一种有趣的数据对象.
类似列表它是一个有序集可以包含零个或多个项目，但它是不可改变的.
元组一旦创建就不能直接修改.
元组通常由所包含的项目数来提及.
例如，一个2元组，如您所料，包含两个数据对象.
一个对任何规模的元组都适用的速记法是“n元组”
Python 中"0元组"是允许的，虽然不怎么有趣和有用，但也许可以作为一个占位符.


Python中列表用方括号作分界符，元组使用括号::

    &gt;&gt;&gt; tuple2 = (1,2)
    &gt;&gt;&gt; tuple2
    (1, 2)

元组的内容可以通过索引读取,这点和列表和字串相同::

    &gt;&gt;&gt; tuple4 = (9, 22.5, 0x16, 0)
    &gt;&gt;&gt; tuple4
    (9, 22.5, 22, 0)
    &gt;&gt;&gt; tuple4[2]
    22
    &gt;&gt;&gt; tuple4[0]
    9


类似列表和字串,元组可以合并(通过创建了新元组)::

    &gt;&gt;&gt; tuple2
    (1, 2)
    &gt;&gt;&gt; tuple4
    (9, 22.5, 22, 0)
    &gt;&gt;&gt; tuple6 = tuple2 + tuple4
    &gt;&gt;&gt; tuple6
    (1, 2, 9, 22.5, 22, 0)

如上,可见我们创建了一个新元组.

一个元组不能进行排序，但它可以被统计在内。
想了解元组包含多少特定值对象时，我们可以使用count（）方法::

    &gt;&gt;&gt; tpl = (0, 0, 2, 2, 6, 0, 3, 2, 1, 0)
    &gt;&gt;&gt; tpl.count(0)
    4
    &gt;&gt;&gt; tpl.count(2)
    3
    &gt;&gt;&gt; tpl.count(6)
    1

因为元组的每个内容项实际上是对象的引用，所以元组可以包含任意组合的有效Python对象,这点和列表相同.






</t>
<t tx="zoomq.20110419090531.8818">字典
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的字典是独立的数据对象.
而不是一个数据元素的有序集，字典中数据集是种无序的键/值对形式.
也就是说，每个数据元素有一个相关的关键唯一标识它.
这是Python中仅有的映射式数据对象.

同其他Python数据对象，字典可以作为参数传递给一个函数或作为返回值.
也可以成为元组或列表数据元素，其值可以是任何有效的Python对象类型.
不过,字典的键值必须是整数，字符串和元组，换句话说，键必须是不可变的对象.


我们可以通过初始化键值对来完成字典的创建::
    &gt;&gt;&gt; dobj = {0:"zero", 1:"one", "food":"eat", "spam":42}
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'one', 'food': 'eat', 'spam': 42}

以往要获得特定值我们可以索引,但是,实在不成了::

    &gt;&gt;&gt; dobj[0]
    'zero'
    &gt;&gt;&gt; dobj[1]
    'one'


如果对字典进行尝试,Python 会抱怨::

    &gt;&gt;&gt; dobj[2]
    Traceback (most recent call last):
    File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    KeyError: 2


但只要给的是有效的键，我们会得到一个有效的值::

    &gt;&gt;&gt; dobj["spam"]
    42


字典有一整套方法来操纵纳入其中的数据.
表3.3，“字典方式“ 包含了可用的方法,接下去我们会考察其中几个.



.. list-table:: 表 3.3. 字典方式
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - clear()
     - 从字典中清除所有条目
   * - copy()
     - 字典的"浅"复制
   * - get()
     - 返回与键匹配的值,或是没有匹配时返回默认值
   * - has_key()
     - 查询字典中是否存在指定的键,若有返回 ``True``,反之返回``False``
   * - items()
     - 以2元组的形式反馈字典中所有键/值对
   * - iteritems()
     - 以迭代形式返回字典中所有键/值对
   * - iterkeys()
     - 以迭代形式返回字典中所有键
   * - itervalues()
     - 以迭代形式返回字典中所有值
   * - keys()
     - 以列表形式返回字典中所有键
   * - pop()
     - 通过键弹出一个特定条目，并从词典中删除之
   * - popitem()
     - 通过键/值对弹出一个条目，并从词典中删除之
   * - setdefault()
     - 配置 当 get() 匹配失败时返回的默认值
   * - update()
     - 从另一字典更新键匹配的值
   * - values()
     - 以列表形式返回字典中所有值



注意!字典没有列表中的 appende() 方法. 要添加一个新条目到字典中,只需简单分配一个值到一个新的键上::

    &gt;&gt;&gt; dobj[99] = "agent"
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'one', 99: 'agent', 'food': 'eat', 'spam': 42}


请注意，新键和对应的数据将在字典中中插入到一个任意位置.
字典是不是一个序列对象，数据访问必须通过键查询，
所以它确实不必关注键/值对具体存放的位置.


这种技术还可以用于修改现有的键的值::

    &gt;&gt;&gt; dobj[1] = "the big one"
    &gt;&gt;&gt; dobj
    {0: 'zero', 1: 'the big one', 99: 'agent', 'food': 'eat', 'spam': 42}

安全的值获取方式,可以用 get() 方法::

    &gt;&gt;&gt; dobj.get(99)
    'agent'

If we attempt to get a value for a key that doesn’t exist, get() will by default return the
special value of None. At the Python command line, this doesn’t show anything
如果我们试图获取一个不存在的键值，get()方法默认会返回特殊的 None.
在Python的命令行环境中将没有显示::

    &gt;&gt;&gt; dobj.get(256)

我们也可以选择一个默认值,来替代 原先的 None::

    &gt;&gt;&gt; dobj.get(256,"Nope")
    'Nope'


字典常用以保存全局数据(如参数),
并能在外部没有提供可用值时,返回一个默认值以便程序使用预定义的参数值.


可能有时我们需要一个字典中所有内容的列表.
itrmes() 方法就是用以返回字典的键/值对2元组对象的::

    &gt;&gt;&gt; dobj.items()
    [(0, 'zero'), (1, 'the big one'), (99, 'agent'), ('food', 'eat'), ('spam', 42)]

如果我们要所有键的列表,用 keys()::

    &gt;&gt;&gt; dobj.keys()
    [0, 1, 99, 'food', 'spam']

最后,如果我们只对所有值有兴趣,可以用 values() ::

    &gt;&gt;&gt; dobj.values()
    ['zero', 'the big one', 'agent', 'eat', 42]


以上足以使用字典了.
我们还会看到其他一些有趣的方法来使用字典和其它的Python数据类型.
在此期间，随时在命令行交互环境中尝试各种新家伙,是学习Python 的最好方式之一!





</t>
<t tx="zoomq.20110420091053.2640">在 2011年4月20日 上午10:38，陈德志 &lt;chendz1979@gmail.com&gt; 写道：
&gt; 自己个人电脑上都必装的是CVSNT，自己是用CVS的，其实最主要的功能是自己写代码的时候能够查查change，其次就是rollback。如果代码写错了，还可以rollback。自己写小程序，都用自己的cvs。用了很多年，觉得挺有效。
...
&gt; 其实wiki挺好的，发现很多人还是不会用wiki，wiki有强大的版本管理呀，可就是。。很多人还是喜欢用word文档，结果就是word的版本管理是不强的，结果是还是用svn。
...于是，Knowledge系统又诞生了... 于是，新的系统又诞生了，那就是论坛...在web上写个漂亮的文档...用Googe Doc...嗯，用maillist？这年头还用maillist？... 听说sharepoint很好很强大...word文档还是很多
...
&gt; 那意味着还是一大堆文档，一大堆文档。

咔咔咔,俺长期忽悠维基哪,特别是moinmoin 系统,从上海推广到北京,再到珠海,早已发现这个问题了:
    - 在维基面前,大家的表现很极端,同样的不培训,有的一用就疯狂的爱上了,有的一看就疯狂的恨上了!没有中间的!
    - 俺想了很久,也观察了很久,发现,根本原因就在-- 对于"漂亮的文档" 的理解本质不同:
        + 接受了D版 Word 文化的,认为文档就得有眉头/页底/索引/图表/文字特效,否则不漂亮!
        + 真正作事儿的,从man 中学会了,文档是拿来用的,一切和内容无关的东西,都TMD是浪费老子时间!
        + 所以,市场的无法接受要进行"源代码"编写的维基,实干的爱死了有"源代码"自动管理和发布的维基!
    - 所以呢,俺后来也就不推广维基了,自个儿团队用得爽就好,不论什么人问什么事儿,不论在邮件/MSN/QQ什么的,都是一个链接丢过去,什么都不说了 ;-)

综上,不论维基也好,word 也好,还是人的因素哪:
    - 统一文档的认识
    - 约定好文档的创建/发布/变更/归档/销毁的流程
    - 所有人统一遵守
    - 你就是回到解放前,用油印也照样有非常爽快的文档管理体验的!

&gt;&gt; &gt;&gt;&gt;&gt; &gt; 2011/4/20 赖勇浩 &lt;mail@laiyonghao.com&gt;
&gt;&gt; &gt;&gt;&gt;&gt; &gt;&gt; 我曾经以为只有自己写代码的练手项目不需要版本控制系统，后来我发现我错了。
&gt;&gt; &gt;&gt;&gt;&gt; &gt;&gt; 我曾经以为只有自己写代码的练手项目不需要配置管理系统，后来我发现我错了。

-- 
人生苦短, Pythonic! 冗余不做,日子甭过!备份不做,十恶不赦!
俺: http://about.me/zoom.quiet
哲: http://www.zeuux.org/home/zoomquiet
豆: http://www.douban.com/group/zoomquiet
书: http://code.google.com/p/openbookproject
营: http://code.google.com/p/kcpycamp/wiki/PythoniCamp
</t>
<t tx="zoomq.20110425090758.3984">算术运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Python提供了通常的四种基本算术运算符：加，减，乘法和除法.
还有其它语言中没有的两种运算：指数和浮点除.
表3.4，“算术运算符“列出Python的算术运算符


.. list-table:: 表 3.4. 算术运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - + 
     - 加
   * - − 
     - 减
   * - * 
     - 乘
   * - / 
     - 除
   * - % 
     - 模(取余)
   * - ** 
     - 指数
   * - // 
     - 浮点除


当混合数字类型数据处理时，Python会自动地“提升“为其中最高级别的数字类型来操作.
该类型优先级如下::

    复数
    浮点数
    长整数
    整数


这意味着，如果一个表达式包含一个浮点值，但没有复数，结果将是一个浮点值.
如果一个表达式包含一个长整但没有浮点数或是复数，其结果将是一个长整数.
如果一个表达式包含一个复数，结果将是复数.
所以，如果有个表达式::

    5.0 * 5

结果将是一个浮点数::

    25.0

正如前述Python还具有独特的除运算，称之为"浮点除".
这用于将一个浮点数的商值截断为最接近的一个整数值，但是结果返回为一个浮动数.
在Python中，// 行为如下示::

    &gt;&gt;&gt; 5/2
    2
    &gt;&gt;&gt; 5//2
    2
    &gt;&gt;&gt; 5.0/2
    2.5
    &gt;&gt;&gt; 5.0//2
    2.0

</t>
<t tx="zoomq.20110428091054.3987">逻辑运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在表 3.5, “逻辑运算符”, 列出了所有Python中各种对象可用的逻辑值.



.. list-table:: 表 3.5. 逻辑运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - and 
     - 逻辑 与
   * - or 
     - 逻辑 或
   * - not 
     - 逻辑 非


Python支持在逻辑表达式中使用关键字True和False.
请注意，以下任何一条都是为``徦``:

- None 对象
- 零(数字)
- 空的序列对象 (列表,元组,字串)
- 空的字典


其它值情况都被视作``真``.
另外也建议用 1 和 0 来对应``真``和``徦``.

</t>
<t tx="zoomq.20110428091054.3988">比较运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


比较运算符评估两个操作对象间的关系，并判定是否相等,不等，大小
(见表3.6，“比较运算符“)



.. list-table:: 表 3.6. 比较运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - == 
     - 相等返回真,否则是徦
   * - !=  
     - 不等返回真,否则是徦
   * - &lt;&gt;
     - 同 !=
   * - &gt; 
     - 大于返回真,否则是徦
   * - &lt;
     - 小于返回真,否则是徦
   * - &gt;= 
     - 大于或等于返回真,否则是徦
   * - &lt;= 
     - 小于或等于返回真,否则是徦


使用比较运算符的Python表达式总是返回true或false.





</t>
<t tx="zoomq.20110428091054.3989">位运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的与，或，异或运算符对操作数进行比特位的运算;
不执行算术运算. 具体参考 表3.7，“位运算符“


.. list-table:: 表 3.7. 位运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - &amp; 
     - 二进制 与
   * - | 
     - 二进制 或
   * - ^
     - 二进制 异或
   * - ~
     - 二进制 补
   * - &lt;&lt;
     - 二进制 左移
   * - &gt;&gt;
     - 二进制 右移


在``与``操作将返回两个操作数那些同为 true(1) 的数位，
而``或``将"合并"两个操作数位，如在图3.4所示，“Python的位元``与``和``或``运算符“


.. image:: ../_static/figs/rwip_0304.pdf.png

插图 3.4. Python的位元``与``和``或``运算符


按位运算符时非常有必要设立一个特定的位（或）或测试一个1（和）的值位.
异或运算符返回两个操作数位元之间的差异，参考插图3.5所示的真值表，“Python的位异或运算符“


.. image:: ../_static/figs/rwip_0305.pdf.png

插图 3.5. Python的位异或运算符



求补运算将每个位值进行了逆转.
也就是说，二进制值00101100变为11010011.

二进制移位运算符通过将一个数据对象的内存数据向左或向右移动指定的数位;
效果是相当于乘2n(左移)或除2n(右移)(其中n是移动的位数）.
例如::

    &gt;&gt;&gt; 2 &lt;&lt; 1
    4
    &gt;&gt;&gt; 2 &lt;&lt; 2
    8
    &gt;&gt;&gt; 2 &lt;&lt; 3
    16
    &gt;&gt;&gt; 16 &gt;&gt; 2
    4


</t>
<t tx="zoomq.20110428091054.3990">赋值运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

正如我们已经看到，在Python中赋值涉及的不仅仅是一些数据填充到内存位置.
赋值相当于实例化对象的新数据.Python的赋值操作符列于表3.8，“赋值运算符“


.. list-table:: 表 3.8. 赋值运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - =  
     - 简单赋值
   * - +=  
     - 自增赋值(增量赋值)
   * - -=  
     - 自减赋值(增量赋值)
   * - *=  
     - 自乘赋值(增量赋值)
   * - /=  
     - 自除赋值(增量赋值)
   * - %=  
     - 自模赋值(增量赋值)
   * - **=  
     - 自指赋值(增量赋值)
   * - //=  
     - 浮点除再赋值(增量赋值)


除了简单的赋值操作符，Python为每个算术运算符提供了一个自增操作.
一种自增操作先执行对应操作，然后分配结果回传左手方对象自身.
例如::


    &gt;&gt;&gt; a = 1
    &gt;&gt;&gt; a += 1
    &gt;&gt;&gt; a
    2






</t>
<t tx="zoomq.20110428091054.3991">成员操作符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

成员操作符用以确定在一个序列或字典对象是否存在(in)，或不在（not in）一个值或对象，
（见表3.9，“成员操作符“）.
请注意，字典对象只能对键进行测试，不能对值进行成员测试.


.. list-table:: 表 3.9. 成员操作符
   :widths: 10 40
   :header-rows: 1

   * - 操作符
     - 描述
   * - in  
     - 若包含查询对象返回 True,反之为 False
   * - not in  
     - 若不含查询对象返回 True,反之为 False


可以这么用::

    if x in some_list:
        DoSomething(x, some_list)



在这种情况下，函数doSomething()只有当x如果x是在some_list中时,才会被调用.
也可以进行相反的测试，看看是否不在一个对象中::

    if x not in some_dict:
        some_dict[x] = new_value

如果键X不在字典中，它将会被追加并赋一个值.


</t>
<t tx="zoomq.20110428091054.3992">身份运算符
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的身份运算符（表3.10所示，“身份运算符“）
用于确定一个名字是否和另一个名字指向同一对象(is)，或者不是(is not).


.. list-table:: 表 3.10. 身份运算符
   :widths: 10 40
   :header-rows: 1

   * - 运算符 
     - 描述
   * - is  
     - 若为相同对象则为``真``,否则为``徦``
   * - is not
     - 若不是相同对象则为``真``,否则为``徦``


身份运算一般发生在试图确定一个对象是否可用于一个特定的操作.

这里给出一个(不可执行)的例子::

    def GetFilePath(name):
        global pathParse
        if pathParse is None:
            pathParse = FileUtil.PathParse()
        file_path = pathParse(name)
        if len(file_path) &gt; 1:
            return file_path
        else:
            return None


全局名称 pathParse 如果（在模块开始处）被初始化为无，
将使用FileUtil模块类pathParse对象作为南郊值.
如果此处不进行判定,那么一但被意外初始化成 None 接下来的程序将没有意义,会失败.



</t>
<t tx="zoomq.20110428091054.3993">运算优先级
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

我们已经看到了前述各种运算符的特性，现在让我们来仔细看看.
表3.11，“运算优先级“ 列出了Python所有运算符从低到高的优先顺序


.. list-table:: 表 3.11. 运算优先级
   :widths: 10 40
   :header-rows: 1

   * - 运算符
     - 描述
   * - 最低
     - or
   * - . 
     - and
   * - . 
     - not x
   * - . 
     - in, not in, is, is not, &lt;, &lt;=, &gt;, &gt;=, &lt;&gt;, !=, ==
   * - . 
     - |
   * - . 
     - ^
   * - . 
     - &amp;
   * - . 
     - &lt; &lt; , &gt; &gt;
   * - . 
     - +,-
   * - . 
     - *, /, //, %
   * - . 
     - +x, -x, ~x
   * - 最高
     - **


正如前面有提及的,使用括号来明确运算的顺序.
当你不记得为所有运算符的优先递,或是默认顺序是不是你想要的，
使用必要的括号，以获得所需的结果.

清晰的用括号从来不是一件坏事.(想想 LISP;-)







</t>
<t tx="zoomq.20110428091054.3994">缩进
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

谈及关程序结构时，人们常常提到的语句块.
块可以定义为一个或多个逻辑上相关联的语句.
与C和其他语言不同，Python没有使用特殊字符或保留字来声明逻辑的语句块.
它采用缩进! 

.. topic:: 译注

    这一设计恰恰是Python 同时赢得拥趸以及招致反对的核心特性! 喜欢的人爱得发疯,反感的人恨到恶心.笔者认为,这一设计虽然引发了一定编辑环境的配置争议,但是从根本上引入了代码形式和功能必须同时追求优美的开发文化,是一创举,应该得到推广.


例如，在C中，人们这样写 if-else ::

    if (some_var &lt; 10) {
        printf("Yes\n");
        printf("Indeed\n");
    }
    else {
        printf("Sorry\n");
        printf("Nope\n");
    }


花括号告诉C编译器如何对语句进行分组，
实际上C不怎么在意每个语句有多少缩进，对于C这都是“空白”，而编译器会忽略它.
但是在Python中，缩进至关重要的，因为它告诉解释器如何理解代码的结构，哪些语句有逻辑关联.
具体的缩进量并不重要，只要它是一致的.
建议的缩进是每4个空格代表一个层次，不使用 TAB 
(TAB一般认为有点邪恶，因为他们并不能在不同的编辑器之间总是优雅得以迁移,
有的编辑器可能将制表符解释为四个空格，而另一个可能转化成八个空格).


有些在争论Python用缩进表示代码块是否靠谱，
对于那些在C或是C++有丰富的经验程序员言,这种形式很怪
(虽然在计算机科学领域绝不算新的想法).
用缩进来声明程序层次的的优点是统一所有开发者的风格并提高可读性.
当然也有些人声称在大段代码中使用如＃ENDIF，＃ENDFOR和＃endwhile 等注释更加有利于代码的阅读,
但我们不会把这种讨论到本书中.





</t>
<t tx="zoomq.20110428091054.3995">注释
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在Python中，注释用一个``#``字符表示(有时称为哈希)，
注释可以出现在任何地方.
解释器忽略``#``后面的所有内容.
尽情的在你的程序文本中注释吧,但是要有价值.
像这样的评论::

    a += 1 # increment by one

完全无问(可惜这种注释是最常见的), 如下注释::

    if (a + 1) &gt; maxval: # do not increment past limit

就有助于理解 mystery.

</t>
<t tx="zoomq.20110428091054.3996">关键字
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python 仅仅包含31个保留关键字, 列在表 3.12, “Python的关键字”.
Python

.. list-table:: 表 3.12. Python的关键字
   :widths: 20 20 20 20
   :header-rows: 1

   * - and
     - elif
     - if
     - print
   * - as
     - else
     - import
     - raise
   * - assert
     - except
     - in
     - return
   * - break
     - exec
     - is
     - try
   * - class
     - finally
     - lambda
     - while
   * - continue
     - for
     - not
     - with
   * - def
     - form
     - or
     - yield
   * - del
     - global
     - pass
     - .


本章我们将练习使用一些常用的关键字.
其它的将在我们开始一些更加复杂的程序时适时引出.




</t>
<t tx="zoomq.20110428091054.3997">示例
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在Python中，一个简单的语句（见表3.13，“简单语句”）是一行包含赋值或是关键字的代码.
当然,语句也可以包含多条表达式.


.. list-table:: 表 3.13. 简单语句
   :widths: 10 40
   :header-rows: 1

   * - 关键字
     - 描述
   * - assert  
     - assert &lt;表达式&gt;; if &lt;表达式&gt; 为非,一个另外将被抛出
   * - 赋值 (=)   
     - 创建新数据对象并绑定到名字
   * - 强制转换
     - 参考表 3.8, “赋值运算符”
   * - pass
     - 略过;当执行时,不作任何事儿
   * - del
     - 移除名称或是名称列表和对象间的绑定
   * - print
     - 发送到标准输出 (stdout)
   * - return 
     - 可选择的值或是表达式结果返回
   * - yield 
     - 使用生成器函式
   * - raise 
     - 抛出意外
   * - break  
     - 在for和while循环中跳出
   * - continue  
     - 在for和while循环中强行忽略当前一层循环跳到下一轮循环继续
   * - import  
     - 将外部模块包含到当前名称空间中
   * - global  
     - 指定一个名称列表作为当前模块的全局变量来处理
   * - exec   
     - Python代码的动态执行


我故意在以下章节跳过 del,exec,和 yield 语句,
因为本书中真的用不到他们.

而import语句的推迟到之后专门章节讨论.


assert
    assert语句通常用来判断某些条件是否已满足.如果没有，
    引发异常.一般是在单元测试，或捕获（虽然还有其他方法可以做到这一点）标称条件时大量使用.


Assignment
    赋值语句（=）大概是最基础的Python语句形式.正如
    我们已经看到，赋值基本上相当于实例化一些类型对象并绑定到一个名称.
    前面几节我们已经进行了广泛的讨论，这里不再深入.

Augmented assignment
    自增赋值语句是非常有用的，在Python中也很常见.
    因为任何类型的赋值将创建一个新的数据对象，所以，无法在表达式中包含自增赋值.
    换句话说，这将无法工作::

        if (a += 1) &gt; maxval:

    但是这样可以::

        if (a + 1) &gt; maxval:

    In an augmented assignment, the arithmetic operation is performed first, followed by
    the assignment. For a list of Python’s augmented assignment operators, see Table 3.8,
    “Assignment operators”.
    自增赋值中先执行算术运算，其次是赋值.
    对于Python的所有赋值运算符的简介，参阅表 3.8. "赋值运算符"


pass
    该声明是通过无操作语句而不执行任何操作.它通常用作
    一个占位符声明,也是必需的语法.
    经常在顶级类方法声明中使用,旨在通过子类方法进行其实覆盖.
    也可能出现在“回调”函数或方法中,为了语法的完整,即使并不真正需要做任何事情.


print
    打印写入一个或多个对象的值到标准输出，除非标准输出已经重定向
    或打印输出本身就是重定向的.
    如果给定的对象不是一个字符串，它会尝试将数据转换为字符串形式.
    默认情况下，打印追加一个换行符（``/n``）到最终的输出，当然这是可配置的.


return
    返回语句用于返回一个函数或方法给
    原调用方.
    return语句可以选择将数据传递回调用方,这里数据可以是任何有效的Python对象.
    如前所述，一个函数可能返回元组，而不仅仅是一个单一的价值，这使得它可以同时返回全部状态
    和数据值(或更多).
    虽然可以返回一个列表或字典，这样庞大而复杂的数据对象对大型程序来说可能产生问题，
    因为这些数据类型有天生的不透明性.
    在之后的章节,我将进一步说明这些问题.


break
    break语句只可能发生在for或while循环.它会终止当前的循环结构，并跳过可能的else语句.


continue
    continue语句只可能发生在for或while循环.
    强制返回到循环开始的for或while语句继续.
    任何后续语句将被跳过.
    如果continue语句之外有try-finally结构,那么finally 将在一轮循环前先执行.
    我们将在稍后讨论 try-except 结构语句.

global
    global语句用于声明一个函数或方法中可修改模块中声明的变量值.
    一般来说，这种全局变量尚未出现在函式或是方法中之前,是对于函式或是方法而言是只读的.





</t>
<t tx="zoomq.20110428091054.3998">字串
-------------------------------------------------------------------------------

Python能轻松创建包含格式化数据的字串,这点在许多程序中被广泛使用,本书中遇到的程序也不例外.
Python的字符串对象提供了一套丰富的方法，
当它们与格式化字串结合可以生成带格式的列，左或右对齐字段，输出各种指定的数据类型.
字符串真是非常重要，值得我们单独讨论.


@others
</t>
<t tx="zoomq.20110428091054.4000">if语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python的if语句的表现正如我们所期望的那样.
跟随关键字if之后的表达式用以计算结果为True或False.
最简单的形式如下,它只是一个声明和一个或多个下属语句::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)


要指定替代的行动，人们会使用else语句::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


用elif语句（是"else if"的缩写）创建可能的结果选单，
同if语句,需要后跟一个表达式，但它只能出现在 if 之后::

    if &lt;expression&gt;:
        statement
        (more statements as necessary)
    elif &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statements if necessary)



</t>
<t tx="zoomq.20110428091054.4001">while语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

逻辑控制表达式是真while语句块就重复执行::

    while &lt;expression&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


如果循环正常结束,且没有break语句,执行else语句块
(即控制表达式计算结果为False).
下例中，循环控制使用一个布尔变量，它被初始化为True，
然后从循环内部赋值为假::

    &gt;&gt;&gt; loop_ok = True
    &gt;&gt;&gt; loop_cnt = 10
    &gt;&gt;&gt; while loop_ok:
    ... print "%d Loop is OK" % loop_cnt
    ... loop_cnt -= 1
    ... if loop_cnt &lt; 0:
    ...
    loop_ok = False
    ... else:
    ... print "%d Loop no longer OK" % loop_cnt
    ...
    10 Loop is OK
    9 Loop is OK
    8 Loop is OK
    7 Loop is OK
    6 Loop is OK
    5 Loop is OK
    4 Loop is OK
    3 Loop is OK
    2 Loop is OK
    1 Loop is OK
    0 Loop is OK
    -1 Loop no longer OK


else语句是完全可选的

continue和break语句也可以用来控制while语句重新循环或是退出,
分别在:

    - 如果用break语句终止循环，else语句也将忽略
    - 而continue语句不会略过跟随的所有语句

</t>
<t tx="zoomq.20110428091054.4002">for 语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python中的 for 语句不同与其它语言中所期待的.
在Python中，for语句用于遍历序列对象的值.
for语句还支持一个可选的在else语句，同 while 中的效果::

    for some_var in &lt;sequence&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (and yet more statement if necessary)


另外一种指定序列对象的方法是使用内建函式 range()::

    &gt;&gt;&gt; for i in range(0,5):
    ... print i
    ...
    0
    1
    2
    3
    4


也常用以对序列对象进行处理,如"列表"::

    &gt;&gt;&gt; alist = [1,2,3,4,5,6,7,8,9,10]
    &gt;&gt;&gt; for i in alist:
    ... print i
    ...
    1
    2
    3
    4
    5
    6
    7
    8
    9
    10


处理的对象也不必是整数.由一系列字符串集合成的元组也可以::

    &gt;&gt;&gt; stuple = ("this","is","a","4-tuple")
    &gt;&gt;&gt; for s in stuple:
    ... print s
    ...
    this
    is
    a
    4-tuple


同while语句，for语句也支持 continue和break语句，
且工作方式相同.


</t>
<t tx="zoomq.20110428091054.4003">try语句
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

try语句用以捕获和处理异常，它类似于C++或Java中的try-catch结构.
这对创建强大的Python应用程序非常有用，
允许程序设计者实现一个在发生错误时包含默认替代方法的处理流程
(通常是产生所谓的回溯消息，然后终止执行).
而完整的try-except控制结构类似::

    try:
        statement
        (more statements as necessary)
    except &lt;exception, err_info&gt;:
        statement
        (more statements as necessary)
    else:
        statement
        (more statements as necessary)
    finally:
        statement
        (and yet more statements if necessary)


可指定一个特殊的异常类型（&lt;exception&gt;）来使用，
如果没有给出，将尝试截获语句块中的任何异常.
有方法可使用 ``Exception``基类来探查发生了什么异常,
并指定一个变量为来记录异常信息::

    try:
        f = open(fname, "r")
    except Exception, err:
        print "File open failed: %s" % str(err)


上例,如果文件打开失败，程序将不会终止.
相反，一个消息将被打印到标准输出,用来说明相关的失败信息

如果没有异常else语句将被执行，
而如果在try语句中包含break 或是 continue, finally块将在最后执行.
进一步的参考有关try语句和异常信息Python文档.

</t>
<t tx="zoomq.20110428091054.4004">字串引用
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

字串使用下列形式之一引用::

    'A single-quote string.'
    "A double-quote string."
    '''This is a multiline string using triple single quotes.
    It is a medium-length string. '''
    """This is a multiline string with triple double quotes containing many
    characters along with some punctuation, and it is a very long string indeed."""


多行字串可以跨越多行，``\n`` (换行符）会自动插入,以便确保输出吻合原始格式.


</t>
<t tx="zoomq.20110428091054.4005">字串方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

字符串类型提供了许多方法，其中有些我们已经看到了.
表3.15 “字串方法”是从 Python2.6 文档中摘取的完整的列表（不包括Unicode的方法）

.. list-table:: 表 3.15. 字串方法
   :widths: 10 40
   :header-rows: 1

   * - capitalize 
     - lower
   * - center  
     - lstrip
   * - count   
     - partition
   * - decode 
     - replace
   * - encode   
     - rfind
   * - endswith   
     - rindex
   * - expandtabs   
     - rjust
   * - find   
     - rpartition
   * - format 
     - rsplit
   * - index  
     - rstrip
   * - isalnum  
     - split
   * - isalpha   
     - splitlines
   * - isdigit 
     - startswith
   * - islower 
     - strip
   * - isspace 
     - swapcase
   * - istitle 
     - title
   * - isupper 
     - translate
   * - join 
     - upper
   * - ljust 
     - zfill


其中一些比其它更加常用,不过给力的是其它不常见的依然可用.
具体的,我们不在这儿叙述,具体参考官方文档.
此外，记住以下形式::


    new_sring = "string text".method()

也可以这么来用::

    new_string = string_var.method()

记住，总是要用一个新的字符串对象来接收处理结果(字串不可变),
否则，修改后的字串数据只会消失.


表3.16，“常用字串方法”列出了14常用的字串处理方法.
其它不常用的方法将被在需要时进行介绍.
下述说明中,使用Python文档中的格式来表示显式(必需)和[可选]参数


.. list-table:: 表 3.16. 常用字串方法
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - capitalize()   
     - 将字串首字母大写后返回
   * - center(width[,fillchar]) 
     - 返回以指定长度宽度为中心的字串文本.如果指定了fillchar，则使用指定字符来填充两端的空白.默认fillchar是空格
   * - count(sub[,start[,end]])   
     - 统计指定的子串出现的次数. start和end 参数用以指定原始字符串的探查范围
   * - find(sub[,start[,end]]) 
     - 定位指定子串子第一次出现在原字串的位置,并返回这一索引值.如果子没有找到，则返回-1
   * - isalnum() 
     - 如果字串是纯由字母数字组成的(0..9, A..Z, a..z)返回 True,否则返回 False.
   * - isalpha() 
     - 如果字串是纯由字母组成的(A..Z, a..z)返回 True,否则返回 False.
   * - isdigit()   
     - 如果字串是纯由数字组成的(A..Z, a..z)返回 True,否则返回 False.
   * - islower()   
     - 如果字串是纯由小写字母组成的(a..z)返回 True,否则返回 False.
   * - isspace()   
     - 如果字串是纯由空白字符组成的(空格，制表符，换行等)返回 True,否则返回 False.
   * - ljust(width[,fillchar])   
     - 返回以指定长度为宽度的左对齐字符串.如果指定fillchar的则使用指定字符来填充右端空白.默认填充字符是空格.如果宽度比原字串还小，则原封不动地返回
   * - lower()   
     - 将字串所有字母小写后返回
   * - rjust(width[,fillchar])   
     - 返回以指定长度为宽度的右对齐字符串.如果指定fillchar的则使用指定字符来填充左端空白.默认填充字符是空格.如果宽度比原字串还小，则原封不动地返回
   * - split([sep[,maxsplit]]) 
     - 返回一个由指定分隔符切分开的字串条目组成的列表.如果没有指定分隔符，默认使用空格作为(空白可以是任何长度，只要它是连续的).如果maxsplit给出，仅返回指定数目的条目.
   * - upper()   
     - 将字串所有字母大写后返回
























</t>
<t tx="zoomq.20110428091054.4006">格式化字串
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

基本上有两种方法可以对Python数据进行格式化.
首先是我们前面看到的串接.
二是利用Python的字符串格式化能力.
哪种方法最适合,取决于你的目标.
虽然串接对简单字串容易操作，但不提供进一步对小数位数等的处理,
而且当字串中包含佷多需要嵌入的数据和字串时,使用串接就很繁琐了,
试考虑下面的例子::

    &gt;&gt;&gt; data1 = 5.05567
    &gt;&gt;&gt; data2 = 34.678
    &gt;&gt;&gt; data3 = 0.00296705087
    &gt;&gt;&gt; data4 = 0
    &gt;&gt;&gt; runid = 1
    &gt;&gt;&gt; outstr1 = "Run "+str(runid)+": "+str(data1)+" "+str(data2)
    &gt;&gt;&gt; outstr2 = " "+str(data3)+" : "+str(data4)
    &gt;&gt;&gt; outstr = outstr1 + outstr2
    &gt;&gt;&gt; outstr
    'Run 1: 5.05567 34.678 0.00296705087 : 0'


有更简易的方法.
类似C中的sprintf()函式,Python支持非常相似的字符串格式化占位符.
通过使用特殊的格式代码，可以指定各种数据如何以及插入到一个字串的哪里.
这里使用整个化字串输出上例相同字串的处理::

    &gt;&gt;&gt; outstr = "Run %d: %2.3f %2.3f %2.3f : %d" % (runid, data1, data2, data3, data4)
    &gt;&gt;&gt; outstr
    'Run 1: 5.056 34.678 0.003 : 0'

注意，所有要输出到字串中的变量应该包含在括号中, 它是一个封闭的N元组.
如果省略括号，将只有第一个变量名是有效的,并引发错误::

    &gt;&gt;&gt; "%d %d %d" % 1, 2, 3
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: not enough arguments for format string


字串格式化占位符语法::

    %[(name)][flags][width][.precision]type_code

每个占位符可在``%``第一个项目指定一个可选名称
(并必须用括号).
接下来是可选标识,有前导空格，符号字符和0填充.
然后是一个可选的宽度值，指定数据最小的占位宽度,
如果数据包含小数部分，则该值为精度字段,指明输出时的小数数位.
最后是类型码,指定转换成什么样的数据(字符串，整数，长整，浮点等).

表3.17，“字串格式化占位符“ 列出了所有可用的标识.
表3.18，“字串格式化占位符类型代码“总结了可用类型代码


.. list-table:: 表 3.17. 字串格式化占位符
   :widths: 10 40
   :header-rows: 1

   * - 标识
     - 含义
   * - #
     - 使用“替代形式”格式化（参见表3.18，“字串格式化占位符类型代码”的说明）
   * - 0
     - 用前导零来衬垫数值
   * - -
     - 左对齐(覆盖0标识，如果两者都指定)
   * - (空格)   
     - 在有效数字前用空格补齐
   * - +   
     - 对数值前导符号字符(+或 -).覆盖的 "空格"标识


.. list-table:: 表 3.18. 字串格式化占位符类型代码
   :widths: 10 30 30
   :header-rows: 1

   * - 类型码
     - 含义
     - 注意
   * - d
     - 单精度数
     - .
   * - i
     - 同上
     - .
   * - o
     - 8进制数
     - 这时用前导零 0o 是不处理的
   * - u
     - 过时的类型
     - 用 d 替代
   * - x
     - 16进制数(小写)
     - 这时用前导零 0x 是不处理的
   * - X
     - 16进制数(大写)
     - - 这时用前导零 0X 是不处理的
   * - e
     - 指数式浮点数 (小写)
     - 另一种形式是使用小数点，即使后面没跟数字
   * - E
     - 指数式浮点数 (大写)
     - 替代形式同 e 
   * - f
     - 浮点数 (小写)
     - 替代形式同 e 
   * - F
     - 浮点数 (大写)
     - 替代形式同 e 
   * - g
     - 小写指数式浮点数,如果指数小于-4或精度低于4位,同十进制格式
     - 而替代形式是包含一个小数点和尾随零
   * - G
     - 大写指数式浮点数,如果指数小于-4或精度低于4位,同十进制格式
     - 同 g
   * - c
     - 单字符(接受整数或单字符的字串)
     - .
   * - r
     - 字串(对任何Python对象使用repr()函数转换)
     - .
   * - s
     - 字串(对任何Python对象使用str()函数转换)
     - .
   * - %
     - 无参数​​转换
     - .



字串方法能和字符串格式化同时应用,
这可能看起来有点古怪，但完全有效::

    &gt;&gt;&gt; "%d %d".ljust(20) % (2, 5)
    '2 5            '
    &gt;&gt;&gt; "%d %d".rjust(20) % (2, 5)
    '            2 5'
    &gt;&gt;&gt;


因为实际上并没有将字符串对象赋值给新的名字，
只是Python在打印时应用了格式.

Lastly, Python provides a set of so-called escape characters for use with strings. These are
special two-character codes composed of a backslash followed by a character, as shown in
Table 3.19, “String escape sequences”.

最后，Python支持字串应用中的所谓的义字符集.
都是由一个反斜杠字符接一个特殊字符,组成的代码，
如表3.19，“字符串转义序列”。


.. list-table:: 表 3.19. 字符串转义序列
   :widths: 10 40 40
   :header-rows: 1

   * - 转义序列
     - 解释 
     - ASCII
   * - \'
     - 单引号
     - '
   * - \"
     - 双引号
     - "
   * - \\
     - 单反斜线
     - \
   * - \a
     - ASCII 响铃
     - BEL
   * - \b
     - ASCII 空格
     - BS
   * - \f
     - ASCII 换页
     - FF
   * - \n
     - ASCII 换页行
     - LF
   * - \c
     - ASCII 回车
     - CR
   * - \t
     - ASCII 水平制表符
     - TAB
   * - \v
     - ASCII 垂直制表符
     - VT

反斜线字符（\）也可用于行延续，
如果它是在最后一个字符行，紧跟一个换行符（LF或CRLF）.
这将导致新行被解释器忽略，而将前后代码行当成一行来处理.














</t>
<t tx="zoomq.20110428091054.4007">作用域
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


早先提及的定义不在作用域是什么意思？ 现在开始探讨这事儿.


正如提过的，Python是将对象的名称作为集合的概念绑定到命名空间的.
其实，一个命名空间更像是一个字典对象，其中键是名称,值是关联的对象值.
在Python有三个层次的命名空间:
本地，全局，内建.

插图3.6，"Python的名称空间" 显示了Python模块的命名空间范围



当一个名称是在函数或方法的中声明时，首先尝试从一个本地名称空间搜索.
其次，对全局命名空间搜索.
最后，尝试内建命名空间.
如果没有在任何空间发现该名称，Python会抛出例外.


.. image:: ../_static/figs/rwip_0306.pdf.png

插图3.6，Python的名称空间

@others
</t>
<t tx="zoomq.20110428091054.4008">本地作用域
""""""""""""""""""""""""""""""""""""""""""""""""""

本地作用域是指特定的函式，类或方法命名空间.
换而言之，在一个函数中定义的任何变量是局部的,在其外是不可见的.
本地作用域还包括可能的嵌套函式.一会儿我们会研究这个情况.


插图3.7，"名称空间的搜索等级" 展示了这一搜索原则

.. image:: ../_static/figs/rwip_0307.pdf.png

插图3.7，名称空间的搜索等级


Class对象引入本地名称空间又一内容.
在类内部，任何定义的变量,都可以由内部的任何方法通过前缀 ``self`` 的形式来访问::

    self.some_var


一个类的对象实例的数据变量属性和方法可以通过使用"点号"形式从外部访问::

    SomeObj = SomeClass()
    SomeObj.var_name = value

这会将值分配给对象实例SomeObj的属性var_name.
如果var_name不存在，将立即创建.
这使我们注意到这一有趣的现象: 
Python的对象没有真正意义上的私有数据或方法.
一切都可以方便的从外部读取，即使并不愿意.
可以通过前缀下划线,来声明函数，类，或变量,以防止由通配符被自动导入，但这也并不能真正隐藏之.
甚至于用两个前导下划线字符来"糟蹋"对象名称，如果你知道方法,它仍然是可访问的.
所以，这儿没什么真正的隐藏，责任赋予了程序员,要求我们要有礼貌，不看不该看的.


如果你并不确认这些究竟是什么意思，不用担心.
我们将在之后开发用户界面应用时,详细讨论.





</t>
<t tx="zoomq.20110428091054.4009">全局作用域
""""""""""""""""""""""""""""""""""""""""""""""""""
全局作用域是指模块的名称空间.
函数不能修改除全局变量,
非用 global 来声明.
下面的例子，脚本 globals.py，说明了这点::

    # globals.py
        var1 = 0
        var2 = 1
    def Function1():
        var1 = 1
        var2 = 2
        print var1, var2
    def Function2():
        global var1, var2
        print var1, var22
        var1 = 3
        var2 = 4
        print var1, var2


为了测试，我们需要使用import语句加载它.
这告诉Python读模块和填充命令行的命名空间来发现有什么::

&gt;&gt;&gt; import globals


一旦globals.py 完成导入，我们可以用 help()函数，来看里面是什么::

    &gt;&gt;&gt; help(globals)
    Help on module globals:
        NAME
            globals
        FILE
            globals.py
        FUNCTIONS
            Function1()
            Function2()
        DATA
            var1 = 3
            var2 = 4


如果我们执行Function1，就可以验证全局变量 var1和var2 不改变::

&gt;&gt;&gt; globals.var1
    0
    &gt;&gt;&gt; globals.var2
    1
    &gt;&gt;&gt; globals.Function1()
    12
    &gt;&gt;&gt; globals.var1
    0
    &gt;&gt;&gt; globals.var2
    1


不过, Function2 就能变更var1 和 var2的值::

    &gt;&gt;&gt; globals.Function2()
    01
    34
    &gt;&gt;&gt; globals.var1
    3
    &gt;&gt;&gt; globals.var2
    4

如果一个函数想修改的变量名和某全局变量相同,
那么变量在函式内部使用时,就必须使用 ``global`` 加以区分.
globals2.py 说明了这一情况:

.. literalinclude:: globals2.py
    :language: python


观察调用这3个函式时的反馈::

    &gt;&gt;&gt; import globals2
    &gt;&gt;&gt; globals2.Function1()
    01
    &gt;&gt;&gt; globals2.Function2()
    12
    &gt;&gt;&gt; globals2.Function3()
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
        File "globals2.py", line 14, in Function3
    print var1, var2
    UnboundLocalError: local variable 'var1' referenced before assignment




Function1()成功了，因为没有局部变量和模块变量之间的冲突.
Function1()的var1和var2局部变量都在函式内部定义，是没有问题的.
然而，Function3() 引发错误.
在时全局名称的被阻止使用，
因为相同名称已经放入函式局部空间，
但第二次打印时，名称无法绑定到想打印的本地值对象上.
因此，触发UnboundLocalError例外.
如果在print语句之前，声明 ``global`` ，就不会发生错误.


</t>
<t tx="zoomq.20110428091054.4010">内建作用域
""""""""""""""""""""""""""""""""""""""""""""""""""

内置的名称空间是指Python运行时环境.
它包括类似ABS()，打印和各种异常的名称等等.
如果你想要一个内置的名称的列表，只需在Python提示符输入 dir(__builtins__) .
我没在这列出所有输出，因为它是相当大(至少有144个)

</t>
<t tx="zoomq.20110428091054.4011">模块和包
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

一个Python的源代码文件被称为一个模块.
这是一个变量和方法将各种语句结成的集合,
包含变量定义语句，import语句，直接执行语句，函数定义语句和类定义语句.


模块包含于软件包中，
而包实际上就是目录，
其中包含一个或多个模块.
包也可包含其他包.

插图3.8，“包和模块“ 演示了这一图景


模块是一个对象，因为我们已经看到，它有它自己的命名空间.
一个模块也有类似其它其他Python对象的属性.
一个模块的属性包括函数，类，方法，以及在其命名空间中定义的变量.

</t>
<t tx="zoomq.20110428091054.4012">函式，类和方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

def语句用于定义在模块中的函式和类中的方法::

    def SomeName (parameters):
        """ docstring goes here.
        """
        local_var = value
        statement...
        statement...
    more statements...

def语句用于定义函式时,缩进和同级函式相同.
当用于定义类方法时，相比类的声明，def语句要缩进一层.


.. image:: ../_static/figs/rwip_0308.pdf.png

插图3.8，“包和模块“


函式和方法可以嵌套.
这时，内部函式不能从外部访问.
下面是一个嵌套函数调用的例子, ``subfuncs.py`` ::

    #subfuncs.py

    def MainFunc():
        def SubFunc1():
            print "SubFunc1"
        def SubFunc2():
            print "SubFunc2"
        def SubFunc3():
        def SubSubFunc1():
            print "SubSubFunc1"
                def SubSubFunc2():
            print "SubSubFunc2"
                SubSubFunc1()
        SubSubFunc2()
    SubFunc1()
    SubFunc2()
    SubFunc3()


我们只能执行函式 ``MainFunc()`` ;
直接 MainFunc() 名称空间外部是访问不到嵌套的函式的.
如果导入 ``subfuncs`` ,设法得到它的帮助，将看到::
    &gt;&gt;&gt; import subfuncs
    &gt;&gt;&gt; help(subfuncs)
    Help on module subfuncs:
    NAME
    subfuncs
    FILE
    subfuncs.py
    FUNCTIONS
    MainFunc()


但是，当我们执行 MainFunc() 时，可以看到所有子函式都执行了::

    &gt;&gt;&gt; import subfuncs
    &gt;&gt;&gt; subfuncs.MainFunc()
    SubFunc1
    SubFunc2
    SubSubFunc1
    SubSubFunc2



类声明定义了一个类的对象，而这又是用来创建实例对象的.
下面的类定义了一个定时器对象，可用于获取程序执行的运行时间::


import time
class TimeDelta:
    def __init__(self):
        self.tstart = 0
        self.tlast = 0
        self.tcurr = 0
        self.Reset()

    def GetDelta(self):
        """ Returns time since last call to GetDelta(). """
        self.tcurr = time.clock()
        delta = self.tcurr - self.tlast
        self.tlast = self.tcurr
        return delta
    def GetTotal(self):
        """ Returns time since object created. """
        return time.clock() - self.tstart

    def Reset(self):
        """ Initializes time attributes. """
        self.tstart = time.clock()
        self.tlast = self.tstart

此类的对象可在代码的任意位置实例化，并检查运行时间，而且可多次实例使用.
如果TimeDelta是一模块的功能，将是相当尴尬的，
但作为一个类，每个实例都可以保持自己的数据，以便启动时自行使用.





</t>
<t tx="zoomq.20110428091054.4013">文档字串
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

文档字串是用来对模块，类，方法和功能提供文档的.
在一个模块，函数，类或方法开始时的多行字串,
被Python认为是作为文档的字串,会存储到对象的内部变量 ``__doc__`` 
这就是在命令行环境中键入 help() 看到的文档.

下面的例子显示了如何使用文档字符串.
pass语句使脚本可用,只要我们导入此代码,就可溶性使用 ``help()`` 来显示嵌入式文档::

    #docstrings.py
    """ Module level docstring.
        This describes the overall purpose and features of the module.
        It should not go into detail about each function or class as
        each of those objects has its own docstring.
    """

    def Function1():
        """ A function docstring.
        Describes the purpose of the function, its inputs (if any)
        and what it will return (if anything).
        """
        pass

    class Class1:
        """ Top-level class docstring.
            Like the module docstring, this is a general high-level
            description of the class. The methods and variable
            attributes are not described here.
        """
        def Method1():
            """ A method docstring.
            Similar to a function docstring.
            """
            pass
        def Method2():
            """ A method docstring.
            Similar to a function docstring.
            """
            pass


对该模块调用 ``help()`` 时,应该看到以下结果::

    &gt;&gt;&gt; import docstrings
    &gt;&gt;&gt; help(docstrings)
    Help on module docstrings:

    NAME
        docstrings - Module level docstring.

    FILE
        docstrings.py

    DESCRIPTION
        This describes the overall purpose and features of the module.
        It should not go into detail about each function or class as
        each of those objects has its own docstring.

    CLASSES
        Class1

        class Class1
        | Top-level class docstring.
        |
        | Like the module docstring, this is a general high-level
        | description of the class. The methods and variable
        | attributes are not described here.
        |
        | Methods defined here:
        |
        | Method1()
        |        A method docstring.
        |
        |        Similar to a function docstring.
        |
        | Method2()
        |        A method docstring.
        |
        |        Similar to a function docstring.

    FUNCTIONS
        Function1()
            A function docstring.
            Describes the purpose of the function, its inputs (if any)
            and what it will return (if anything).




</t>
<t tx="zoomq.20110428091054.4014">导入方法
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

导入语句有很多形式,这是最常见的::

    import module


模块中的对象添加到当前名称空间后,使用 module.function() 或module.class() 来调用.
要访问一个模块内的数据参数使用这种形式 module.variable


别名引用是支持的::

    import module as alias



这其实是进行了相同的模块导入，
这样别名就可用来调用模块内部资源了.
当一个模块有很长的名字时,这样导入使用起来很方便.例如::

    import CommonReturnCodes as RetCodes


也可以从模块只导入一个指定的对象:

    from module import somename


这种形式可从一个模块导入的特定函数，类，模块或数据.
这时可以使用不带模块的前缀形式来调用函数或参数 ``somename``,


也可使用通配符来导入外部模块的一切，以添加到当前命名空间::

    from module import *

普遍认为用通配符来导入，除非在某些特殊情况下,否则最好不用.
尽量显示的指定导入对象.
以免和现有名称空间中的对象名称冲突.
因为除非有预防措施, 通配符将导入模块的一切,如果和当前模块有的名称相同,目前同对象将被覆盖.

另外,期望通过在参数名称前缀单或双下划线来控制是否暴露,如果有属性如下聲明::

    _some_name



在通配符导入中将不包括，但它仍然可以通过前缀模块名来引用到.
如果用双下划线的形式来聲明::

    __some_name


这可能是Python中最常见的数据隐藏形式.
而实际上,它仍然可以从父模块外部访问到，
但其对外的名称是种“错位”，从而难以获得(但,不是不能获得).



</t>
<t tx="zoomq.20110428091054.4015">导入处理
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Because Python executes any import statements that are not within the scope of a function
immediately when a module is imported, it will descend through the import statements
in each module in a depth-first fashion until all imports have been processed. Figure 3.9,
“Module import sequence” shows graphically how this works.

因为Python一遇到 ``import``语句就会立即执行,
并会追踪所有 ``import`` 语句,根据深度优先的方式来逐一导入,直到所有涉及的模块导入被处理.

插图3.9，“模块导入序列”图形化显示导入是如何工作的


.. image:: ../_static/figs/rwip_0309.pdf.png
插图3.9，模块导入序列


插图 “模块导入序列”是用数字表示在循环.
模块A导入模块B，B又导入模块C，
从而导入模块G和H;
模块D将在模块H完成加载后,才尝试导入.
</t>
<t tx="zoomq.20110428091054.4016">循环导入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Python的导入体制有个缺点，就是可能引发导入的"挂起",
即所谓的 “循环导入" 参考:
插图3.10，"循环导入" 的情况

.. image:: ../_static/figs/rwip_0310.pdf.png
插图3.10，循环导入


在这里，我们有个模块A将导入模块B的情况，
当进一步导入模块C和D时，
模块C又要求导入模块A,
这时A模块还在等待模块B完成对模块C的导入,
所以,模块B无法继续完成模块D的导入,因为此时,模块C并没有完成加载,
于是,整体过程死锁.


一个确定的避免循环导入的方式就是坚持原则:
"决不向上导入,永远向下导入".
这意味着模块应该分层导入的,
同时模块实现时,也没有必要从一个更高层次的导入.
很多新人的典型的错误是把一堆"徦变量"(不期望有值改变的变量)
设置在模块中给其他相关的模块功能使用,
然后再导入整个模块仅为获得"徦变量"对象.
事实上各个模块中类似"徦变量"的对象,是应该包含在自身中,
这样就不必担心引发循环的导入了.

</t>
<t tx="zoomq.20110428091054.4017">用户输入
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

从stdin(标准输入)获取用户输入的是最直截了当的.
Python提供了raw_input()来作这事儿.
模块getInfo.py包含了具体如何使用 raw_input()的简单实例::

    # getInfo.py
    def ask():
        uname = raw_input("What is your name? ")
        utype = raw_input("What kind of being are you? ")
        uhome = raw_input("What planet are you from? ")
        print ""
        print "So, %s, you are a %s from %s." % (uname, utype, uhome)
        uack = raw_input("Is that correct? ")
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."


观察这个脚本如何工作,我们要导入 getInfo 模块,并调用 ask()::

    &gt;&gt;&gt; import getInfo
    &gt;&gt;&gt; getInfo.ask()
    What is your name? zifnorg
    What kind of being are you? Zeeble
    What planet are you from? Arcturus III

好了你是来自Arcturus III.的 Zeeble 名叫 zifnorg::

    Is that correct? y
    Cool. Welcome.


The raw_input() function accepts an optional prompt string and always returns the data
from stdin as a string. If the program is looking for a numeric value, it will need to be
converted. A safe way to do this is by using the try-except construct. Here is getInfo2.py
with the try-except modification
raw_input()函数接受一个可选的提示字符串,将从stdin获取的数据作为字符串返回.
如果程序期待数值，就需要转换.一种安全的方式是使用 try-except 来处理,这是getInfo2.py的 try-except 修订::

    def ask2():
        uname = raw_input("What is your name? ")
        utype = raw_input("What kind of being are you? ")
        uhome = raw_input("What planet are you from? ")
        getgumps = True
        while (getgumps):
            intmp = raw_input("How many mucklegumps do you own? ")
            try:
                ugumps = int(intmp)
            except:
                print "Sorry, you need to enter an integer number."
                continue
            else:
                getgumps = False
        print ""
        print "So, %s, you are a %s from %s, with %d mucklegumps."\
            % (uname, utype, uhome, ugumps)
        uack = raw_input("Is that correct? ")
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."


在我们继续之前，对这个简单功能有几件事情要考虑.
首先，它将只接受有关"mucklegumps"数目的徝,浮点数和字串都将被拒.
其次，没办法在用户输入时优雅的警告并中止.
这方面可以简单的通过特殊字符(例如 a .)来检查处理，
或只检测空输入(只按回车键而没有输入).
说到空的输入，如果用户在最后一个问题直接按回车键，Python会抛出一个异常::

    Is that correct? &lt;enter&gt;
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
        File "getInfo2.py", line 18, in ask2
            if uack[0] in ('y', 'Y'):

    IndexError: string index out of range


在 if 表达式中，对 uack[0] 判定是否匹配2元组("y", "Y")中任意一个,
当直接回车时,返回零长度字串，将触发异常并得到捕获处理::

    uack = raw_input("Is that correct? ")
    try:
        if uack[0] in ('y', 'Y'):
            print "Cool. Welcome."
        else:
            print "OK, whatever."
    except:
        print "Fine. Have a nice day."

在处理用户输入
(即，一个人在提示符状态下输入时)，
必须始终意识到可能的输入错误或异常.
人类总是会键入错误的超出限定的数据,意外的单词或短语，或是什么都没有.
用户是不可预知的，所以,建设一个能捕获错误输入的程序永远是个好主意.







</t>
<t tx="zoomq.20110428091054.4018">命令行参数
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在命令行输入的程序参数
由系统捕获并通过Python 解析器变为列表.
这一列表的第一个条目(索引值为0)永远是程序本身.
Python 的内建模块 sys 包含了这种数据处理方式.



以下程序(argshow.py)简单的指出了如何打印出所有通过命令行获得的参数列表::

    import sys

    print "%d items in argument list\n" % len(sys.argv)

    i=1
    for arg in sys.argv:
        print "%d: %s" % (i, arg)
        i += 1


这是应该的运行结果::
    C:\samples&gt; python argshow.py 1 2 3 4 -h -v
    7 items in argument list

    1: argshow.py
    2: 1
    3: 2
    4: 3
    5: 4
    6: -h
    7: -v


Python还提供用于检测特定的参数，并提对应取值的模块，我们当前不讨论这方面的技巧.
将在后面的章节来使用他们.


</t>
<t tx="zoomq.20110428091054.4019">文件
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Python有一个内建的文件对象,提供了一些对磁盘文件的基础读写等各种处理方法.
在pgmrand.py 中我们已经看到了一点,现在来继续深入.

open() 方法用以创建一个文件对象实例::

    &gt;&gt;&gt; fname = "test1.txt"
    &gt;&gt;&gt; fmode = "w"
    &gt;&gt;&gt; f = open(fname, fmode)

当然,可以声明为可写::

    f = open("test1.txt", "w")

一样获得了文件对象.

一但我们拥有了文件对象,就可以通过 write() 写入点东西::

    &gt;&gt;&gt; f.write("Test line 1\n")
    &gt;&gt;&gt; f.write("Test line 2\n")
    &gt;&gt;&gt; f.close()

文件现在应该包含两行文本::

    Test line 1
    Test line 2


注意, 字串中写入了 \n (换行符的声明代码).
文件的write() 方法不象 print 那样会在字串尾部自动追加换行符,
所以必须被显式地包含在字符串中.

图表 3.20, "文件I/O 模式"列出了常见的文件模式


.. list-table:: 图表 3.20, 文件I/O 模式
   :widths: 10 40
   :header-rows: 1

   * - 模式  
     - 含义
   * - r  
     - 读
   * - rb  
     - 读二进制流
   * - w  
     - 写
   * - wb  
     - 写二进制流
   * - a
     - 追加
   * - ab
     - 二进制流追加



图表  3.21, “文件方法” 
列出了一些文件对象常用的方法.
其它更多可用方法,请参阅Python的文档.


.. list-table:: 图表  3.21, 文件方法
   :widths: 10 40
   :header-rows: 1

   * - 方法
     - 描述
   * - close()   
     - 关闭一个文件
   * - flush()   
     - 刷新内部缓冲区
   * - read([size]) 
     - 从文件中读取指定大小的字节
   * - readline([size]) 
     - 从文件中读取指定行数的内容
   * - write(str) 
     - 将字串写入文件




</t>
<t tx="zoomq.20110429085924.2674">控制台的打印输出
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We’ve already seen Python’s print function in action. Its primary purpose is to send
output to whatever is currently defined as stdout (standard output). The print function is
capable of handling conversions between numeric types and strings for console output in a
transparent fashion. The string formatting discussed earlier works with the print statement
to create nicely formatted output.

我们已经看到了Python的 print 函式的输出.
其主要功能就是发送结果到任何当前定义为STDOUT(标准输出)的通道中,
print函式可以透明的处理数字类型和字符串之间的转换,以便在控制台输出.
先前章节已经讨论过字串格式化,配合print 可以很好的完成格式化输出.

</t>
<t tx="zoomq.20110429085924.2675">重定向打印
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

默认情况下，print 输出被发送到目前任何己定义的STDOUT.
通过使用"锯齿形"( ``&gt;&gt;`` )运算符，print 行为可以修订输出到任何提供了 write() 方法的对象中去.

通常，这将是一个文件对象，如下所示::

    &gt;&gt;&gt; datastr = "This is a test."
    &gt;&gt;&gt; f = open("testfile.txt", "w")
    &gt;&gt;&gt; print &gt;&gt; f,datastr
    &gt;&gt;&gt; f.close()

</t>
<t tx="zoomq.20110429085924.2677">编辑器
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

如果你认为使用一个标准编辑器就足够了 (这正是笔者使用的方式;-)，
有几个优秀的套件可供选择. 表3.22，“文本编辑器的短名单”
列出了一些较受欢迎的推荐.


.. list-table:: 表3.22 文本编辑器的短名单
   :widths: 5 10 5 30 30
   :header-rows: 1

   * - 名称
     - 操作系统
     - 自由开源软件?
     - 赞誉
     - 吐糟
   * - Emacs
     - Linux,Windows,等等
     - 是
     - 支持先进的编辑功能，脚本，语法高亮，和多窗口显示
     - 有一些陡峭的学习曲线，并使用很多不直观的必须记忆的多键组合命令
   * - vi/vim
     - Linux,Windows,等等
     - 是 
     - 基本功能是简单易学的，在不同的Linux和类Unix平台中vi被非常广泛的支持. VIM除了传统的命令行操作还提供了一个GUI界面.
     - 学习更复杂和更高级的功能将是个艰难的过程,同样依赖不直观的组合键
   * - nano
     - Linux
     - 是 
     - 非常简单,支持部分语法高亮
     - 基于pico编辑器及其控制键命令.能力有限.
   * - Slickedit
     - Linux,Windows,等等
     - 否 ($$$) 
     - 大量的功能，完整的GUI界面，可编程的宏，语法高亮. 能仿效其他编辑的能力
     - 对于大多数开发任务来说,需要学习过量的操作细节，而且价格超贵.
   * - UltraEdit
     - Linux,Windows
     - 否 ($) 
     - 完整的GUI界面,非常简单易学,多个标签式的文本窗口，可编程的宏，和语法高亮
     - 有很多一般开发者永远用不到的功能,需要努力才能弄清楚如何调整默认设置，来关闭一些不必要的默认值.需要投入金钱(而且不仅仅)


这仅仅是个部分编辑器的列表，其他还有大量可用编辑器，其中包括很好的开源软件.
如果你还没找到一个非常喜欢的编辑器（或自己开发了一个），
在你的开发平台中值得多尝试比较一下.
但是注意: 有些人似乎对特定的编辑器陷入了狂热.
特别是Emacs 和 vi 尤为明显，两者的持续纷争已远超过20年
(参考 http://en.wikipedia.org/Editor_war).
其实,只要保持开放的心态，为工作选择正确的工具，
至于神马"编辑器战争"就当免费娱乐!


</t>
<t tx="zoomq.20110429085924.2678">IDE 工具
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

IDE环境,试图整合一切程序员的需求到一个单一的工具中.
第一种流行的为PC设计的低成本IDE 是Borland的菲利普卡恩在80年代中期开发的Turbo Pascal,
大多数现代IDE都提供源代码文本编辑器，编译器或解释器的接口，自动编译工具，
也许于包含一些版本控制的支持，以及某种形式的调试器.
换句话说，它是个针对软件开发的一站式购物体验.
我们这里列出的IDE并不是每一个都提供一切功能，
但最起码，你应该期望一个文本编辑器和的运行外部工具和应用程序(诸如如编译器，解释器，和调试器)的能力.
在这个意义上说，即使类似UltraEdit和Emacs的编辑器
(表3.22，“文本编辑器的短名单”列出过)也可用作集成开发环境(实际上通常就是这么用的).
表3.23，“集成开发环境的短名单“列出了一些现成的适合用作Python开发的IDE

.. list-table:: 表3.23 集成开发环境的短名单
   :widths: 5 10 5 30 30
   :header-rows: 1

   * - 名称
     - 操作系统
     - 自由开源软件?
     - 赞誉
     - 吐糟
   * - Boa
     - 所有支持 Python 和 wxPython 的系统
     - 是
     - 用于创建和维护wxPython的GUI组件和应用程序的优秀工具;包括一个像样的编辑器和一个基本的Python调试器
     - 仅为wxPython GUI包开发作了优化,无法作为通用全功能的开发环境
   * - Idle 
     - 所有支持 Python 的系统
     - 是
     - 用Python 本身支持对Python 脚本的编程;提供多编辑窗口，函数/方法提示清单，Python shell窗口，初级调试
     - Idle 的编辑窗口是自由浮动，有时要追踪一个特定的窗口是很恼人的
   * - Eclipse (配合 PyDev) 
     - Linux,Windows,等等
     - 是
     - 由Java编写的异常灵活的多语言IDE; 通过插件模块提供各种开发支持，如PyDev对Python开发支持
     - 项目/包的开发模型,需要应对相当陡峭的学习曲线,可能不是所有人都能适合
   * - PythonWin
     - Windows
     - 是
     - 由ActiveState的Python发行提供, 包含Idle 的大部分相同功能.
     - 仅仅在 Windows 平台可用
   * - WingIDE 
     - Linux,Windows,等
     - 否 ($$$) 
     - 专门面向Python开发和调试提供很多功能
     - 专门为Python开发服务的编辑器，当然,也可以用来写其它语言.界面可能过于纷乱,通常需要花时间来配置好







</t>
<t tx="zoomq.20110429085924.2679">调试
-------------------------------------------------------------------------------

调试器允许一个软件开发人员在软件运行时深入其内部观察.
尽管人们也许认为调试器是很少被使用的,
其实在必要时,调试器可以迅速揭露程序中的严重问题,节省大量的调试时间.
然而，正如其它成瘾物质，一个不小心调试器也将发展为一种严重的依赖症状!

那么,通过调试器我们究竟可以作什么?
对于初学者来说，一个调试器允许开发人员在源代码中选择一个特定的代码行,设置中"断点",
当程序执行到这一点，就可以制止程序运行并检查局部变量.
调试器还支持对代码进行单步执行.
如果调试器有支持"观察", 还可以选择特定的变量在"断点"处显示值,并逐句执行代码显示变量的变化.


目前没有"一刀切"式调试器,可以对任何语言进行调试,虽然也有一些"Shell"为多种开发语言提供了类似接口.

对于Python,
Boa, Idle, Eclipse, 和 WingIDE工具都包含了调试器.
有种独立的Python调试器Winpdb，也可用,
以及Python 本身还内置了一个命令行界面的调试器 PDB.

</t>
<t tx="zoomq.20110504084047.2679">odate,tI,tO,tC,tM,tF,tS                 Pt,Pd,Pl,Po
110801,1.50,4.00,1.50,2.50,6.00,9.00    6,5,1,+1

</t>
<t tx="zoomq.20110518221155.2680">@path ch00</t>
<t tx="zoomq.20110518221155.2681">@language rest
前言
===============


简介：
---------------------------

这是本非常有趣的书...


感谢：
---------------------------

- 编辑
- 团队
- 环境
- 社区



</t>
<t tx="zoomq.20110518221155.2683">@language rest
序言
===============

John Hughes

本书是有关自动化仪器,及对其的自动化控制.
我们将探讨如何运用 Python语言快速轻巧的构建自动化仪器的控制系统.

从研究实验室到工业厂房自动化仪器无所不在.
一但人们意识到收集随时间变迁的数据很有用,自然就需要某种手段来捕捉并完成数据记录.
当然,人们可以取叠纸拿个时钟,盯着温度计,刻度盘或是其它仪表,定期记录数值,但是很快就受不了这种乏味的工作.
如果这一记录过程可以自动化,将更加可靠和易行.
幸运的是,技术的进步早已超越过了手写日志及发条驱动的带状图记录的时代!

如今，人们可以购买各种便宜的物理仪器便宜并使用计算机来获取数据.
一旦计算机被连接到仪器，数据收集，分析和控制等等功能可以肆意扩展.
唯一受到限制的只是实现者自身的创造力了.


@others


</t>
<t tx="zoomq.20110518221155.2684">谁该看这书
-------------------------------------------------------------------------------

本书专为需要或是自制仪器控制器(也称为数据采集和控制系统)的人准备的.
你可能是名研究员，软件开发者，学生，项目主管，工程师，或一个业余爱好者.
想实现的应用系统,可能只是在实验过程中需要的自动化电子测试系统,
或是其它类型的自动化设备.

本书要完成的目标软件将是跨平台的.
我假定你至少在Windows 平台特别是XP 平台玩得很顺.
而我会使用 Ubuntu 发行版本的Linux 系统,
不过书中讨论的程序将在各种兼容发行版中良好运行,同时我也假定你是知道如何使用 csh 或是 bash 命令行脚本.

尽管本书是关于,如何通过物理硬件同现实世界交互,也也涉及到了一系列相关电气产品.
不过,你不必是名有足够背景知识的电气工程师,
在第2章,包含了基本电子理论知识的介绍,
虽然事实上,不必理解深层次的电子学知识也可以令计算机与现实世界交互.
不过,知道多点相关领域知识,绝对没坏处,万一首次遇到意外,我们可以从中获得思路.

不管你工作在哪种类型或是场所,最关键的,我假定你需要通过某地接口捕获一些数据,
或是产生控制信号.
更加重要的是,我们需要轻快精确可靠的构建出这种仪器控制软件来.


</t>
<t tx="zoomq.20110518221155.2686">有关编程
-------------------------------------------------------------------------------

我们将使用Python作为主要的编程语言，仅仅嵌入一点点的C程序.
在本书中，我将假定你有一些编程经验，并对Python或C熟悉（理想情况下，两者）。
如果不是这样，以Perl 或Tcl/ Tk或如Matlab或IDL分析工具的经验，也是一个合理的起点。
本书坚定地回避Python语言更深奥的知识，
配合大量的实例代码,图表注释，和截屏来引导理解.
对C涉及的很小，它只是用来说明如何创建和使用的Python应用的底层系统扩展.

第3章的覆盖了Python语言的基础介绍,
第4章的介绍了C语言的基础知识,
对以上语言进一步的探究通过阅读建议引导读者自行学习.

</t>
<t tx="zoomq.20110518221155.2688">为嘛Python?
-------------------------------------------------------------------------------

Python 是Guido van Rossum在八十年代未开发的解释型语言.
因其是种即时编译的脚本语言，用户可以在Python 命令行环境中直接创建并执行。
语言本身也很容易学习和理解，只要一开始不用理会过多的高级功能
（装饰器，自省，列表推导，等等）.
因此，Python 提供了快速构建原型及易懂的的双重好处，
这反过来又有利于快速为不同的设备创建各种不同应用，
没有开发者通常需要应对的学习曲线以及传统的编译语言依赖的特定供应商提供的编程环境。

Python是高度可移植的，它是几乎运行在所有现代计算平台中.
在项目中坚持只使用常用的接口方法，应用程序就很可能在Windows的PC中编写,
但是不用修改一行也可以在Linux操作系统中运行良好。
甚至于可以Sun的Solaris机器以及或苹果OS X系统中运行，
即使书中没有特意提及这点.
一但Python 必须配合特定平台的特定扩展或驱动程序,便失去了可移植，
所以在这些情况下，我将提供分别适用于Windows和Linux的替代品.


本书包括完整的可用示例代码，并配合框图和流程图来说明关键点，
来操作一些现成的，低成本的接口硬件。



</t>
<t tx="zoomq.20110518221155.2690">系统
-------------------------------------------------------------------------------

我们将探究的是那种即可以用在实验室,也可以直接用于工业环境的仪器设备.
比如说,在电子实验室,风洞,或是气象数据收集.
系统可能只是一个简单的温度记录仪,也可能是个复杂的真空控制系统.

一般来说，本书描述的技术可以作用于任何可以连接到PC机的硬件,
当然总是有些设备是使用封闭标准的特殊硬件,但是我们不会处理这种软件,
也不会深入到复杂的数据处理领域,比如说:炼油厂的自动工程方案，核电厂，或机器人飞船。
系统在这些领域通常是通过专用硬件来实现极其复杂的控制，配合同样精密和复杂的软件。
我们只关注最通用的设备,驱动和接口,以及使用一些常用界面方法轻松构建出可用的系统.



</t>
<t tx="zoomq.20110518221155.2692">方法论
-------------------------------------------------------------------------------

我们通过现实世界的实例一步步的理解如何定义设备应用,选择合理的接口以及硬件,
并建立可能需要的底层驱动以便配合Python接口与完成硬件控制。
我们还将探索TkInter和wxPython的图形界面,以及 curses 的图形化文字界面.

本书包含的主要内容有:

- 如何封装一个硬件供应商的DLL驱动,以便Python 扩展使用
- 如何与USB为基础的I / O设备
- 如何使用类似RS- 232和RS -485或是 GPIB工业标准接口
- 追加上一个什么样的硬件类型才可能发现并使用接口

本书还提供了参考,索引现成的开源工具和库,
以便即使从零开始,也可以用最短的时间完成一个可用的硬件控制系统.


</t>
<t tx="zoomq.20110518221155.2694">本书组织
-------------------------------------------------------------------------------

本书分为14个章节和2节附录。
第14章将前12章的所有实践集中应用为一系列现实世界的例子.
1至6章引入基础概念，读者可以选择跳过。

这里列出每章关键内容的简介:

- 第1章,仪器介绍
    - 从整体上来说什么是仪器,以及如何控制系统的工作，以及这些概念如何在实际世界使用.涵盖的例子包含自动户外灯，电器仪表在工程中的测试,在实验室中控制化学过程和热度批处理.
- 第2章，电气精要
    - 因为作为手册书,必须对物理硬件接口以及如何完成一个自动化工程从整体上涉及的各个方面要有描述.本章对电子以及电气产品,进行了简介;然后探讨了内置功能模块以及数字控制接口，模拟接口，计数器和计时器.最后，介绍了评论述了作为背景技术的串行和并行接口.如果你已经熟悉电子电路原理和装置，你以跳过本章。不过，建议至少要关注一下，以便为今后可能的利用留个印象
- 第3章，Python编程语言
    - 尽管这本书不是Python教程，但是本章提供了Python 的基本知识以及核心概念,以便读者快速上手将Python 最常用的功能在本书讨论情景中应用起来;本章还提供了一系列工具的概述,以便协助大家更加轻松的进行编程.
- 第4章，C语言
    - 从本章,引入高层次的C编程语言知识. 目标是提供足够的资料，以便理解书中实例代码,并不会引入C语言神秘的细节.幸运的是，C其实是相对简单的语言，而在这一章的信息应足以让你开始创建自己的驱动扩展以供给Python 脚本使用\
- 第5章，Python扩展
    - 本章介绍了如何Python扩展是如何创建的，以及通常有哪些种类的扩.提供的例子，无论是在本章，或是在后面的章节，都可以作为你自己应用的模板来开始.
- 第6章，硬件工具
    - 虽然读者可能是位从来没有触摸过仪器设备以及电烙铁,但是很有可能用过螺丝刀，钢丝钳，和数字万用表（DMM）,这也足够开始了. 在这一章我提供一个清单,来说明开发仪表系统需要什么样的基本工具,以便可以按图索骥的填充到书架上一个小盒子里,为你将来可能真的动手创造自动系统时使用. 在最后，充分讨论了两件可以帮助你免除猜测之苦快速定位问题的设备:示波器和逻辑分析仪. 本章还就应该准备哪些类型的工具提供了一​​些可行性建议，以便读者参考决定购置或是升級.
- 第7章，物理接口
    - 列出了一系列用Python进行数据采集或是控制时最常见的物理接口.RS -232和RS- 485，就仪器控制而言,这就是最常见的两个串行接口.本章还涵盖了讨论中一些场景中会遇见的USB和GPIB/IEEE-488接口的基础知识.最后，我们将关注PC的可插入式I/O硬件,即通常的PCI-型电路板，以及通常可从硬件供应商得到支持的API规范.
- 第8章，入门
    - 本章描述一个对软件开发行之有效的过程. 将这一内容设置在这，是因为，不论用何种语言来开发自控系统，至关重要的是计划，明确核心功能，比照预期数据来观察测试结果，并持续改进这一过程. 通过开发Python扩展,我们击穿了模糊和不确定之门，通过设备控制软件进入了真实世界.
- 第9章，控制系统概念
    - 要对现实世界进行数据采集和控制，必须至少经营部分控制和系统论. 本章扩展了在第一章中介绍的控制系统概念,详细介绍的检查与共同控制系统概念和模型，包括议题如反馈，“砰，砰“的控制器，和比例积微分（PID）控制.还提供了一个基本控制系统案例分析,并给出了如何选择一个合适模型的一些指导方针.最后，我们来看看如何应用数学控制系统转化为实际的Python代码.
- 第10章，建立和使用模拟器
    - 建立和使用模拟器,可以帮助我们加快开发过程，通过提供一个可以安全试错的环境，来检验思路，不仅针对控制软件，还可以针对可模拟的硬件提供一些宝贵的经验（非侵入式的. 无论是因为目标硬件暂时未能提供，或太昂贵无法承担损坏的风险，都可以通过模拟器,简便令软件可以运行,进行测试改进,获得足够的信心，令它正常在现实世界中工作.
- 第11章，设备I/O
    - 在这一章中，我们将看看如何使用在第7章中介绍的物理接口,在真实世界和你的应用间搬运数据. 我们将从接口协议格式开始讨论一些基本概念,然后引入一些软件实例,以便介绍几个常用协议解析包:pySerial，pyParallel和PyVISA. 最后，会展示一些技术来说明如何读取和写入数据到设备. 我们将对比阻塞与非阻塞的I/O事件，以及如何应对潜在的数据I/O错误，以便使你的应用程序更加健壮.
- 第12章，计件读写
    - 本章谈及如何实施对设备文件的读写以及审查,并对比了文件格式,从普通的ASCII和CSV文件和到二进制文件数据库都进行了简述. 我们还将研究Python对配置文件的处理能力，看看它通过库方法是多么容易存储和检索配置参数的.
- 第13章，用户界面
    - ​​除非应用程序是嵌入硬件或是专门设计作为后台运行过程的，可能都会需要种用户界面. 本章考察命令行界面,或是用Python 的curses模块生成的文字控制界面,以及如何使用ANSI-的终端仿真器程序显示数据，接受输入. 本章还包含如何用Python 内置的TkInter模块来生成GUI界面,并另外阐述了 wxPython GUI包.
- 第14章，真实实例
    - 我们将考察几种不同类型的设备如何进行数据采集和控制. 本章首先是一个捕捉从连续的数据输出的数字万用表实例子.然后，我们考察一个采用普通的串行接口进行命令和数据交换的数据采集装置. 最后，我们将详细分析硬件供应商提供的一个API接口如何通过DLL对USB设备进行数据I/O操作. 借鉴较早章节的例子对常见设备完成几乎所有的关键操作,以展示如何将理论付诸实践.
- 两章附录,包含其它实用信息:
    - 附录 A, 自由及开源软件资源
    - 附录 B, 仪器设备资源





</t>
<t tx="zoomq.20110518221155.2696">图书规约
-------------------------------------------------------------------------------

以下是本书的排版规约:


.. list-table:: 
   :widths: 10 40
   :header-rows: 1

   * - *斜体*
     - 用于 新条目,URL,邮箱,文件名,文件后綴
   * - ``等宽``
     - 用于 程序清单，以及段落内Python模块和参考，如变量或函数名，数据类型，描述以及关键字
   * - :sup:`等宽粗体`
     - 显示应当由用户输入的命令或其他文本面
   * - :sub:`等宽斜体`
     - 显示应由用户提供的值或值根据上下文应该替换的文本


.. note:: (~_~)

    - 有这种图标的表示是建议和提示


.. warning:: (#_#)

    - 有这种图标的表示警告和注意




</t>
<t tx="zoomq.20110518221155.2698">示例使用
-------------------------------------------------------------------------------

本书的宗旨就是帮助你完成工作.
一般而言,你可以在自己的程序和文档中随意使用书中的代码.
除非你原样引用大量代码.否则无须联系我们获得授权.
例如,在编写程序时引用了本书若干代码片段是无须授权的,
然而销售或分发O'Reilly图书示例光盘则是需要许可授权的.
通过引用本书内容以及代码的方式来答疑解难是不必有授权的.而将书中的代码大量加入到你的产品以及文档中,则需要授权.


如果你在引用书中内容时注明出处,我们将不胜感激,但是这不是必须的.
引用声明通常是包含了标题,作者,出版商和ISBN编码.
例如：“Real World Instrumentation with Python by J.M. Hughes. Copyright 2011 John M. Hughes, 978-0-596-80956-0.”

如果你发现自己对书中代码的使用有失公允,或是违反了前述条款,敬请通过 &lt;permissions@oreilly.com&gt; 与我们联系.



</t>
<t tx="zoomq.20110518221155.2699">Safari® Books Online
-------------------------------------------------------------------------------

.. note:: (~_~)

    - Safari在线丛书是项长期的数字图书馆计划，旨在帮助你您轻松地搜索超过7500科技和创意的参考书籍和视频，快捷找到您需要的答案。
    - 通过订阅，你可以翻阅所有网页，看我们的图书馆的任何在线视频。通过手机和移动设备阅读的书籍。查阅还末印刷的图书，并得到作者的手稿,反馈以及独家访问。复制并粘贴代码样本，组织您的收藏夹，下载章节，书签重点地段，创建笔记，打印页面，从节省多种时间中受益。
    - O'Reilly 已经将这本书上传到 Safari在线丛书。探索权限的用户可以直接查阅本书内容,公众可以查阅摘要内容. 从 http://my.safaribooksonline.com 可以免费注册.



</t>
<t tx="zoomq.20110518221155.2701">联系我们
-------------------------------------------------------------------------------

如果对本书有任何疑问和建议,敬请联系出版社 ::

    O’Reilly Media, Inc.
    1005 Gravenstein Highway North
    Sebastopol, CA 95472
    800-998-9938 (in the United States or Canada)
    707-829-0515 (international or local)
    707-829-0104 (fax)

本书发布有专门页面,收集有堪误,示例,以及其它信息:
    - http://www.oreilly.com/catalog/9780596809560/

想对本书发表评论或是有技术疑问,请发送电子邮件至::

    &lt;bookquestions@oreilly.com&gt;

有关O’Reilly更多的图书,会议,资源中心以及网站,请移移步:

    http://www.oreilly.com


</t>
<t tx="zoomq.20110518221155.2703">感谢
-------------------------------------------------------------------------------

我要感谢那些帮助我完成本书的人:
我的妻子，卡罗尔，和女儿，Seren，当我从办公室长时间消失，感谢他们的耐心和理解;
我的朋友和同事Michael North-Morris ,为他永久的乐观，
我的责任编辑，朱莉斯蒂尔，为她主动抓住我,鼓励我抓住为O'Reilly写书，
Rachel Head,勤奋的文字编辑，忍受我滥用英语,
以及所有在O'Reilly工作人员的友好帮助。

我还要感谢 LabJack Corporation 公司提供真实硬件使用,并慷慨地提供他们的时间和支持，
以帮助我确保它工作正常。
还要感谢珍妮史密斯安捷伦提供，他们的一些产品质量的照片。


</t>
<t tx="zoomq.20110523143238.2694">对外 py 服务资源</t>
<t tx="zoomq.20110523143238.2695"># 当前主力资源发布主机
</t>
<t tx="zoomq.20110523143238.2696">部署 zqrgen 时，发现 nginx 异常，所以!
zoomq@trac2ubuntu:/data/_src/uwsgi-0.9.7.2
$ python uwsgiconfig.py --build 
...
$ /opt/sbin/uwsgi --version
    uWSGI 0.9.7.2

$usr/bin/openssl version
    OpenSSL 0.9.8k 25 Mar 2009
$ agi libssl-dev
    ...
    libssl-dev 0.9.8k-7ubuntu8.6
    
zoomq@trac2ubuntu:/data/_src/nginx-1.0.2
# ./configure \
    --prefix=/data/nginx \
    --user=www \
    --group=www \
    --sbin-path=/data/nginx/sbin/nginx \
    --conf-path=/data/nginx/conf/nginx.conf \
    --pid-path=/data/nginx/run/nginx.pid  \
    --lock-path=/data/nginx/lock/nginx.lock \
    --error-log-path=/data/nginx/log/error.log \
    --http-log-path=/data/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --http-client-body-temp-path=/data/nginx/tmp/client_body  \
    --http-proxy-temp-path=/data/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/data/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/data/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/data/nginx/tmp/scgi_temp 
...
Configuration summary
  + using system PCRE library
  + using system OpenSSL library
  + md5: using OpenSSL library
  + sha1 library is not used
  + using system zlib library

  nginx path prefix: "/data/nginx"
  nginx binary file: "/data/nginx/sbin/nginx"
  nginx configuration prefix: "/data/nginx/conf"
  nginx configuration file: "/data/nginx/conf/nginx.conf"
  nginx pid file: "/data/nginx/run/nginx.pid"
  nginx error log file: "/data/nginx/log/error.log"
  nginx http access log file: "/data/nginx/log/access.log"
  nginx http client request body temporary files: "/data/nginx/tmp/client_body"
  nginx http proxy temporary files: "/data/nginx/tmp/proxy"
  nginx http fastcgi temporary files: "/data/nginx/tmp/fastcgi"
  nginx http uwsgi temporary files: "/data/nginx/tmp/uwsgi_temp"
  nginx http scgi temporary files: "/data/nginx/tmp/scgi_temp"

</t>
<t tx="zoomq.20110523143238.2697"></t>
<t tx="zoomq.20110601083753.2699">date,tI,tO,tC,tM,tF,tS
110503,4.00,4.75,2.00,1.75,3.50,8.00
110504,1.25,4.50,2.25,2.50,5.00,7.00
110505,0.00,1.75,4.75,3.00,6.00,7.00
110506,1.75,2.25,1.00,5.50,4.00,7.50
110507,1.50,3.50,0.00,7.25,4.00,8.50
110509,3.00,3.50,0.00,6.50,3.50,8.00
110510,5.00,2.75,2.25,4.50,2.50,7.50
110511,3.00,4.75,1.25,3.25,5.50,7.00
110512,1.50,7.25,3.25,4.00,4.00,6.50
110513,0.00,4.75,0.00,6.75,5.50,7.00
110516,0.00,6.00,0.00,4.50,3.50,7.00
110517,0.00,5.50,1.00,4.50,4.25,7.50
110518,2.75,3.25,1.50,4.00,3.75,8.00
110519,0.00,4.00,3.50,4.50,4.00,8.00
110520,2.25,2.50,0.00,5.75,5.50,7.50
110521,1.00,3.25,1.50,6.75,4.00,7.00
110523,0.00,5.35,1.75,4.60,4.00,7.50
110524,2.50,1.50,0.30,6.75,5.00,7.00
110525,0.00,4.25,1.00,5.75,5.00,7.00
110526,1.00,3.50,4.75,5.50,0.50,6.00
110527,0.00,3.75,0.00,8.75,4.00,7.50
110530,1.00,1.75,2.00,7.25,5.00,7.50
110531,1.00,2.00,2.25,6.75,3.50,7.50



</t>
<t tx="zoomq.20110705091223.2700">odate,tI,tO,tC,tM,tF,tS
110601,0.00,2.75,1.00,6.00,5.75,10.0
110602,1.00,2.00,3.00,8.50,1.00,6.50
110603,1.00,2.50,2.00,6.50,4.00,7.50
110607,1.75,1.75,0.00,8.25,5.00,7.50
110608,0.00,0.00,0.00,3.00,13.0,8.00
110609,2.00,3.00,2.00,4.00,1.50,11.0
110610,0.50,4.00,0.75,3.75,6.75,8.25
110613,1.00,3.50,1.00,6.25,4.00,8.00
110614,3.25,2.75,0.00,4.75,5.25,8.00
110615,1.00,2.50,1.50,6.00,6.00,8.00
110616,0.00,3.25,0.75,6.50,6.00,7.00
110617,1.50,2.25,2.00,5.00,4.00,7.50
110620,1.00,2.50,0.00,8.50,1.00,7.50
110621,0.00,3.00,1.00,8.00,1.00,7.50
110622,0.00,3.50,1.00,7.00,5.00,7.50
110627,2.00,1.00,0.50,6.00,5.50,9.50
110628,1.00,1.50,2.50,5.50,5.75,6.00


</t>
<t tx="zoomq.20110709131924.2700">110725+w2 ZQ:
    + .5d CVS 数据重构
    + 1d 大图片下载
    + 2d 网页信息分析
    + 1d 文档
110713~   ZQ 完成自动化抓取/分析/入库和提取API 的设计,工作量估计:
    '+ .5d  API 设计
    + .5d  架构 设计
    '+ 1d  MongoDB 试用
    + 1d  #Spider框架对比
        gcrawler.py
        猛禽 raptor.zh@gmail.com
    + 1d  vancl 页面元素分析
    + 1d  fadpop 原型
    + 1d  原型调试
    + .5d  #文档
    ~ 6.5d 左右完成可演示原型

</t>
<t tx="zoomq.20110709131924.2701">db-&gt;docfad
collec-&gt;items

女装商品抓取:
    item
        _id
        uri
    + 背景 bg:
       - com   电商名
       - brand  品牌名
       - sid    编号
       - store  库存数量
       - sale   已售出
       - prix   价格(原价+各种优惠价格)
       - agio   折扣
       - vip 
    + 属性 attr :
       - name   品名
       - class (分类)
       - desc   描述
        - txt   读本描述
        - size   尺寸(码表)矩阵数据...
        - others    其它各种属性:
            
        '''
        - cut   剪裁：常规款
        - design    花色：素色
        - detail    细节：前胸烫钻,门襟五爪扣
        - series    系列：商务系列,休闲系列
        - arm   袖型：短袖
        - neck  领型：单层领,翻领
        '''
       - color  颜色
       - 图片(根据内容分类)
        #DBRef 指向各个 GFS 对象
        - filename  文件名
        - showas  thumb|mid|big
        - asmain    true|false
        - size 长x宽
        In [12]: import Image
        In [13]: im = Image.open("/home/zoomq/workspace/yuike/stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang/2010_3_4_15_54_18_5529.jpg")
        In [14]: im.size
Out[14]: (400, 400)

       - apt    aptitude 材质
        - cons  constituent 成分：100%棉
        - wash  洗涤要求
            - #列表，所有标志图片？
    + comments 评议:
        - feel 很舒服（45%）、透气性适中（53%）、厚度适中（87%）、重量适中（80%）、材质适中（57%）、样式很漂亮（48%）
        - unit  综合
        - noma  外观
        - bask  舒适
        - size 尺码 
            # 2% 的用户认为实际尺码[偏大]
            # 66% 的用户认为实际尺码[合适]
            # 31% 的用户认为实际尺码[偏小]
        - taker 购买者评论
            - total 共2949条
            - comment
                - name
                - date
                - cont
                - hold  拥有的商品描述
            - shiner    晒单图片/文字
                - total 共7条
                - shine
                    - foto DBref
                    - name
                    - date
                    - cont
       - 搭配商品
       </t>
<t tx="zoomq.20110709131924.2702">#110717 vancl cvs-&gt;大图url 列表
wget -c -nv -P 20110709_nvzhuang_bigpic --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i taobao_Week_20110709_nvzhuang_bigpic.uri

wget -c -nv -P 20110709_nvzhuang_htm --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i taobao_Week_20110709_nvzhuang_htm.uri

使用 
python anabigpic.py ../../_stuff/4vancl/taobao_Week_nvzhuang/20110709_nvzhuang_bigpic &gt; 20110709_nvzhuang_bigpic.dl.uri
然后:
wget -x -c -nv  --cookies=off  -t 3 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -i 20110709_nvzhuang_bigpic.dl.uri</t>
<t tx="zoomq.20110709131924.2703">人体工学电脑椅选购建议 | 潘魏增
http://panweizeng.com/chairs.html

兴豪正品 吐血价 ergohuman-B01 金豪B01 CS 亚梭111杭州包快递-淘宝网
    http://item.taobao.com/item.htm?id=2513676658
    3000

1800元超高性价比人体工学电脑椅评测 | 电脑椅,转椅,电脑椅品牌推荐
    http://www.diannaoyi2.info/rentigongxuediannaoyipingce.html
    SL-B3 金豪B01正品山寨 2000
        http://item.taobao.com/item.htm?id=10818151961
    供应全国各地网椅老板椅SL-B3-广州一铭办公家具有限公司
        http://gzyiming.b2b.bestb2b.com/b2bproduct3405734.htm
    可以直购

皇冠信誉 2011最新款DXRACER F88高级电脑椅/办公椅/躺椅/转椅-淘宝网
    http://item.taobao.com/item.htm?id=1368574010
    1200


</t>
<t tx="zoomq.20110711090727.6882">- 所有成员配置统一的 MacBook pro(从HK订购直送)
    - 因为 MacBook(Z0JQ;4G/500G)要HK$ 9,368 ~ RMB:7869.19
    - 同时 MacBook Pro(Z0LY;4G/500G)也就HK$ 9,498 ~ 7953.12
    - 只差100HKS(即84RMB), 为什么不要更加漂亮的?

MacBook
    * RMB 9,795
    ~ HK$ 9,368
    * 编号: Z0JQ

配置
    * 2.4GHz Intel Core 2 Duo
    * 4GB 1066MHz DDR3 SDRAM (2x2GB)
    * 500GB Serial ATA 驱动器 (5400 rpm)
    * KEYBOARD/USERS GUIDE,K87 -CHN

    * SuperDrive 8 倍速 DVD+/-R DL/DVD+/-RW/CD-RW
    * Mini DisplayPort 至 VGA 转接器
    * COUNTRY KIT,K87 -CHN


13 英寸 MacBook Pro
    * RMB 9,621
        HK$ 9,698
    * 產品編號: Z0LY

配置
    * 2.3GHz 雙核心 Intel Core i5
    * 4GB 1333MHz DDR3 SDRAM - 2x2GB
    * 500GB Serial ATA 硬碟 @ 5400 rpm
    
    * SuperDrive 8x (DVD±R DL/DVD±RW/CD-RW)
    * Mini DisplayPort to VGA Adapter
    * Country Kit

13 吋 MacBook Pro
    # HK$ 11,258
    ~ CNY 9569.3
    * 產品編號: Z0LY
配置
    * 2.3GHz 雙核心 Intel Core i5
    * 8GB 1333MHz DDR3 SDRAM - 2x4GB
    * 500GB Serial ATA 硬碟 @ 5400 rpm

    * SuperDrive 8x (DVD±R DL/DVD±RW/CD-RW)
    * Mini DisplayPort to VGA Adapter
    * Country Kit


</t>
<t tx="zoomq.20110711090727.6883">- 服务器,计划内网4台,外网1台先,用途:
    + 外网(代号:Li) 负责全应用的测试部署,以后转为应用/存儲均衡机之一
    + 内网(代号:Be) 承担日常自动化开发支撑,具体的:
        + Be0 持续集成/测试/发布机(对外联系/代理)
        + Be1 代码仓库/任务追踪/SCM
        + Be2 数据仓库/spider 管理
        + Be3 数据备份机(代码/应用/团队资料...)
    采购建议:
        - 都统一一个廠商,以便长期优惠(Dell 硬件价格最低,服务价格较高,在IBM/HP之间)
        - 外网,先用 PowerEdge R310 机架式服务器
            + RMB21,171.77 配置16G/500Gb(SATA)*4 作RAID1+0
        - 内网,先用 Vostro 230微塔式台式机
            + RMB4,362 配置4G/500GbSATA
            # &gt;8G 才有amd64 的威力!
            + 另外采购若干西部数据（Western Digital）2TB SATAII 3.5寸台式机硬盘;京东价：569(平均: 0.28/Gb最便宜)
            + 配套的18.5宽屏就配置为开发人员的第2屏幕以便编程
</t>
<t tx="zoomq.20110711090727.6884">dreamhost SSH 一年 700 RMB

(17:49:26) 小白}khsing: 
公司用的话还是linode好一些
(17:48:56) 小白}khsing: 
我目前用photonvps $6/月</t>
<t tx="zoomq.20110711214730.2707">du -hs *
44M     4m18
260M    4moonbasa
3.5M    channel.vancl.com
1.9G    item.vancl.com
24K     mkt.vancl.com
108K    news.vancl.com
24M     s.vancl.com
4.7G    www.vancl.com

</t>
<t tx="zoomq.20110711214730.4102">http://leankitkanban.com/
P:  Zq@sns
   +fadpop@gmail.

u行:Flow:
    BackLog
    Ready
    WiP
    Test
    Livin
列:分类:
    Suport
    Dialy
    Proj*
    outplanned
Size:
    .5d XS
    1d  S
    2d  M
    3d  L
    4d  XL    
    5d  XXL
    &gt;5d XXXL


</t>
<t tx="zoomq.20110713090346.2709">@path /home/zoomq/workspace/yuike/fadpop-src

是也乎,是也乎,服务端...</t>
<t tx="zoomq.20110714001632.2710">@path api
zq：关于如何从商家获得返利佣金，请参考：51fanli，qq返利，360返利等网站，通过查看他们的导向商家URL，一看便知，进而可以找到电商的WEB API列表，一般都很简单。


</t>
<t tx="zoomq.20110714090951.4108">#110708 进入!
fadpop
    fast apt daemon for platform of ply
    交易快速敏捷守护平台

visualseawind@gmail.com 海峰
周君亮 jesuzjl18@gmail.com
胡磊磊 huleilei@gmail.com
王刚  gang.wang.china@gmail.com

</t>
<t tx="zoomq.20110714090951.5508">梦芭莎: 网站联盟: 注册
http://union.moonbasa.com/register.aspx
    U:  fadpop
    P:  Fad@m00n
#分类:
    图片链接:
    &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/" target="_blank"&gt;&lt;img src="http://union.moonbasa.com/adpic?e=176" width="136" height="240" border="0" /&gt;&lt;/a&gt;
    文字链接:
    &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/010204-1-20-0.html" target="_blank"&gt;dddd&lt;/a&gt;
商品:
     &lt;a href="http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=fadpop&amp;url=http://www.moonbasa.com/p-010111111.html" target="_blank"&gt;经典集中豹纹蝶形一片式挺拔性感文胸&lt;/a&gt;

#链接跟踪参数说明
Moonbasa根据链接中的参数，判断联盟会员的来源。
    Moonbasa提供2个可接受跟踪参数的页面，分别是首页和跳转页。
参数1：a_id，指定mbs值
参数2：other，指定联盟帐号名
参数3：Url，指定要跳转到的页面

如果联盟帐号为user1，要跳转的页面地址为：
http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004
则指定source值的地址链接应该为：
http://shopping.moonbasa.com/rd/rd.aspx?a_id=mbs&amp;other=user1&amp;url=http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004

如果你想推广其它产品页面，只要把"http://www.moonbasa.com/Product/Product_Detail.aspx?StyleId=WX0908004"换成您自己指定要跳转到的页面地址就可以了。
</t>
<t tx="zoomq.20110714090951.5509">新手必读：网站联盟合作伙伴初级帮助教程下载 - VANCL论坛
    http://bbs.vancl.com/showtopic-191551.aspx
'''
投放Vancl广告，赚取高额佣金！
    如果您每月为凡客诚品进行推广获得的推广服务费达到人民币伍仟元（包括5000元）以上，则您必须与凡客诚品签署书面联盟协议后方可进行结算。如有问题请联系我们：E-mail：unionA@vancl.cn
个人网站联盟推广方法：
   1、网站会员链接推广：
      登录联盟账户--获取广告代码链接--投放广告--用户通过链接购买--赚取佣金
   2、网店会员代客下单：
      登录联盟账户---绑定购买账户--下载数据包--通过淘宝助手上传--用户挑选产品-- 代客下单--赚取佣金
'''
http://union.vancl.com/register_webUnion.aspx
    U:  fadpop
    P:  Fad@un10n

</t>
<t tx="zoomq.20110714090951.5510">绑定凡客购物账户教程：

1. 注册凡客购物账户http://www.vancl.com/login/Reg.aspx
2. 绑定填写刚注册的购物账户信息http://union.vancl.com/Agent_BuyToVancl.aspx
3. 完成绑定后，就可通过代客下单入口进行代客下单

绑定: zoomquiet@gmail.com

</t>
<t tx="zoomq.20110714090951.5511">    * 总数据包：包含凡客诚品官网上所有在售的商品信息，适合第一次开始售卖凡客诚品商品的网店
    * 新增数据包：包含最近一周内新上架的产品信息，适合已经在经营凡客诚品商品的网店
    * 商品每天的上下架信息，需要在联盟账户 — 信息查询 — 查询上下架信息里查询
</t>
<t tx="zoomq.20110714090951.5512">网站专用
    轻松链
        在轻松链中您可以找到适合自己网站尺寸的图片广告，将代码黏贴到自己网站即可。
    自定义链接
        如果在轻松链里您没有找到适合的图片广告，或者想制作一个的文字链接，那么就来制作自定义的链接吧
    商品XML文件下载
        此文件为VANCL网站商品信息，主要向一些第三方网上商城（淘宝店铺除外）提供全面及时的商品信息
onsale_products_20110713.xml 92.6Mb
'''
XML节点信息做一个详细的介绍: 
1,products为XML的根节点.product节点为单一商品 
2,productCode为商品编号.name为商品名称 
3,url 商品在vancl上的详细页 
4,photos 商品图片链接地址.photo为photos子节点提供具体的链接地址 
5,currentPrice 当前价格.originalPrice 原始价格 
6,category 分类.firstCategory 一级分类.secondCategory 二级分类. 
7,color 颜色.sizes 尺寸 
8,isSpecial 是否特例.description 商品描述
'''
    手机平台链接
        在这里，您可以制作符合手机浏览的图片链接或文字链接
        &lt;a href="http://m.vancl.com/style/StyleHome/0/0123708/0/.mvc?guid=918e3afadc0e48d381698d4baefc1bf4&amp;source=fadpop" target="_blank"&gt;dfadpop&lt;/a&gt;
</t>
<t tx="zoomq.20110714090951.5513">
&lt;div class="pic_ct"&gt;
    &lt;ul&gt;
        &lt;li&gt;
            &lt;div class="jqzoom"&gt;
                &lt;img id="bigimg" src="http://images.moonbasa.com/ProductImg/Large/0321112720L01.jpg"
                        alt="假日风情宽条纹T恤衫" jqimg="http://images.moonbasa.com/ProductImg/HUGE/0321112720H01.jpg" /&gt;
                &lt;img src="http://images.moonbasa.com/ProductImg/HUGE/0321112720H01.jpg" onerror='javascript:$("#bigimg").attr("jqimg","");' style="display:none" /&gt;
直接是大图！
            &lt;/div&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;</t>
<t tx="zoomq.20110714090951.5514">&lt;div class="fangdaArea"&gt;
    &lt;p class="fangda"&gt;
        &lt;img src="//images.vancl.com/Others/2010/8/20/fangda.gif" alt="放大查看" /&gt;&lt;span&gt;&lt;a
            href="/Styles/BigImg.mvc?ProductCode=0088416&amp;ProductName=%e7%bb%8f%e5%85%b8%e7%99%be%e6%90%ad%e7%a9%ba%e8%b0%83%e8%a1%ab+%e9%bb%91%e8%89%b2"
            target="_blank"&gt;放大查看&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
指向大图:
    ProductCode=0088416
    http://item.vancl.com/Styles/BigImg.mvc?ProductCode={{商品编号}}

而最终实际的:
    同名，不同目录进行生成
    http://images.vancl.com/product/0/0/0/0002655/Small/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/mid/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/Big/2010_7_2_16_44_0_354.jpg

相关颜色变化
&lt;div class="selColor"&gt;
    &lt;ul&gt;
        &lt;li
            name="productcode=0088404&amp;point=0"  title="粉蓝色" &gt;
直接指向相关的最终产品页!
    - http://item.vancl.com/{{productcode}}.html
            &lt;div class="colorBlock" name="False"&gt;
                &lt;img src="http://images.vancl.com/product/0/0/8/008840/0088404.jpg" 
                  alt="粉蓝色"
                 /&gt;
                 &lt;p&gt;
                    粉蓝色&lt;/p&gt;
            &lt;/div&gt;
        &lt;/li&gt;

</t>
<t tx="zoomq.20110714090951.6916">735250855 
參考	8162799701 
提貨日期	12 Jul 2011 
目的地	CHEK LAP KOK 
送貨日期	 
簽名	 
日期	時間	地點	貨件狀態
14 Jul 2011 	06:23:00 	Kwai Fong Depot 	Shipment Arrived In Warehouse 
14 Jul 2011 	06:20:00 	Kwai Fong Depot 	Late Shipment Data From Sender. Follow Up Action Underway. 
14 Jul 2011 	06:15:00 	Kwai Fong Depot 	Held Awaiting Correct Address. Follow Up Actions Underway. 
14 Jul 2011 	01:13:39 	Kwai Fong Depot 	Shipment Received At Destination Depot. 
12 Jul 2011 	19:13:33 	Pudong International Airport 	Shipment Received At Transit Point. 
12 Jul 2011 	18:55:16 	Pudong International Airport 	Shipment In Transit. 
12 Jul 2011 	18:32:00 	Shanghai 	Shipment In Transit. 
12 Jul 2011 	18:27:37 	Shanghai 	Shipment In Transit. 
12 Jul 2011 	17:17:58 	Shanghai 	Shipment Collected From Sender. 
</t>
<t tx="zoomq.20110714090951.6917">Wordnik OSS tools
Take our tools-They work!!!

    SnapshotUtil
    Selectively snapshot in BSON

Index info too!
     IncrementalBackupUtil

Tail the oplog, stream to disk
     Only the collections you want!
     Compress &amp; rotate
     RestoreUtil

Recover your snapshots
    
Apply indexes yourself
     ReplayUtil
    Apply your Incremental backups



</t>
<t tx="zoomq.20110718091518.2721">@path crawl</t>
<t tx="zoomq.20110718091518.2722">@path analyzer

分析器</t>
<t tx="zoomq.20110718091518.2723">@path queue

</t>
<t tx="zoomq.20110718091518.2724">@path stuff
</t>
<t tx="zoomq.20110718091518.2725">@path test</t>
<t tx="zoomq.20110718091518.2726">默认32位的 mongod
$ /opt/bin/mongodb/bin/mongod
/opt/bin/mongodb/bin/mongod --help for help and startup options
Mon Jul 18 16:16:47 [initandlisten] MongoDB starting : pid=12526 port=27017 dbpath=/data/db/ 32-bit 

** NOTE: when using MongoDB 32 bit, you are limited to about 2 gigabytes of data
**       see http://blog.mongodb.org/post/137788967/32-bit-limitations
**       with --dur, the limit is lower

Mon Jul 18 16:16:47 [initandlisten] db version v1.8.2, pdfile version 4.5
Mon Jul 18 16:16:47 [initandlisten] git version: 433bbaa14aaba6860da15bd4de8edf600f56501b
Mon Jul 18 16:16:47 [initandlisten] build sys info: Linux bs-linux32.10gen.cc 2.6.21.7-2.fc8xen #1 SMP Fri Feb 15 12:39:36 EST 2008 i686 BOOST_LIB_VERSION=1_37
Mon Jul 18 16:16:47 [initandlisten] waiting for connections on port 27017
Mon Jul 18 16:16:47 [websvr] web admin interface listening on port 28017
Mon Jul 18 16:17:08 [initandlisten] connection accepted from 127.0.0.1:39516 #1
Mon Jul 18 16:18:01 [conn1] end connection 127.0.0.1:39516

</t>
<t tx="zoomq.20110718091518.2727">In [25]: print cvs[1].split()[0]
cvs[1].split("\t")[0]
    宝贝名称 : 经典双珠地短袖POLO衫（女款）
cvs[1].split("\t")[7]
    宝贝价格
cvs[1].split("\t")[9]
    宝贝数量
cvs[1].split("\t")[24]
    宝贝描述
    #复杂html 使用 w3m 输出为 txt再分析
cvs[1].split("\t")[35]
    新图片 2010_7_2_16_44_0_354:0:0:|;
cvs[1].split("\t")[40]
    商家编码 2010_7_2_16_44_0_354:0:0:|;
</t>
<t tx="zoomq.20110719082515.2728">w3m -dump taobao_1_20110709_intro.html</t>
<t tx="zoomq.20110719082515.2729">重新编译 Nginx 来发布-gridfs

# ./configure \
    --prefix=/usr/local/nginx \
    --user=nginx \
    --group=nginx \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --pid-path=/usr/local/nginx/run/nginx.pid  \
    --lock-path=/usr/local/nginx/lock/nginx.lock \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_realip_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --add-module=/home/zoomq/workspace/5git/nginx-gridfs
    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 


    --with-http_ssl_module \
    --with-openssl=../openssl-0.9.8q \ 

"
./configure     --prefix=/usr/local/nginx     --user=nginx     --group=nginx     --sbin-path=/usr/local/nginx/sbin/nginx     --conf-path=/usr/local/nginx/conf/nginx.conf     --pid-path=/usr/local/nginx/run/nginx.pid      --lock-path=/usr/local/nginx/lock/nginx.lock     --error-log-path=/usr/local/nginx/log/error.log     --http-log-path=/usr/local/nginx/log/access.log     --with-http_stub_status_module     --with-http_realip_module     --with-http_sub_module     --with-http_gzip_static_module     --add-module=/home/zoomq/workspace/5git/nginx-gridfs    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body      --http-proxy-temp-path=/usr/local/nginx/tmp/proxy      --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi      --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp     --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 
"

Nginx 发布:
        location /gfs/ {
           gridfs gridfs_fig field=filename type=string;
           mongo 127.0.0.1:27017;
       }

配合Py 写入：
In [1]: from pymongo import Connection
In [2]: import gridfs
In [8]: db = Connection().gridfs_fig
In [9]: fs = gridfs.GridFS(db)
In [10]: fs.put(open("/home/zoomq/workspace/yuike/stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang/2010_3_4_15_54_18_5529.jpg","rb").read()
    ,filename="2010_3_4_15_54_18_5529")
Out[10]: ObjectId('4e2532781702fe1dcd000002')


</t>
<t tx="zoomq.20110719082515.2733">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
&lt;&lt;changelog&gt;&gt;
VERSION = "cvsvancl.py v11.08.1"

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/cvsvancl.py /path/2/taobao_Week_20110709_nvzhuang.csv
                 |             +-- taobao 联盟用户的相关商品数据文件
                 +- 指向本脚本
        """ % VERSION
    else:
        CVS = sys.argv[1]
        loadall(CVS)

</t>
<t tx="zoomq.20110719082515.4236">'''vancl cvs data file push into Mongo
    - 单进单线,批量 vancl 联盟用户cvs数据导入
    - 自动抓取相关图片到 gFS
依赖:
    + PIL
    + PyMongo &gt; 1.11
数据处理链:
    cvsvancl.py -&gt; 获得基本商品信息和中等图片
    expuri.py -&gt; 导出大图以及商品页面url 列表
        + 使用 wget 批量下载
    anapichtm.py -&gt; 分析大图首页 生成大图下载链接和商品图片对应 dict 序列数据文件
        + 使用 wget 批量下载图片
    loadpics.py -&gt; 导入所有图片数据到对应的商品文档中
'''
</t>
<t tx="zoomq.20110719082515.4237">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110719082515.4238">#path
PATH_CVS_PIC = "/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

#   shell call
SHM = "/dev/shm/%s.html"
W3M = "w3m -dump %s"

# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNDB = Connection('localhost', 27017)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)

FAD = CONNDB[DBFAD][COFAD]
FAD.create_index("uri", unique=True)
GFS = gridfs.GridFS(CONNDB[DBGFS])
FSFILE = CONNDB[DBGFS].fs.files

@others

&lt;&lt;doc_foto&gt;&gt;
&lt;&lt;doc_item&gt;&gt;
</t>
<t tx="zoomq.20110719082515.4239">@run_time
def loadall(cvsfile):
    '''解析 taobao cvs 数据，摄取可用部分，填入 mongo
    '''
    cvsls = open(cvsfile).readlines()
    count = 0
    skiped = 0
    for idata in cvsls[1:10]:
        info = idata.split("\t")
        if 45 != len(info):
            skiped += 1
            print "^"*79, "SKIPED bad cvs data::", skiped
            break
        else:
            count += 1
            CF.LOG.debug("loaded:%s"% count)
            &lt;&lt;整理入collection&gt;&gt;
            print "+"*79, "loaded:", count

</t>
<t tx="zoomq.20110719082515.4240">def run_time(func):
    '''from http://www.oschina.net/code/snippet_74928_3896
        - 简单的计时装饰器
    '''
    def cal_time(*args):
        '''完成目标函式的运行计时
        '''
        # 记录开始时间
        start = time.time()
        # 回调原函数
        result = func(*args)
        passtime = time.time() - start
        # 在结果输出追加计时信息
        #print "\n\t&lt;!-- %s GONE~= %.5f ms --&gt;" % (func.__name__, passtime*1000)
        LOG.info("\n\t%s() RUNed~ %.5f ms" % (func.__name__, passtime*1000))
        # 返回结果
        return result
    # 返回重新装饰过的函数句柄
    return cal_time

</t>
<t tx="zoomq.20110720091129.2763">= fadpop =
    ~时尚流行
    ~fast apt daemon for platform of ply
    ~不间断供应平台的快速敏捷守护

== 原则 ==
趋向 UNIX 编程艺术中揭示的原则:
    + KISS
    + 宽进严出
    + 尽可能文本流化
    + 小即是美!

== Changelog ==

110713  ZQ 完成自动化抓取/分析/入库和提取API 的设计,工作量估计:
    + .5d  API 设计
        - done 110715 URI 设计
    + .5d  架构 设计
        - done 110718 数据/网络设计
    + 1d  MongoDB 试用
    + 1d  Spider框架对比
        - CANCEL
    + 1d  vancl 页面元素分析
        - 110719 doing 联盟的 cvs 数据解析
    + 1d  fadpop 原型
    + 1d  原型调试
    + .5d  文档
    ~ 6.5d 左右完成可演示原型
</t>
<t tx="zoomq.20110720091129.2765">= fadpop分析器 =

== TODO ==

数据源分析:
- 不同电商的网页数据识别和过滤
    - vancl
    - moonbasa
    - m18

运营分析:
- 用户访问内容统计分析

运行性能分析:
- MongoDB 运行时效率分析
- GridFS 运行时响应效率</t>
<t tx="zoomq.20110720091129.2767">= fadpop爬虫 =

== TODO ==

- 对比爬虫框架的学习/开发/运维效率
- 定制框架,结合现行资源,架构可监控的持续数据巡查的 Spider
    - 分布式
    - 多进程
    - 并发
    - MQ協同
</t>
<t tx="zoomq.20110720091129.2769">= fadpop队列 =

== TODO ==

- 对比 MQ 产品特性,学习/开发/运维效率
- 设计 fadpop 多功能MQ 总线,容纳:
    - 分布式 logging
    - 分布式 task queue
    - 分布式 worker
    + 包含自身工作统计</t>
<t tx="zoomq.20110720091129.2771">= fadpop持测 =

== TODO ==

- 对比 Unit test 框架, 学习/开发/运维效率
- 设计 fadpop 持续测试方案 包含:
    - 各个功能组件的自动化测试 和 统计汇报
    - demo 环境的性能测试
    - Mongo 的分布式性能分析

</t>
<t tx="zoomq.20110720091129.2773">= fadpop原料 =
收集各种 fadpop 所需组件的探索性代码


== Changelog ==

110727 imgrilus.py 创建:
    - 积累 Mongo 业务用代码
    - 将以往的高复用代码聚集到 fadutil.py 模块中

110726 mongo*.py 创建:
    - 进行 mongo-log 的测试和探索

110719 cvsvancl.py 创建:
    - 单进单线,批量 vancl 数据导入
    - 自动抓取相关图片到 gFS
Fiddler
</t>
<t tx="zoomq.20110720091129.2775">def _popen(cmdline):
    '''通用外部工具调用包装
    '''
    subp =  subprocess.Popen(cmdline
        ,shell=True
        ,stdin=subprocess.PIPE
        ,stdout=subprocess.PIPE
        ,stderr=subprocess.PIPE)
    errlis = subp.stderr.readlines()
    errstr = "".join(errlis)
    outlis = subp.stdout.readlines()
    outstr = "".join(outlis)
    return errlis, errstr, outlis, outstr



</t>
<t tx="zoomq.20110720091129.2777">= fadpop 接口 =
逐步测试和发布接口用
api.yuike.com

== TODO ==

- 先CLI 可查询!
    - 通过 mongoose 直接提供 http 接口
    - 或是用 bottle 原型一个先

== Changelog ==

</t>
<t tx="zoomq.20110720193936.2772">def _pick_table_data(txt):
    '''处理 w3m dump 出来的页面 中表格 片段 成为 Mongo 的多重数组:
        [[,,,]
        ,[,,,]
        ,[,,,]
        ]
    '''
    attr_descs_others = {}
    attr_desc_size = []
    attr_desc_txt = ""
    besize = 0
    for line in txt:
        if "[]" in line or "[service" in line:
            continue
        elif "─┼─" in line or "┌─" in line or "└─" in line:
            continue
        elif "  •" in line:
            #as attr.desc.cut...
            desc = line.split("•")[1].split("：")
            attr_descs_others[desc[0]] = ":".join(desc[1:])
        elif "尺码" in line:
            besize = 1
            attr_desc_size.append(line.replace("│", "").split())
        else:
            if 0 == besize:
                #as attr.desc.txt
                attr_desc_txt += line
            else:
                #as attr.desc.size
                if 2 &lt; len(line):
                    # cancel null data lines
                    attr_desc_size.append(line.replace("│", "").split())
    return attr_desc_txt, attr_descs_others, attr_desc_size


</t>
<t tx="zoomq.20110720193936.2773"># VANCL esp.
TPL_VANCL_URITEM = "http://item.vancl.com/%s.html"
TPL_VANCL_URIPIC = "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s"
'''esp. base images.vancl.com
    http://images.vancl.com/product/0/0/0/0002655/Small/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/mid/2010_7_2_16_44_0_354.jpg
    http://images.vancl.com/product/0/0/0/0002655/Big/2010_7_2_16_44_0_354.jpg
'''
TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/Small/%(fotoid)s.%(imgex)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/mid/%(fotoid)s.%(imgex)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(goodsid)s/Big/%(fotoid)s.%(imgex)s"
</t>
<t tx="zoomq.20110720193936.2774">DOC_ITEM = {"uri":""
    #, "com":"VANCL"                 # 电商名
    , "brand":"VANCL 凡客诚品"      # 品牌名
    , "sid":""                      # 编号
    , "store":0                     # 库存数量
    , "saled":0                     # 已售出
    , "prix":""                     # 价格(原价+各种优惠价格)
    , "agio":""                     # 折扣
    , "vip":""                      # 优惠价格
    , "attrs":{"name":""            # 品名
        , "class":""                # 分类
        , "color":""                # 顔色
        , "cons":""                 #   constituent 成分
        , "wash":""                 # 洗涤要求
        , "descs":{                 # 描述
            "txt":""                # 读本描述
            ,"size":[]              # 尺寸(码表)矩阵
            ,"others":{}            # 其它各种属性
            }
        ,"fotos":[]                 # 图片集，DBref-&gt;DBGFS.fs.files.
        } # attrs
    ,"comments":{                   # 评议集
        "feel":""                   # 整体很舒服（45%）、透气性适中（53%）...
        , "unit":""                 # 綜合
        , "noma":""                 # 外观
        , "bask":""                 # 舒适
        , "size":""                 # 尺码 2% 的用户认为实际尺码[偏大],,,
        , "taker":{                 # 购买者评论
            "total":0               # 留言总数
            , "comment":{           # 评注
                "name":""
                , "date":""
                , "cont":""
                , "hold":""         # 拥有的商品描述
                }# comment
            } # taker
        , "shiner":{                # 晒单图文
            "total":0               # 总数
            , "shine":{             # 晒单
                "name":""
                , "date":""
                , "cont":""
                , "foto":[]         # 图片集，DBref-&gt;DBGFS.fs.files.
                }# comment
            } # taker
        }   # comments
    }   # TPL

</t>
<t tx="zoomq.20110720193936.2775">DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
'''取用
from pymongo import Connection
import gridfs
fs = Connection('localhost', 27017).static_files
fs = gridfs.GridFS(fs)

In [71]: gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0])
Out[71]: &lt;gridfs.grid_file.GridOut object at 0x91adf8c&gt;

就可以:
    gfs.get(v.find_one({},{"attrs.fotos":1,'_id':0})['attrs']['fotos'][0]).uri

'''
</t>
<t tx="zoomq.20110721084347.2775">import os
import sys
import time
from copy import deepcopy as copy
import subprocess
import traceback
import logging

import Image

from pymongo import Connection
from pymongo import errors as ERR
import gridfs

from mongolog.handlers import MongoHandler

# import original mod.
sys.path.append(os.path.abspath("../../"))
from common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110721084347.2776">    location  /thumb/
    {   
      gridfs        files root_collection=thumbnail field=filename type=string;
      mongo         192.168.0.11:27017;
      error_page    404 =201 /thumb.php?f=$request_filename;
      expires       30d;
    }
    ... ...
  }

注意 error_page 这一行中的 =201，它的作用是将404的Status Code改变为201，当然您可以写成 =200，我们这里用201的目的是为了通过 HTTP Status Code来判断是否为缓存中读到的文件
</t>
<t tx="zoomq.20110721084347.2777"># 因为 Borg(),所以,要对单例类的对象进行复制,否则 insert() 知道是同一对象不进行插入的...而且要进行深复制!否则...
item = copy(CF.DOC_ITEM)
#print "id(CF.DOC_ITEM)",id(CF.DOC_ITEM),"id(item)",id(item)
#print "\n\t\t attrs.fotos:", item["attrs"]['fotos']
#print id(item["attrs"]['fotos'])
sid = info[40][1:-1]
item["sid"] = sid
item["uri"] = CF.TPL_VANCL_URITEM % sid
item["prix"] = info[7]
item["store"] = info[9]
item["attrs"]['name'] = info[0][1:-1]

attr_desc_txt, attr_descs_others, attr_desc_size = _pick_by_w3m(info[24])

item["attrs"]['descs']['txt'] = attr_desc_txt
item["attrs"]['descs']['size'] = attr_desc_size
item["attrs"]['descs']['others'] = attr_descs_others

print "item.uri::", item["uri"]
# DBref -&gt; GFS foto collections 无法跨DB 进行!??! 使用普通硬关联
foto_id = _put_img_gfs(info)
if foto_id in item["attrs"]['fotos']:
    pass
else:
    item["attrs"]['fotos'].append(_put_img_gfs(info))
try:
    this_id = CF.FAD.insert(item, safe=True)
    print "CF.FAD.insert :: ", this_id
except ERR.DuplicateKeyError:
    print "\t safe=True BROKENNN! by pymongo.errors.DuplicateKeyError"
    continue


</t>
<t tx="zoomq.20110721084347.2779">@run_time
def _put_img_gfs(info):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    sid = info[40][1:-1]
    foto_filename = info[35].split(":")[0][1:]
    dirurl = "/".join(sid[:3])
    goodsid = sid
    # 处理,可能的其它图片格式现象
    &lt;&lt;可能的其它图片格式&gt;&gt;
    imguri = CF.TPL_VANCL_MFOTO % locals()
    #print fotoid, imguri
    main_mid_pic = "%s/%s.jpg"% (CF.PATH_CVS_PIC, info[35].split(":")[0][1:])
    if os.path.exists(main_mid_pic):
        if CF.GFS.exists({'uri':imguri}):
            img_id = CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            print imguri, "&lt;------ HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            return img_id
        else:
            img = CF.GFS.put(open(main_mid_pic,'rb').read()
                , uri = imguri
                , filename = fotoid
                , imgtype = imgex
                , showas = 'mid'
                , asmain = True
                , size = Image.open(main_mid_pic).size
                )
            return img
    else:
        print "the %s NOT exists!!" % main_mid_pic
        sys.exit(1)





</t>
<t tx="zoomq.20110721084347.2781">def _pick_by_w3m(htm):
    '''动用 w3m 集中处理 vancl cvs 数据中的html 片段
    '''
    try:
        shmtmp = CF.SHM % (str("%.4f"% time.time()))
        open(shmtmp,"w").write(htm)
        dumptxt = CF.W3M % shmtmp
        err_li, err_st, out_li, out_st = _popen(dumptxt)
        os.remove(shmtmp)

        return _pick_table_data(out_li)

    except:
        print "_pick_by_w3m() BROKENNN!\n\t", traceback.print_exc()
        sys.exit(1)





</t>
<t tx="zoomq.20110725090916.4180">try_other_img_type = foto_filename.split(".")
if 1 &lt; len(try_other_img_type):
    fotoid = try_other_img_type[0]
    imgex = try_other_img_type[1]
else:
    fotoid = foto_filename
    imgex = 'jpg'
</t>
<t tx="zoomq.20110726202222.2796">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "mongoltry.py v11.07.26"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s usage::
$ python /path/2/mongoltry.py 'test message...'
                 |             +-- 测试用消息
                 +- 指向本脚本
将每一秒钟给出一个测试消息
        """ % VERSION
    else:
        mes = sys.argv[1]
        logit(mes)

</t>
<t tx="zoomq.20110726202222.2798">import os
import sys
import time
import traceback
from pymongo import Connection
from pymongo import errors as ERR

import logging
from mongolog.handlers import MongoHandler
</t>
<t tx="zoomq.20110726202222.2804">def logit(mess):
    '''
    '''
    log = logging.getLogger('try')
    log.setLevel(logging.DEBUG)

    log.addHandler(MongoHandler.to(db='mongolog', collection='log', host='127.0.0.1', port=27117,))

    loop = 0
    while 1 == 1 :
        time.sleep(1)
        log.debug(mess)
        log.debug("1 - debug message")
        log.info("2 - info message")
        log.warn("3 - warn message")
        log.error("4 - error message")
        log.critical("5 - critical message")
        loop += 1
        print "log.debug() ~", loop

</t>
<t tx="zoomq.20110726202222.2815">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "mongolisten.py v11.07.26"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    if 5 != len(sys.argv):
        print """ %s usage::
$ python /path/2/mongolisten.py host port db collection
                 |                |    |   |    +-- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
将每一秒钟给抓出尾消息
        """ % VERSION
    else:
        #host = sys.argv[1]
        #port = sys.argv[2]
        #db = sys.argv[3]
        #coll = sys.argv[4]
        db = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        print db.collection_names()
        coll = db[sys.argv[4]]
        print coll.count()
        cursor = coll.find(tailable=True)
        while cursor.alive:
            try:
                doc = cursor.next()
                print "%s [% 8s](%s) %s by:%s @%s %s %s l:%s" % (doc["time"]
                    ,doc["level"]
                    ,doc["name"]
                    ,doc["msg"]
                    ,doc["user"]
                    ,doc["host"]
                    ,doc["file"]
                    ,doc["funcname"]
                    ,doc["line_no"]
                    )
            except StopIteration:
                time.sleep(1)

</t>
<t tx="zoomq.20110726202222.2816">import os
import sys
import time
import traceback
from pymongo import Connection
from pymongo import errors as ERR

import logging
from mongolog.handlers import MongoHandler
</t>
<t tx="zoomq.20110727085946.4249">@path ch08</t>
<t tx="zoomq.20110727085946.4250">@language rest

Getting Started
============================================


.. include:: 0_intro.rst


.. toctree::
    :maxdepth: 2

    1_defining_project.rst
    2_requirements.rst
    3_designing_software.rst
    4_functional_testing.rst
    5_implementation.rst
    6_summary.rst
    7_suggested_reading.rst


</t>
<t tx="zoomq.20110727085946.4251">@language rest
.. include:: ../LINKS.rst


.. epigraph::

    The secret of getting ahead is getting started. The secret
    of getting started is breaking your complex overwhelm-
    ing tasks into small manageable tasks, and then starting
    on the first one.

    领先的秘密是得开始干,开始干的秘密在于放弃复杂设计转变成一系列可受控的小任务,
    并按递这就开干!

    —Mark Twain



在这一章中，我们将继续遭遇那些在各种规模的工程中被反复证明过的东西.
对，没错，我说的就是计划,这包含需求分析,以及对应的设计说明,文档化对可预见的各种问题的测试规划,
然后用这些测试来验证是否吻合设计要求.
要知道,缺乏或不明确的需求设计一向是软件项目失败的主要原因,
另一大因素就是测试不足.


对于小项目，如果没按期交付成果当然是恼人的，但可能不算是个大灾难.
不过，对于大项目其结果可能就是灾难性的了.
对于逻辑复杂,而且健壮性又有要求的程序,
在开始之前确实的需求分析,并构筑良好的测试环境就是战略需求.
另外,还要注意对于仪器软件,必须面对现实世界中可能非常严重的不确定,模糊,蠕变和其它各种意外,
这时,有个明确的技术路径和良好定义的目标就非常关键了.


这一章的目的很简单:我想让你成功.
我假设你已可以很好完成一些小软件.
尽管它们本身可能很简单，但却能成为其它工程的关键组件.
它或许是实验室仪器的控制器，或许是研究过程中的数据采集系统，又或许是世界级高尔夫球场的洒水控制器.
不管是什么，如果它不能工作，或者可靠地工作，可能就意味着时间,收入的损失,或是无用数据.
甚至更糟.


多年以来的经历使得我逐渐确信需求分析是十分必要的,
我不认为任何人坐在键盘旁边猛敲一会就能写出没有 bug，功能完善的软件来.
其实，我遇到过很多人真信那是可能的(他们当中的许多人真的是心里有数的).
更糟的是，有的人不明白学校编程课里的那点小练习不经过大改是没法成为真正的应用程序的.
也有一些人没法明白为什么他们的软件不按照他们(或者客户)所预期的那样运行，
不明白它为什么充满了 bug. 
其实那完全可以避免的.



我希望这一章能向你展示为软件制定一些基本的需求和计划是多么的简单.
在这一阶段所花费的时间和精力会在项目的后期给你带来丰厚的回报.
除了不用解决 bug 或者对错误的数据感到奇怪，你还可以自豪地展示你的作品.
因为你知道你已经采取了正确的措施来保证软件按照预期工作.


</t>
<t tx="zoomq.20110727085946.4252">@language rest
.. include:: ../LINKS.rst

项目定义
===============================================================================


究竟你想创造什?
这是最重要的问题,
但是多数人在这上面花的精力并不比会上下意识的随手涂鸦更多.
缺少确实的需求分析和将需求转化为能用的代码的计划是大部分软件工程失败的原因.
(当前,所有重大项目工程中约50%到70% 是失败的--这取决于你如何定义"失败")
试试搜索 "脑残需求分析 失败的软件"(poor requirements software failures)
就能知道到有多少文章在写这种事儿了.


所有的项目都是由某种 **需求陈述** 开始的.
它可以是一个非正式的想法，或者是电子邮件里的一个请求.
当然也可以是正式的文档.
从这时刻开始，项目的目标就以 **工作说明书**(statement of work,SOW) 的形式开始发展了.
工作说明书有需求陈述所不具备的细节.
接着各种具体要求就聚集过来，最后才能得到软件设计指标
(design specification) 插图 8-1
展示了从需求陈述到设计指标过程中的每一步变迁.


需求在每一阶段都得到进一步细化.
细节最后在 设计说明书(software design description,SDD)
当中得到最终陈述.
(理想中)说明书包含足够的信息来促成满足要求的软件的诞生.
在接下来的小节里我们将逐一体会迈向 设计说明书 的每一步.

@others

</t>
<t tx="zoomq.20110727085946.4253">@language rest
.. include:: ../LINKS.rst

Requirements
===============================================================================

Requirements come in many levels of detail. The next level after the SOW might be
high-level project objectives, science requirements, operational requirements, and so
on, descending in ever-increasing levels of detail until finally arriving at the software
implementation requirements contained in the SDD.

Figure 8-3. Statement of work

Lower levels of requirements are derived from the requirements above them, in a top-
down fashion. At each level more details emerge and are incorporated into the require-
ments set in a process known as requirements decomposition, which is a part of the
requirements analysis activity. How much time and effort one spends doing require-
ments decomposition depends on the type of project; some projects are simple enough
that a basic set of testable functional requirements will suffice, while others (like the
full-authority digital engine controls on jet aircraft, or the guidance and propulsion
control systems on spacecraft) might require extensive requirements analysis and
decomposition to ensure that all the relevant requirements have been captured, all the
off-nominal conditions have been accounted for, and all the low-level implementation
requirements necessary to build and program the system are defined and reviewed. The
requirements documents for these types of projects can easily run to hundreds of pages.
One of the trickier parts of the requirements analysis activity is knowing when enough
is enough, and when to keep going to fill in necessary details.



@others

</t>
<t tx="zoomq.20110727085946.4305">@language rest

Designing the Software
===============================================================================


Now that you have some functional requirements, in whatever format, it’s time to think
about designing the software to meet those requirements. How much latitude is avail-
able in the design will depend on how detailed the functional requirements happen to
be. If they are extremely detailed, you won’t have as much leeway as with a loose set
of functional requirements.





@others




</t>
<t tx="zoomq.20110727085946.4306">The Software Design Description
-------------------------------------------------------------------------------
In Figure 8-4 the last thing in line before the software is the software design description,
also known as the SDD. The SDD is, in effect, a set of low-level implementation re-
quirements. Often the SDD is written in a more narrative form than the functional-level
requirements. It typically contains things like definitions of return code values, flow-
charts, block diagrams, inheritance diagrams, message sequence charts, and so on. The
SDD is the theory of operation document for the system to be built, and it should
contain enough details such that a programmer can translate it directly into working
code. Typically, the SDD is organized along the same lines as the software. In other
words, there might be a section describing data acquisition, another dealing with data
processing, one that describes the user interface, and so on. A comprehensive SDD may
also contain one or more introductory overview sections that reiterate the SOW in a
more technical context and lay the groundwork for the detailed descriptions in subse-
quent sections of the document.


For small projects an SDD may not even be necessary, but unless you are the only person
who will be working on the software it is essential to make sure everyone involved
understands what is required and how the software will meet the requirements. The
SDD fulfills that role, and serves as the implementation requirements for creating both
the software and the unit tests.

An important thing to keep in mind regarding the SDD is that it is driven by the re-
quirements preceding it, not the other way around. Each distinct descriptive item in
the SDD must be traceable back to one or more of the functional-level requirements.

In an RDD development model, if something can’t be traced back to a higher-level
requirement, it doesn’t belong in the design. If something really needs to be in the
design, but there is no requirement for it, a derived requirement must be created to
cover it.

If nothing else, the presence of an SDD shows that some thought went into the design
of the software—i.e., it wasn’t just pulled full-grown from some nebulous place and
assumed to be complete and accurate. Such an assumption is seldom, if ever, borne out.

</t>
<t tx="zoomq.20110727085946.4309">@language rest

Functional Testing
===============================================================================

We now have some requirements and hopefully a design document, but before the first
line of code is written we need to think about testing. Here I am referring to functional
testing, as opposed to unit testing; they are very different things, with different objec-
tives and methods. We’ll get to unit testing in just a bit, but for now, let’s look at
functional testing and see why it’s an essential (and arguably the only) method for
verifying compliance with the requirements.

@others
</t>
<t tx="zoomq.20110727085946.4310">@language rest

推荐阅读
===============================================================================

There are hundreds of good books available on the topics we’ve covered in this chapter,
but in the interest of keeping things brief I’ll list a few that I particularly like:


Code Complete, Second Edition. Steve McConnell, Microsoft Press, 2004.
    I have both the first and second editions of this book, and I think they’re both
    excellent. McConnell does a good job of laying out the steps necessary to success-
    fully define and implement quality software, and he does it in a semiformal way
    that’s engaging and enjoyable to read. I can only hope to encourage more people
    to read and apply the material in his book.

Software Requirements: Objects, Functions and States, 2nd ed. Alan Davis, Prentice Hall,1993.
    This is one of my favorite books on the subject of software requirements. I’ve been
    known to take it with me to meetings and quote from it now and again. The author
    discusses different approaches to requirements analysis and capture in a clear and
    lucid style, and also includes useful examples of different approaches. An extensive
    list of references provides numerous paths for further exploration and discovery.

Software Testing. James McCaffrey, Booksurge, 2009.
    This book provides a good overview of the skills and techniques directly applicable
    to software testing, gleaned by the author from interviews and conversations with
    test managers in a number of settings. Short, simple, and to the point, it is a good
    starting place for someone new to software testing, and a useful quick refresher for
    the seasoned practitioner.

Writing Effective Use Cases. Alistair Cockburn, Addison-Wesley, 2001.
    A well-written guide for writing well-written use cases, this book describes what
    constitutes a good use case and points out some of the pitfalls one might encounter
    while collecting the information necessary to craft a useful description of the in-
    tended behavior of the software. While I’m not a big fan of use cases (I prefer formal
    hierarchical requirements), if you are planning to employ use cases, you owe it to
    yourself to read this book.

Essential CVS, Second Edition. Jennifer Vesperman, O’Reilly, 2006.
    This book starts with an introduction to the basic concepts behind CVS and builds
    from there, with discussions of tagging, branching, merging, and logging, among
    other topics. It helps to fill the gaps in the formal reference documentation found
    in CVS’s online documentation, and to clarify some of the more opaque features
    and functions of CVS.


    When it comes to online resources, well, they are legion. Entering the phrase “software
requirements” will provoke Google into returning something like 1 million hits. Here
are a few from my own bookmarks that I think are noteworthy:


http://software.gsfc.nasa.gov
    NASA has many documents available online in the Process Assets Library at the
    Goddard Space Flight Center. While a lot of these will be far too complex and
    detailed for the typical small project, the overall concepts and methods are uni-
    versally applicable. It’s worth a look to see if there’s something here that you can
    apply to your own activities.

http://www.techwr-l.com/techwhirl/magazine/writing/softwarerequirementspecs.html
    TECHWR-L, a website oriented toward technical communicators, hosts this over-
    view of what is entailed in writing a software requirements specifications
    document.

http://www.aspera-3.org/idfs/APAF_SRS_V1.0.pdf
    This is the SRS for the Aspera-3 project (part of the Mars Express mission) from
    the Swedish Institute of Space Physics. It’s not often that one gets to see what a
    real SRS looks like (particularly not from recent NASA projects, thanks to ITAR),
    but here is one you can examine at your leisure.



</t>
<t tx="zoomq.20110727085946.4312">@language rest

Implementation
===============================================================================

Now, at last, we come to the fun part: writing the software. We’ve covered require-
ments, the design, and the functional tests, so now we can turn our attention to some
of the activities that go into creating the code.

What the code should do should already have been defined by the requirements and
the SDD. This section deals with how it is organized, formatted, reviewed, and tested
using unit test methods. These aspects are sometimes overlooked or pushed aside as
trivial matters, but that is a mistake that can come back to haunt the developer months
or even years later. Careless programming can also make life miserable for those who
come along after the code has been written and released, if there is a need to do main-
tenance or just to try to understand what the software really does.

@others




</t>
<t tx="zoomq.20110727085946.4316">@language rest

小结
===============================================================================

In this chapter we’ve covered requirements, design, implementation, testing, and doc-
umentation. It should be obvious now why a software project without requirements is
a like a ship without a rudder. Without at least some basic requirements, it’s all too
easy to create something that doesn’t do what was originally intended, or doesn’t work
correctly at all. We have also seen how testing, when done to the requirements, not
only helps to identify defects in the code, but also helps to ensure that the code stays
on track and meets the requirements. Writing, in the form of documentation, has been
stressed throughout the discussion, and in all honesty, if you aspire to achieve recog-
nition for your work you need to document it so that others (who may not have your
depth of understanding) can readily understand and appreciate it. However, the main
point in this chapter isn’t about rigorous adherence to a particular process or life-cycle
model, nor is it about creating massive tomes of technical details. It’s about knowing
where you want to go by knowing what you need to do in order to get there, knowing
when you’ve arrived, and creating a map of your journey in the form of documentation
so that others can follow the path.
</t>
<t tx="zoomq.20110727085946.4317">需求驱动的设计 Requirements-Driven Design
-------------------------------------------------------------------------------

如果你学习过相关课程,应该反应过来了,寻求项目定义的过程,正好和所谓的"瀑布式"(waterfall) 软件开发模式相吻合.
如果你不熟悉这个软件工程的术语"瀑布"(waterfall)，不用理会它就好,这只是一种软件构思和开发活动的组织方式.
瀑布(waterfall)模型是描述软件开发的生命周期(software development life cycle,SDLC)方法之一.
插图 8-1 基本上是瀑布模型的前半部分,再多一点点.
当然, 在不同的问题领域可能有更优越的模型.
不过，我并不迷信哪种模式，也不相信对需求的剪裁能更好的和真实世界同步.
对需求的修订,最大的问题是如何令变化尽可能的减少对已完成工作的影响.
变更会引发"涟漪效应",如果涟漪过大将变成真正的巨浪.
在大型项目中,这将变成重大问题,
不过,同样的问题在小项目中,现场也就解决了,没什么大不了的.


.. image:: ../_static/figs/rwip_0801.pdf.png

插图 8-1. 需求的进化



在整本书中我始终运用的是所谓 需求驱动设计(RDD)的模式.
当需求可以及早确立并不会经常变动时,RDD工作良好.
有些项目,特别是那些和人进行交流的项目
(例如，银行，医疗记录和其他"流通性"领域)
,可能需要比 RDD 更多的灵活性.
在我们的场景中,则多数是类似 "黑盒子" 的商用接口和控制协议,
都是专门用来完成反复进行的简单任务,除非硬件磨损或是电源关闭,否则不会出现变更;
主要的挑战在于如何确保所有部件可靠的结合在一起,并明确收集的数据是什么.



软件开发模式就象工具箱中的工具:
你总是想(我假设)要使用适当的工具完成手头的工作.
螺丝刀无法和钉子配合起来,锤子对于螺丝钉是无用的.
在我们的例子中，我相信该工具恰好是RDD范式.
同样的道理也适用于编程语言，编辑器和开发平台.
20世纪一个著名的社会学家 马斯洛曾经说过:
"如果你所拥有的唯一工具是一把锤子，你往往会看到每一个钉子的问题."
如果你想要了解更多其他软件开发模式，我会鼓励你自主探索己有的大量信息.
事实上线上和线下会议中,的确存在各种开发模式的激烈讨论.



</t>
<t tx="zoomq.20110727085946.4319">从需要开始Stating the Need
-------------------------------------------------------------------------------

无论采用哪种开发東西方,建立需要陈述(statement of need)是一切的开端.
它可以简单的是一句话:
"我们需要能根据预设值来监视和控制试验室中的温度和照明水平."
,或是更复杂一些，如:
"我们希望能够在压力测试时,对多达20个固态激光器的功率和因为同时进行调节和监控."
注意,需要陈述(statement of need)中不应该包含任何实现细节,只是单纯的概念,阐述需要什么.
当我们讨论需要时,是无法从模糊的输入建立什么东西而最后又能完成预期目标的,
因为,在这一阶段根本无法明确什么是实际的期望.
当你在给人们创建东西时(比如说客户),一般而言他们不会清楚自己真正的期许是什么.

插图8-2显示了一个虚拟交流电源控制器项目的需要陈述(statement of need).
这份说明没有包括任何具体的细节，但它确实有很多含义.
虽然还有很多悬而未决的问题，
但足够帮助我们推断，系统是必须计算机控制的，
它必须是无人值守的.
再分析几分钟还应推导出如果它是7*24小时自动运行的，
还应该能够感知到是否发生错误并及时采取适当的行动，并以某种方式提醒操作员.

最重要的一点是，需要陈述(statement of need)和需求(requirement)是两码事.
在某些圈子里它有时被风趣地称为 "性欲"
它只有基础大纲，它不是包含整个结构，
但仔细考虑并指出是什么,通过一些问题指出了前进的方向，以获取必要的细节。


.. image:: ../_static/figs/rwip_0802.pdf.png

插图 8-2. 需求说明

</t>
<t tx="zoomq.20110727085946.4321">Project Objectives
-------------------------------------------------------------------------------

The next level of detail lays out the project objectives, also known as the statement of
work. These still aren’t requirements in the strictest sense, but rather definite goals that
can be translated into requirements. For example, the project objectives for our hypo-
thetical AC control system might look like the statement of work shown in Figure 8-3.
The primary thing to notice here is that the objectives still don’t contain any definite
values for parameters such as time durations, what constitutes an anomaly, or data
communication protocols. What they do contain are specific statements about the de-
sired high-level functional characteristics of the finished system (i.e., the general be-
havior), and those are what the specific functional requirements will be derived from.
The SOW defines what will be the basis for determining the ultimate success or failure
of the project from an end user’s point of view (or from your point of view, if you
happened to write the SOW for your own project).

</t>
<t tx="zoomq.20110727085946.4323">Why Requirements Matter
-------------------------------------------------------------------------------
Without requirements, or at least a statement of work, there is really no way to get a
clear idea of exactly what the end result is supposed to be or how it should behave.
Sure, there might be some vague notion of what the system is supposed to do, but it is
only that—a vague notion—and it’s a sure bet that your vague notion isn’t going to be
the same as someone else’s vague notion. A doodle on a napkin during lunch is not a
requirement, and neither are the notes jotted down on a whiteboard during a meeting.
These types of things are insufficient as requirements, not only because they don’t meet
the criteria for verifiability, but also because they are only the tops of the waves in what
might actually be a very deep ocean.

Requirements, even a minimal set, allow us to define what is desired in clear and specific
terms. A good set of requirements is something that everyone should be able to agree
on. They are also the yardstick against which the behavior of the finished product is
measured to verify success, or perhaps failure.




.. topic:: A True Requirements Story

    Once upon a time I was tasked with creating a real-time filter array data acquisition
    system for a large radio telescope. The filter array was an old thing that someone had
    hauled out of storage, but it had 640 discrete channels, each narrowly tuned to a specific
    frequency. My job was to obtain a set of high-speed analog-to-digital converters for
    acquiring data from each channel, integrate various pieces of new hardware with the
    old filter array system, and then program the whole thing using a real-time operating
    system. An RF engineer was lined up to tune the beast once it was running. All good
    so far. The fun started when I tried to get the person who was to be in charge of operating
    the filter array to agree to any specific requirements.

    “What is the maximum allowable conversion time for each channel?” I asked. “Well,
    as fast as possible,” was the response. That wasn’t going to work, so I tried again by
    rephrasing the question. Still the vague answer. Things went on like this for at least 30
    minutes, with me getting more frustrated and the other person getting increasingly
    annoyed at my attempts to pin down some actual numbers. I finally did manage to get
    a few basic numbers to work with, but I still had to interpolate some of the missing
    values and just make educated guesses at the others.

    In the end, the resulting system met, and even exceeded, the timing and stability ex-
    pectations. In fact, it did its job a little too well. The first time we tried to run it at full
    speed and stream all 640 channels’ worth of data into the telescope’s control and data
    processing system, we managed to crash it. The entire multimillion-dollar radio
    telescope was dead. It took something like two hours for the operators to bring it all
    back up again. Fortunately it happened during allocated engineering time, otherwise
    we would probably have had to deal with an irate scientist. The moral of the story:
    don’t ever assume that the person who needs to supply the baseline values for the
    requirements actually knows the answers (and is willing to admit he doesn’t know). Be
    prepared to fill in the blanks yourself and double-check your assumptions. It’s also a
    good idea to give the people from whom you need answers some advance warning as
    to the type of information you will be looking for. At least that way they can’t reasonably
    accuse you of springing a pop quiz on them.



</t>
<t tx="zoomq.20110727085946.4325">Well-Formed Requirements
-------------------------------------------------------------------------------

A requirement describes, in a clear, precise, and unambiguous manner, what charac-
teristics something must possess and what behaviors it must demonstrate in order to
meet one or more project objectives. A requirement almost always contains the word
“shall.” Here is an example of a functional requirement statement::

    The system shall be capable of detecting a nonresponsive UUT within 100 milliseconds
    after AC power is commanded to the ON state for any particular UUT.


One key characteristic of a good requirement is that it is verifiable. In other words, it
defines specific values for rates, limits, and exceptions (if any) that can be verified by
testing. The preceding example functional requirement is testable—it states a specific
event and a time interval. However, it is easy to write a requirement that is not testable,
even if it does contain the word “shall.” For example::

    The system shall incorporate the ability to detect and handle invalid data appropriately.


By itself, this requirement isn’t really a requirement; it’s a desirement. For instance,
what exactly does it mean? What is “invalid data”? What does “handle” mean? What
is appropriate? There are no definitions, so therefore there is nothing specific to test
for. The bottom line is that this “requirement” is not a requirement, and it cannot be
verified.

There are basically five essential characteristics of a well-formed requirement, and these
are listed in Table 8-1.


Table 8-1. Essential requirements characteristics

.. list-table:: Table 8-1. Essential requirements characteristics
   :widths: 10 40
   :header-rows: 1

   * - Characteristic 
     - Description
   * - Necessary  
     - Requirements must only address the functionality or characteristics necessary in order for the system to meet
the objectives defined in the SOW. In other words, there should be no “bells and whistles” requirements.
   * - Unambiguous  
     - A requirement may have only one possible interpretation. Requirements with multiple possible interpretations
may result in a system that does not meet the SOW objectives. Requirements must be clear and concise.
   * - Consistent  
     - Requirements must not introduce conflicting objectives, parameters, or functionality. Within the requirements
set for a project, requirements must support one another.
   * - Traceable  
     - Every requirement must have a reason to exist, and traceability establishes that reason. It defines the link
between a requirement and the higher-level item that it was derived from, which may itself be a requirement
or an element in the SOW. In other words, requirements flow downward, and traceability flows upward.
   * - Verifiable  
     - A requirement must be capable of being verified by testing, analysis, inspection, or, in some cases, demon-
stration. A requirement that cannot be verified cannot be implemented with confidence, because there will
be no way to know for sure that the software is in compliance.


There are other criteria in use, but these five are usually considered to be the most
important.








</t>
<t tx="zoomq.20110727085946.4327">The Big Picture
-------------------------------------------------------------------------------

Now that we’ve examined the basics of requirements, this would be a good time to see
how things fit in with the software development and verification activities. Figure 8-4
shows how requirements progress from the SOW (project description and objectives)
through to the actual software, and also how testing is dependent on requirements.

</t>
<t tx="zoomq.20110727085946.4329">Requirement Types
-------------------------------------------------------------------------------

Let’s discuss Figure 8-4 a little, since there’s a lot going on here, and we’ll be referring
back to it later. We already know about the SOW (“Project Description and Objec-
tives”), so we can move past that. If we follow the flow, the next thing we encounter
are three primary types of requirements in a box, labeled “Integration,” “Performance,”
and “Functional.” These are all closely related, and may even appear together in the
same document. There is also something hovering up above called “Derived Require-
ments.” Let’s take a closer look at these different types of requirements:


Functional requirements
    Functional requirements, and any associated performance and integration require-
    ments, typically deal with the overt external behavior of a device or system. Or, to
    put it another way, they deal with what should happen when the power switch is
    set to “On” and the system is stimulated with some type of input. Functional re-
    quirements can be defined as the required behaviors of a system or device from a
    “black box” perspective. In other words, for any given input it must generate a
    specific output. Exactly how it does this is not within the scope of the functional
    requirements; that is covered by the implementation requirements in the SDD.



Performance requirements
    Performance requirements describe how well a system must perform. Typically
    these requirements are concerned with characteristics such as speed (i.e., amount
    of data transferred per some unit of time), capacity (how much data can be stored),
    and real-time display update rates (live video, live data graph displays, etc.), among
    other things. Performance requirements complement the functional requirements,
    and the two are sometimes merged into a single requirements document.


Integration requirements
    Integration requirements define how the system will interact or interoperate with
    other systems. These requirements deal with things like communications proto-
    cols, command and data formats, and physical interfaces. Sometimes requirements
    of this type are contained in the functional requirements document along with the
    performance requirements. Alternatively, the integration requirements may be in
    a separate Interface Control Document (ICD).


Derived requirements
    A derived requirement is a requirement that was not explicitly stated in the func-
    tional, performance, or integration requirements, but was instead derived during
    the requirements analysis or perhaps during the creation of the design documen-
    tation. For example, a communications interface may need to have error detection
    and reporting capabilities that are not explicitly captured anywhere else, but that
    need to be taken into account when the low-level design is developed. A derived
    requirement “plugs the hole,” so to speak, in the other high-level requirements and
    provides a traceable justification for a design element.


For the most part, the example requirements we’ll be looking at are what are sometimes
known as contract-style requirements. That is, each requirement is a single statement
containing a “shall,” and each is written in a rather stiff and formal style intended to
be concise, unambiguous, and verifiable. They are organized such that they form a sort
of checklist. For many years this was the standard way to capture and document re-
quirements, and it is still in use today, particularly in the aerospace and defense indus-
tries. However, current trends in requirements engineering for commercial software
and systems have moved away from this model in favor of use cases and other techni-
ques. Figure 8-5 shows an example of this type of requirements style. We’ll look at use
cases in the next section.

For a small set of requirements (between, say, 20 and 50), there is really nothing wrong
with the contract style. It is when the requirements set becomes very large that it can
become a problem. For one thing, a set of contract-style requirements tends to abstract
the requirements away from the SOW and other sources that originally drove them, so
the context can get lost and it can be difficult to perceive how the requirements relate
to one another.


</t>
<t tx="zoomq.20110727085946.4331">Use Cases
-------------------------------------------------------------------------------

Contract-style requirements are not the only way to capture requirements. In addition
to the issues already mentioned, contract-style requirements tend to get a bit unwieldy
when dealing with things like graphic user interfaces or other aspects of human-
machine interaction. The use case type of requirement definition may be more appro-
priate for some aspects of a system’s requirements.

Figure 8-4. Software requirements in the development flow


.. note:: (~_~)

    Conversely, use cases are not well suited to capturing things like
    algorithmic or mathematical requirements, nor do they work well for
    nonfunctional characteristics such as performance, timing, or safety
    requirements.


Figure 8-5. Contract-style requirements

    Use cases were invented in 1986 by Ivar Jacobson as a way to model the interactions
between a system and the user or users of the system (which might be real people or
other systems) in order to accomplish a specific task. Use cases treat the system as a
black box and focus solely on input and output actions. In this sense, use cases are
functional requirements. They may not be appropriate for use as low-level implemen-
tation descriptions, although some people have tried to coerce use cases into the SDD
role. Use-case methodology was integrated into the Unified Modeling Language (UML)
paradigm in the late 1990s.

In its simplest form, a use case has four primary features: the actor, the system, a goal
for what the actor needs to accomplish using the system, and the steps necessary to
achieve the goal. Use cases can refer to other use cases in a hierarchical arrangement,
starting with a set of general high-level use cases and descending into greater levels of
detail. A use case can also refer to other use cases at the same level when two or more
use cases are necessary to describe the actions required to meet a common goal.


Figure 8-6 shows an (admittedly somewhat contrived) example of a use case for a hy-
pothetical greenhouse control system. In this example the use case has six elements,
which are listed in Table 8-2.


Table 8-2. Basic use case elements

.. list-table:: Table 8-2. Basic use case elements
   :widths: 10 40
   :header-rows: 1

   * - Element 
     - Description
   * - Identification  
     - A unique identifier for the use case. May be whatever format makes sense for the project, just so long as it can be used to unambiguously refer to a specific use case.
   * - Title  
     - A title for the use case. This, along with the identification, might appear in a listing of use cases for the project,so the title should be short yet descriptive.
   * - Description  
     - lso known as the “goal” of the use case. This describes, briefly and at a high level, what the use case is
   attempting to define.
   * - Actors 
     - The agents (biological or otherwise) that need to accomplish the goal or goals stated in the description.
   * - System 
     - The thing that will respond to the actor(s) to allow for the realization of the goal.
   * - Assumptions 
     - The conditions that must exist in order in order for the goal to be accomplished.
   * - Steps  
     - The sequence of events (which may be just one) that must occur to accomplish the goal.


     If you’ve had only limited exposure to use cases, you might think they are just the
cartoons known as “use-case diagrams.” They are not. Use-case diagrams are intended
as a way to present a high-level view of how a system will be used and by whom; they
are not intended to define functional requirements. What is shown in Figure 8-6 is
typically referred to as a formal use case, or sometimes as a traditional or concrete use
case.

Another thing to note about use cases is that the criteria we looked at for well-written
requirements also apply to use cases. They are, after all, requirements. In fact, a formal
use case is somewhat like a set of one or more contract-style requirements grouped
under a single heading, the goal.


The finer points of use-case generation and organization are outside the scope of this
book, so if you’re interested I would suggest that you look into some of the titles in the
“Suggested Reading” section at the end of this chapter, or just peruse the Web. Wiki-
pedia has a good introduction at http://en.wikipedia.org/wiki/Use_case.

I would recommend using plain ASCII text files for use cases, because you can place
text files under version control using a tool like CVS or Subversion. Both CVS and
Subversion have the ability to automatically modify specially tagged lines in the files to
note things like the last author, the version number, and the date of the last check-in.









</t>
<t tx="zoomq.20110727085946.4333">Traceability
-------------------------------------------------------------------------------

Traceability refers to the linkage that must exist between a requirement and whatever
drove it to exist in the first place. It doesn’t matter what form the requirement takes,
be it contract-style or use case, it must still have a reason to exist.

Figure 8-7 is a graphical illustration of traceability, starting with the SOW, then the
functional and derived requirements, on to the SDD, and finally the software itself.
This is also indicated in Figure 8-4 by the dashed lines labeled “Trace.”

Figure 8-6. Example formal use case


Figure 8-7. Requirements traceability

Establishing traceability is essential for verifying that there is “requirements coverage”
at each level. In other words, do the functional and derived requirements cover every-
thing in the SOW? Does the SDD cover everything in the functional and derived
requirements? Without traceability it might be impossible to know for certain, partic-
ularly in cases where there are more than just a few requirements to deal with.

A requirements traceability matrix like the one shown in Table 8-3 is a document that
shows exactly how each functional requirement is mapped to the SDD. A similar table,
called the verification matrix, is used to map the requirements to the tests used to verify
each one.


.. list-table:: Table 8-3. Requirements traceability matrix
   :widths: 5 40 5
   :header-rows: 1

   * - FR ID 
     - Requirement 
     - SDD ref.
   * - 1.1
     - The data acquisition subsystem software shall be capable of acquiring and converting analog data as 16- 
bit signed data samples at a sustained rate of 1,000 samples per second. 
     - 3.2.1
   * - 1.2
     - The data acquisition subsystem software shall generate values between –32,768 and +32,767 across a 
  nominal input range of –10 to +10 V with an accuracy of +/– 1 bit. 
     - 3.2.2
   * - 1.3
     - The data acquisition subsystem software shall detect both positive and negative voltage input over-range 
conditions in the conversion hardware, set a software status bit to indicate the condition, and return the 
     - 3.3.1
   * - 
     - maximum possible positive or negative digital value depending on the sign of the over-range condition. 
     - 3.7.3
   * - 1.4
     - The data acquisition subsystem software shall incorporate the ability to set upper and lower limits for 
acceptable input values via a configuration parameters file. 
     - 3.3.2
   * - 1.5
     - In the event of an input beyond the configurable range limits, the data acquisition subsystem software 
     - 3.4.1
   * - 
     - shall set a status bit to indicate the condition, and return the actual value of the conversion.  
     - 4.2.4
   * - 1.6
     - The data acquisition subsystem software shall incorporate the ability to detect a failure in the data 
     - 3.4.2
   * - 
     - conversion hardware, set a status bit to indicate the condition, and return an error code value in lieu of 
valid data. 
     - 4.2.5

In Table 8-3, the entire text of the original requirements is shown. If the requirements
had titles, just having those would be sufficient. You should also be aware that I just
pulled the SDD section references out of the air for the purpose of filling in the table.




</t>
<t tx="zoomq.20110727085946.4335">Capturing Requirements
-------------------------------------------------------------------------------

Capturing requirements can be a daunting task, especially if the people with a vested
interest in the outcome don’t know the answers themselves. In a research environment
this is actually more often the case than not, mainly because the principal stakeholders
(the principal investigator, the department head, etc.) are likely to be more interested
in the data the project will generate than in how it does it. They really don’t care all
that much about the details of how a device does what it does, so long as it does it
reliably and accurately, so asking specific questions about data conversion rates, bit
resolution, over-voltage limits, and so on, is often not a very productive exercise.

A similar situation can exist in a commercial setting where requirements for a product
are driven by marketing desirements. The folks in the marketing department may know,
in general functional terms, what features the product needs in order to be competitive,
but asking them specific low-level questions is typically not appropriate or fruitful.

Of course, there are situations where specific requirements for functionality, perform-
ance, error handling, and so on, have already been worked out in advance to some level
of detail. This is common in the aerospace and defense industries, and in some indus-
trial processing situations, but outside of these domains it is more the exception than
the rule. Even in cases where detailed requirements are provided, they should not be
blindly accepted. Someone will need to review them for consistency and feasibility, as
they will be a major driver in determining the level of effort, and hence the cost, of the
project.

What this really boils down to is that in most situations, if you want to have solid
requirements to work from (and this is something you really should want), you will
need to help create them. To this end, you may need to conduct interviews with the
various stakeholders to determine what their primary objectives are for the project. If
a statement of need does not exist, it should be created, and everyone with a vested
interest will need to agree to it (or, in biz-speak, you will need to get “buy-in”). Once
that key piece is in place, the rest of the requirements-creation effort is a matter of
defining successively greater levels of detail until there is enough to design, build, and
test the desired system.


When attempting to capture low-level details, it is a good idea to write up a list of
questions and provide it in advance to the people whom you will be interviewing to
obtain the answers. If you think you already know some of the answers, or they can be
surmised from information already on hand, you should also write up your deductions
and assumptions and provide those as well.

While there are specialized commercial tools available for formal requirements capture
and documentation, a word processor or even a spreadsheet is often more than suffi-
cient for most small- to medium-size projects. If you elect to use another approach,
such as use cases, there are open source tools available to help with that too, but a
decent word processor will again work pretty well.
</t>
<t tx="zoomq.20110727085946.4337">Graphics in the SDD
-------------------------------------------------------------------------------

An SDD can be a simple thing with only a few pages, but it can help make things clearer
if there is something graphical for a reader (maybe you, at some later date) to illustrate
some of the key aspects of the architecture of the software. Graphical representations
also allow you, the designer, to see your design from new angles. It’s not uncommon
for the designer to discover that the approach originally adopted won’t work as inten-
ded when it’s modeled using some type of diagramming methodology. Not only do
graphical representations and models help make problems in the design more visible,
they can also help identify inefficiencies and suggest better ways of doing things.

This section is by no means a tutorial on any of the graphical representation and mod-
eling techniques presented here. It is an overview, and I am assuming that the reader
will be able to infer how these tools are used from the material presented in this book.
There is also a vast amount of information freely available on the Web. The main point
here is to introduce the terms and concepts.

@others
</t>
<t tx="zoomq.20110727085946.4339">Block diagrams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A block diagram is intended to show how different functional sections of a system—
be it software, hardware, or both—relate to one another. In fact, we have already seen
a lot of block diagrams in this book. Figure 8-4 is a block diagram, for instance (actually,
it’s something of a hybrid that combines elements of both a block diagram and a flow-
chart). If done correctly, a block diagram can convey a tremendous amount of infor-
mation in a very compact format.

A block diagram showing an overview of the system to be built is a good starting point
for writing an SDD. In fact, a good block diagram, along with a page or two of text,
might make up the entire SDD for a simple project.

</t>
<t tx="zoomq.20110727085946.4341">Flowcharts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The concept of the flowchart is older than computers themselves, and predates the
advent of programming languages by at least 30 years. Flowcharts were originally de-
veloped to represent and model the flow of activities in industrial processes. At IBM
around 1947 Herman Goldstine and John von Neumann created what we know today
as the software flowchart. The ISO standard 5807:1985 contains the latest definitions
for flowcharts; unfortunately, ISO wants over $100 for it, but an older document from
IBM (GC20-815-1, “Flowcharting Techniques,” 1969) can be found online without
too much searching and downloaded for free.


Figure 8-8 shows a simple flowchart for a simple controller. The flowchart not only
shows the essential functionality of the algorithm, but also shows where there might
be some room for improvement. Notice, for example, that there is no provision to
handle an error from Sensor 1. There is also no check to determine if the Output
(whatever that might be) is actually responding.

Figure 8-8. Example flowchart

Some people may scoff at flowcharts and claim they are obsolete, but in reality flow-
charts are very much alive and well. In UML the equivalent to a flowchart is called an
activity diagram. A flowchart is an effective way to visualize decision paths through a
program, but it starts to become bogged down when dealing with control flow con-
structs such as switches or loops. Still, a flowchart can illustrate a section of program
logic in a visually intuitive fashion, and should not be overlooked if it will benefit the
SDD.
</t>
<t tx="zoomq.20110727085946.4343">State diagrams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A state diagram is a powerful tool for modeling state changes. In fact, state diagrams
have evolved to the point where there are tools available that can translate a state dia-
gram directly into program code ready for compilation. In addition, a tool of this type
can usually create a simulation based on the state diagram and execute it to allow the
developer to observe its behavior.

Figure 8-9 shows the state diagram for a simple on-off control. The channel might be
an AC power control, or it could be a relay. From the diagram we can see that the
control will accept three types of input: an ON command, an OFF command, and a
RESET command. You might also notice that if an error occurs due to something not
working correctly, the logic will ignore any further incoming commands except for a
RESET.

Figure 8-9. Example state diagram

</t>
<t tx="zoomq.20110727085946.4345">Message sequence charts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The message sequence chart (MSC) is defined by the guidelines document Z.120, main-
tained by the International Telecommunication Union (ITU). In its current form, an
MSC is a powerful tool for modeling command-response transactions between multiple
entities. The UML equivalent of the MSC is the sequence diagram. A simple MSC is
shown in Figure 8-10.

Figure 8-10. MSC example

    An MSC models the transactions that may occur between entities such as users, pro-
cesses, or services. The transactions typically involve exchanges in the form of requests,
commands, or data. In the simple MSC shown in Figure 8-10 there are four processes:
a remote system, the primary system monitor, a logging subsystem, and the data ac-
quisition hardware (represented by the interface API process). When the remote system
wants to obtain data, it sends a request to the system monitor. This, in turn, passes a
command to the interface API, which then interacts with the hardware and returns the
data requested. The system monitor logs the response from the interface API and com-
pletes the transaction cycle by responding to the remote system’s original request.

    Even with a simple MSC like that shown in Figure 8-10 there are some things that may
have caught your eye. First, a status request takes a finite amount of time to process.
What the MSC does not show is just how long that finite amount of time might be. In
a more detailed MSC this could be indicated as an upper limit on acceptable response
time. Secondly, our simple MSC doesn’t show the alternate scenario where an error
occurs at the interface API level, although it could have done so if the full syntax for an
MSC had been used.

    The latest revision of Z.120 contains a large amount of detail on the syntax of MSCs,
and if you’re interested in using them it’s worth looking through it to get an idea of just
what these diagrams are capable of. There are also various tools available for creating
MSC diagrams, both commercial and open source.


</t>
<t tx="zoomq.20110727085946.4347">Block diagrams
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A block diagram is intended to show how different functional sections of a system—
be it software, hardware, or both—relate to one another. In fact, we have already seen
a lot of block diagrams in this book. Figure 8-4 is a block diagram, for instance (actually,
it’s something of a hybrid that combines elements of both a block diagram and a flow-
chart). If done correctly, a block diagram can convey a tremendous amount of infor-
mation in a very compact format.
A block diagram showing an overview of the system to be built is a good starting point
for writing an SDD. In fact, a good block diagram, along with a page or two of text,
might make up the entire SDD for a simple project.

</t>
<t tx="zoomq.20110727085946.4349">Pseudocode
-------------------------------------------------------------------------------

OK, so perhaps you’re not visually inclined and prefer to deal with text. There’s a
modeling and representation technique for that, too: it’s called pseudocode.

Pseudocode is a human-readable description of what a computer program or algorithm
must do, written using a formalized style in some natural language (it doesn’t matter
which one, actually, so long as it supports the necessary technical vocabulary, but
English does seem to show up a lot). Pseudocode typically uses the structural conven-
tions of a programming language, such as indentation, if statements, and so on, but it
is not intended to serve as a programming language.

There is currently no standard form for pseudocode, but in general it borrows from the
syntax of an existing programming language, with C being a common choice. Elements
such as variable declarations are usually omitted, and things such as function calls or
blocks of code within loop structures are replaced with one or two sentences of natural-
language description. The main intent is to capture the functionality of an algorithm
or program, not the low-level nitty-gritty details of how it will be implemented, al-
though in some cases it might make sense to include some details as well.

In practice, pseudocode may vary widely in style, depending on who is writing it and
the environment in which it is used. It can range from something that looks like a real
programming language at one extreme, to a description approaching something like
an essay at the other. Ideally the writer should strive to strike a balance somewhere in
between.

Figure 8-11 shows a sample of pseudocode for a function to read analog data from a
lower-level function. As you can see, the main intent of ReadAnalog is to wrap the lower-
level function ReadAnalogChan with parameter checking, and also replace the return
code from the driver API with something the higher-level program can understand
(actually, it simplifies the return code, because some API calls might return 20 or 30
different values primarily of interest to hardware engineers, depending on what went
wrong with the hardware).

Pseudocode should be detailed enough to capture the essential functionality of a pro-
gram or algorithm, but still be easily readable by someone who is not familiar with the
programming language that will be used to implement it. This allows it to be inspected
and reviewed as a way to ensure that the final program will meet design specifications,
and that there are no lurking deficiencies that the original author may have overlooked
(which happens all the time, since humans tend to overlook errors in their own writing).
</t>
<t tx="zoomq.20110727085946.4351">Divide and Conquer
-------------------------------------------------------------------------------
Now that we’ve looked at some of the tools available for creating an SDD, let’s look at
how an SDD might be organized. Figure 8-12 shows how we can use a high-level block
diagram of a system to create the outline structure for an SDD.

Figure 8-11. Pseudocode example

    The idea here is very simple: just write a section for each major functional block in the
system diagram. You will also need some words and maybe a diagram or two describing
how the functional blocks integrate into the overall system. The integration details can
be included in the appropriate sections, or they might be a section of their own; that’s
up to you.

    As I stated earlier, the SDD doesn’t need to be a tome of detailed minutiae, but it does
need to have enough information to allow someone reading it to understand how to
implement the software, and why the software was written the way it was. It also dem-
onstrates that the software was planned, rather than just being hacked into existence.
This, by the way, isn’t just a “warm and fuzzy” sort of thing. Should something not
work as planned, or if a problem should occur months, or even years, after the software
was created, the SDD will be invaluable in helping to determine why the problem oc-
curred and what options might be available to deal with it. If the software is generating
data for research purposes, it can also come in handy should a question ever arise as
to the accuracy of the data and the methods used to process it. Should you ever find
yourself defending the data generated by software that you wrote, an SDD could be
worth its weight in gold.

</t>
<t tx="zoomq.20110727085946.4353">Handling Errors and Faults
-------------------------------------------------------------------------------

Unfortunately we don’t live in a perfect world, and I’ve yet to meet a perfect software
developer, so a design document must plan for the unexpected and describe how the
software will deal with errors or faults, should they occur. And it’s a safe bet that even
if the obvious bugs in the software are found and dealt with, nonobvious things like
off-nominal input values, hardware errors, or unplanned sequences of events can still
occur when least expected.

Figure 8-12. SDD organization


@others
</t>
<t tx="zoomq.20110727085946.4355">Identifying potential failures
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

One way to identify potential failures is by doing a basic failure analysis. A failure
analysis is a simple and effective way to list all of the possible ways a system might fail,
and then identify how the software might deal with the failures. It is, in essence, a set
of “what if?” questions, along with your best attempt at a reasonable answer for each.
Table 8-4 shows a simple failure analysis table.


.. list-table:: Table 8-4. Simple failure analysis
   :widths: 10 20 20
   :header-rows: 1

   * - Failure 
     - Cause 
     - Response
   * - Input hardware error  
     - Invalid input channel specified  
     - Notify user and log error. System does not halt.
   * - 
     - Invalid input port specified 
     - Notify user and log error. System does not halt.
   * - 
     - Hardware nonresponsive  
     - Notify user and halt system.
   * - Output hardware error 
     - Invalid output channel specified  
     - Notify user and log error. System does not halt.
   * - 
     - Invalid input port specified   
     - Notify user and log error. System does not halt.
   * - 
     - Hardware nonresponsive 
     - Notify user and halt system.
   * - Invalid user input
     - User-supplied parameter or command code is invalid 
     - Notify user and log error. System does not halt.

This type of analysis can easily be done using a spreadsheet. With a little thought (and
a real system to work from), Table 8-4 could most likely be expanded to cover more
possible failure cases, but the idea here is that for every possible failure listed, a response
is defined. You should also be aware of the temptation to say, “Nah, that could never
possibly happen” when reviewing potential failures. Such assumptions have resulted
in some spectacular software failures over the years.

</t>
<t tx="zoomq.20110727085946.4357">Failure responses
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Failure conditions can generally be categorized into three groups: fatal, nonfatal, and
trivial. It is important to plan out how the system will respond to each class of failure.
For example, should a fatal error occur, will the system try to shut itself down gracefully,
or will it just drop dead (i.e., crash)? If a nonfatal error crops up, what functionality, if
any, will or should be disabled? Will the system still be usable? And what of trivial
failures? Should the system try to send some type of notification, silently log the event
for later review, or just ignore it completely? These are the kinds of things you should
consider when formulating your responses.

</t>
<t tx="zoomq.20110727085946.4359">Testing to the Requirements
-------------------------------------------------------------------------------

A functional test, as the name implies, tests the functionality of a system against the
requirements that defined the system in the first place. Creating functional test cases
from the requirements is actually very straightforward. A well-written requirement
should contain all the information necessary for the test case. For example, assume we
have a requirement that reads::

    The data acquisition subsystem software shall be capable of acquiring and converting
    analog data as 16-bit signed data samples at a sustained rate of 1,000 samples per second.


    From this we can see that we’ll need an input that will result in the system generating
values between –32,768 and 32,767. We will also need to be able to count the samples
generated in a one-second window. If the software has the ability to determine its actual
sample rate in real time and display it (or at least record it), we’re basically done. If it
doesn’t, maybe this is something that should go into a derived requirement and then
into the SDD (this example is one way that derived requirements are discovered).

    But even without a new derived requirement, it may still be possible to determine the
sample rate. Perhaps the system saves data samples, along with timestamps, to a buf-
fered file. It doesn’t have to save each sample, but perhaps it will save data every 100
samples. If a logging capability is incorporated into the software, it may be possible to
obtain the necessary verification data that way. Finally, it may be possible to connect
instrumentation to the hardware and observe the timing of the data acquisition and
conversion pulses while it is running.

    This, by the way, is why it’s a Good Idea to start working on the functional tests before
the coding starts. In the process of designing the test cases it is very possible that defi-
ciencies in the design will become apparent, and now is the time to deal with them, not
later, when the code is already written. Writing the test cases before the code can illu-
minate dark corners and stimulate thinking in ways that will save time (and probably
money) later on in the development process.

</t>
<t tx="zoomq.20110727085946.4361">Test Cases
-------------------------------------------------------------------------------

A functional test case describes the context and procedures necessary to test a particular
aspect of the system against a particular requirement. Requirements drive test cases,
and test cases in turn are used to define or generate the methods that will actually
perform the tests. A functional test case may also be part of a use case, but in this book
I will treat use cases and functional tests as two separate entities.


The block diagram in Figure 8-13 shows the relationship between a test case and the
requirement that drives it, along with the procedures that will execute it, and finally
the data that is used to determine the pass/fail status of the test.

Figure 8-13. Requirement and test case relationship


In some environments one might hear of “test procedures,” or perhaps a “test proce-
dures document.” These are just the “scripts,” or series of actions, that need to occur
in order to perform the tests. They might actually be something like a script that an
actor (the tester) would follow (e.g., Step 1, Step 2, Step 3, etc.), or they could be scripts
in the sense of being some type of programmatic test procedure (e.g., a Python script,
say, or a control script for a communications simulator). This would be the box labeled
“Automated Test” in Figure 8-13.


Separating out the tests into two separate but related documents, cases and procedures,
is not really necessary in most situations. However, with some projects the level of
complexity may be such that it makes sense to separate the nonexecutable description
of the test (the test case) from the executable portion (the test procedure) for verification
and tracking purposes. Abstracting out the test cases from the procedures makes it
possible to independently write, verify, execute, and modify the procedures without
disturbing the associated test cases any more than is absolutely necessary. This also has
the effect of adding more effort (and cost) to the whole process, because now there are
two documents to manage instead of one. But regardless of how the tests are structured,
it is the test procedure that is “buying off” the requirement, because it is the test pro-
cedure alone that determines if the test is marked as a pass or fail.

A template for a test case is shown in Figure 8-14. In this example, as in Figure 8-13,
the test case incorporates the procedure as part of the body of the test case.

Figure 8-14. Generic test case template

Also notice that the template in Figure 8-14 has a little something extra up at the top.

    I like to put a block at the top of each of my test cases that shows, in a nutshell, what
type of test it is and what it needs in the way of a script or program if it happens to be
scripted (i.e., automatic). The summary block also states whether the test is valid with
the software running in a simulation mode, or if it needs the actual hardware in order
to be executed. Note that it is possible to have a “Yes” for “Valid with Simulator” and
a “No” for “Valid with Hardware.” This scenario can arise when the software’s internal
simulation capabilities, if it has any, allow some functionality to be exercised that can-
not be performed on a live system (e.g., during error-handling tests that use fault in-
jection). Next, if an automated script is used, it is named here. Lastly, if an external
source of commands and/or control signals is utilized for the test, that is noted here.

    Test cases may reside in a larger document as subsections, or they might be single
entities created as text files. Both approaches have their pros and cons. One large
document puts everything in one convenient place. Separate text files allow the test
cases to easily be placed under version control and revised independently.
You will need some way to record the pass/fail status of each test case, along with the
date on which it was last executed. A spreadsheet works well for this, as does a printed
listing of the test case IDs along with space to record the test results.


</t>
<t tx="zoomq.20110727085946.4363">Testing Error Handling
-------------------------------------------------------------------------------

One aspect of testing that too often gets overlooked is fault detection and error han-
dling. We touched on this briefly earlier when we discussed failure analysis, and here
we’ll see why it’s essential not only to test for correct functionality, but also to test for
the appropriate responses when things don’t go as planned.

The problem with testing error handling in software is that it is often much harder to
do than success testing. How, for instance, does one instigate a fault condition in a
communications channel? And how can a fault be simulated in the interface between
the software and an analog-to-digital converter? These are the types of errors that can,
and will, rear their ugly heads when least expected, so it’s to everyone’s benefit to test
them before the software is turned loose on the world.

A common approach to testing error handling is called “fault injection.” As the name
implies, this involves incorporating some functionality into the code that will allow the
tester to reach inside, so to speak, and set an internal variable that will induce the fault.

One way to do this is via a network socket connection that is used only for this purpose
and must be specifically enabled via a configuration parameter before it will commu-
nicate. A serial port connection can also serve in this role.
If the test involves an external device, just disconnecting it will inject a fault, but only
one type of fault. This approach won’t inject errors arising from corrupted data; it will
only simulate a complete lack of communications.

It is important to remember that the purpose of testing the system’s response to error
conditions isn’t necessarily to simulate the errors themselves, but rather to stimulate
the code that is supposed to handle the errors. An approach that I’ve found useful is
to create a collection of global state variables, perhaps in their own module, that are
used to record error conditions as the software executes. For example, the low-level
function that reads data from some hardware might record its success or failure in the
set of global state variables, and it should not overwrite an existing error indication.
The error state can then be checked by code further up that needs to obtain the data
from the hardware, and if an error is indicated it will initiate the appropriate action.

With a scheme like this it is possible to simply set the error condition by modifying
the appropriate global variable externally. The low-level code won’t override it, and
the upper-level code will see it and respond as if an actual error had occurred. Only the
lowest-level portions of the code will not be tested by this approach, but they can be
handled separately using other testing techniques.

We will leave error handling and fault injection at that for now, but we’ll return to it
later on. Of course, the usual caveat applies: there’s more than one way to get there
from here, and what I’ve described here is just one way to do it.

</t>
<t tx="zoomq.20110727085946.4365">Regression Testing
-------------------------------------------------------------------------------

The idea behind regression testing is simple: the question to ask is “Did any recent
changes break anything?” Any time you make a change to the code, whether to fix an
existing problem or to implement new functionality, you should do regression testing.
In order to perform regression testing, you would typically take some or all of the
existing set of functional tests and run them again on the modified software. A partial
regression test will focus on the functionality in the software where changes have oc-
curred. A full regression test will execute all available functional tests.

It is a well-established fact that changes to software will frequently introduce defects,
perhaps by allowing a previously dormant bug to manifest itself, or perhaps by creating
a new execution path that contains previously unknown defects. There is always the
possibility that the “fix” won’t turn out to be as good as hoped. Maybe it’s “brittle”
because it doesn’t account for things like range errors or off-nominal and unexpected
inputs. Regression testing can help uncover these and other problems before they be-
come unwieldy or, worse, before they escape into the wild as part of the released
software.

Regression testing isn’t, and shouldn’t be, just something one does with functional
tests. It also applies to unit tests, which we will get to shortly. Regression testing is also
something that can be automated in many cases, which means that it’s possible, and
often practical, to run a full suite of tests on the software overnight on a daily basis. A
quick review of the test results first thing in the morning will let you know if there’s
something from the day before that needs attention.

</t>
<t tx="zoomq.20110727085946.4367">Tracking Progress
-------------------------------------------------------------------------------

If you were to track the results from each round of functional testing over the life of the
project, you would probably end up with something like the series of bar graphs shown
in Figure 8-15. This is fairly typical for projects that rely heavily on functional testing
for verification, in that things start out a little rough and then start to improve as the
project progresses. If the project activities also include extensive unit testing and code
reviews, this scenario can be improved, and the overall level of functional test failures
should drop toward zero much sooner than what is shown here. But, in any case, the
ultimate objective is to have zero test failures and 100% requirements coverage by the
time the project wraps up.

Figure 8-15. Functional testing pass versus fail results over time
</t>
<t tx="zoomq.20110727085946.4369">Coding Styles
-------------------------------------------------------------------------------

A coding style has been created for almost every programming language. Sometimes
there are different styles for the same programming language. It’s not uncommon to
find that different companies, government agencies, research groups, open source
projects, and individual developers have their own styles. In some cases the coding
might be formalized in a document, whereas in other cases it’s just something that
evolved over time and has been used so often that it has simply become a habit.

In some cases the coding style may be enforced by a set of verifiable coding require-
ments. This is typical in environments that produce high-reliability or safety-critical
software. There are tools available that can analyze the source code against a set of
coding rules and generate messages when the software deviates from those rules. I don’t
feel it’s necessary to advocate that level of rigor for the projects in this book, but I do
think it’s important to define or adopt a good coding style, establish some basic rules,
and then stick to them consistently.


@others
</t>
<t tx="zoomq.20110727085946.4371">Organizing Your Code
-------------------------------------------------------------------------------

If you have a good SDD to start with, the organization of the code should be obvious
from the organization presented in the SDD. Applying some basic guidelines can also
help keep things neat, tidy, and easy to read.

First off, avoid the temptation to wedge everything into a single source module. There
is no penalty for having multiple modules, each containing functions or classes with
related functionality. This is a good thing because it helps keep things comprehensible,
and it can help make it easier to change something without impacting other parts of
the code. So, even if the SDD implies that 20 different functions (for example) could
reside in the same module, you might want to consider having two, three, or four
modules instead, each containing closely related functions.

Python’s concepts of packages and modules help to keep things neatly organized, and
you should take a little time and read up on them if you aren’t already familiar with the
concepts. C has no corresponding source code organization, but it too can easily be
modularized into header files, source files, and library modules.

Figure 8-16 shows a block diagram of just one way that the source code for an instru-
mentation application might be organized. This is only one way to do it, and other
approaches are certainly possible. The main point here is that the code is divided into
levels based on functionality, and each block in the diagram pertains to a particular
group or class of functions.

Figure 8-16. Code organization example

</t>
<t tx="zoomq.20110727085946.4373">Code Reviews
-------------------------------------------------------------------------------

Code reviews can be incredibly useful, particularly for helping to maintain stylistic
consistency and for spotting errors that the original author of the code may have con-
tinually overlooked, or just not been aware of. Code reviews cannot, however, take the
place of testing—the two activities are the opposite sides of the same coin.

Code reviews can also be a monumental chore if they aren’t done correctly. I once
participated in a series of code reviews that lasted for almost eight days. Why? Because
the other people participating in the review hadn’t bothered to read through the code
beforehand or review the SDD, so they didn’t know the structure, didn’t know the
intent of the functionality, and had to be walked through it line by line and have every
little detail explained to them as if it was a detailed design walk-through. The really
aggravating part was that this was code we’d all seen before, so there was really no
excuse for the waste of time.

A code review can be as simple as two people going over the code, or as formal as a
meeting with a moderator, a secretary, several reviewers, and the author of the software.
It all depends on the complexity of the software, how critical it is, and how complete
the SDD is from the outset. For most of the projects in this book, just having someone
else look it over will be very useful. Even if you have to walk the other person through
it (maybe she’s not a programmer), the activity of verbalizing what you’ve done can
often shed light on things you might have overlooked before.

Here are some ground rules for code reviews that I’ve found useful:

- Everyone should have at least skimmed through the code beforehand. If someone
shows up who hasn’t read through the code, call off the review and reschedule it,
or just carry on without that person (if possible).
- Everyone participating in the code review should have read the relevant parts of
the SDD before showing up.
- Focus on the things that are best suited for a code review: stylistic consistency,
obvious logical errors (a problem with an if-elif-else structure, for example),
uninitialized variables, a mismatched number of malloc and free calls (for C code),
or improper placement of class variables in module scope (and vice versa) are just
some examples.
- Use a checklist and try to stick to it. A code review checklist should contain the
key things to look for during the review. Try not to deviate too far from the check-
list, as this could end up wasting time better spent somewhere else.


The last item is particularly important. A basic checklist can save time and effort by
helping to focus attention and effort during the review, and it provides a convenient
way to keep track of results from the review. A minimal checklist might look something
like Figure 8-17.

Let’s look at the items in Figure 8-17 a bit more closely:

1. Has the design been correctly implemented in accordance with the SDD?
    The code must follow the SDD to the maximum extent possible (this depends, of
    course, on how well defined the SDD happens to be). Assuming that the intent is
    to comply with the requirements (initial or derived), code that does not follow the
    SDD is most likely not in compliance with the requirements. Bells and whistles
    may be cool and all that, but if there’s no requirement for them, at best the pro-
    grammer has wasted time building them into the software. At worst, undocumen-
    ted, noncompliant features may introduce all sorts of evil defects into the code that
    unit testing may not catch.

Figure 8-17. Minimal review checklist

2. Are there any obvious misspellings and typos?
    While unit testing may catch some misspelled variable names, it won’t catch all of
    them, especially with a language like Python that allows the code to create variables
    dynamically. A variable may have been defined at the start of a module, function,
    or method and then misspelled further down, and the code might still pass a unit
    test. This is something to watch for if a module or class has a variable that is used
    to track some internal state, and that variable is only set inside the code and only
    read by code somewhere outside of the class or module. It might never change if
    it’s misspelled, and the external caller will never know the difference.

3. Does the software follow the project coding guidelines and conventions?
    This one is rather obvious, and it’s even more obvious during a review. If a coding
    style is going to be used, it should be used consistently.

4. Do the comments make sense? Are they necessary? Are there enough comments, or too many?
    Comments are sometimes used as a way to cover up poor coding (perhaps there
    was a lack of understanding, or a section of code was a bit of a stretch when it was
    written). They can also be overused (commenting a line like a += 1, for example—
    it happens quite often, actually). Comments should only appear when necessary
    to explain something that might not otherwise be obvious, including what a func-
    tion or method is supposed to do.
5. Are data objects (e.g., structures, dictionaries, arrays, etc.) adequately defined?
    All data objects should have a comment unless their use is immediately obvious.
    This is especially true for compound objects like Python’s dictionaries or structures
    in C. A variable used as a simple index counter in a loop probably doesn’t need a
    comment.
6. If literal constant values are used, are they the correct values?
    Whenever a literal constant value is used it is “cast in stone,” so to speak, so it
    really needs to be right from the outset. Mistyping a value can result in some de-
    cidedly unwanted behavior on the part of the software.
7. Are the same constant values used in multiple places when they should be defined
    in a common location?
    If the same literal value is used in two or more places, it should be converted into
    a global literal of some form and its name should be used in the code instead of the
    “naked number.” This allows it to be changed in just one place, and that change
    will then take effect wherever the name appears. The alternative is to try to track
    down every place where it appears, and as the number of occurrences increases,
    so too does the chance that it will be missed somewhere and will cause grief later.
8. Are there any obvious repeated sections of the code that could be encapsulated as
    a function or method?
    If the code contains what essentially amounts to the same functionality repeated
    in multiple locations, that functionality should probably be a function or method
    that can be called whenever it is needed.
9. Is there any code that, just on inspection, appears that it will never be executed?
    So-called “dead code” is something to be avoided. It clutters up the software,
    making it difficult to determine what it is really supposed to do. It might also be
    inadvertently activated later by someone who doesn’t fully understand why it’s
    there, or through an untested path that occurs only under very unique circum-
    stances. In other words, it presents a risk and a potential place for bugs to lurk. If
    it’s not used, take it out. To really ensure that all the code is executed you need to
    use a code coverage tool, but catching the obvious during a review is a good start.
10. Are all the variables and constants defined in the code actually used in the code?
    If a module, function, method, or class defines variables, it should be used. If it is
    not used, like sections of dead code, it should be removed.

You could, of course, have a checklist with many more items than this, but I feel that
this is a good place to start. It’s short enough that you could feasibly review your own
code (if there is no one else available to review it with you), although having a second
pair of eyes (or more) is always better.





</t>
<t tx="zoomq.20110727085946.4375">Unit Testing
-------------------------------------------------------------------------------

The intent of unit testing is to exercise the functionality of a small portion of the overall
software. A unit might be a function, a class, or a single method within a class. It is
typically the smallest possible logical unit of code capable of execution on its own. For
example, a function that accepts a raw binary data value from an external instrument,
performs some scaling and range checking, and returns a binary value along with a
return code would be a unit. It can be tested by supplying it with both nominal and
off-nominal input values. While a Python unit is being tested, the code coverage can
also be determined. This is a bit more difficult in C, particularly if the code is part of a
low-level extension module, but it is doable. However, we’ll stick to Python unit testing
in this book.

@others
</t>
<t tx="zoomq.20110727085946.4377">Connecting to the Hardware
-------------------------------------------------------------------------------

There comes a point during the development of software when you will need to see if
it will actually play nice with the hardware. Hopefully this point will come sooner rather
than later, because what you really don’t want is to get close to the end of the effort
and then discover that the hardware doesn’t really work like you thought it did, or that
your code has a bug—or two, or more—that doesn’t appear until the interface is active
(I’ve been faced with both of these situations in the past, and they weren’t the least bit
fun). These types of bugs typically involve things like data representation, bit order,
timing, or some other subtle thing that unit testing may have a hard time catching. It
is even possible that the hardware has a problem, and you really don’t want to be on
the phone at the eleventh hour trying to get your hardware repaired or replaced after
it’s been sitting on a shelf for months waiting for you to use it.

Start with small, manageable low-level modules and build on them. In other words, if
your application uses a serial port to communicate with an external device, first test
just the serial interface module with the hardware (or a simulator, which we will discuss
in Chapter 10). Once that is working correctly, add on more functionality. One of the
biggest mistakes people make when attempting to implement a new system is to
immediately throw all of the software at the hardware in one go. If you’re really lucky
it might work, but the odds are good that it won’t. The real problem with the all-or-
nothing approach is that you might have more than one thing going wrong at once,
and it can be very difficult to determine what is causing which error because they can
mask one another. Worse yet, there may be nothing wrong with the individual units
of the software, but there may be some major issues when you attempt to integrate
them all at once.


You may need to do things a little differently in your project, but here’s one suggested
integration order:

1. Low-level extensions (driver wrappers and such)
2. Communications (serial interface handlers and remote communications, for
example)
3. Utility functions and classes (like the InputUtils.py module we saw earlier)
4. Data-processing and error-handling functionality

In other words, start integrating the software to the hardware, and to itself, from the
bottom up. The following is a summary of the benefits of early integration:

• Low-level supporting functionality is tested and verified first, providing a solid
foundation on which to add more complex functionality.
• If the code is correctly and sufficiently modular, the low-level (and even some of
the mid-level) modules can go into your “software parts box” for possible reuse on
future projects.
• Errors can be easily identified and resolved while they are small and manageable,
hopefully before they appear and propagate anomalous behavior throughout the
rest of the software.

Once you have all the underlying functionality in place, the last steps involve integrating
the upper-level functionality, such as the data-processing and user interface, with the
modules that have already been tested and verified.


</t>
<t tx="zoomq.20110727085946.4378">Why coding style is important
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
One benefit of consistently following a particular coding style is that it will result in
software that is stylistically consistent, preferably with a clear and easy-to-comprehend
format. This typically isn’t done just for aesthetic reasons. It’s done so that the code
can be read and reviewed by someone other than the original author with a minimum
of effort.

Another benefit is that it defines a programming style that avoids potentially dangerous
features in the language. In the C language, for example, one can use pointers to directly
reference memory that has been allocated to the program. That may be fine for many
applications, but when the software is running on a memory-constrained embedded
system, the coding rules will usually prohibit the use of dynamic memory allocation in
order to avoid fatal pointer errors and memory “leaks.” In an embedded system, with
no one around to push a reset button, these situations can produce effects that are much
worse than just having the program crash. As another example, the Python language
allows the programmer to create dictionary objects on the fly, pass them around as
both parameters and return values, and modify them dynamically along the way. After
a dictionary object has been tweaked by multiple functions or methods, it can become
difficult to know just what’s in it, where it came from, and what it does.
</t>
<t tx="zoomq.20110727085946.4380">Adopting existing coding style guidelines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The good folks at Python.org have documents available online that define a set of basic
coding style guidelines. The primary document is PEP-8, “Style Guide for Python
Code”; PEP-257, “Docstring Conventions,” also contains useful information.

Style is about consistency, primarily in the layout, names, and organization of your
code. To quote from PEP-8: “A style guide is about consistency. Consistency with this
style guide is important. Consistency within a project is more important. Consistency
within one module or function is most important.”

If you’re new to Python, or programming in general, I would suggest that you stick to
PEP-8 as much as possible. This is the best way to find out what works, and what
doesn’t. After you’ve gained more experience, or if you already have a lot of experience,
you might be in a position to make a case for using your own variations.

While there are some guidelines for C programming style floating around, there also
seem to be a large number of variations. Some programmers use the K&amp;R “ANSI C”
reference book as their style guide. In other cases, a style guide might already exist, or
there may be explicit coding style requirements. Regardless of the style you select, be
consistent with it.

</t>
<t tx="zoomq.20110727085946.4388">Defining a unit test
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A unit test doesn’t necessarily map directly to a requirement, but it does map directly
to the SDD. Assume the SDD defines a function that scales the data. It might look like
this somewhat trivial example::

    def ScaledInput(data):
        rc = NO_ERR
        scaled_data = data
        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
            if scaled_data &gt; SCALE_MAX:
                scaled_data = SCALE_MAX
                rc = ERR_MAXSCALE
            elif scaled_data &lt; SCALE_MIN:
                scaled_data = SCALE_MIN
                rc = ERR_MINSCALE
        else:
            rc = ERR_OVER
        return (rc, scaled_data)


For our purposes, we can assume that data_scale and data_offset are set elsewhere
(perhaps when the software initializes itself). DATA_MIN, DATA_MAX, SCALE_MIN, SCALE_MAX,
NO_ERR, ERR_MAXSCALE, and ERR_MINSCALE are “constants” that do not change during
program execution and that have hardcoded values, perhaps in another module where
such things reside by themselves.

Lastly, note that the data return value is initialized to the value of the raw input data.
Should an input range error occur, the function will still return data, but it won’t be
scaled or otherwise adjusted. If a scaling error occurs, the data returned will be either
the scaled maximum possible or the minimum. It is the responsibility of whatever called
this function to check the return code (rc) portion of the returned 2-tuple to see if an
error has occurred.

A unit test is constructed such that all possible inputs are used to force the execution
to traverse all possible paths. One way to achieve this is to create a test table. In the
case of ScaledInput(), we can see that there are three obvious input cases: too low, too
high, and within range. Table 8-5 shows these three test cases for this function.




.. list-table:: Table 8-5. ScaledInput() test cases
   :widths: 5 20 5 20
   :header-rows: 1

   * - Test  
     - Input
     - RC
     - Output
   * - 1  
     - data &lt; DATA_MIN 
     - ERR_OVER 
     - Raw input data
   * - 2  
     - Input
     - data &gt; DATA_MAX 
     - Raw input data
   * - 3  
     - min &lt;= data &lt;= max 
     - NO_ERR 
     - Processed data


This is a good start, but it’s incomplete: there are no tests for the cases where
scaled_data might exceed the scaling limits, so there are paths in the code that may not
be exercised by the original three test cases. We need something more. Table 8-6 shows
the complete suite of test cases for this deceptively simple function.


.. list-table:: Table 8-6. ScaledInput() test cases (complete)
   :widths: 5 10 5 5 10 10
   :header-rows: 1

   * - Test  
     - Input
     - data_scale 
     - data_offset
     - RC
     - Output
   * - 1
     - data &lt; DATA_MIN 
     - 1.0
     - 0.0
     - ERR_OVER 
     - Raw input data
   * - 2
     - data &gt; DATA_MIN 
     - 1.0
     - 0.0
     - ERR_OVER 
     - Raw input data
   * - 3
     - min &lt;= data &lt;= max 
     - 2.0
     - 0.0
     - NO_ERR 
     - Processed data
   * - 4
     - min &lt;= data &lt;= max 
     - 10.0
     - 0.0
     - ERR_MAXSCALE  
     - SCALE_MAX
   * - 5
     - min &lt;= data &lt;= max 
     - -10.0
     - 0.0
     - ERR_MINSCALE  
     - SCALE_MIN
   * - 6
     - min &lt;= data &lt;= max 
     - 1.0
     - 1000.0
     - ERR_MAXSCALE  
     - SCALE_MAX
   * - 7
     - min &lt;= data &lt;= max 
     - 1.0
     - -1000.0
     - ERR_MINSCALE  
     - SCALE_MIN


The actual values for data_scale and data_offset would, of course, depend on the
values of SCALE_MAX and SCALE_MIN, but for our purposes here we can assume that they
are appropriate for the results defined in the table of test cases. This also applies to
DATA_MIN and DATA_MAX.

Although it might be argued that the last two cases aren’t really necessary, they do
provide complete coverage of all possible inputs to the function. I should also point
out that the table describes the expected behavior, which includes the cases where rc
contains something other than NO_ERR. In a unit test a failure would be any result that,
given the specified inputs, does not conform to the table, not just the presence of an
error value in the return code. A unit test case document should contain a table like
Table 8-6 for every unit test to be performed. It would also define any necessary con-
ditions for the tests.




.. topic:: Creative Time Wasting—Testing Without Justification

    Even though unit tests do not necessarily map directly to driving requirements in the
    same way that functional tests do, they still need to have some kind of documentation
    to describe what they are intended to demonstrate and how to execute them. Imple-
    menting any tests, either unit or functional, without some kind of justification for their
    existence and a description of the pass/fail criteria is usually just a waste of time, even
    if it’s just a simple test. If you don’t know what a test is supposed to demonstrate, how
    can you tell if it really succeeds or not?

    It is also worthwhile to consider this tidbit of wisdom: code that includes undocumen-
    ted tests is actually worse than code that includes no tests at all. Why? Well, with
    untested code you can be fairly certain that it has bugs, whereas code that contains
    meaningless tests may lull you into a false sense of security, even though the odds of
    the code containing serious defects remains high. Or, to put it in a nutshell (and repeat
    what has been said many times before by many others): testing badly done is worse
    than no testing at all.








</t>
<t tx="zoomq.20110727085946.4392">Implementing unit tests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

With a table of test cases, we can now write the actual unit test. Fortunately, Python
includes a built-in unit test facility, and code coverage capability as well (as the Python
folks say: batteries included). The following is a module called InputUtils.py contain-
ing just one function, ScaledInput(). There is no reason it couldn’t contain more utility
functions for input verification and processing, but for now, this is it.

The return code “constants” used by ScaledInput() are defined within the same mod-
ule, although in reality you would probably want to put them in a module by themselves
(and with nothing else) so they can easily be imported and used by other parts of your
application. Because we know that using a wildcard import is generally to be avoided,
I haven’t put leading underscore characters on any of the variable names, but in practice
it would be a good idea to do so because you don’t know what someone may decide
to do with your code at a later date.

That said, let’s take a look at the module code::

    """ InputUtils.py
        A collection of input verification and processing functions.

        Just have one (ScaledInput) for now.
    """
    NO_ERR = 0
    ERR_OVER = −1
    ERR_MAXSCALE = −2
    ERR_MINSCALE = −3

    DATA_MIN = −10.0
    DATA_MAX = 10.0
    SCALE_MIN = −50.0
    SCALE_MAX = 50.0

    data_scale = 1.0
    data_offset = 0.0

    def ScaledInput(data):
        rc = NO_ERR
        scaled_data = data

        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
            if scaled_data &gt; SCALE_MAX:
                scaled_data = SCALE_MAX
                rc = ERR_MAXSCALE
            elif scaled_data &lt; SCALE_MIN:
                scaled_data = SCALE_MIN
                rc = ERR_MINSCALE
        else:
            rc = ERR_OVER
        return (rc, scaled_data)

Now we just need some way to exercise ScaledInput() using the test parameters listed
in Table 8-6. Python’s unittest facility is the tool of choice for this.
As with just about everything else in Python, there are several ways to use the Python
unittest facility, and this is just one of them. I prefer this approach because it’s
straightforward and (at least to me) rather obvious. Let’s look at the code, which resides
in the module test_001.py, and then we’ll walk through it and see what it does::

    import unittest
    import InputUtils as UUT

    class test_001_UT(unittest.TestCase):
        def test_001_UT_01(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 0.0
            data = −11
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_OVER
            assert sdata == data

        def test_001_UT_02(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 0.0
            data = 11
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_OVER
            assert sdata == data

        def test_001_UT_03(self):
            UUT.data_scale = 2.0
            UUT.data_offset = 0.0
            data = 5
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.NO_ERR
            assert sdata == data * UUT.data_scale
        def test_001_UT_04(self):
            UUT.data_scale = 10.0
            UUT.data_offset = 0.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MAXSCALE
            assert sdata == UUT.SCALE_MAX
        def test_001_UT_05(self):
            UUT.data_scale = −10.0
            UUT.data_offset = 0.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MINSCALE
            assert sdata == UUT.SCALE_MIN
        def test_001_UT_06(self):
            UUT.data_scale = 1.0
            UUT.data_offset = 1000.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MAXSCALE
            assert sdata == UUT.SCALE_MAX
        def test_001_UT_07(self):
            UUT.data_scale = 1.0
            UUT.data_offset = −1000.0
            data = 10
            rc, sdata = UUT.ScaledInput(data)
            assert rc == UUT.ERR_MINSCALE
            assert sdata == UUT.SCALE_MIN

    suite = unittest.TestLoader().loadTestsFromTestCase(test_001_UT)
    unittest.TextTestRunner(verbosity=3).run(suite)



The first thing to notice is that it imports only two things: the unittest library from
Python and the module to be tested, InputUtils, which is aliased to the name UUT. The
next step is to declare a class that inherits from the generic test case template,
TestCase. Within this new class we create seven member methods, one for each of the
test cases in Table 8-6.

Each test case method is identical with the exception of the data, scale, and offset
parameters. The variables data_scale and data_offset reside in the UUT module,
whereas the input data is passed directly to the function ScaledInput() by each test case
method.

After a test case method sets up the initial conditions, it calls ScaledInput(). The return
code and the processed data are captured in the variables rc and sdata, respectively.

The returned values are then tested using Python’s assert statement. If the expression
is True, the assertion passes; both assertions in each test case method must be True for
the test case to pass. The resulting output looks like this::

    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    ok

    ----------------------------------------------------------------------
    Ran 7 tests in 0.000s

    OK






</t>
<t tx="zoomq.20110727085946.4394">assert versus assertEqual() and friends
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The unittest library has its own collection of assert-type methods in the TestCase class
that have been tailored specifically to unit testing. Two of the more commonly used
are assertEqual() and assertNotEqual(). As an example, we can rewrite
test_001_UT_07 using these methods to look like this::

    def test_001_UT_07(self):
        UUT.data_scale = 1.0
        UUT.data_offset = −1000.0
        data = 10
        rc, sdata = UUT.ScaledInput(data)
        self.assertEqual(rc, UUT.ERR_MINSCALE)
        self.assertEqual(sdata, UUT.SCALE_MIN)


Why use assertEqual() and not just assert? There are two possible reasons: first, if the
code is run with optimization enabled (the -O command-line switch), assert statements
are ignored; second, the assertEqual() method generates some additional information
that assert does not (at least, not without some extra work, as we’ll see shortly). Let’s
say that test case 07, using the vanilla assert statement, encounters an error and the
last assertion fails. Here’s what the output of the test run would look like::

    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    FAIL
    ======================================================================
    FAIL: test_001_UT_07 (test_001.test_001_UT)
    ----------------------------------------------------------------------
    Traceback (most recent call last):

    File "test_001.py", line 61, in test_001_UT_07
    assert sdata == data
    AssertionError

    ----------------------------------------------------------------------
    Ran 7 tests in 0.050s

    FAILED (failures=1)


While this does indicate that test 7 failed, it doesn’t tell us why. If we replace the
assert statements with assertEqual() and run the test again, it will still fail, but the
assertEqual() method will display the values of the two variables that failed the equality
check::
    &gt;&gt;&gt; import test_001
    test_001_UT_01 (test_001.test_001_UT)
    test_001_UT_02 (test_001.test_001_UT)
    test_001_UT_03 (test_001.test_001_UT)
    test_001_UT_04 (test_001.test_001_UT)
    test_001_UT_05 (test_001.test_001_UT)
    test_001_UT_06 (test_001.test_001_UT)
    test_001_UT_07 (test_001.test_001_UT)
    ...
    ...
    ...
    ...
    ...
    ...
    ...
    ok
    ok
    ok
    ok
    ok
    ok
    FAIL

    ======================================================================
    FAIL: test_001_UT_07 (test_001.test_001_UT)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
        File "test_001.py", line 61, in test_001_UT_07
            self.assertEqual(sdata, data)
    AssertionError: −50.0 != 10

    ----------------------------------------------------------------------
    Ran 7 tests in 0.000s

    FAILED (failures=1)


Here we can plainly see what caused the problem, and on what line it occurred.

.. seealso:: (^.^)

    To be fair, I should point out that I rigged this test to illustrate a
    test failure by comparing the processed data value from the
    ScaledInput() function to the original data input parameter, not to
    UUT.ERR_MINSCALE, which is what it actually is.



There have been arguments made about the merits of assert versus assertEqual(),
some better than others, but I think that in the end it comes down to what you need
to accomplish with your unit testing and what makes sense for you. If you are never
planning to run your unit tests under optimization, and you don’t have a compelling
need to see the test parameters for every failure, go ahead and use the plain old vanilla
assert statement. That being said, there is a way to see what failed; it just requires a
bit more typing. I should point out that I’m showing you this just to be complete—it’s
not something I think you should actually do on a regular basis.


The formal syntax for assert (as stated in Section 6.3 of the Python 2.6.5 documenta-
tion) is::

    assert_stmt ::= "assert" expression ["," expression]

The second expression can be used to append a message to the exception’s output, like
so::
    &gt;&gt;&gt; var1 = 1
    &gt;&gt;&gt; var2 = 2
    &gt;&gt;&gt; assert var1 == var2, "%s != %s, at least not in this universe!" % (var1, var2)
    Traceback (most recent call last):
        File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    AssertionError: 1 != 2, at least not in this universe!



This is just a bird’s-eye view of what unittest can do, but we’ll leave it at that for now.
And, of course, there is much more information about unittest and its methods in the
Python documentation.
Unit testing is something that should be done as a normal part of software development.

As soon as a new function or method is complete you should create a unit test for it,
and then run it often. In some environments other people may be responsible for cre-
ating the functional tests and setting up the test environment, but the person who wrote
the code is uniquely qualified to create the unit test. This is also more efficient than
having someone try to figure out what the code does and then create the tests for it
after the fact.

</t>
<t tx="zoomq.20110727085946.4396">Code coverage
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

While unit testing is good for performing basic low-level tests, it can also serve another
equally important purpose: code coverage analysis.

If you’re not familiar with code coverage analysis, the idea is actually very simple. Every
line of code in a program must be executable. Or, to put it another way, you don’t want
any “dead code” in your software that might come back to haunt you later. Code cov-
erage analysis also tells you if your unit tests are complete. Incomplete unit tests can
leave dark corners in the software where evil things may be lurking, so you really want
to touch everything while you’re testing.

Figure 8-18 shows the flowchart for the ScaledInput() function. If you compare this to
the test cases listed in Table 8-6, you should be able to readily identify the paths of
execution that each of the test cases will follow (just look for the return codes). I’ve
changed some of the variable names so things will fit nicely.

As we discussed earlier, one way to find dead code is through code reviews. Another
way is to use a tool that can follow along with the execution of the software and keep
track of which statements have been executed and which have not. I recommend the
coverage package from Ned Batchelder, which is available at http://nedbatchelder.com/
code/coverage/.

Figure 8-18. ScaledInput() flowchart

Once you’ve installed it, you can run it by simply typing coverage along with a com-
mand parameter and a source filename at the command prompt (note, not python
coverage, just coverage). This command will execute the specified program module and
generate some coverage statistics. Using our example unit test, we would enter::

    coverage -x test_001.py


The -x command-line switch tells coverage to execute the program and collect coverage
data. The newer run parameter is also available. Type coverage help at the command
line to see what the newer-style parameters look like, and coverage help classic to see
alternate older-style command-line parameters. I prefer the older style, myself. The
output should look exactly like what you would expect to see when running the
unittest module as we did previously, but coverage has generated something extra for
us: a coverage metrics data file.


Using coverage’s report function, we can see the code coverage data in a nice tabular
format. The -m switch tells coverage to also show the line numbers of code that wasn’t
executed::

    coverage report -m


The output looks like this::

Name        Stmts   Exec Cover  Missing
------------------------------------------
inpututils  23      23      100%
test_001    54      54      100%
------------------------------------------
TOTAL       77      77      100%


This demonstrates that all of the statements in ScaledInput() are executed by the test
cases, and that every possible path in Figure 8-18 has been taken. No dead code here!
coverage has also tracked the execution of the test_001 wrapper, but you can exclude
that from the analysis if you wish, as explained in the documentation for coverage.






</t>
<t tx="zoomq.20110727085946.4398">Documenting Your Software
-------------------------------------------------------------------------------

While the SDD may constitute a plan for your software, it doesn’t necessarily take the
place of code-level documentation. Depending on the level of detail in the SDD, it may
describe the architecture of the application only in general terms, without specific de-
tails such a function or method parameters, global variables, and so on. In fact, it typ-
ically makes sense to not put an excessive amount of detail into the SDD, because
invariably things will change as result of unit testing and integration activities. So where
do we put things like descriptions of function parameters? In the code, of course.

Python includes the embedded documentation concept known as the docstring. My
recommended tool for extracting docstrings and generating nicely formatted and
indexed HTML pages of code documentation is the Epydoc tool from Edward Loper.
You can download it from http://epydoc.sourceforge.net.

To illustrate how it works, here is the InputUtils module again, only this time I’ve
added docstrings and renamed it to InputUtils2.py::

    """ InputUtils.py
        A collection of input verification and processing functions.

        Just have one (ScaledInput) for now.
    """
    NO_ERR = 0  #: No error
    ERR_OVER = −1  #: Overrange error code (+ or −)
    ERR_MAXSCALE = −2 #: Maximum + output value exceeded
    ERR_MINSCALE = −3 #: Maximum − output value exceeded
    DATA_MIN = −10.0 #: Maximum - input value
    DATA_MAX = 10.0 #: Maximum + input value
    SCALE_MIN = −50.0 #: Maximum - output value
    SCALE_MAX = 50.0 #: Maximum + output value
    data_scale = 1.0 #: scaling coefficient
    data_offset = 0.0 #: offset coefficient

    def ScaledInput(data):
        """ Input data checking and scaling.
            Uses global coefficients to scale a data value and apply an offset to it.

            The operation is, in effect, the common y = mx + b slope intercept form,
            where m is the scaling coefficient, b is the offset, and x is the input
            data. The values of m and b are provided via adjustable global variables.

            The input data is checked against predefined range limits. The result is
            also checked to ensure that it does not exceed predefined output range
            limits.

            If the input is out of range then ERR_OVER (overrange) is returned.

            If the output is out of range then the maximum possible value (+ or −)
            is returned.

            The output is a 2-tuple consisting of the return code and the result value.

            @param data: The input data value

            @return: Returns a 2-tuple with the return code and the modified
                    input data if no range errors occur. Otherwise returns
                   the unmodified input data value.
        """
        rc = NO_ERR
        scaled_data = data

        if data &gt;= DATA_MIN and data &lt;= DATA_MAX:
            scaled_data = (data * data_scale) + data_offset
        if scaled_data &gt; SCALE_MAX:
            scaled_data = SCALE_MAX
            rc = ERR_MAXSCALE
        elif scaled_data &lt; SCALE_MIN:
            scaled_data = SCALE_MIN
            rc = ERR_MINSCALE
        else:
            rc = ERR_OVER

        return (rc, scaled_data)


Epydoc generates a set of HTML files by default. If we open the top-level file,
index.html, the result looks like Figure 8-19. Notice that the module global variables
are also documented.

Figure 8-19. Example Epydoc output

Epydoc is a very useful and powerful tool. For C or C++ there is a similar tool, Doxygen,
by Dimitri van Heesch, that also generates HTML output and uses markup tags in the
comment text. It is available from SourceForge at http://sourceforge.net/projects/doxy
gen/.



</t>
<t tx="zoomq.20110727085946.4400">Version Control
-------------------------------------------------------------------------------
Version control is a critical part of any design and development activity. A good version-
control tool allows you to track changes and maintain a history for a particular file. It
also gives you a way to “step back” to an earlier revision if you find that something
didn’t work quite as planned. Even if you are the only software developer, having a
version-control tool available can make the difference between wails of anguish and
“Oh, no problem, I’ll just go back to the previous version.”


My tool of choice for version control is CVS. Granted, it’s starting to show its age, but
it’s still in widespread use. Newer tools, such as SubVersion, have appeared, but I go
back far enough to remember learning to use RCS and SCCS, so I just happen to feel
more comfortable with CVS (which, by the way, is descended from RCS). I advocate
using it for any text file, be it source code, use cases, or HTML files. It doesn’t work
quite as well with binary or mixed-mode files, such as those generated by Word, but
there are open source tools available that can handle Word and Excel documents and
maintain a version history.

There is much that can be said about version control, and whole books have been
written about it. This book is not one of those, but I would encourage you to seek them
out and read them. The book Essential CVS, by Jennifer Vesperman (O’Reilly), is an
excellent place to start. The home of CVS is http://www.nongnu.org/cvs/, and of course
Wikipedia has a write-up on it, which is located at http://en.wikipedia.org/wiki/Concur
rent_Versions_System.

Lastly, I have found that the manpages for CVS on most Linux installations have a
massive amount of well-organized information. In fact, my favorite CVS “manual” is a
binder with a printout of the CVS manpages and a few extra pages of notes.

</t>
<t tx="zoomq.20110727085946.4402">Defect Tracking
-------------------------------------------------------------------------------

Bug-tracking tools, also known as defect trackers, are essential in a team environment,
where one person (a tester, perhaps) may be finding defects that another person (usually
the person who wrote the code) will then attempt to resolve. For a one-person project,
a full-on defect tracker might not be necessary if you are good at taking notes and
keeping track of your “to-do” items, and you use a version-control tool. Because the
focus of this book is on small projects with one or perhaps two software developers, I
won’t spend a lot of time on defect tracking. I will, however, try to provide enough
information to give you an idea of what is involved, and provide some URLs you can
check out for more information and software packages.

The idea behind a defect tracker is simple. First, a defect is discovered. It is then entered
into the system, and the resulting “ticket” is assigned to someone. The defect entry then
goes through a series of states, typically along the lines of unread, working, testing,
verified, and resolved. It might also transition from working to testing and back to
working again a few times before it is finally ready to be verified and marked as resolved.

Most open source defect trackers utilize a web-based interface, and some require a web
server. I happen to prefer the Roundup tool, which is available on SourceForge, because
it’s simple to set up, easy to use, and it doesn’t require a web server (although you can
use it with one, if you want to). It’s also written entirely in Python.

If you want to learn more about Roundup, you can check out its home page: http://
roundup.sourceforge.net.

Finally, Steve McConnell has an interesting paper on how defect tracking can be used
to determine if software is really ready for release. It is available at http://www.stevemc
connell.com/ieeesoftware/bp09.htm.

</t>
<t tx="zoomq.20110727085946.4408">User Documentation
===============================================================================

At some point, your project will (hopefully) be done. All the requirements have been
defined, the SDD is complete, the code is written and the testing is finished, and it all
seems to work as intended. If everything has gone according to plan, you should have
working software as the end result of your hard work and diligent attention to detail.
But there is one last step that needs to be completed before it is really done: the user
documentation.

Even if you’ve created something primarily for your own use, you still should have some
kind of documentation that describes how to use your creation. For projects with a
limited distribution, I often use a three-ring binder and clear sheet protectors. I print
out key procedures, parameter values, error codes, and other essential information on
single sheets and slip them into the protectors. In essence, this is a highly condensed
version of what a full-on user manual might contain. The advantage to this approach
is that I can create each page as it’s needed, put them into the notebook as they become
available, and easily replace them if things change (as they almost always will). The
binder then lives in the lab with the system so that anyone, including myself, who might
need a quick refresher on how to use it can grab the binder and look it up.


If the system is intended for broad distribution, though, you’ll need to consider creating
an actual user manual for it. This may seem daunting, but a good place to start is to
look at other user manuals. Which ones do you like (or not like), and why? Pick one
or two that you think are well written and model your documentation on those.

</t>
<t tx="zoomq.20110727085946.4409">LOG = logging.getLogger('cvs')
LOG.setLevel(logging.DEBUG)
LOG.addHandler(MongoHandler.to(db='mongolog', collection='log', host='127.0.0.1', port=27117,))
</t>
<t tx="zoomq.20110727085946.4412">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''fadpop 常用工具集
'''
VERSION = "fadutil.py v11.07.27"

&lt;&lt;imports&gt;&gt;

@others

if __name__ == "__main__":
    print """ fadpop 常用小工具集 usage:
from fadutil import run_time
        """ % VERSION

</t>
<t tx="zoomq.20110727085946.4413">import time

import logging
from mongolog.handlers import MongoHandler

LOG = logging.getLogger('fadloc')
LOG.setLevel(logging.DEBUG)
LOG.addHandler(MongoHandler.to(db='mongolog', collection='log', host='127.0.0.1', port=27117,))
</t>
<t tx="zoomq.20110727085946.4416">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "loadpics.py v11.08.1"

&lt;&lt;imports&gt;&gt;
&lt;&lt;define&gt;&gt;

FOTO_SIZE = {'thumb':"Small"
    ,'mid':"mid"
    ,'big':"Big"
    }
@others

if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s 
进一步处理anapichtm.py生成的大图对应字典,将实际下载的各种图片加载到 Mongo 中
usage::
$ python /path/2/loadpics.py /path/2/*_bigpic.pkl /path/2/images.vancl.com
                 |               |                      +- 镜像的图片目录入口(注意!不应该有最后的/)
                 |               +- 字典对象序列化文件
                 +- 指向本脚本
        """ % VERSION
    else:
        loadpics(sys.argv[1], sys.argv[2])
</t>
<t tx="zoomq.20110727085946.4417">import os
import sys
#import fnmatch
#import time
import types
import traceback
#import urllib
import pickle
#from copy import copy

import Image

#from pyquery import PyQuery as pq
#from lxml import etree

from pymongo import Connection
from pymongo import errors as ERR
import gridfs

# import original mod.
sys.path.append(os.path.abspath("../../"))
from common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110727201525.2842">wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://s.vancl.com/3360.html" http://www.vancl.com/map/default.aspx

http://www.vancl.com/
    http://www.vancl.com/map/default.aspx
    http://s.vancl.com

wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://www.moonbasa.com/p-010110409.html" http://www.moonbasa.com/help/sitemap.aspx

http://www.moonbasa.com/
    http://www.moonbasa.com/help/sitemap.aspx

wget -m -c -nv --reject=gif -p --cookies=off -w 3 --random-wait -t 7 --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" --referer="http://list.m18.com/N1-N102-12-40-1-00-1.htm" http://www.m18.com/statichtml/fenlei.html

http://www.m18.com/
    http://www.m18.com/statichtml/fenlei.html
</t>
<t tx="zoomq.20110728084936.4223">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "expuri.py v11.08.1"


&lt;&lt;imports&gt;&gt;

@others

@run_time
def exp_all_sid_in_tpl(cursor, uritpl):
    loop = 0
    while cursor.alive:
        try:
            print uritpl % cursor.next()['sid']
            loop += 1
        except:
            break
    LOG.info("exp. all as:%s"% loop)

if __name__ == "__main__":
    if 7 != len(sys.argv):
        print """ %s 根据条件将指定仓库.集合中的文档内容用URI模板输出到 STDOUT usage::
$ python /path/2/expuri.py host port db collection {'sid':1,'_id':0} "http://..."
                 |                |    |   |    |           |           +- URI模板字串
                 |                |    |   |    |           +- 过滤条件
                 |                |    |   |    +- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
        """ % VERSION
        # localhost 27017 fad_docs vancl_items "{'sid':1,'_id':0}" "http://item.vancl.com/%s.html"

    else:
        FADDB = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        FADCOLL = FADDB[sys.argv[4]]
        #print sys.argv[-1]
        CURSOR = FADCOLL.find({}, eval(sys.argv[-2]))
        exp_all_sid_in_tpl(CURSOR, sys.argv[-1])
</t>
<t tx="zoomq.20110728084936.4224">import os
import sys
#import time
#import traceback
from pymongo import Connection
#from pymongo import errors as ERR



# import original mod.
sys.path.append(os.path.abspath("../../"))
from common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110729105657.4269">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "imgurlistr.py v11.07.28"

&lt;&lt;imports&gt;&gt;

@others

@run_time
def expallsid(cursor):
    loop = 0
    while cursor.alive:
        try:
            print "http://item.vancl.com/Styles/BigImg.mvc?ProductCode=%s" % cursor.next()['sid']
            loop += 1
        except:
            break
    #print loop
    LOG.info("exp. all as:%s"% loop)

if __name__ == "__main__":
    if 6 != len(sys.argv):
        print """ %s 根据条件将指定仓库.集合中的文档内容输出到 STDOUT usage::
$ python /path/2/imgurlistr.py host port db collection {'sid':1,'_id':0}
                 |                |    |   |    |           +-- 过滤条件
                 |                |    |   |    +-- 集合名
                 |                |    |   +- 仓库名
                 |                |    +- 端口
                 |                +- 主机IP
                 +- 指向本脚本
        """ % VERSION
    else:
        FADDB = Connection(sys.argv[1], int(sys.argv[2]))[sys.argv[3]]
        FADCOLL = FADDB[sys.argv[4]]
        #print sys.argv[-1]
        CURSOR = FADCOLL.find({}, eval(sys.argv[-1]))
        expallsid(CURSOR)
</t>
<t tx="zoomq.20110729105657.4270">#import os
import sys
#import time
#import traceback
from pymongo import Connection
#from pymongo import errors as ERR



# import original mod.
from fadutil import run_time, LOG

</t>
<t tx="zoomq.20110729105657.4271">@run_time
def loadpics(pkl, pathpic):
    dictpic = pickle.load(open(pkl, 'rb'))
    #print dictpic.keys()
    total = 0
    for sid in dictpic.keys():
        '''
        if type(dictpic[sid]) is types.ListType:
            pass
        else:
            print sid,dictpic[sid]

        '''
        try:
            for foto in dictpic[sid]:
                dirurl = "/".join(sid[:3])
                asize = FOTO_SIZE[foto['showas']]  # 翻译TMD实际目录
                filename = foto['filename']
                imgtype = foto['imgtype']
                realpic = "%(pathpic)s/product/%(dirurl)s/%(sid)s/%(asize)s/%(filename)s.%(imgtype)s"% locals()
                #print sid,realpic
                @others
                #print CF.FAD.find({'sid':sid})[0]['attrs']['fotos']
                total += 1
        except :
            print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
            sys.exit(1)
        print "\n\t &gt;&gt;&gt; %s fotos loaded !&lt;&lt;&lt;\n"% total


</t>
<t tx="zoomq.20110801085156.2824">@path vancl

#esp. for vanl spiders

</t>
<t tx="zoomq.20110801085156.2825">@path common
</t>
<t tx="zoomq.20110801085156.2827">= fadpop通用 =

收集各种通用工具类函式,定义,参数


== TODO ==
</t>
<t tx="zoomq.20110801085156.2831">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''fadpop 常用工具集
'''

</t>
<t tx="zoomq.20110801085156.2851">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION = "anapichtm.py v11.08.1"


&lt;&lt;imports&gt;&gt;

TPL_VANCL_SFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Small/%(foto)s"
TPL_VANCL_MFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/mid/%(foto)s"
TPL_VANCL_BFOTO = "http://images.vancl.com/product/%(dirurl)s/%(sid)s/Big/%(foto)s"
DOC_FOTO = {                # 图片
        "uri":""            # URI
        , "filename":""     # 文件名
        , "imgtype":""      # gif jpg png ...
        , "showas":""       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}

@others

if __name__ == "__main__":
    if 2 != len(sys.argv):
        print """ %s 
对统一下载的 http://item.vancl.com/Styles/BigImg.mvc?ProductCode={sid} 页面html代码分析出sid 对应的所有大图名
输出到 STDOUT usage::
$ python /path/2/anabigpic.py /path/2/BigImg.mvc?ProductCode
                 |               +- 页面文件目录
                 +- 指向本脚本
        """ % VERSION
    else:
        anabigpicnames(sys.argv[1])
</t>
<t tx="zoomq.20110801085156.2852">import os
import sys
import fnmatch
#import time
#import traceback
#import urllib
import pickle
from copy import copy

#import Image

from pyquery import PyQuery as pq
from lxml import etree

#from pymongo import Connection
#from pymongo import errors as ERR

# import original mod.
sys.path.append(os.path.abspath("../../"))
from common.fadutil import run_time, LOG

</t>
<t tx="zoomq.20110801085156.2853">@run_time
def anabigpicnames(pathml):
    ibgpics = {}
    for file in os.listdir(pathml):
        if fnmatch.fnmatch(file, 'BigImg.mvc*'):
            sid = file.split("=")[1]
            ibgpics[sid] = []
            dirurl = "/".join(sid[:3])
            d = pq(filename="%s/%s" % (pathml, file), parser='html')
            @others
    output = open('20110709_nvzhuang_bigpic.pkl', 'wb')
    pickle.dump(ibgpics, output)
    output.close</t>
<t tx="zoomq.20110801085156.2854">foto = d('#large').find('img').attr('src').split("/")[-1]
print TPL_VANCL_BFOTO % locals()
print TPL_VANCL_MFOTO % locals()
print TPL_VANCL_SFOTO % locals()
bfoto_big = {                # 图片
        "uri":TPL_VANCL_BFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"big"       # thumb|mid|big
        , "asmain":True    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(bfoto_big)
sfoto_big = {                # 图片
        "uri":TPL_VANCL_MFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"thumb"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(sfoto_big)
mfoto_big = {                # 图片
        "uri":TPL_VANCL_SFOTO % locals()           # URI
        , "filename":foto.split(".")[0]     # 文件名
        , "imgtype":foto.split(".")[1]      # gif jpg png ...
        , "showas":"mid"       # thumb|mid|big
        , "asmain":False    # true|flase 标识是否作为题头图
        , "size":[]         # 图片尺寸 长，宽
        , "atta":""         # 附加信息
}
ibgpics[sid].append(mfoto_big)
</t>
<t tx="zoomq.20110801085156.2855">for foto in d('#thumbnail').find('img'):
    #print foto.get('src').split("/")[-1]   #.base_url()
    foto = foto.get('src').split("/")[-1]
    print TPL_VANCL_BFOTO % locals()
    print TPL_VANCL_MFOTO % locals()
    print TPL_VANCL_SFOTO % locals()
    bfoto_big = {                # 图片
            "uri":TPL_VANCL_BFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"big"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(bfoto_big)
    sfoto_big = {                # 图片
            "uri":TPL_VANCL_MFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"thumb"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(sfoto_big)
    mfoto_big = {                # 图片
            "uri":TPL_VANCL_SFOTO % locals()           # URI
            , "filename":foto.split(".")[0]     # 文件名
            , "imgtype":foto.split(".")[1]      # gif jpg png ...
            , "showas":"mid"       # thumb|mid|big
            , "asmain":False    # true|flase 标识是否作为题头图
            , "size":[]         # 图片尺寸 长，宽
            , "atta":""         # 附加信息
    }
    ibgpics[sid].append(mfoto_big)


</t>
<t tx="zoomq.20110801085156.2858">@run_time
def _put_img_gfs(fotoinfo,pathpic):
    '''为 DBref 将图片统一丢到 static_files.fs.files,返回文档对象
    '''
    if os.path.exists(pathpic):
        if CF.GFS.exists({'uri':fotoinfo['uri']}):
            img_id = CF.FSFILE.find_one({'uri':fotoinfo['uri']}, {'_id':1})['_id']
            print fotoinfo['uri'], "&lt;------ HAD PUTed!\t", img_id
            #print CF.FSFILE.find_one({'uri':imguri}, {'_id':1})['_id']
            return img_id
        else:
            img = CF.GFS.put(open(pathpic,'rb').read()
                , uri = fotoinfo['uri']
                , filename = fotoinfo['filename']
                , imgtype = fotoinfo['imgtype']
                , showas = fotoinfo['showas']
                , asmain = fotoinfo['asmain']
                , size = Image.open(pathpic).size
                )
            return img
    else:
        print "the %s NOT exists!!" % main_mid_pic
        sys.exit(1)





</t>
<t tx="zoomq.20110801085156.2866">class Borg():
    '''base http://blog.youxu.info/2010/04/29/borg
        - 单例式配置收集类
    '''
    __collective_mind = {}
    def __init__(self):
        self.__dict__ = self.__collective_mind

    &lt;&lt;configures&gt;&gt;

# init all cfg. var
CF = Borg()

</t>
<t tx="zoomq.20110801085156.2867">#path
#PATH_CVS_PIC = "/home/zoomq/workspace/yuike/_stuff/4vancl/taobao_Week_nvzhuang/taobao_Week_20110709_nvzhuang"

# db connection names
DBGFS = "static_files"
DBFAD = "fad_docs"
#   为每个电商使用专用的 Coolection
COFAD = "vancl_items"
try:
    CONNDB = Connection('localhost', 27017)
except:
    print "couldn't connect: be sure that Mongo is running on localhost:27017", traceback.print_exc()
    sys.exit(1)

FAD = CONNDB[DBFAD][COFAD]
FAD.create_index("uri", unique=True)
GFS = gridfs.GridFS(CONNDB[DBGFS])
FSFILE = CONNDB[DBGFS].fs.files
</t>
<t tx="zoomq.20110801085156.2872">try:
    this_item = CF.FAD.find({'sid':sid})
    #print "CF.FAD.this_item :: ", dir(this_item),this_item[0]['attrs']['fotos']
    #print this_item[0]['attrs']['fotos']
    #this_item[0]['attrs']['fotos'].append(_put_img_gfs(foto,realpic))
    fotoid =  _put_img_gfs(foto,realpic)
    fotos = this_item[0]['attrs']['fotos']
    if fotoid in fotos:
        print fotoid,"\t atta.ed inthe sid::",sid
        pass
    else:
        fotos.append(fotoid)
        #print fotos
        CF.FAD.update({'sid':sid}, {"$set":{'attrs.fotos':fotos}})
except :
    print "loadpics(pkl,pathpic) BROKENNN!\n\t", traceback.print_exc()
    sys.exit(1)

</t>
<t tx="zoomq.20110801085156.2873">0084853 ../../../_stuff/4vancl/taobao_Week_nvzhuang/images.vancl.com/product/0/0/8/0084853/mid/0084853-9201107071146390758.jpg
[ObjectId('4e2d35ca1702fe246e0007ac'), ObjectId('4e3674fe1702fe203f00862b'), ObjectId('4e3674fe1702fe203f00862e'), ObjectId('4e3674fe1702fe203f008631'), ObjectId('4e3674fe1702fe203f008637'), ObjectId('4e3674fe1702fe203f00863a'), ObjectId('4e3674fe1702fe203f00863d'), ObjectId('4e3674fe1702fe203f008640'), ObjectId('4e3674fe1702fe203f008643'), ObjectId('4e3674fe1702fe203f008646'), ObjectId('4e3674fe1702fe203f008649'), ObjectId('4e3674fe1702fe203f00864d'), ObjectId('4e3674fe1702fe203f008650'), ObjectId('4e3674fe1702fe203f008653'), ObjectId('4e3674fe1702fe203f008656'), ObjectId('4e3674ff1702fe203f008659'), ObjectId('4e3674ff1702fe203f00865c'), ObjectId('4e3674ff1702fe203f00865f'), ObjectId('4e3674ff1702fe203f008662'), ObjectId('4e3674ff1702fe203f008665'), ObjectId('4e3674ff1702fe203f008668'), ObjectId('4e3674ff1702fe203f00866b'), ObjectId('4e3674ff1702fe203f00866e'), ObjectId('4e3674ff1702fe203f008671'), ObjectId('4e3674ff1702fe203f008674'), ObjectId('4e3674ff1702fe203f008677'), ObjectId('4e3674ff1702fe203f00867a')]

	 loaded 13086 fotos 

Traceback (most recent call last):
  File "loadpics.py", line 137, in &lt;module&gt;
    loadpics(sys.argv[1], sys.argv[2])
  File "/home/zoomq/workspace/3hg/bitbucket.org/Yuike/fadpop-src/common/fadutil.py", line 26, in cal_time
    result = func(*args)
  File "loadpics.py", line 68, in loadpics
    for foto in dictpic[sid]:
TypeError: 'bool' object is not iterable

#因为!
anapichtm.py 中
    ibgpics = 开始是 copy(DOC_FOTO)
    TMD 导致部分元键不是有效值!
</t>
<t tx="zoomq.20110802085156.2837">odate,tI,tO,tC,tM,tF,tS                 Pt,Pd,Pl,Po
110701,0.00,11.5,0.00,2.50,4.00,7.50
110704,3.00,0.00,1.75,4.75,6.75,8.00
110705,1.00,0.50,7.75,1.50,5.25,7.50
110706,1.75,4.25,1.00,4.00,4.75,7.00
110707,2.75,0.75,8.00,5.50,1.00,7.00
110711,2.75,5.75,1.50,0.50,5.50,7.50
110712,2.25,5.50,0.50,3.25,4.50,7.50
110713,3.50,2.75,8.50,0.00,4.35,7.00
110714,4.75,6.25,3.50,1.50,1.00,5.00
110715,3.00,4.00,0.00,5.00,4.50,7.00
110718,3.25,3.75,0.75,1.00,5.25,7.50
110719,1.50,3.50,0.00,4.75,2.50,7.50
110720,0.00,6.75,0.00,4.50,4.50,7.50
110721,0.00,5.25,4.50,3.00,2.50,7.00
110725,2.50,3.50,1.00,3.00,6.00,7.50
110726,1.50,4.25,0.00,1.00,9.75,7.50    8,6,1,+2
110727,4.50,2.50,0.00,4.00,5.00,7.50    8,5,2,+2
110728,4.25,1.75,2.50,5.50,2.00,7.50    8,3,2,+5
110729,0.00,3.50,0.00,6.00,5.75,7.50    6,5,2,+1
</t>
</tnodes>
</leo_file>
