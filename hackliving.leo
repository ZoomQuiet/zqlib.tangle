<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet ekr_stylesheet?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="zoomq.20091008173724.1"><vh>@chapters</vh></v>
<v t="zoomq.20100903210229.3876" a="E"><vh>4lifeHacking</vh>
<v t="zoomq.20101026092125.2576" a="E"><vh>TiLogs</vh>
<v t="zoomq.20110209102527.2595"><vh>@nosent zq-tilog-1104.txt</vh></v>
<v t="zoomq.20110402090250.2620"><vh>@nosent zq-tilog-1103.txt</vh></v>
<v t="zoomq.20110301085102.3912"><vh>@nosent zq-tilog-1102.txt</vh></v>
<v t="zoomq.20101026092125.2577"><vh>@nosent zq-tilog-1010.txt</vh></v>
<v t="zoomq.20101228111644.2594"><vh>@nosent zq-tilog-1011.txt</vh></v>
<v t="zoomq.20101228111644.2596"><vh>@nosent zq-tilog-1012.txt</vh></v>
<v t="zoomq.20110104095502.2596"><vh>@nosent zq-tilog-1101.txt</vh></v>
</v>
<v t="zoomq.20100903210229.3843"><vh>misc</vh>
<v t="zoomq.20100903210229.3844" a="M"><vh>_stuff</vh>
<v t="zoomq.20100903210229.3845"><vh>dict sort</vh></v>
<v t="zoomq.20100903210229.3846"><vh>dislin-0.py</vh>
<v t="zoomq.20100903210229.3847"><vh>dislin-0 declarations</vh></v>
</v>
<v t="zoomq.20100903210229.3878"><vh>@nosent try0.txt</vh>
<v t="zoomq.20100903210229.3879"><vh>&lt;&lt;my sub node&gt;&gt;</vh>
<v t="zoomq.20100903210229.3880"><vh>&lt;&lt;我的&gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3851"><vh>@nosent try1.txt</vh>
<v t="zoomq.20100903210229.3879"></v>
</v>
<v t="zoomq.20100903210229.3854"><vh>@nosent plotry.py</vh></v>
<v t="zoomq.20100903210229.3855"><vh>@nosent plotry1.py</vh></v>
<v t="zoomq.20100903210229.3856"><vh>@nosent dictsort.py</vh></v>
<v t="zoomq.20100903210229.3857"><vh>@nosent plotry2.py</vh></v>
</v>
<v t="zoomq.20100903210229.3858"><vh>unitest</vh>
<v t="zoomq.20100903210229.3859"><vh>@nosent test0.py</vh></v>
</v>
<v t="zoomq.20100903210229.3860"><vh>_cron</vh>
<v t="zoomq.20100903210229.3861"><vh>inter.131</vh></v>
<v t="zoomq.20100903210229.3862"><vh>intra.59</vh>
<v t="zoomq.20100903210229.3863"><vh>@nosent doykseoAM.sh</vh></v>
<v t="zoomq.20100903210229.3864"><vh>@nosent doykseoPM.sh</vh></v>
<v t="zoomq.20100903210229.3865"><vh>@nosent mldledSyncAll.sh</vh>
<v t="zoomq.20100903210229.3866"><vh>&lt;&lt; init &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3867"><vh>&lt;&lt; sync p2ped &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3868"><vh>&lt;&lt; sync runlog &gt;&gt;</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3869"><vh>intra.61</vh></v>
<v t="zoomq.20100903210229.3870"><vh>intra.101</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3877"><vh>tpl</vh>
<v t="zoomq.20100903210229.3878"></v>
</v>
<v t="zoomq.20100903210229.3881"><vh>@nosent cfg.py</vh></v>
<v t="zoomq.20100903210229.3882"><vh>@nosent tilog_chart.py</vh>
<v t="zoomq.20100903210229.3883"><vh>&lt;&lt; tilog_chart declarations &gt;&gt;</vh></v>
<v t="zoomq.20100903210229.3884"><vh>tilogchart()</vh></v>
<v t="zoomq.20100903210229.3885"><vh>radar4month</vh>
<v t="zoomq.20100903210229.3886"><vh>formatotmr()</vh></v>
<v t="zoomq.20100903210229.3887"><vh>monthradar()</vh></v>
</v>
<v t="zoomq.20100903210229.3888"><vh>pie4month</vh>
<v t="zoomq.20100903210229.3889"><vh>formatotm()</vh></v>
<v t="zoomq.20100903210229.3890"><vh>monthpie()</vh></v>
</v>
<v t="zoomq.20100903210229.3891"><vh>line4day</vh>
<v t="zoomq.20100903210229.3892"><vh>formatlog()</vh></v>
<v t="zoomq.20100903210229.3893"><vh>dayline()</vh></v>
</v>
<v t="zoomq.20100903210229.3894"><vh>expchart()</vh></v>
<v t="zoomq.20100903210229.3895"><vh>expplot()</vh></v>
</v>
</v>
<v t="zoomq.20110218220319.3903"><vh>RWIwPyZh</vh>
<v t="zoomq.20110322090028.3918"><vh>翻译</vh>
<v t="zoomq.20110322090028.9761"><vh>@shadow LINKS.rst</vh></v>
<v t="zoomq.20110322090028.3919"><vh>ch03</vh>
<v t="zoomq.20110322090028.3920"><vh>@nosent index.rst</vh></v>
<v t="zoomq.20110322090028.3921"><vh>@nosent 0_intro.rst</vh></v>
<v t="zoomq.20110322090028.3922"><vh>@nosent 1_install_py.rst</vh></v>
<v t="zoomq.20110322090028.3923"><vh>@nosent 2_py_programming_language.rst</vh>
<v t="zoomq.20110407085430.2620"><vh>The Python Command Line</vh></v>
<v t="zoomq.20110407085430.2621"><vh>Command-Line Options and Environment</vh></v>
<v t="zoomq.20110407085430.2622"><vh>Objects in Python</vh></v>
<v t="zoomq.20110407085430.2623"><vh>Data Types in Python</vh></v>
<v t="zoomq.20110407085430.2624"><vh>Expressions</vh></v>
<v t="zoomq.20110407085430.2625"><vh>Operators </vh></v>
<v t="zoomq.20110407085430.2626"><vh>Statements</vh></v>
<v t="zoomq.20110407085430.2627"><vh>Strings</vh></v>
<v t="zoomq.20110407085430.2628"><vh>Program Organization</vh></v>
<v t="zoomq.20110407085430.2629"><vh>Importing Modules</vh></v>
<v t="zoomq.20110407085430.2630"><vh>Loading and Running a Python Program</vh></v>
<v t="zoomq.20110407085430.2631"><vh>Basic Input and Output</vh></v>
<v t="zoomq.20110407085430.2632"><vh>Hints and Tips</vh></v>
</v>
<v t="zoomq.20110322090028.3924"><vh>@nosent 3_py_evelopment_tools.rst</vh></v>
<v t="zoomq.20110322090028.3925"><vh>@nosent 4_summary.rst</vh></v>
<v t="zoomq.20110322090028.3926"><vh>@nosent 5_suggested_reading.rst</vh></v>
</v>
</v>
<v t="zoomq.20110224000107.3905"><vh>配置</vh>
<v t="zoomq.20110309092312.11334"><vh>Nginx</vh></v>
</v>
<v t="zoomq.20110221225054.2597"><vh>报名</vh></v>
</v>
<v t="zoomq.20100903210229.3838"><vh>Hacking Life</vh>
<v t="zoomq.20100903210229.3839"><vh>巨坑分析:</vh>
<v t="zoomq.20110325220944.2613"><vh>CPyUG社区</vh></v>
<v t="zoomq.20101103153946.3839"><vh>code.ijinshan</vh>
<v t="zoomq.20101227205438.2592"><vh>ml</vh></v>
</v>
<v t="zoomq.20100903210229.3840"><vh>zoomquiet.org</vh>
<v t="zoomq.20101109214756.6989"><vh>zoomquiet.org发布规划</vh>
<v t="zoomq.20101109214756.6990"><vh>目录</vh></v>
<v t="zoomq.20101109214756.6991"><vh>域名</vh></v>
</v>
<v t="zoomq.20101109214756.6992"><vh>scrapbook</vh></v>
<v t="zoomq.20100925155257.2580"><vh>PyBlosxom</vh></v>
<v t="zoomq.20100903210229.3842"><vh>WeKnow</vh>
<v t="zoomq.20101104113205.5096"><vh>DouPy</vh></v>
<v t="zoomq.20101105113140.2587"><vh>SaaCL</vh></v>
</v>
</v>
<v t="zoomq.20100908091715.2579"><vh>PythoniCamp</vh>
<v t="zoomq.20100927113242.2581"><vh>Hg demo</vh></v>
<v t="zoomq.20101015095808.2582"><vh>Hg 配置</vh>
<v t="zoomq.20101029104710.3831"><vh>hgrc</vh></v>
<v t="zoomq.20101019093735.5077"><vh>diff</vh></v>
<v t="zoomq.20101019093735.5078"><vh>keywords</vh></v>
</v>
</v>
<v t="zoomq.20101019093735.5079"><vh>Geek</vh>
<v t="zoomq.20110329090742.2614"><vh>沈崴-wileishn语录</vh>
<v t="zoomq.20110329090742.2615"><vh>110329书</vh>
<v t="zoomq.20110329090742.2618"><vh>军规:</vh></v>
<v t="zoomq.20110329090742.2616"><vh>影响力</vh></v>
<v t="zoomq.20110329090742.2617"><vh>大杀器</vh></v>
</v>
</v>
<v t="zoomq.20101103153946.5095"><vh>CLI</vh></v>
</v>
</v>
<v t="zoomq.20100903210229.3841"><vh>OBP</vh>
<v t="zoomq.20110218220319.2595"><vh>2Hg</vh></v>
<v t="zoomq.20110218220319.3903"></v>
</v>
<v t="zoomq.20100831135717.3642"><vh>WeKnow</vh>
<v t="zoomq.20100831135717.3643"><vh>可视化</vh>
<v t="zoomq.20100831135717.4174"><vh>webSequenceDiagram</vh>
<v t="zoomq.20100831135717.4171"><vh>@nosent getSequenceDiagram.py</vh>
<v t="zoomq.20100831135717.4172"><vh>declarations</vh></v>
<v t="zoomq.20100831135717.4173"><vh>getSequenceDiagram()</vh></v>
</v>
<v t="zoomq.20100831135717.4195"><vh>demo</vh>
<v t="zoomq.20100831135717.4178"><vh>@nosent demo0.txt</vh></v>
<v t="zoomq.20100831135717.4184"><vh>@nosent demo1-activate.txt</vh></v>
<v t="zoomq.20100831135717.4188"><vh>@nosent demo2-alt.txt</vh></v>
<v t="zoomq.20100831135717.4190"><vh>@nosent demo3-opt.txt</vh></v>
<v t="zoomq.20100831135717.4192"><vh>@nosent demo4-note.txt</vh></v>
<v t="zoomq.20100831135717.4194"><vh>@nosent demo5-participants.txt</vh></v>
<v t="zoomq.20100831135717.4197"><vh>@nosent demo6-grouping.txt</vh></v>
<v t="zoomq.20100831135717.4199"><vh>@nosent demo7-lifeline.txt</vh></v>
</v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3896"><vh>KM思绪</vh>
<v t="zoomq.20100903210229.3897"><vh>@nosent dont-use-wiki.txt</vh></v>
</v>
<v t="zoomq.20101030170919.2579"><vh>newHeadline</vh>
<v t="zoomq.20101030170919.2580"><vh>coffeghost-q-in-py.py</vh>
<v t="zoomq.20101030170919.2581"><vh>coffeghost-q-in-py declarations</vh></v>
<v t="zoomq.20101030170919.2582"><vh>main</vh></v>
<v t="zoomq.20101030170919.2583"><vh>foo</vh></v>
</v>
</v>
</v>
<v t="zoomq.20100903210229.3872"><vh>rc.local</vh>
<v t="zoomq.20100903210229.3873"><vh>@shadow xinput4bamboo.py</vh></v>
</v>
<v t="zoomq.20100412163057.2814"><vh>Misc任务</vh>
<v t="zoomq.20100412163057.2815"><vh>病毒样本对比</vh>
<v t="zoomq.20100902112115.7756"><vh>@nosent virusampls-ratio.py</vh>
<v t="zoomq.20100902112115.7757"><vh>declarations</vh></v>
<v t="zoomq.20100902112115.7758"><vh>processLogKV</vh></v>
<v t="zoomq.20100902112115.7759"><vh>processLogRX</vh></v>
<v t="zoomq.20100902112115.7760"><vh>ratioYQ</vh></v>
<v t="zoomq.20100902112115.7761"><vh>finalExport</vh></v>
</v>
</v>
<v t="zoomq.20100122092723.2783"><vh>GrasPic</vh>
<v t="zoomq.20100827095209.8300"><vh>@file manga.py</vh>
<v t="zoomq.20100827095209.8301"><vh>manga declarations</vh></v>
<v t="zoomq.20100827095209.8302"><vh>genUrlist</vh></v>
</v>
<v t="zoomq.20100827095209.8303"><vh>@file manga-zipang12~1.sh</vh></v>
<v t="zoomq.20100827095209.8304"><vh>@file wgetli.py</vh>
<v t="zoomq.20100827095209.8305"><vh>wgetli declarations</vh></v>
<v t="zoomq.20100827095209.8306"><vh>genUrlist</vh></v>
</v>
</v>
<v t="zoomq.20100827095209.8299"><vh>清除字幕字体聲明</vh>
<v t="zoomq.20100827095209.8310"><vh>@nosent clfontd4.py</vh>
<v t="zoomq.20100827095209.8311"><vh>declarations</vh></v>
<v t="zoomq.20100827095209.8312"><vh>cleaner()</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="zoomq.20091008173724.1">'/home/zoomq/workspace/3hg/zqlib-hg/tangle/hackliving.leo'</t>
<t tx="zoomq.20100122092723.2783">@path _stuff/manga
#media/manga</t>
<t tx="zoomq.20100412163057.2814">@path /home/zoomq/</t>
<t tx="zoomq.20100412163057.2815">@path ssp-zoom.quiet/virusampls-ratio
#/home/zoomq/Desktop/KiS/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/vbox2win/0day/zoom.quiet/100412-virus-sample-selector
#/home/zoomq/data/0day-vbox/zoom.quiet/100412-virus-sample-selector
</t>
<t tx="zoomq.20100827095209.8299">@path _stuff/_mov
网络字幕，有的::
    
1
00:00:09,240 --&gt; 00:00:15,940
{\fn微软雅黑\fs12\fscx130\fscy130\3c&amp;HFF8000&amp;}本字幕仅出于业余兴趣而制，如有鄙陋，还望指正。{\r}
{\fn微软雅黑\fs12}{\r}

2
00:00:16,240 --&gt; 00:00:29,940
{\fn微软雅黑\fs15\3c&amp;HFF8000&amp;}感谢 COPSY心理学的支持
{\fntahoma\fs12\3c&amp;H1717FF&amp;}www.COPSY.org{\r}

不认识字体聲明，需要快速清除，
sed/awk 都不能直接识别出 {.+} 这种模式，特别是在 utf-8 环境中处理 gb2312 编码文本...

cat 06-Justice_Michael.Sandel-HARVARD.srt | cut --delimiter="}" -f2 | cut --delimiter="{" -f1 &gt; 06-Justice_Michael.Sandel-HARVARD.srt.srt
</t>
<t tx="zoomq.20100827095209.8300">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) bookID(e.g 002) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://251.99770.com:9977/ok-comic06/c/cyjd_771/%03d/%03d.jpg\n"
        bookName = sys.argv[1]
        bookId = sys.argv[2]
        maxPage = sys.argv[3]
        genUrlist(urlmark,bookName,bookId,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8301"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "manga.py v0.8-070921"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8302">def genUrlist(urlmark,bookName,bookId,maxPage):
    expF = "manga-%s-%s.txt"%(bookName,bookId)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % (int(bookId),p)
        print urlmark % (int(bookId),p)
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8303">@ignore
@language shell
#!/bin/sh

wget -nv -t 3 -P 012 -i manga-zipang-012.txt &amp;
wget -nv -t 3 -P 011 -i manga-zipang-011.txt &amp;
wget -nv -t 3 -P 010 -i manga-zipang-010.txt &amp;
wget -nv -t 3 -P 009 -i manga-zipang-009.txt &amp;
wget -nv -t 3 -P 008 -i manga-zipang-008.txt &amp;
wget -nv -t 3 -P 007 -i manga-zipang-007.txt &amp;
wget -nv -t 3 -P 006 -i manga-zipang-006.txt &amp;
wget -nv -t 3 -P 005 -i manga-zipang-005.txt &amp;
wget -nv -t 3 -P 004 -i manga-zipang-004.txt &amp;
wget -nv -t 3 -P 003 -i manga-zipang-003.txt &amp;
wget -nv -t 3 -P 002 -i manga-zipang-002.txt &amp;
wget -nv -t 3 -P 001 -i manga-zipang-001.txt &amp;

</t>
<t tx="zoomq.20100827095209.8304">@language python
@tabwidth -4
@others
if __name__ == "__main__":
    if 3 != len(sys.argv):
        print """ %s usage::
        $ python manga.py bookName(e.g zipang) maxPage(e.g 196) 
        """ % VERSION
    else:
        begin = time.time()
        urlmark = "http://tulaoya.cn/photo/x1/%03d.jpg\n"
        bookName = sys.argv[1]
        maxPage = sys.argv[2]
        genUrlist(urlmark,bookName,maxPage)
        end = time.time()
        print 'usedTime::', end - begin

</t>
<t tx="zoomq.20100827095209.8305"># -*- coding: utf-8 -*-
# Name: manga.py
# Desc: gen. grasp comics pics url files
# Author: Zoom.Quiet
VERSION = "wgetli.py v0.5-080409"

import os,sys,time,datetime

</t>
<t tx="zoomq.20100827095209.8306">def genUrlist(urlmark,bookName,maxPage):
    expF = "wgetli-%s-%s.txt"%(bookName,maxPage)
    urlist = ""
    for p in range(1,int(maxPage)):
        urlist += urlmark % p
        print urlmark % p
    open(expF,'w').write(urlist)

</t>
<t tx="zoomq.20100827095209.8310">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
"""
Name    : clfontd4.py
Desc    : clean font define words in subtitle files
Author  : Zoom.Quiet
Usage   : 1: make srt file-&gt;utf8; 2: python cleaner.py path/2/***.str 
    we can get cleanning .srt
"""
VERSION = "clfontd4.py v10.8.27"
@others
if __name__ == "__main__":
    sys.exit(cleaner(sys.argv))
</t>
<t tx="zoomq.20100827095209.8311">import os,sys,re

</t>
<t tx="zoomq.20100827095209.8312">def cleaner(arg):
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python cleaner.py path/2/***.str
        """ % VERSION
    else:
        exp = ""
        print arg[1]
        for l in open(arg[1]).readlines():
            #print "&gt;&gt;",l
            if "{" in l:
                exp += "%s\n"%l.split("}")[1].split("{")[0]
                #print exp
            else:
                exp += l
        open("%s"%arg[1],"w").write(exp)


</t>
<t tx="zoomq.20100831135717.3642">收集所有 WeKnow 相关的代码片段
</t>
<t tx="zoomq.20100831135717.3643">收集数据可视化支持工具</t>
<t tx="zoomq.20100831135717.4171">@language python
@tabwidth -4
#!/usr/bin/python 
# -*- coding: utf-8 -*-
'''base http://www.websequencediagrams.com/ gen SequenceDiagram
You can set wsd_style to any of these styles:
    * default
    * earth
    * modern-blue
    * mscgen
    * omegapple
    * qsd
    * rose
    * roundgreen
    * napkin 
'''
VERSION="getSequenceDiagram.py v10.8.31"
@others

if __name__ == "__main__":
    if 4 != len(sys.argv):
        print """ %s usage::
$ python getSequenceDiagram.py DiagremStyle DiagramName 定义文件.txt
        """ % VERSION
    else:
        style = sys.argv[1] #"napkin"
        sqdname = sys.argv[2]
        sqdefin = sys.argv[3]
        pngFile = "%s_wsd-%s.png"%(sqdname,style)
        text = open(sqdefin).read()
        getSequenceDiagram( text, pngFile, style ) 

</t>
<t tx="zoomq.20100831135717.4172">#!/usr/bin/python 
# -*- coding: utf-8 -*-
import sys
import urllib
import re

</t>
<t tx="zoomq.20100831135717.4173">def getSequenceDiagram( text, outputFile, style = 'default' ):
    request = {}
    request["message"] = text
    request["style"] = style

    url = urllib.urlencode(request)

    f = urllib.urlopen("http://www.websequencediagrams.com/", url)
    line = f.readline()
    f.close()

    expr = re.compile("(\?img=[a-zA-Z0-9]+)")
    m = expr.search(line)

    if m == None:
        print "Invalid response from server."
        return False

    urllib.urlretrieve("http://www.websequencediagrams.com/" + m.group(0),
            outputFile )
    return True

</t>
<t tx="zoomq.20100831135717.4174">@path webSequenceDiagram/


http://www.websequencediagrams.com/embedding.html</t>
<t tx="zoomq.20100831135717.4178">alice-&gt;bob: 认证 request
bob--&gt;alice: response
</t>
<t tx="zoomq.20100831135717.4184">A-&gt;B: text
activate B
B--&gt;A: json
deactivate B
</t>
<t tx="zoomq.20100831135717.4188">alt text1
    A-&gt;B: text
else text2
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4190">opt text
    A-&gt;B: text
end
</t>
<t tx="zoomq.20100831135717.4192">note over A,B: 是也乎
note left of A: 可能
note right of A
    多行
    文本
    multiline
    text
end note
</t>
<t tx="zoomq.20100831135717.4194">participant "客户端" as C
participant "服务端" as S
participant "可以很长名\n的后台服务" as L

C-&gt;S: Authentication Request
S-&gt;C: Authentication Response
S--&gt;L: Log transaction

</t>
<t tx="zoomq.20100831135717.4195">@path demo
</t>
<t tx="zoomq.20100831135717.4197">Alice-&gt;Bob: Authentication Request
alt successful case
    Bob-&gt;Alice: Authentication Accepted
else some kind of failure
    Bob-&gt;Alice: Authentication Failure
    opt
        loop 1000 times
            Alice-&gt;Bob: DNS Attack
        end
    end
else Another type of failure
    Bob-&gt;Alice: Please repeat
end

</t>
<t tx="zoomq.20100831135717.4199">User-&gt;A: DoWork
activate A
A-&gt;B: &lt;createRequest&gt;
activate B
B-&gt;C: DoWork
activate C
C--&gt;B: WorkDone
destroy C
B--&gt;A: RequestCreated
deactivate B
A-&gt;User: Done
</t>
<t tx="zoomq.20100902112115.7756">@language python
@tabwidth -4
#!/usr/bin/env python
# -*- coding: utf-8 -*-
VERSION="virusampls-ratio v10.4.12"

@others

if __name__ == '__main__':      # this way the module can be
    begin = time.time()
    usage = "usage: %prog [option0] arg0 [arg1]"
    parser = OptionParser(usage,version=VERSION)
    parser.add_option("-r","--ratio",dest="ratio",nargs=2,
                      type="string",metavar="*.dump some-hot-virus-list.txt",
                      help="YiQing comparison,uasge --lrx|lkv processed .dump file "
                        "e.g KV-RESULT.dump some-hot-virus-list.txt")
    parser.add_option("--lrx",dest="lrx",
                      type="string",
                      help="process RX checking log")
    parser.add_option("--lkv",dest="lkv",
                      type="string",
                      help="process KV checking log")
    parser.add_option("-e","--export",dest="export",nargs=2,
                      type="string",metavar="*.txt path/2/export ",
                      help="export total hotest virus list into dir             " 
                        "e.g -e virus-hotest-in-my-pc.tx tmp")
    (options, args) = parser.parse_args()
    if 1 == len(sys.argv):
        parser.print_help()
    if options.ratio :
        print "comparison checked list and YiQing list\n\n"
        ratioYQ(options.ratio)
    else:
        if options.lrx:
            print "\n\nreFormat RX checking list\n\n"
            processLogRX(options.lrx)
        if options.lkv:
            print "\n\nreFormat KV checking list\n\n"
            processLogKV(options.lkv)
        if options.export:
            print "\n\nexport total hotest virus list in to\n\n"
            finalExport(options.export)
    if (options.lrx and options.ratio) or (options.lkv and options.ratio):
        print "\n\nATTENTION!\n\t -r and --lrx|lkx can not usage in same time!\n\n"
        parser.error("incorrect number of arguments! \nATTENTION!\n"
            "\ne.g.\n \tpython %s -lrx something.txt "
            "\nor\n\tpython %s -r sonething.dump top500-from-RX.TXT"%(parser.get_prog_name()
                ,parser.get_prog_name())
                )
        parser.print_help()

</t>
<t tx="zoomq.20100902112115.7757">import os,sys,time,pickle,shutil
from optparse import OptionParser
from operator import itemgetter

</t>
<t tx="zoomq.20100902112115.7758">def processLogKV(fname):
    "简单处理KV查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if " 中发现 " in line:
            tags = line.split()
            print tags[3],tags[1]
            viru = tags[3]
            path = tags[1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))
</t>
<t tx="zoomq.20100902112115.7759">def processLogRX(fname):
    "简单处理RX查杀日志为list对象[计数,病毒名,隔离区目录]"
    print fname
    dumpf = "%s.dump"%fname
    dumpd = {}
    for line in open(fname).readlines():
        if "手动查杀" in line:
            tags = line.split(";")
            print tags[2][1:-1],tags[6][1:-1]
            viru = tags[2][1:-1]
            path = tags[6][1:-1]
            if viru in dumpd.keys():
                pass
            else:
                dumpd[viru]=[0,path]
    pickle.dump(dumpd, open(dumpf, 'wb'))
    print "\n\n%s\n\tdumped %d lines checked log as Python List obj."%(VERSION,len(dumpd.keys()))

</t>
<t tx="zoomq.20100902112115.7760">def ratioYQ(args):
    """将查杀日志和厂商疫情进行对比,按照排名积累分数,最终得到综合热度:
        前500排名的话,第一名为500分;
    MiscItems/2008-07-01 - Woodpecker Wiki for CPUG
http://wiki.woodpecker.org.cn/moin/MiscItems/2008-07-01
    Python中最快的字典排序方法 | Windstorm
http://www.kunli.info/2009/05/07/sorting-dictionaries-by-value-in-python/
    """
    dumpf = args[0]
    yqfile = args[1]
    tophotf = "%s-hot4-%s.txt"%(dumpf.split(".")[0],yqfile.split(".")[0])
    ratio = pickle.load(open(dumpf, 'rb'))
    flines = open(yqfile).readlines()
    for i in range(len(flines)):
        hvname = flines[i].upper().replace(".","").replace("/","")
        for v in ratio.keys():
            vname = v.upper().replace(".","").replace("/","")
            if vname in hvname:
                ratio[v][0]+=i
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    try:
        unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    except:
        unitRD = {}
    td = sorted(ratio.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        if 0!=t[1][0]:
            print t
            hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
            if t[0] in unitRD.keys():
                unitRD[t[0]][0] +=t[1][0]
            else:
                unitRD[t[0]] =[t[1][0],t[1][1]]

    open(tophotf,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus base %s...\n\t\t export as:%s"%(VERSION
        ,len(hotvli)
        ,yqfile
        ,tophotf
        )
    pickle.dump(unitRD, open(unitRatioDictFile, 'wb'))
</t>
<t tx="zoomq.20100902112115.7761">def finalExport(args):
    "将最终交叉对比出来的列表输出到指定目录/文件,同时(尝试将隔离区文件也复制到指定目录)"
    expfn = "%s/%s"%(args[1],args[0])
    expdir = args[1]
    unitRatioDictFile = "virusampls-ratio.dict.dump"
    unitRD = pickle.load(open(unitRatioDictFile, 'rb'))
    td = sorted(unitRD.iteritems(), key=itemgetter(1), reverse=True)     
    hotvli=""
    for t in td:
        print t
        hotvli +="%s\t\t%s\n"%(t[0],t[1][1])
        #shutil.copy(t[1][1],expdir)
    open(expfn,"w").write(hotvli)
    print "\n\n%s\n\tfound top %d hotest Virus in my pc \n\t\t export list file::%s"%(VERSION
        ,len(td)
        ,expfn
        )


</t>
<t tx="zoomq.20100903210229.3838">@path workspace/3hg/zqlib-tangle/
@language python
@tabwidth -4

人生hacking...

</t>
<t tx="zoomq.20100903210229.3839">当前工作外长期拖延的意义任务...

</t>
<t tx="zoomq.20100903210229.3840">+-- zoomquiet.org 发布改版:
    +-- SEO:
        +-- sitemapping
    +-- dot mapping:
        +-- jQuery 拒绝IE
        +-- #通用含热区html输出:
            +-- '固化运营脚本的代码结构...:'
                +-- '参数'
                +-- "日志/调试"
            +-- 'Data-URI 集约化所有到一个HTML'
            +-- docTTD
    +-- ScrapBook:
        +-- 索引优化:
            +-- 分层简化
            +-- 嵌入原始URL
            +-- 分年度保存data 
</t>
<t tx="zoomq.20100903210229.3841">+-- OBP:
    +-- Sphnix 自动化编译Hg hooks
        +-- #Sphinx 官网翻译
        +-- Sphinx实用手册
            +-- 'rst2s5 使用'
            http://blog.zoomquiet.org/pyblosxom/utility/py4str/StructuredText/rst2s5-usage-2010-09-18-23-23.html
    +-- Hg 手册/Tip
    +-- 图书:
        +-- #SFSF 校对...
        +-- xkcd.com 漫画翻译...
        +-- 大妈书:
            +-- #牛妞成长史
            +-- 私人编年史:
                +-- #周氏家谱....
                +-- 不可失败的菜谱
        +-- TPiP
            +-- Leo doc
            +-- Code_Like_Pythonic-Idiomatic_Python
            +-- Hidden features of Python
        +-- Py标准文档:
            +-- 库
            +-- 教程
        +-- web2py
        +-- TheArt-of-Community-1ed_jonobacon
        +-- Thinking_in_Erlang.pdf


</t>
<t tx="zoomq.20100903210229.3842">+-- WeKnow:
    +-- ScrapBook 社会化分享
        +-- 云存储中心
        +-- GAE 界面
        +-- 桌面界面
        +-- SNS 机制
    +-- CPyUG 列表综合活跃分析~ codeworm
    +-- 时间帐单自动分析统计:
        +-- #手工记录
        +-- Workrave 
            +-- http://wakoopa.com/ZoomQuiet
        +-- Gmail 时间点对应
</t>
<t tx="zoomq.20100903210229.3843">支持片段代码收集...</t>
<t tx="zoomq.20100903210229.3844">

</t>
<t tx="zoomq.20100903210229.3845">http://groups.google.com/group/python-cn/browse_thread/thread/1f674f2fe812fc67/b1f034f965d230ff?lnk=gst&amp;q=%E5%AD%97%E5%85%B8%E6%8E%92%E5%BA%8F&amp;rnum=1#b1f034f965d230ff

sorted( iterable[, cmp[, key[, reverse]]])
    Return a new sorted list from the items in iterable. The optional
arguments cmp, key, and reverse have the same meaning as those for the
list.sort() method. New in version 2.4. 

&gt;&gt;&gt;

for k, v in sorted(myDict.items()
    , key=lambda x: x[1]
    ,reverse=True):
    print k,v 

&gt;&gt;&gt;&gt;a better and quicker way:

from operator import itemgetter
sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)

:)

</t>
<t tx="zoomq.20100903210229.3846">@language python
@tabwidth -4
@others
</t>
<t tx="zoomq.20100903210229.3847">#! /usr/bin/env python
import math
import dislin

n = 101
f = 3.1415926 / 180.
x = range (n)
y1 = range (n)
y2 = range (n)
for i in range (0,n):
  x[i] = i * 3.6
  v = i * 3.6 * f
  y1[i] = math.sin (v)
  y2[i] = math.cos (v)

dislin.metafl ('xwin')
dislin.disini ()
dislin.complx ()
dislin.pagera ()

dislin.axspos (450, 1800)
dislin.axslen (2200, 1200)

dislin.name   ('X-axis', 'X')
dislin.name   ('Y-axis', 'Y')

dislin.labdig (-1, 'X')
dislin.ticks  (9, 'X')
dislin.ticks  (10, 'Y')

dislin.titlin ('Demonstration of CURVE', 1)
dislin.titlin ('SIN (X), COS (X)', 3)

ic = dislin.intrgb (0.95, 0.95, 0.95)
dislin.axsbgd (ic)
 
dislin.graf   (0., 360., 0., 90., -1., 1., -1., 0.5)
dislin.setrgb (0.7, 0.7, 0.7)
dislin.grid   (1,1)

dislin.color  ('fore')
dislin.height (50)
dislin.title  ()

dislin.color  ('red')
dislin.curve  (x, y1, n)
dislin.color  ('green')
dislin.curve  (x, y2, n)
dislin.disfin ()

</t>
<t tx="zoomq.20100903210229.3851">def try():
    """
    """
    &lt;&lt;my sub node&gt;&gt;
    pass
    &lt;&lt;my sub node&gt;&gt;

</t>
<t tx="zoomq.20100903210229.3854">#!/usr/bin/env python
import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)

g('unset multiplot')
raw_input('Please press return to continue...\n') 
</t>
<t tx="zoomq.20100903210229.3855">#!/usr/bin/env python

import random, os, Gnuplot

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]
g = Gnuplot.Gnuplot()
g.plot([(0,2),(1,2),(2,2)])
g('set multiplot')
g('set size 0.5,0.5')

</t>
<t tx="zoomq.20100903210229.3856">@path olink_ad_point

from operator import itemgetter

myDict={
    "www":[112,177,888]
    ,"blog":[777,66,12]
    ,"chat":[13,5464,442]
    ,"yue":[5634,1232,177]
    }

print myDict
print "\n\n"

#sorted(myDict.iteritems(), key=itemgetter(1), reverse=True)
for k, v in sorted(myDict.items()
    , key=lambda x: x[1][1]
    ,reverse=True):
    print k,v 

print myDict

</t>
<t tx="zoomq.20100903210229.3857">import os,sys
import random, Gnuplot

title = sys.argv[1]
g = Gnuplot.Gnuplot(persist=1)
DEFONT="/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
g('set term png font "%s" ' %DEFONT)
g('set output "gnuplot-%s.png" ' %title)
g('set title "easy-account chart %s" ' %title)

mean = 3
strdev =  10
ns = [10, 100, 1000, 10000]

g('set multiplot')
g('set size 0.5,0.5')

for i in range(0, 4):
 gauss = list()
 for j in range(0, ns[i]):
     gauss.append(list())
     gauss[j].append(random.gauss(mean, strdev))
     gauss[j].append(random.gauss(mean, strdev))

 if i == 0:
     g('set origin 0,0.5')
 elif i == 1:
     g('set origin 0.5,0.5')
 elif i == 2:
     g('set origin 0,0')
 else:
     g('set origin 0.5,0')

 g.plot(gauss)</t>
<t tx="zoomq.20100903210229.3858"></t>
<t tx="zoomq.20100903210229.3859"># -*- coding: utf-8 -*-
from foo import add2

import unittest

class DemoTest(unittest.TestCase):
    def testFoo(self):
        self.assertEqual(1, 0)

    def testAdd(self):
        sefl.assertEqual(2, add2(1, 1))




</t>
<t tx="zoomq.20100903210229.3860">

#collection cron script abt SEO
</t>
<t tx="zoomq.20100903210229.3861">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# auto sync p2p dled out intra. usage wget
2 2 * * * /data0/p2p4mu/chkmldonkey.sh
3 3 * * * /data0/p2p4mu/cleanMLDed.sh

### zoomq::070524 add for auto analyzed YK running log for adPoint monitoring
6 6 * * * /data0/mupopro/logs/yseo6_do_adpanalyzer.sh

### zoomq::070615 add for auto analyzed YK searched key words
7 7 * * * /data1/ykrunning/mupopro/logs/searchKeyAnalyzer/statsSearchKey.sh
</t>
<t tx="zoomq.20100903210229.3862">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
## zoomq::070615 cancel sync log into 59;usage 61 NFS export runlogs analzye
#7 7 * * * /home/zoomq/4p2p/mldledSyncAll.sh
</t>
<t tx="zoomq.20100903210229.3863">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"


cd $runykseo6

echo "$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday"
$cmdPython adpanalyzer.py 'stxihei.ttf' $yesterday

echo "$version done statistics 4 yseo0 @ " `$cmdDate +"%Y/%m/%d %H:%M:%S"` 

echo
exit  0


</t>
<t tx="zoomq.20100903210229.3864">#!/bin/sh

# zoomq::070530 creat for zip all 101 dialy doning for YLSEO
version="doykseo BSDv0.7 070530"

cmdDate="/bin/date" #$( which date)
cmdSudo=$( which sudo)
cmdZcat=$( which zcat)
cmdEGrep=$( which egrep)
cmdFGrep=$( which fgrep)
cmdGrep=$( which grep)
cmdCut=$( which cut)
cmdAwk=$( which awk)
cmdSed=$( which sed)
#cmdLn=$( which ln)
cmdNl=$( which nl)
cmdUniq=$( which uniq)
cmdSort=$( which sort)
cmdPython=$( which python)

offset="-v-1d"
yesterday="`$cmdDate $offset "+%y%m%d"`"
#yesterday="`$cmdDate -d "$offset day" "+%Y-%m-%d"`"
echo "doing YKSEO statistics for -=$yesterday=-"

defaultFont="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point/stxihei.ttf"
runykseo0="/usr/home/zoomq/zqdev/YKSEO/seomonitor"
runykseo6="/usr/home/zoomq/zqdev/YKSEO/olink_ad_point"

echo "$version auto running for YKSEO @ " `$cmdDatedate +"%Y/%m/%d %H:%M:%S"` 

cd $runykseo0

echo "$cmdPython dailySECoveRate.py $defaultFont"
$cmdPython dailySECoveRate.py $defaultFont


echo
exit  0


</t>
<t tx="zoomq.20100903210229.3865">#!/bin/bash

&lt;&lt; init &gt;&gt;

LOGROOT="/var/log/sync"
LOGFILE="/var/log/sync/$today-synced.log"
RESROOT="/data3/p2pmldonkey"

PUTPATH="$RESROOT/done/$today"
PUTYEST="$RESROOT/done/$yesterday"
ULRTOD="http://60.28.2.131:81/done/$today/"
ULRYES="http://60.28.2.131:81/done/$yesterday/"
doWget="$cmdWget -c -nv -N -r -np -nd -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ "

SYNCPAS="/usr/local/etc/sync.key"
dosync="$cmdRsync -vztu --bwlimit=1024 --password-file=$SYNCPAS sdper@60.28.2.131::p2pmldonkey/done/$today"
#echo $dosync

&lt;&lt; sync p2ped &gt;&gt;

RUNLOGROOT="/data3/run_yueku_logs"
RUNLOGanalyzed="$RUNLOGROOT/analyzed"
PATHanalyzed="$RUNLOGanalyzed/runYueKuLogs/analyzed"
&lt;&lt; sync runlog &gt;&gt;

echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::end ALL@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


echo
exit  0

</t>
<t tx="zoomq.20100903210229.3866">###!/bin/sh
#===========================================
#====== Change log =========================
# zoomq::070603 add zip running log shell,after download all pre. analyz in TJ131
# zoomq::070517 clean yestday sync.;and dl YueKu runing daily logs all into /data3/run_yueku_logs/
# zoomq::070515 add for sync all YueKu runing log into /data3/run_yueku_logs/
# zoomq::070427 for auto sync MLDonkey downloaded dir and .lsRL
#===========================================
#today="`date +"%y%m%d"`"
version="'mldledSyncAll v0.9.1 070517"

offset="+0"
nowday="`date -d "$offset day" "+%Y%m%d"`"
#nowday="`date +"%d"`"
#offset=0
#((yday=nowday - offset))
today=$nowday
#"`date +"%Y%m"`$yday"
#((yday=nowday - offset -1 ))
offset="-1"
yesterday="`date -d "$offset day" "+%Y%m%d"`"
yesterlog="`date -d "$offset day" "+%y%m%d"`"
#yesterday="`date +"%Y%m"`$yday"
#echo "try $yesterday"

#echocmd=$( which echo)
cmdWget=$( which wget)
cmdRsync=$( which rsync)
#cmdLs=$( which ls)
cmdMkdir=$( which mkdir)
cmdMv=$( which mv)
cmdRm=$( which rm)
</t>
<t tx="zoomq.20100903210229.3867">echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` 
echo "###$version::start@ " `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE
echo "auto SYNC mldonkey p2p downloaded files..."
echo "chk dir :: $PUTPATH"
if [ -d $PUTPATH ]
then
    cd $PUTPATH
    $cmdLs -la &gt; $LOGFILE
else
    echo "$PUTPATH not exist! creat now.."
    echo "$PUTPATH not exist! creat now.." &gt;&gt; $LOGFILE
	echo "$cmdMkdir -p $PUTPATH" &gt;&gt; $LOGFILE
	$cmdMkdir -p $PUTPATH
    
    cd $PUTPATH
    ls -la  &gt;&gt; $LOGFILE
fi

ls -la
#echo "$dosync/* $PUTPATH/"
#$dosync/* $PUTPATH/
echo "$doWget $ULRTOD $PUTPATH/" &gt;&gt; $LOGFILE
echo "$doWget $ULRTOD ./"
$doWget $ULRTOD ./

echo 
echo "try sync yesterday dled files again..."
echo "try sync yesterday dled files again..." &gt;&gt; $LOGFILE
ls -la
ls -la  &gt;&gt; $LOGFILE

cd $PUTYEST
echo "$doWget $ULRYES $PUTYEST/" &gt;&gt; $LOGFILE
echo "$doWget $ULRYES ./"
#$doWget $ULRYES ./
</t>
<t tx="zoomq.20100903210229.3868">echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` 
echo "###start 4 sync YueKu runing logs all" `date +"%Y/%m/%d %H:%M:%S"` &gt;&gt; $LOGFILE


cd $RUNLOGROOT
$cmdWget -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/$yesterlog/

echo "###start dl for analyzed .log @ " `date +"%Y/%m/%d %H:%M:%S"` 

cd $RUNLOGanalyzed
$cmdWget -A.log -c -nv -nH -N -r -np -t 13 -T 19 --wait=7 --random-wait --http-user=SinaMu --http-passwd=p2p@TJ http://60.28.2.131:81/runYueKuLogs/analyzed/

echo "cd $PATHanalyzed"
cd $PATHanalyzed
echo "./zipadplog.sh adPoint$yesterlog.log"
./zipadplog.sh adPoint$yesterlog.log

</t>
<t tx="zoomq.20100903210229.3869">SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
HOME=/home/zoomq/

# dialy drag dept SVN repo for BKup
#3 3 * * * /data1/svnbkup/dragsvn.sh

# auto sync p2p dled out intra. usage wget
8 8 * * * /home/zoomq/4p2p/syncYKrunlogs.sh

</t>
<t tx="zoomq.20100903210229.3870"># /etc/crontab - root's crontab for FreeBSD
#
# $FreeBSD: src/etc/crontab,v 1.32 2002/11/22 16:13:39 tom Exp $
#
SHELL=/bin/sh
PATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

HOME=/var/log
#
#minute hour    mday    month   wday    who     command
#
*/5     *       *       *       *       root    /usr/libexec/atrun
#
# Save some entropy so that /dev/random can re-seed on boot.
*/11    *       *       *       *       operator /usr/libexec/save-entropy
#
# Rotate log files every hour, if necessary.
0       *       *       *       *       root    newsyslog
#
# Perform daily/weekly/monthly maintenance.
1       3       *       *       *       root    periodic daily
15      4       *       *       6       root    periodic weekly
30      5       1       *       *       root    periodic monthly
#
# Adjust the time zone if the CMOS clock keeps local time, as opposed to
# UTC time.  See adjkerntz(8) for details.
1,31    0-5     *       *       *       root    adjkerntz -a

MAILTO=liulei@staff.sina.com.cn,zhangchao@staff.sina.com.cn,zhouqi@staff.sina.com.cn
# auto do all matter for YKSEO1.0
9 9 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoAM.sh &gt; /var/log/YKSEO/ykseo.log
8 18 * * * zoomq /home/zoomq/zqdev/YKSEO/doykseoPM.sh &gt; /var/log/YKSEO/ykseo.log

</t>
<t tx="zoomq.20100903210229.3872">@path /home/zoomq/.zoomq/rc.local</t>
<t tx="zoomq.20100903210229.3876">@path ~/2matter4peg/tangle/zoom.quiet/4lifeHacking
时间帐单处置辅助</t>
<t tx="zoomq.20100903210229.3877">@path tpl</t>
<t tx="zoomq.20100903210229.3878">dsfadsf
dasfa
dsf
&lt;&lt;my sub node&gt;&gt;
adsf
adsf
ds
&lt;&lt;my sub node&gt;&gt;

sdfdsf
</t>
<t tx="zoomq.20100903210229.3879">[i,i+1 for i in range(10)&lt;&lt;我的&gt;&gt;]
</t>
<t tx="zoomq.20100903210229.3880">dgdfg
dsfgdfsg
sdfdfgsg
dfsg
</t>
<t tx="zoomq.20100903210229.3881">## try leo
TILOG={'DEFONT':"/usr/share/fonts/VeraSansYuanTi/VeraSansYuanTi-Regular.ttf"
    ,'TITLE':"TiLog"
    ,'PATH':{'root':"/home/zoomq/2matter4peg/tangle/zoomquiet/4lifeHacking"
        ,'log':"_log"
        ,'exp':"exp"
        ,'data':"data"
        ,'tpl':"tpl"
        }
    ,'FILTER':{'log':"zq-tilog-*.txt"
        }
    ,'TPL':{'log':"zq-tilog-%s.txt"
        }
    ,'DICT':{'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    ,'tLebel':['tLost','tInput','tOutput','tCommunicate','tMyself','tSleep']
    }
INIDICT={'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}</t>
<t tx="zoomq.20100903210229.3882">&lt;&lt; tilog_chart declarations &gt;&gt;

@others

if __name__ == '__main__':      # this way the module can be
    if 2 != len(sys.argv):
        print """ %s usage::
        $ python tilog_chart.py MonthPoint [like 0812]
        """ % VERSION
    else:
        zmonth = sys.argv[1]                 #[-10:-4]    print tonow
        tilogchart(zmonth)

    print "Mnnnn export all that report! \n by %s"%VERSION


</t>
<t tx="zoomq.20100903210229.3883"># -*- coding: utf-8 -*-
import os,sys
#import time,datetime,pickle
#from operator import itemgetter
from fnmatch import *
from cfg import *

#from pychartdir import *
#from ChartDirector import pychartdir as pcd

VERSION = "tilog_chart v0.8-090304@Zoom.Quiet"
#print dir()

''''tilog_chart.py'
    v0.7 090205 init. to simple chart handwrited TiLog
'''



</t>
<t tx="zoomq.20100903210229.3884">def tilogchart(month):
    '''main func
    '''
    #print TILOG['PATH']
    #flog = filter(os.listdir(TILOG['PATH']['data'])
    #    ,TILOG['FILTER']['log'])
    flog = "%s/%s"%(
        TILOG['PATH']['data']
        ,TILOG['TPL']['log']%month
        )
    #dictchart = {'date':[],'tI':[],'tO':[],'tC':[],'tM':[],'tS':[]}
    for li in open(flog):
        formatlog(li)
        #pass
    dayline(month)
    TILOG['DICT']=INIDICT
    for li in open(flog):
        formatotm(li)
        #pass
    monthpie(month)
    TILOG['DICT']=INIDICT
    '''
    for li in open(flog):
        formatotmr(li)
        pass
    '''
    monthradar(month)
    TILOG['DICT']=INIDICT





</t>
<t tx="zoomq.20100903210229.3885">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3886">def formatotmr(line):
    '''format log data into dict for tot time month in radar
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3887">def monthradar(month):
    '''usage ChartDirector exp chart in radar
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]
    # The data for the chart
    #data = [6,7,3,8,7,9,7,4,10]


    # Create a PolarChart object of size 450 x 350 pixels
    c = pcd.PolarChart(350, 300)
    c.setRoundedFrame()
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    #c.addTitle("角色雷达图谱:", defaultfont, 14, 0xffffff).setBackground(0x008000)
    #c.addTitle2(TopLeft, "&lt;*underline=2*&gt;角色雷达图谱:", defaultfont, 14)

    # Set center of plot area at (225, 185) with radius 150 pixels
    #c.setPlotArea(225, 185, 150)
    c.setPlotArea(180, 160, 100)
    #c.setGridColor(0xc0000000L, 1, 0xc0000000L, 1)

    # Add an area layer to the polar chart
    c.addAreaLayer(data, 0x9999ff)
    c.addLineLayer(data, 0x6666cc).setLineWidth(3)

    c.setPlotAreaBg(0xdddddd, 0xeeeeee)
    c.setGridStyle(0)

    layer0 = c.addLineLayer(data, 0x0000ff, "Close Loop Line")
    #layer0.setAngles(data)

    # Set the line width to 2 pixels
    layer0.setLineWidth(2)

    # Use 11 pixel triangle symbols for the data points
    layer0.setDataSymbol(pcd.CircleShape, 11, 0xffff00)

    #layer0.setDataLabelStyle().setBackground(0x9999ff, pychartdir.Transparent, 1)

    # Enable data label and set its format
    #layer0.setDataLabelFormat("{value}分")


    # Set the labels to the angular axis as spokes
    c.angularAxis().setLabels(labels).setFontStyle(TILOG['DEFONT'])

    # output the chart
    c.makeChart("zq-ti-month-radar-%s.png"%month)
    print "EXPed: zq-ti-month-radar-%s.png"%month

</t>
<t tx="zoomq.20100903210229.3888">#pie chart 4 month lost time</t>
<t tx="zoomq.20100903210229.3889">def formatotm(line):
    '''format log data into dict for tot time month
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        ddict['tI'] = 0.0
        ddict['tO'] = 0.0
        ddict['tC'] = 0.0
        ddict['tM'] = 0.0
        ddict['tS'] = 0.0
        #pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI']+=float(dli[1])
        ddict['tO']+=float(dli[2])
        ddict['tC']+=float(dli[3])
        ddict['tM']+=float(dli[4])
        ddict['tS']+=float(dli[5])




</t>
<t tx="zoomq.20100903210229.3890">def monthpie(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['tLebel']
    tL = len(TILOG['DICT']['date'])*24-(TILOG['DICT']['tI']+TILOG['DICT']['tO']+TILOG['DICT']['tC']+TILOG['DICT']['tM']+TILOG['DICT']['tS'])
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']
    data = [tL,tI,tO,tC,tM,tS]

    # creat chart
    c = pcd.PieChart(440, 200,pcd.metalColor(0xccccff, 0), 0x000000, 1)
    c.setRoundedFrame()
    c.setPieSize(215, 110, 80)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())
    c.set3D(-1,60)
    c.setData(data, labels)
    c.setExplode(0)
    #c.setStartAngle(135)
    c.setStartAngle(90, 0   )

    c.setLabelLayout(pcd.SideLayout)
    c.setLabelFormat("{label}&lt;*br*&gt;{value}h ({percent}%)")

    t = c.setLabelStyle()
    t.setBackground(pcd.SameAsMainColor, pcd.Transparent, pcd.glassEffect())
    t.setRoundedCorners(5)
    c.setLineColor(pcd.SameAsMainColor, 0x334433)

    # output the chart
    c.makeChart("zq-ti-month-pie-%s.png"%month)
    print "EXPed: zq-ti-month-pie-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3891">#line fot time usaged in day</t>
<t tx="zoomq.20100903210229.3892">def formatlog(line):
    '''format log data into dict
    '''
    #print TILOG['DICT']['date']
    ddict= TILOG['DICT']
    if "date" in line:
        pass
    else:
        dli = line.split(",")
        ddict['date'].append(str("%s.%s"%(int(dli[0][2:4]),dli[0][-2:])))
        ddict['tI'].append(float(dli[1]))
        ddict['tO'].append(float(dli[2]))
        ddict['tC'].append(float(dli[3]))
        ddict['tM'].append(float(dli[4]))
        ddict['tS'].append(float(dli[5]))




</t>
<t tx="zoomq.20100903210229.3893">def dayline(month):
    '''usage ChartDirector exp chart
    '''
    from ChartDirector import pychartdir as pcd
    # The labels for the line chart
    labels = TILOG['DICT']['date']
    tI = TILOG['DICT']['tI']
    tO = TILOG['DICT']['tO']
    tC = TILOG['DICT']['tC']
    tM = TILOG['DICT']['tM']
    tS = TILOG['DICT']['tS']

    c = pcd.XYChart(800, 300, 0xeeeeff, 0x000000, 1)
    c.setRoundedFrame()
    c.setPlotArea(55, 58, 720, 195, 0xffffff, -1, -1, 0xcccccc, 0xcccccc)
    c.addLegend(50, 30, 0, TILOG['DEFONT'], 9).setBackground(pcd.Transparent)
    c.addTitle("ZQ`s TiLog Chart %s"%month
        , TILOG['DEFONT'], 15).setBackground(
            0xccccff, 0x000000, pcd.glassEffect())

    c.yAxis().setTitle("hour")
    c.xAxis().setLabels(labels).setFontAngle(45)

    #c.xAxis().setLabelStep(3)
    c.xAxis().setTitle("date")

    # Add a line layer to the chart
    layer = c.addLineLayer2()

    layer.setLineWidth(2)

    layer.addDataSet(tI, 0xff0000, "tI")
    layer.addDataSet(tO, 0x008800, "tO")
    layer.addDataSet(tC, c.dashLineColor(0x3333ff, pcd.DashLine), "tC")
    layer.addDataSet(tM, 0xff8800, "tM")
    layer.addDataSet(tS, 0x334433, "tS")

    # output the chart
    c.makeChart("zq-ti-line-day-%s.png"%month)
    print "EXPed: zq-ti-line-day-%s.png"%month
</t>
<t tx="zoomq.20100903210229.3894">def expchart(month):
    '''usage ChartDirector exp charts
    '''
    lineday(month)

</t>
<t tx="zoomq.20100903210229.3895">def expplot():
    '''usage Gnuplot exp png chart
    '''
    print TILOG['DICT']['date']
    i = 0
    d=[]
    for j in TILOG['DICT']['tI']:
        d.append([i,j])
        i+=1
    print d
    import Gnuplot
    g = Gnuplot.Gnuplot(persist=1)
    g('set term png font "%s" ' %TILOG['DEFONT'])
    g('set output "gnuplot-%s.png" ' %TILOG['TITLE'])
    g('set title "Zoomq`s chart %s" ' %TILOG['TITLE'])

    g('set xlabel "日期" ')
    g('set ylabel "时耗" ')

    g.plot([[0, 1.0], [1, 2.0], [2, 0.0], [3, 4.5], [4, 2.5], [5, 3.0], [6, 1.0], [7, 0.0], [8, 0.0], [9, 0.0], [10, 2.5], [11, 0.0], [12, 0.0], [13, 2.0], [14, 0.0], [15, 0.0], [16, 1.0], [17, 2.5], [18, 2.5], [19, 1.5]])
    #d = Gnuplot.Data(TILOG['DICT']['date'],TILOG['DICT']['tI'])
    #g.plot(str(d))



</t>
<t tx="zoomq.20100903210229.3896">@path ../zoomquiet-tangle/txt/KMthinking/
#zoomquiet.leo/txt/KMthinking
</t>
<t tx="zoomq.20100903210229.3897">wiki 不是任何人都可以用的！
??

- 任何的理由都是理由:
 - word 经验是即得的不用学习
 - wiki 无法快速使用表格
 - wiki 难以排版不好看

...
以往的努力都使错方向了:

维基的本质是相互服务，文章共用
而所有不习惯维基的人，都不是维基用户
只是文章消费者，本质期望是:
- 有人为他们准备好 清晰/明了/排版漂亮 的索引页面
- 他们随时可以查阅想查阅的!

MLBD !怪不得维基不能用!
没有分享的冲动,没有知识的结构,还想有专人为您服务?!
- 对分享人不公平!
 - 屈从你的格式你的分类?!
- 对其它查阅者也不公平!
 - 屈从你的格式你的分类?!


&gt;
&gt; 哦，那我觉得最核心的问题是：wiki一定要定位明确
是也乎，是也乎，
所以，俺推广维基时，首先都是尝试说明什么是维基，而不是怎么使用...
但是，真的是在 Office 淫威之下的人们，大多数无法想象 Word 不方便之处(也可能是拒绝想象)
但是，维基也的确是可以当成各种平台来用:
- 有公司用维基作工单系统
- 配合插件，可以作个人/团队blog
- 共同写作平台
- FAQ
- ...
维基是真正作到本身简单到极致,使用正式自由到充分的信息管理平台了,
就象 Scrunm 成功实施的团队一样,人最重要!
使用维基成功,必须是:
- 团队有知识积累的冲动
- 所有人有知识分享的冲动
- 所有人有时间记录知识片段
- 所有人愿意配合其它人整理知识体系

&gt; 是作为随手分享的知识经验库还是作为正式的文档资料库，一定要搞清楚
&gt; 如果定位是后者，那要想保证wiki文档的权威性，就不能把其他分享掺合进来，就一定全是正式文档。这里如何组织文档是非常重要的问题。MoinMoin的url太灵活了，这虽然方便，但其实对使用者有了比较高的要求。别说非技术人员，就是技术人员在“我的文档该放在哪儿”这个问题上也是有些纠结的，这一点是推广wiki作为正式文档库的核心障碍，如果就这一点多下些功夫，制定方便的规范和流程并且给出培训，就好了。
&gt; 这时，wiki可以基本取代非流转性的(无需流转到客户手中)word文档，如果需要流转，导出就行了。但电子表格和幻灯是完全没法的。但这两种文档一般也没有相互链接，自由索引／复用，统一搜索等需求。
&gt; 建议电子表格类文档不要往wiki里整合了，如果统一存在svn中，引用时给出url，或者直接上传复件，如果要显示局部数据，给出截图。

</t>
<t tx="zoomq.20100908091715.2579">蟒营:
    +-- 文档:
        +-- #Hg使用:
            +-- code.google 協同
                '+-- 权限'
                '+-- 初始化'
            +-- 本地使用:
                '+-- M$工具'
                '+-- 仓库理解'
                '+-- 提交'
                '+-- 合并'
                #+-- 分支
            +-- 团队協同
                '+-- 局部交换'
        +-- Py 环境
        +-- #工程协同
            +-- 维基贡献?
            +-- 仓库使用流程...
    +-- 环境:
        +-- Trac:Bitten TDD 配置
        +-- Hg Hooks...
    +-- 教案:
        +-- Py
        +-- Web
        +-- DB
        +-- ...</t>
<t tx="zoomq.20100925155257.2580">+-- PyBlosxom:
    +-- 部署:
        +-- ~Hg hook
        +-- crontab 备份?
    +-- 评注:
        +-- 外部JS 评注服务
        +-- WeKnow GAE服务
            +-- Cloudant 使用
    +-- 增进:
        +-- '文章页 title 插入'
            ~/zq.pyblosxom/pybshare/jquery-pybactions.js
        +-- ...
    +-- 优化:
        +-- 图片合并css 配合
        +-- JS 合并压缩
        +-- CSS 合并压缩
    +-- #Leo配合:
        +-- 自动事务按钮:
            +-- t2t编译
            +-- 静态化发布

</t>
<t tx="zoomq.20100927113242.2581">
foo-main    :8000 主仓库
    $ hg serve -p 8000 -a 127.0.0.1 -n "HgDemo main REPO."
    hg serve -p 8000 -a 10.20.208.13 -n "HgDemo main REPO."
foo-zq      :9001 用户克隆
    $ hg serve -p 9001 -a 127.0.0.1 -n "HgDemo: ZQ'srv. clone" --style gitweb
foo-bar     :9002
    $ hg serve -p 9002 -a 127.0.0.1 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.34 -n "HgDemo: BAR'srv. clone" --style coal
    hg serve -p 9002 -a 10.20.208.13 -n "HgDemo: BAR'srv. clone" --style coal

foo-loc     本地仓库
bar-loc

[extensions]
hgext.extdiff =

[extdiff]
;tortoisemerge =
beyondcompare3.args=$local $other $base $output /ro /lefttitle=local /centertitle=base /righttitle=other /automerge /reviewconflicts /solo
beyondcompare3.regkey=Software\Scooter Software\Beyond Compare 3
beyondcompare3.regname=ExePath
beyondcompare3.gui=True
beyondcompare3.priority=-2
beyondcompare3.diffargs=/lro /lefttitle='$plabel1' /righttitle='$clabel' /solo /expandall $parent $child

[merge-tools]
tortoisemerge.args=/base:$base /mine:$local /theirs:$other /merged:$output
tortoisemerge.regkey=Software\TortoiseSVN
tortoisemerge.checkchanged=True
tortoisemerge.gui=True
tortoisemerge.priority=-4
tortoisemerge.diffargs=/base:$parent /mine:$child /basename:'$plabel1' /minename:'$clabel'
</t>
<t tx="zoomq.20101015095808.2582">.hgrc 中的常用配置...

</t>
<t tx="zoomq.20101019093735.5077">[extensions]
hgext.extdiff =

[extdiff]
cmd.diffuse = 
;cmd.kdiff3 =

[merge-tools]
;kdiff3.args = $base $local $other -o $output

diffuse.priority=-3
diffuse.args=$local $base $other
diffuse.gui=True
diffuse.diffargs=$parent $child


[extensions]
hgext.extdiff =

[extdiff]
cmd.kdiff3 =

[merge-tools]
kdiff3.args = $base $local $other -o $output
</t>
<t tx="zoomq.20101019093735.5078">[extensions]
hgext.keyword=

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}
</t>
<t tx="zoomq.20101019093735.5079">+-- http://xkcd.com/ 中文翻译
    +-- 下载脚本 '/home/zoomq/media/manga/2graspic/xkcd.com/' 
        grasp-xkcd.sh   ;   filter-xkcd.py
    +-- blogger.com 发布?
</t>
<t tx="zoomq.20101026092125.2576">@path data
date 收集

</t>
<t tx="zoomq.20101026092125.2577">date,tI,tO,tC,tM,tF,tS
101008,1.5,3.0,0.5,5.5,5.5,7.0
101009,0.0,3.0,0.5,5.5,6.5,7.0
101011,3.0,3.0,0.0,5.0,5.0,6.5
101012,0.5,1.5,2.0,6.0,5.0,6.0
101013,1.0,5.0,1.5,5.0,5.0,7.0
101014,6.0,0.0,0.0,6.0,5.0,7.0
101015,0.0,6.0,0.0,6.0,5.0,7.0
101018,0.0,3.25,1.2,8.25,5.0,7.0
101019,0.0,6.0,3.75,3.75,3.25,6.0
101020,1.0,4.0,0.5,9.0,5.0,6.5
101021,0.5,3.0,4.25,7.75,2.0,6.5
101022,0.0,4.25,1.0,6.5,3.75,6.5
101024,1.5,2.75,3.25,4.0,5.0,6.0
101025,0.0,7.5,2.5,6.0,2.0,6.0
101026,2.75,2.3,0.0,6.85,2.0,6.5
101027,0.5,4.0,6.75,4.25,2.0,6.0
101028,0.0,1.0,1.0,4.5,2.0,5.5
101029,0.0,10.5,0.0,5.25,2.0,7.0
101030,1.5,8.5,2.0,1.5,2.0,6.00</t>
<t tx="zoomq.20101029104710.3831">[ui]
username = Zoom.Quiet &lt;zoomquiet+hg@gmail.com&gt;

[extensions]
hgext.keyword=
graphlog =

[defaults] 
glog = --style compact

[alias] 
ll = glog --style compact

[keyword]
**.py =
**.rst =
**.txt =
**.wiki =
**.xml =
**.yaml =
**.html =

[keywordmaps]
RCSFile = {file|basename},v
Author = {author|user}
Header = {root}/{file},v {node|short} {date|utcdate} {author|user}
Source = {root}/{file},v
Date = {date|utcdate}
Id = {file|basename},v {node|short} {date|utcdate} {author|user}
Revision = {node|short}

</t>
<t tx="zoomq.20101030170919.2579"></t>
<t tx="zoomq.20101030170919.2580">@language python
@tabwidth -4
# -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i
def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
if __name__=='__main__':
    main()
</t>
<t tx="zoomq.20101030170919.2581"># -*- coding: utf-8 -*-
# Quick Pytohn Script Explanation for Progeammers
# 给程序员的超快速Py脚本解说
import os
</t>
<t tx="zoomq.20101030170919.2582">def main():
    print 'Hello World!'
    print "这是Alice\'的问候."
    print "这是Bob\'的问候."
    foo(5,10)
    print '=' * 10
    print '这将直接执行'+os.getcwd()
    counter = 0
    counter += 1
    food = ['苹果','杏子','李子','梨']
    for i in food:
        print '俺就爱整只:'+i
    print '数到10'
    for i in range(10):
        print i

</t>
<t tx="zoomq.20101030170919.2583">def foo(param1,secondParam):
    res = param1+secondParam
    print '%s 加 %s 等于 %s'%(param1,secondParam,res)
    if res &lt; 50:
        print '这个'
    elif (res&gt;=50) and ((param1==42) or (secondParam==24)):
        print '那个'
    else:
        print '嗯...'
    return res  # 这是单行注释
    '''这是多
行
注
释......'''
</t>
<t tx="zoomq.20101103153946.3839">卫士开源的定制设想...
+-- #迁移高配主机
+-- 维基增补:
    +-- '列表注册'
    +-- Hg 使用
+-- 代码自动化流程
    +-- 对内部 hadson
    +-- 对pyk的 Bitten ~ #先得恢复 pyk!
+-- py.k 配合宣传
</t>
<t tx="zoomq.20101103153946.5095">+-- #OhLife CLI
+-- 常好CLI 技巧:
    +-- history
    +-- 文件更动...
+-- Vim
+-- rxvt
    +-- tmux
    +-- Muut+Gmail
</t>
<t tx="zoomq.20101104113205.5096">邮件来自 Google Groups "DouPy"列表!
讨论: DouPy@googlegroups.com | 退订: DouPy+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/DouPy
工程: http://code.google.com/p/unbeans/
维基: http://code.google.com/p/unbeans/wiki/DouPy

+-- doupy ~ 豆瓣综合使用:
    #你的豆瓣 API key:
0cd1817bb03732fc2674847310a598f4
API key 的详细信息   · · · · · · 
* 私钥：d241f9b2e06544fc -请保护好你的私钥
* 应用名称：Zoom.Quiet
* 创建时间: 2010-10-29
* 应用说明:
  个人试用各种豆瓣API, 通过Py 结合 Shell 进行Ubuntu 中的一键式操作, 在寻找到合理的快感后,将另外申请 Key 进行服务化 ;-)
</t>
<t tx="zoomq.20101105113140.2587">#服务即命令行
+-- GooglCL
+-- Cloudant 永久存储 ~ CouchDB
+-- DouPy ~ dubanAPI

</t>
<t tx="zoomq.20101109214756.6989">@language python
@tabwidth -4

整体规划 zoomquiet.org 相关网站发布及小工具任务

最终:
    zoomquiet.org
        http://zoomquiet.org/obp    图书工程发布    
    blog.zoomquiet.org
    jump&gt;&gt;&gt; http://blog.zoomquiet.org/pyblosxom
    
    floss.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqFLOSS/tree/
    skm.zoomquiet.org
    jump&gt;&gt;&gt; http://zoomquiet.org/res/scrapbook/ZqSKM/tree/

  &lt;head&gt;
  &lt;meta http-equiv="refresh" content="0;URL=gldt1009.svg"&gt;
  &lt;/head&gt;
    </t>
<t tx="zoomq.20101109214756.6990">zeus:~/zoomquiet.org&gt; tree -L 4
.
|-- README.txt
+-- _cfgs
+-- _cron
+-- _docs
+-- _logs
+-- _stuff
+-- blog    ~ PyBlosxom
|   +-- _static     ~ 发布为 /pyblosxom
|   +-- _images     ~ 发布为 /pybimage
|   +-- entries     ~ 发布为 /pybnodes
|   +-- flavours    ~ 发布为 /pybstyle
|   +-- pybshare    ~ 发布为 /pybshare
|   +-- plugins  
|   |-- blog.ini
|   |-- comment
|   |-- config.py
|   |-- index.html
|   |-- not-doc-2006-05-31-12-00.t2t
|   `-- ...
+-- repos
|   `-- zqlib-hg
`-- www
    |-- index.html -&gt; map/index.html
    |-- leo_doc_zh -&gt; obp/leo_doc_zh/doc/html/_build/html
    +-- logs -&gt; ../_logs
    +-- map
    +-- obp
    +-- res
    |   +-- HYRY-scipydoc
    |   +-- d   ~ 文档
    |   +-- f   ~ foto
    |   +-- j   ~ Js
    |   +-- m   ~ 多媒体
    |   |   |-- r   ~ 录音
    |   |   `-- v   ~ 录像
    |   +-- s5 -&gt; ../../repos/zqlib-hg/tangle/zoomquiet.leo/s5/
    |   `+- scrapbook 
    |-- pyblosxom_zh -&gt; obp/pyblosxom_zh/build/html/
    |-- pywdwpy -&gt; obp/PyWDWPy/build/html/
    |-- tpipy_zh -&gt; obp/TPiPy/build/html/
    `-- w2py_manual_zh -&gt; obp/web2py_manual_zh/build/html
</t>
<t tx="zoomq.20101109214756.6991">#Type:	Source:	Destination:	Actions:
# 准备好后,取消!
A Record	www.zoomquiet.org	202.108.44.62	Edit | Delete
A Record	obp.zoomquiet.org	119.88.56.193	Edit | Delete

# 核心域名
A Record	zoomquiet.org	119.88.56.193	Edit | Delete

A Record	blog.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	skm.zoomquiet.org	119.88.56.193	Edit | Delete
A Record	floss.zoomquiet.org	119.88.56.193	Edit | Delete

# 预留,指向 gae
A Record	weknow.zoomquiet.org	202.108.44.62	Edit | Delete

CNAME Record	*.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	googlee445fdb76e058b0a.zoomquiet.org	google.com	Edit | Delete
CNAME Record	mail.zoomquiet.org	Yahoo! Hostname	Edit | --
CNAME Record	zqlib.zoomquiet.org	ghs.google.com	Edit | Delete</t>
<t tx="zoomq.20101109214756.6992">对根页面进行精简:
    + 所有目录只显示前子目录和前5页面索引
        + 2级索引同上
        + 3级索引不限制
    + 默认说明页面 readme.html
    + 所有页面,增补原始URL旁注!
    </t>
<t tx="zoomq.20101227205438.2592">邮件来自 Google Groups:"ks-deve"金山开源社区技术邮件列表
讨论: ks-deve@googlegroups.com
退订,请邮件至: ks-deve+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com


邮件来自 Google Groups:"ks-user"金山开源社区用户邮件列表
讨论: ks-user@googlegroups.com
退订,请邮件至: ks-user+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-user
技术列表: http://groups.google.com/group/ks-deve
通告列表: http://groups.google.com/group/ks-ann
社区官网: http://code.ijinshan.com

邮件来自 Google Groups:"ks-ann"金山开源社区通告邮件列表
讨论: ks-ann@googlegroups.com
退订,请邮件至: ks-ann+unsubscribe@googlegroups.com
详细: http://groups.google.com/group/ks-ann
技术列表: http://groups.google.com/group/ks-deve
用户列表: http://groups.google.com/group/ks-user
社区官网: http://code.ijinshan.com</t>
<t tx="zoomq.20101228111644.2594">date,tI,tO,tC,tM,tF,tS
101102,1.75,4.25,0.75,6.75,5.0,6.0
101103,0.0,2.0,3.0,5.0,5.0,6.0
101104,0.0,6.35,2.75,4.0,6.5,6.0
101105,2.25,1.0,1.0,6.25,4.75,5.0
101106,0.0,5.5,1.5,4.0,4.0,7.0
101108,0.0,6.5,2.75,3.25,5.0,6.5
101109,0.0,6.5,2.75,2.0,5.0,7.0
101110,2.5,5.0,1.5,4.0,5.0,6.0
101111,0.0,7.75,4.5,3.25,2.0,6.0
101112,0.0,2.5,0.75,4.75,2.0,6.0
101115,0.0,4.5,4.0,5.0,5.0,7.0
101116,0.0,4.5,2.5,3.0,5.0,6.0
101117,0.0,2.5,2.5,7.5,5.5,6.0
101118,0.0,7.5,2.0,2.0,2.5,6.0
101119,1.75,3.5,1.25,5.0,5.0,6.0
101129,0.0,2.25,5.5,7.5,2.0,6.0
101130,0.5,9.0,2.5,5.5,2.0,5.0

</t>
<t tx="zoomq.20101228111644.2596">date,tI,tO,tC,tM,tF,tS
101201,0.0,8.75,4.25,4.0,2.0,5.5
101202,1.0,6.25,1.5,2.0,2.0,4.5
101203,0.0,8.0,1.0,4.5,2.0,7.5
101206,1.0,5.0,5.75,3.75,2.5,7.0
101207,0.0,7.0,2.75,6.0,2.0,5.5
101208,0.0,10.5,2.75,2.5,2.0,7.0
101209,0.0,11.0,2.0,4.0,2.0,5.0
101210,0.0,5.5,2.75,2.5,2.0,5.0
101213,0.0,6.5,0.75,6.25,2.0,7.0
101214,0.0,3.5,2.75,6.25,5.0,7.0
101215,0.0,5.25,2.25,6.5,5.0,7.5
101216,3.5,5.5,0.5,5.5,2.0,6.0
101217,0.0,0.0,2.75,12.5,2.0,6.0
101220,0.0,2.75,4.0,4.0,5.0,7.0
101221,0.0,4.25,1.5,5.75,5.0,6.0
101222,0.0,5.5,1.0,4.5,2.0,7.0
101223,0.5,1.5,1.0,10.5,5.0,5.5,6.5
101227,0.0,1.75,3.25,8.0,5.0,6.0
101228,1.75,2.25,1.75,8.5,5.0,5.5
101229,4.5,4.5,1.75,2.75,4.5,5.5
101230,0.0,2.75,2.75,6.5,5.5,5.0
101231,0.0,2.0,1.5,6.5,7.0,7.5

</t>
<t tx="zoomq.20110104095502.2596">date,tI,tO,tC,tM,tF,tS
110104,0.00,6.50,0.00,5.50,5.00,7.00
110105,1.00,4.50,0.50,5.00,6.00,7.00
110106,2.15,4.75,0.50,6.50,4.50,7.00
110107,0.50,5.75,2.25,6.50,4.00,6.50
110110,1.00,3.00,4.50,1.50,5.00,7.00
110111,1.50,3.50,1.50,7.00,3.00,5.50
110112,2.00,3.00,1.00,6.50,5.00,7.00
110113,6.00,1.75,0.25,6.00,1.50,7.00
110117,0.00,5.25,2.25,5.50,4.00,7.00
110118,0.00,2.50,4.50,5.00,4.00,7.00
110119,1.00.1/50,1.50,5.00,7.00,7.50
110120,3.00,5.00,1.00,3.00,4.00,6.00
110121,2.00,5.25,1.25,3.50,4.00,7.50
110124,1.00,5.50,0.50,5.50,4.00,7.00
110125,0.00,5.50,1.00,6.00,4.50,7.50
110126,1.50,8.75,2.75,2.00,1.00,7.00
110127,2.50,7.50,0.00,3.00,3.50,7.50
110128,0.50,8.00,0.00,3.00,5.50,7.00
110129,2.00,4.50,4.50,3.00,4.00,7.00
</t>
<t tx="zoomq.20110209102527.2595">date,tI,tO,tC,tM,tF,tS
110401,0.00,1.00,3.75,7.75,4.25,6.50
110406,0.00,3.00,3.25,6.50,4.25,7.00
110407,3.25,3.25,2.50,10.0,1.50,7.00
110408,4.00,4.00,0.00,8.00,1.50,5.50
110409,0.00,6.25,0.00,6.75,4.00,7.00



</t>
<t tx="zoomq.20110218220319.2595">Command-line access

If you plan to make changes, use this command to check out the code as yourself using HTTPS:
# Project members authenticate over HTTPS to allow committing changes.
svn checkout https://openbookproject.googlecode.com/svn/trunk/ openbookproject --username Zoom.Quiet

When prompted, enter your generated googlecode.com password.

Use this command to anonymously check out the latest project source code:
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://openbookproject.googlecode.com/svn/trunk/ openbookproject-read-only 
</t>
<t tx="zoomq.20110218220319.3903">Table of Contents
Chapter 1 Introduction to Instrumentation
    Data Acquisition
    Control Output
    Applications Overview
    Summary
Chapter 2 Essential Electronics
    Electrical Charge
    Electric Current
    Basic Circuit Theory
    Circuit Schematics
    DC Circuit Characteristics
    AC Circuits
    Interfaces
    Summary
    Suggested Reading
Chapter 3 The Python Programming Language
    Installing Python
    The Python Programming Language
    Python Development Tools
    Summary
    Suggested Reading
Chapter 4 The C Programming Language
    Installing C
    Developing Software in C
    C Development Tools
    Summary
    Suggested Reading
Chapter 5 Python Extensions
    Creating Python Extensions in C
    Python’s C Extension API
    Using the Python C Extension API
    Python’s ctypes Foreign Function Library
    Summary
    Suggested Reading
Chapter 6 Hardware: Tools and Supplies
    The Essentials
    Advanced Tools
    Supplies
    New Versus Used
    Summary
    Suggested Reading
Chapter 7 Physical Interfaces
    Connectors
    Serial Interfaces
    GPIB/IEEE-488
    PC Bus Interface Hardware
    Old Doesn’t Mean Bad
    Summary
    Suggested Reading
Chapter 8 Getting Started
    Defining the Project
    Requirements
    Designing the Software
    Functional Testing
    Implementation
    User Documentation
    Summary
    Suggested Reading
Chapter 9 Control System Concepts
    Basic Control Systems Theory
    Control System Types
    Implementing Control Systems in Python
    Summary
    Suggested Reading
Chapter 10 Building and Using Simulators
    What Is Simulation?
    Using Python to Create a Simulator
    Serial Terminal Emulators
    Displaying Simulation Data
    Creating Your Own Simulators
    Summary
    Suggested Reading
Chapter 11 Instrumentation Data I/O
    Data I/O Interface Software
    Data I/O: Acquiring and Writing Data
    Summary
    Suggested Reading
Chapter 12 Reading and Writing Data Files
    ASCII Data Files
    Binary Data Files
    Summary
    Suggested Reading
Chapter 13 User Interfaces
    Text-Based Interfaces
    Graphical User Interfaces
    Summary
    Suggested Reading
Chapter 14 Real World Examples
    Serial Interfaces
    USB Example: The LabJack U3
    Summary
    Suggested Reading
Appendix Free and Open Source Software Resources
Appendix Instrument Sources
    Manufacturers
    Used Test Equipment Sources
    Manuals
Colophon</t>
<t tx="zoomq.20110221225054.2597">=== 报名: ===
 # 高增琦 &lt;pgf00a@gmail.com&gt; / 13522167037
  * 自用Blog:暂无，校内用的多...
  * 邮寄前联系（租的房子快到期了）
  * 2010年新鲜毕业的研究生，作XML查询引擎，JAVA 工作是数据库开发，C 有一定的C语言基础，有并行程序的经验硬件接触的少（也就是上学时）有一定的英文阅读能力，曾经翻译过英文论文（XML流处理相关）对开源、开发有激情
  * 每天1-2个小时？也许周末能多点儿,要是能在手机上弄，也许更多一些吧
  * 对于未来的版权收益有什么特殊要求? 这个不懂，求指教... 
 # Grissiom &lt;chaos.proton@gmail.com&gt; / 15901033820
  * *bitbucket ID:* `grissiom`
  * http://grissiom.blogspot.com (life), http://blog.csdn.net/grissiom (tech)
  * 北京海淀区知春路大运村 1 号楼 1305 邮编 100191
  * 现在研一，大二的时候自学的 python，以后只要能用 python 的地方就用 python。C 语言也会，写过 51 的程序。 本科毕设做的是 pyqt+pyserial 的拉伸机测控系统。实验室做一些小的材料测控仪器。上个学期学过一点控制论。 我看目录里也有控制系统的内容。英语水平是 CET-6，平时常在英文网站上瞎逛。技术书籍有原版不读译本。
  *  2011 年的课程应该不紧。基本应该是在实验室做项目吧。估计每周应该有四个晚上可以掺和，呵呵
  * 对于未来的版权收益有什么特殊要求?
   * 以前只给 KDE 翻译过几个 po，第一次参与这种翻译，不知道行规怎么样的。图学习，不图收益，呵呵
 # 小马xiaoma &lt;cnxiaoma@gmail.com&gt; / 13311664600
  * 自用Blog    在建中...
  * 15年开发经验，其中:5年MIS开发(VB, PB, Sybase)/5年Web开发(PHP,Mysql,ASP,Java)/5年嵌入式（RFID）开发(C)/对数据库，互联网,嵌入式有一定了解。
  * 2011 很忙，但是仍然能抽出一定的时间。目前正在翻译《REST in Practice》 其中6,7,8章（150多页），4人合译，计划3月完稿，6月可以出版。4月份后可以抽出时间，平均一天一页应该没问题。
    * http://www.amazon.com/REST-Practice-Hypermedia-Systems-Architecture/dp/0596805829
  * 对于未来的版权收益有什么特殊要求?只要求有署名权，其他有最好，没有也无所谓，就当是为社区做贡献。
 # kermit.mei@gmail.com / 13428780315
  * *bitbucket ID:* `kermitmei`
  * http://www.zeuux.org/home/kermit.mei/
  * 邮寄地址
  * 目前从事嵌入式Linux下C/C++软件开发，主要是以Qt为主的嵌入式Linux应用开发，2年工作经验;以前做过智能遥控器，多款数码电子产品；现在工作内容是开发一个基于嵌入式的精简Web引擎，包括html解析和界面生成等功能。对C/C++ 以及Qt架构灰常熟悉，目前靠这个吃饭；熟悉Linux操作系统;熟悉Python/Perl/Bash等脚本语言(主要用于测试和辅助编程)；对计算机硬件有一定了解，并有浓厚兴趣。
  * 换工作了，从不加班，所以不算忙，至少保证：
   * 1.每天能够查收并处理邮件；
   * 2.每周至少贡献一天(周六或者周日)来完成社区任务；
  * 所有收益均愿意贡献给Zeuux。当然，如果能在扉页中属个名字最好，以帮助我以后找工作时吹吹牛；若无则也罢。
  * 参与目的：
   # 这个工作量不算大，按照一年的计划完成C部分翻译和语法润色应该没有问题。
   # 希望为社区力所能及地贡献一点儿力量。
   # 最重要的是，我本身也希望阅读此书，并进一步学习社区中的“协同作战“。
   # 另外，除了C部分的翻译(因为这部分内容确实很少)，如果时间确实是1年，那我觉得我还有时间担任其他章节的校验工作。
 # 孙伟 / sagasw@gmail.com / 13840885742
  * http://sunxiunan.com
  * 目前主要从事Windows桌面下Visual C++开发，爱好Python和Lua。8年工作经验。
  * 报名参加C相关章节翻译。每周可保证至少有6个小时。
 # Alan Zheng &lt;machinecat1666@gmail.com&gt; / 13764183786
  * *bitbucket ID:* `AlanZheng`
  * http://blog.microsuncn.com
  * 上海市长宁路1018号龙之梦大厦14楼，Siemens工业软件（上海）有限公司
  * 3D图形，Linux(Fedora) C/C++, MIPS embedded system, Python, RHCEr, etc.
  * 周六周日基本都有时间
  * 对于未来的版权收益有什么特殊要求? ：方便介绍一下通常是怎么处理的吗？
 # jl y &lt;newpublic01@gmail.com&gt; /  13764860916
  * *bitbucket ID:* `newpublic01`
  * 邮寄地址:  租房, 到时候联系, OK?!
  * 技术积累:  c, python (自我感觉还需要大幅度提高)
  * 2011 是否忙,每周可以挤出多少时间掺合:  忙也得挤时间啊(目前比较空闲)
  * 对于未来的版权收益有什么特殊要求:    我觉得, 既然是 linux 环境下的, 就应该支持一下 GPL, 但不是说主张盗版啥的, 只是说能让更多的人读到就好. 况且, 说句不太中听的话, 要想拿这个收益改变生活水平啥的, 我觉得八成不靠谱, 还不如支持一下开源, 呵呵
 # hu peter &lt;hulwyx@gmail.com&gt;/ 13929554974
  * 自用Blog：无
  * 广州市前进路161号
  * 技术积累：？？？？ 本人专业是工程类的，不过对外语比较感兴趣，有兴趣参加。目前就职中交第四航道勘察设计院，08年就被派驻一个援外港口建设项目（安哥拉），外语还行，我想试试看，能否帮上你的忙！
  * 工作比较空闲，时间较多。
  * 对于未来的版权收益有什么特殊要求?           ：没有特殊要求。
</t>
<t tx="zoomq.20110224000107.3905">*HI*UI**+ '可以链式clone传递'
+ '事务邮件通告:'
    commits-noreply@bitbucket.org&gt;
    发送至	zoomquiet+rwiwpy@gmail.com （是的，这就是您。） 了解详情
+ '自动编译 hook 部署'
    trac2:
        /ata/_cron/
+ https 认证部署!
    /data/py.kingsoft.net/ssl/server.key
    pass phrase for server.key: P@55w02d
    
    Signature ok
subject=/C=CN/ST=GuangDong/L=ZhuHai/O=zoomquiet.org/OU=obp/CN=Zoom.Quiet/emailAddress=zoomquiet+obp@gmail.com
Getting Private key
    #Yahoo! obp.zoomquiet.org -&gt; py.kingsoft.net
    https://py.kingsoft.net:8080/rwiwpyzh
    使用 Nginx 发布
+ 'Issue 评注...'
    H* 点击到:
    https://bitbucket.org/ZoomQuiet/obp.rwiwpyzh/issues/new
    zoomq   1q2w3e4r
    zsprain obp@pyk
    billxu
    atommann
    pgf00a
    grissiom
    xiaoma
    kermitmei
    sagasw
    AlanZheng
    newpublic01
    hulwyx
</t>
<t tx="zoomq.20110301085102.3912">date,tI,tO,tC,tM,tF,tS
110209,2.00,4.00,1.00,7.00,5.00,6.00
110210,0.00,1.50,1.50,10.5,4.50,5.50
110212,0.00,2.50,1.00,8.00,4.00,7.00
110214,2.50,2.75,1.25,4.00,5.00,7.00
110215,0.00,6.00,0.50,6.50,4.00,7.50
110216,0.00,3.00,1.50,7.00,4.00,7.50
110217,0.00,1.00,2.00,8.50,4.50,7.00
110218,2.00,3.00,0.00,7.00,4.00,7.00
110221,0.00,3.50,3.00,4.50,4.00,7.50
110222,0.50,3.50,1.00,8.00,4.50,8.00
110223,1.00,4.50,1.00,5.00,4.50,7.00
110224,3.00,5.00,0.00,3.50,3.50,7.50
110225,2.00,0.75,7.75,2.00,4.00,6.50
110228,0.00,4.00,0.00,6.00,6.00,6.50
</t>
<t tx="zoomq.20110309092312.11334"> http://nginx.org/download/nginx-0.9.5.tar.gz
http://www.openssl.org/source/openssl-1.0.0d.tar.gz
系统是 OpenSSL 0.9.8k 25 Mar 2009

./configure \
    --prefix=/usr/local/nginx \
    --user=www \
    --group=www \
    --sbin-path=/usr/local/nginx/sbin/nginx \
    --conf-path=/usr/local/nginx/conf/nginx.conf \
    --pid-path=/usr/local/nginx/run/nginx.pid  \
    --lock-path=/usr/local/nginx/lock/nginx.lock \
    --error-log-path=/usr/local/nginx/log/error.log \
    --http-log-path=/usr/local/nginx/log/access.log \
    --with-http_stub_status_module \
    --with-http_ssl_module \
    --with-http_sub_module \
    --with-http_gzip_static_module \
    --with-openssl=../openssl-1.0.0d \ 
    --http-client-body-temp-path=/usr/local/nginx/tmp/client_body  \
    --http-proxy-temp-path=/usr/local/nginx/tmp/proxy  \
    --http-fastcgi-temp-path=/usr/local/nginx/tmp/fastcgi  \
    --http-uwsgi-temp-path=/usr/local/nginx/tmp/uwsgi_temp \
    --http-scgi-temp-path=/usr/local/nginx/tmp/scgi_temp 


Configuration summary
  + using system PCRE library
  + using OpenSSL library: ../openssl-1.0.0d
  + md5: using OpenSSL library
  + sha1 library is not used
  + using system zlib library

  nginx path prefix: "/usr/local/nginx"
  nginx binary file: "/usr/local/nginx/sbin/nginx"
  nginx configuration prefix: "/usr/local/nginx/conf"
  nginx configuration file: "/usr/local/nginx/conf/nginx.conf"
  nginx pid file: "/usr/local/nginx/run/nginx.pid"
  nginx error log file: "/usr/local/nginx/log/error.log"
  nginx http access log file: "/usr/local/nginx/log/access.log"
  nginx http client request body temporary files: "/usr/local/nginx/tmp/client_body"
  nginx http proxy temporary files: "/usr/local/nginx/tmp/proxy"
  nginx http fastcgi temporary files: "/usr/local/nginx/tmp/fastcgi"
  nginx http uwsgi temporary files: "/usr/local/nginx/tmp/uwsgi_temp"
  nginx http scgi temporary files: "/usr/local/nginx/tmp/scgi_temp"
</t>
<t tx="zoomq.20110322090028.3918">@path ~/workspace/OBP.b/RWIwPy/source/
</t>
<t tx="zoomq.20110322090028.3919">@path ch03</t>
<t tx="zoomq.20110322090028.3920">@language rest
Python编程语言
============================================


.. include:: 0_intro.rst


.. toctree::
    :maxdepth: 2

    1_install_py.rst
    2_py_programming_language.rst
    3_py_evelopment_tools.rst
    4_summary.rst
    5_suggested_reading.rst


.. |rwip_0101| image:: ../_static/figs/rwip_0101.pdf.png
   :alt: rwip_0101
   :target: #
</t>
<t tx="zoomq.20110322090028.3921">@language rest
.. include:: ../LINKS.rst

本章节是面向非Py 程序员的,一个精简语言简介...


    I just want to go on the record as being completely opposed to computer languages. Let
them have their own language and soon they’ll be off in the corner plotting with each other!

    我认为就算完全禁止研发计算机语言,他们依然会各自拥有自个儿的开发语言,并立即悄鸟儿的退到各自角落中自娱自乐去了.

—Dr. Steven D. Majewski

.. sidebar:: Steven D. Majewski
   :subtitle: 简介

    早在 1992年就为 Python 摇旗呐喊过的牛人:

    - `WHY PYTHON? &lt;http://www.python.org/search/hypermail/python-1992/0274.html&gt;`__
    - 一直是 `PyObjC 项目 &lt;http://sourceforge.net/projects/pyobjc/&gt;`__ 主持人 



自动化设备一个重要的需求是能够和电脑或是其它控制设备连接运行.
说到这儿,术语"编程"会立即在一些读者头脑中浮现,
实际上作到这一点有很多方法,有些甚至于不涉及编程语言(至少不是传统意义上的).
不过,本书中,我们选择了 Python和少量的C 来创造软件给自动设备用.


本章的目的是给出 Python 的基础介绍.
以便在下一章节,来引入C语言,来为Python 程序使用廠方提供的硬件驱动,或是创造计算密集型的模块.
本章不打算成为Python 的深入教程或是手册;
已经有太多优秀的图书可以承担这一角色了(具体参考本意的推荐阅读部分).
同时可以在 `Python官网`_ 找到从入门教材到高级话题的各种文档!


Python 作为本书的主力开发语言,出于以下原因:

- 足够简单易学
- 没有编译过程,可以直接加载执行(或是直接输入,如果够胆的话)
- 足够强大


同时 Python 也是种多范式语言,支持多种编程模型: 面向过程,面向对象,和函数式编程!
首先我们将进行通常的编程,然后将尝试追加图形界面(GUI)并用C来写擴展;
进一步的,我们将遇到需要抛开通常的程序设计,完全使用我们自行创建的嵌入式对象.


而且,正如我们将见证的, Python 是天生的面向对象的,甚至于变量本质上也是对象;
即使我们没有被迫进行OOP编程,实际上每时每刻我们都在使用对象.
如果还不清楚什么是 "面向对象"的含义,参阅边注所述.



.. sidebar:: 面向对象的编程
   :subtitle: Procedural and Object-Oriented Programming

    一般说程序是认为一种命令式编程,
    核心概念是一组顺序排列的指令形成程序(类似食谱).

    - 扩展程序包含在模块中,模块则由一组函式组成.
     - 每个函式执行特定活动(算法),并可以包含其私有数据.
     - 函式可以在其所在的模块中使用 "全局" 数据.
     - 函式可以调用其它函式
     - 函式可以返回数据
    - 模块可以从其它模块引用函式或是数据
     - 这种设计可以令程序用模块的层次结构组织起来 (即,结构化设计)

    标准C程序就是一个通常的面向过程的例子.
    注意,这里我们使用 "函式"作为"功能"的同义词,不过,在其它一些语言中,他们被区别对待了.
    在 Python 和 C 中,就只有函式!

    面向对象的编程,用类(及其数据)来描述对象的特性概念以及可以在其上执行的操作(对象的方法)来
    扩展了同类事务的功能;

    - 一个对象,可以说是一类说明和模板,而这种描述本身是不可执行的.只有基于对象创建的实例才可执行.
     - 可以想象为,一个类就是个饼干压模,而用这压模作出的饼干有的可能含有坚果,有的又有巧克力,但是他们都称作"饼干"
     - 必要的话,我们可以从指定的类创建很多可执行对象,每个对象除了从其父类继承的数据和方法之外,又都有各自特殊的.
     - 对象的数据,一般称为:"属性",而操作数据的类函式称为:"方法".
    - 对象,经常用来声明组件间的 "有一个.." 以及 "是一个.." 的关系:
     - 例如: 一个摇椅 "是一个" 被称作椅子的类的实行; 它 "有一个" 座位,和两个摇杆(属性); 人们可以坐在它上面摇摆 (方法)


</t>
<t tx="zoomq.20110322090028.3922">@language rest
.. include:: ../LINKS.rst

安装Python
===============================================================================

首先需要安装Python.
本书使用 2.6(不是3.x),对于 Windows 环境, ActiveState发行版比较友好

- http://www.activestate.com/activepython/

当然从 python.org 获取的官方版本也很好.
都包含有针对Windows 定制的帮助和手册.
如果运行在 Linux 直接使用软件包管理器安装即可(synaptic, apt-get, rpm, 等等)


如果想从源代码编译安装,参考: http://docs.python.org/using/unix.html#getting-and-installing-the-latest-version-of-python



</t>
<t tx="zoomq.20110322090028.3923">@language rest
Python编程
===============================================================================

现在至少已安装好了 Python,我们可以通过一个快速导览来体验这语言的主要特性.

Python 是种解释型语言.精确的说,是种编译为字节码的解释型语言.
这意味着,Python 在执行脚本前会将脚本编译为一种二进制的可行程序.其实这就是"解释型"的含义.

Python在其虚拟机中将形式文本解释为字节码来运行,
虚拟机内部的指令集是经过优化的,虽然无法和通常的编译成机器码的编译型语言执行效率相比,
但对于大多数应用程序来说,字节码的运行速度很够力了.
尤其是考虑到时下PC上的处理器(CPU或叫中央处理器)都是在1~3G赫兹.
而以前运行 30兆赫兹已经算好的时候,程序本身的执行速度才是大事儿.

不论是否Python 新手,Mark Lutz 写的 `Python口袋手册 &lt;http://oreilly.com/catalog/9780596158095/&gt;`__ 
强烈推荐. 这书提供了一个简洁/组织良好/易读体积小巧的 Python 语言核心功能/模块的速查手册,
可以随身携带,需要时就查.

其它相关好书在推荐阅读部分分享.

@others

</t>
<t tx="zoomq.20110322090028.3924">@language rest
Python开发工具
===============================================================================


编辑器和 IDEs
-------------------------------------------------------------------------------

调试
-------------------------------------------------------------------------------


</t>
<t tx="zoomq.20110322090028.3925">@language rest
小结
===============================================================================

</t>
<t tx="zoomq.20110322090028.3926">@language rest
推荐阅读
===============================================================================

</t>
<t tx="zoomq.20110325220944.2613">Cpython-cn   群組建立以來
8901	limo...@gmail.com
5767	zoom.qu...@gmail.com
4997	jhuangjiahua@gmail.com
2778	askfor@gmail.com
2260	python.leojay@gmail.com
2056	march.liu@gmail.com
1262	
1183	hanzhupeng@gmail.com
1178	zsp007@gmail.com
1071	yi.codeplayer@gmail.com


CPyUG 列表 717...</t>
<t tx="zoomq.20110329090742.2614">与 沈崴-wileishn 在 2011年03月29日 星期二 09时20分19秒 的会话
...

...
(2011-03-29 09:37:03) 沈崴-wileishn: 
很多不解风情的家伙说不爽 python 的缩进，所以有了杯具的 ruby
(2011-03-29 09:37:22) 沈崴-wileishn: 
一开始 ruby 这个轮子就是为了一个 end 而已，从历史上讲



</t>
<t tx="zoomq.20110329090742.2615">(2011-03-29 09:27:06) 沈崴-wileishn: 
虽然我一直想写一本关于 python 的黑客的书，就是人比较懒，有点事就一直没弄
(2011-03-29 09:32:24) 沈崴-wileishn: 
我们公司是不用这些技巧的，我们的 hack 技术是把最简单的东西用到极致，危害可读性、稳定、安全的东西都是不用的，用最简单的语法写出华丽的程序。
(2011-03-29 09:32:51) Zoomq: 
咔咔咔!那个顶! 就象你提倡的用复制不用类的方式来加速运行

(2011-03-29 09:33:02) 沈崴-wileishn: 
打个比方，我们公司里面有两条“军规”，
1、我们公司员工 code review 的速度很快，基本扫一眼文件就知道有没有 bug 和设计问题
2、更简单，当无法起出一个漂漂的变量名时，已经有设计问题了。
(2011-03-29 09:40:39) 沈崴-wileishn: 
一开始他们问我，怎样才知道什么时候合并两个模块，什么时候拆分一个模块成两个文件？我说，等起不出美观的变量名时，你就知道了。
</t>
<t tx="zoomq.20110329090742.2616">...
(2011-03-29 09:46:32) 沈崴-wileishn: 
以前在网易我经常这么说，比如我常对赖勇浩说，要影响而不是说服别人。
(2011-03-29 09:49:24) 沈崴-wileishn: 
赖勇浩经常让项目组从 c++ 转用 python 的，有时候会有人反弹。我说，其实这时说服是没有用的，有时候对自己也没什么好处，人家凭什么把用了几年的 c++ 换掉来用不熟悉的 python。

这个工作靠平时潜移默化地影响人家，用行动和赖勇浩超凡的个人魅力，就很容易达到，到时候跟不不用说服人家，大家喜洋洋地切换到 python 模式了。哈哈哈。开源也一样。
(2011-03-29 09:50:58) Zoomq: 
"个人魅力" ~ 其实就是自个儿用Py 挣得你用 C++ 搞不到的身家,开跑车,泡美女,状态潇洒，人家当然相信了，就这么简单 ;-)
(2011-03-29 09:52:12) 沈崴-wileishn: 
就是。
...
</t>
<t tx="zoomq.20110329090742.2617">(2011-03-29 09:53:48) 沈崴-wileishn: 
eurasia 目前有 python 和 c 两个版本。python 版每秒处理 1.5w 以上个 http 请求，c 版是 2.5w 个以上，目前都还没有测试出上线，应为测试工具性能达不到暂时。

python 版每秒 1.5w 个请求和 fapws、tornado、gevent 这些不是一个概念。因为 eurasia 每个请求都是长连接，可以在一个请求中处理多个 http 请求，而且每个请求都有细粒度超时控制和入侵检测，所以实际性能要高得多。
(2011-03-29 09:54:57) Zoomq: 
嗯嗯嗯,这个很早就说过,不过,用长连接的情景很少,大家也长年没有用过 S/C 结构来开发广域网应用了,多是不相信,,,咔咔咔
(2011-03-29 09:55:58) 沈崴-wileishn: 
eurasia 现在利用 pypy 技术发展的版本，速度比 纯python 和 c 版本的都要快。我们一般不用在具体项目中，一般项目用 c 版足够了。我只有在咨询服务中，对性能要求非常极端的情况下才会用到最后一个技术栈。
(2011-03-29 09:56:28) Zoomq: 
一直没有确认,你公司的业务,主要还是游戏开发的支持?!
(2011-03-29 09:56:48) 沈崴-wileishn: 
因为浏览器都支持 http 1.1 keep-alive，所以 eurasia 3.1 实际上要快得多。
(2011-03-29 09:57:13) Zoomq: 
不需要特别的客户端JS 支持库的?!
(2011-03-29 09:57:19) 沈崴-wileishn: 
不需要。
(2011-03-29 09:57:30) Zoomq: 
在长连接中进行多次交互?
(2011-03-29 09:57:34) 沈崴-wileishn: 
是的。
(2011-03-29 09:57:40) 沈崴-wileishn: 
一次请求，多个页面。
(2011-03-29 09:57:56) 沈崴-wileishn: 
目前只有 eurasia 3.1 做到的。

(2011-03-29 10:02:11) 沈崴-wileishn: 
再下一代的 eurasia ，因为我们公司已经完全消化了 pypy 的技术，所以已经达到 c 级别的 stackless 协程了。
...
(2011-03-29 10:04:16) 沈崴-wileishn: 
剪掉财务营销之类的，湖州搞核心研发的三个人，加我四个人。杭州分布四到五个人，不过是产品研发。
..
(2011-03-29 10:07:43) 沈崴-wileishn: 
我这里搞核心研发的人，都培训了黑客技术（甚至能做入侵大网站的事情，做到使用各类溢出从传输层入侵，用来改进我们自己产品的安全）、能从 linux kernel 建立整个操作系统，编写图形界面基础、有的能做编译器和数据库。
(2011-03-29 10:08:22) 沈崴-wileishn: 
写个 python web 框架那是第一天就要会搞定的。

(2011-03-29 10:10:53) 沈崴-wileishn: 
应该说，我现在已经不大关心 eurasia 这一级的东西了，我可以抽出来弄更好玩的大杀器了，呵呵
...
(2011-03-29 10:15:30) 沈崴-wileishn: 
我们现在项目里可以用 python 写应用，然后编译成 .so .dll 然后给 c 、php、perl 之类的去用。你知道用了 pypy 的编译期优化技术其实比 c 写的模块跑得还快。
(2011-03-29 10:17:39) 沈崴-wileishn: 
文件系统的话，我们现在的 web 框架，可以把远程的 web 服务器直接映射到本地磁盘，在本地修改远程服务器的程序，然后文件系统通知服务器自动更新已经修改的程序。都不用重启了。
(2011-03-29 10:18:01) 沈崴-wileishn: 
还有加密盘之类的，都要用到这项技术。
...
(2011-03-29 10:19:10) 沈崴-wileishn: 
说到加密，我用 python 实现了一个 rsa 只用了 12 行代码，python 的开发效率真牛叉啊。
(2011-03-29 10:20:24) 沈崴-wileishn: 
我们的数据库引擎技术有这个，我们在数据库引擎层做集群、负载分流、热备，然后可以在引擎上架 mysql、zodb ，就直接支持这些了。不过我们的数据库产品还在研发中。

</t>
<t tx="zoomq.20110329090742.2618">Pythonic 军规:
1、code review 的必须很快,代码排版到能够扫一眼文件就知道有没有 bug 和设计问题
2、当无法起出一个漂漂的变量名时，已经有设计问题了
</t>
<t tx="zoomq.20110402090250.2620">date,tI,tO,tC,tM,tF,tS
110301,0.00,2.50,2.50,4.00,2.50,7.50
110302,3.25,0.75,5.25,7.50,5.75,5.50
110303,0.00,4.50,0.50,5.50,5.00,7.00
110304,3.00,4.50,0.50,4.00,4.50,7.00
110307,0.00,5.00,5.00,2.00,4.00,7.00
110308,0.00,7.50,2.50,3.00,5.00,7.00
110309,0.00,7.00,1.00,6.50,1.00,6.00
110310,0.00,3.00,4.50,4.00,2.50,7.00
110311,1.00,12.5,0.00,3.00,1.50,7.00
110312,1.00,6.50,1.00,5.50,1.50,5.00
110314,0.00,5.75,3.50,2.50,1.75,7.00
110315,5.00,1.50,1.75,7.25,1.00,7.50
110316,3.00,5.00,1.00,5.00,2.00,6.50
110317,0.00,4.50,0.00,7.50,1.50,6.50
110321,1.75,2.25,0.00,10.0,1.00,7.00
110322,0.00,4.75,3.25,5.50,3.00,7.00
110323,0.00,8.50,2.00,2.00,2.00,6.50
110324,2.75,5.25,0.00,6.25,1.50,7.00
110325,0.75,5.00,2.50,6.25,2.00,6.00
110326,2.25,1.00,0.00,7.50,3.75,6.50
110328,2.60,2.75,0.40,6.00,2.00,7.00
110329,4.75,4.50,2.50,3.50,1.00,5.00
110330,0.00,6.75,1.50,4.75,3.50,6.50
110331,0.00,10.0,2.50,3.50,1.00,6.50</t>
<t tx="zoomq.20110407085430.2620">The Python Command Line
-------------------------------------------------------------------------------
How you will start the Python interpreter in interactive mode depends on which operating
system you are using. For Windows, the usual method is to first open a command prompt
window (this is sometimes erroneously called a “DOS box,” but Windows hasn’t had a
real DOS box for a long time). At the prompt (which may look different than what is shown
here), type in the following command:

C:\&gt; python

You should see something like this (assuming you’ve installed the ActiveState distribution,
but the standard Python distribution is almost identical):
ActivePython 2.6.4.8 (ActiveState Software Inc.) based on

Python 2.6.4 (r264:75706, Nov 3 2009, 13:23:17) [MSC v.1500 32 bit
(Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;

The procedure is similar for a Linux (or BSD, or Solaris) system. Open a shell window (it
shouldn’t matter if the shell is csh, ksh, bash, or whatever) and enter python at the prompt.
Assuming that Python has been installed correctly, you will see the startup message.

The &gt;&gt;&gt; is Python’s command prompt, waiting for you to give it something to do. To exit
from the Python command line on a Windows machine, use Ctrl-Z, and on a Linux system

use Ctrl-D. Typing “quit” will not work.
The Python command line is a great way to explore and experiment. You can get help for
just about everything by using the built-in help facility. Just typing help(), with no arguments,
results in the following display:

&gt;&gt;&gt; help()

Welcome to Python 2.6! This is the online help utility.
If this is your first time using Python, you should definitely check out
the tutorial on the Internet at http://docs.python.org/tutorial/.
Enter the name of any module, keyword, or topic to get help on writing

Python programs and using Python modules. To quit this help utility and
return to the interpreter, just type "quit".
To get a list of available modules, keywords, or topics, type "modules",
"keywords", or "topics". Each module also comes with a one-line summary
of what it does; to list the modules whose summaries contain a given word
such as "spam", type "modules spam".

help&gt;

As the help display states, the tutorial material found on the official website is indeed a
good place to get a feel for what Python looks like and how to use it. This chapter takes a
somewhat different approach to the language, however, by introducing the reader to the
concept of data objects first, and reserving things like operators and statements until a little
later. I feel that the underlying object-oriented nature of the language is important enough
to be dealt with first, because when creating even trivial programs in Python one will quickly
encounter situations that will require the use of some of the capabilities embedded in each
type of data object.

Over the years I have observed that when tutorial material on Python attempts to ignore or
downplay the fundamental OO nature of the language, the result is often full of statements
like “Oh, and by the way...” and “It is also like this, but we won’t worry about that
here...” Rather than trying to avoid the topic, we will just deal with it head-on. Having
a good understanding of what is going on under the hood helps make it a lot easier to
comprehend what is happening when things work correctly, and a whole lot easier to have
some idea of what to look for when they don’t. If you’re new to Python, it would probably
be a good idea to read through both this section and Python’s online tutorial.



</t>
<t tx="zoomq.20110407085430.2621">Command-Line Options and Environment
-------------------------------------------------------------------------------




</t>
<t tx="zoomq.20110407085430.2622">Objects in Python
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2623">Data Types in Python
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2624">Expressions
-------------------------------------------------------------------------------


</t>
<t tx="zoomq.20110407085430.2625">Operators 
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2626">Statements
-------------------------------------------------------------------------------


</t>
<t tx="zoomq.20110407085430.2627">Strings
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2628">Program Organization
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2629">Importing Modules
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2630">Loading and Running a Python Program
-------------------------------------------------------------------------------

</t>
<t tx="zoomq.20110407085430.2631">Basic Input and Output
-------------------------------------------------------------------------------


</t>
<t tx="zoomq.20110407085430.2632">Hints and Tips
-------------------------------------------------------------------------------
</t>
</tnodes>
</leo_file>
